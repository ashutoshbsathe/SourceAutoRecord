!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ashutosh/HDD/IITB/Sem_2/cs748/scratch/SourceAutoRecord/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
$(ODIR)/%.o	Makefile	/^$(ODIR)\/%.o: $(SDIR)\/%.cpp$/;"	t
ACTION_APPLY_QUEUED	lib/minhook/hook.c	/^#define ACTION_APPLY_QUEUED /;"	d	file:
ACTION_DISABLE	lib/minhook/hook.c	/^#define ACTION_DISABLE /;"	d	file:
ACTION_ENABLE	lib/minhook/hook.c	/^#define ACTION_ENABLE /;"	d	file:
ADAM7_DX	src/Utils/lodepng.cpp	/^static const unsigned ADAM7_DX[7] = {8, 8, 4, 4, 2, 2, 1}; \/*x delta values*\/$/;"	v	typeref:typename:const unsigned[7]	file:
ADAM7_DY	src/Utils/lodepng.cpp	/^static const unsigned ADAM7_DY[7] = {8, 8, 8, 4, 4, 2, 2}; \/*y delta values*\/$/;"	v	typeref:typename:const unsigned[7]	file:
ADAM7_IX	src/Utils/lodepng.cpp	/^static const unsigned ADAM7_IX[7] = {0, 4, 0, 2, 0, 1, 0}; \/*x start values*\/$/;"	v	typeref:typename:const unsigned[7]	file:
ADAM7_IY	src/Utils/lodepng.cpp	/^static const unsigned ADAM7_IY[7] = {0, 0, 4, 0, 2, 0, 1}; \/*y start values*\/$/;"	v	typeref:typename:const unsigned[7]	file:
AES_CTR_IV_SIZE	lib/ffmpeg/include/libavutil/aes_ctr.h	/^#define AES_CTR_IV_SIZE /;"	d
AES_CTR_KEY_SIZE	lib/ffmpeg/include/libavutil/aes_ctr.h	/^#define AES_CTR_KEY_SIZE /;"	d
ALL_HOOKS_POS	lib/minhook/hook.c	/^#define ALL_HOOKS_POS /;"	d	file:
ALL_VISIBLE_CONTENTS	src/Utils/SDK.hpp	/^#define ALL_VISIBLE_CONTENTS /;"	d
AND	src/Features/ConfigPlus.cpp	/^		AND,$/;"	e	enum:Condition::__anon194454350203	file:
ANGLES_X	src/Features/Camera.hpp	/^	ANGLES_X,$/;"	e	enum:CameraStateParameter
ANGLES_Y	src/Features/Camera.hpp	/^	ANGLES_Y,$/;"	e	enum:CameraStateParameter
ANGLES_Z	src/Features/Camera.hpp	/^	ANGLES_Z,$/;"	e	enum:CameraStateParameter
ANGULAR	src/Features/Tas/TasTools/StrafeTool.hpp	/^	ANGULAR,$/;"	e	enum:AutoStrafeType
API_BASE	src/Features/AutoSubmit.cpp	/^#define API_BASE /;"	d	file:
API_KEY_FILE	src/Features/AutoSubmit.cpp	/^#define API_KEY_FILE /;"	d	file:
ARM_LEFT	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	e	enum:BENDY_GROUP	file:
ARM_RIGHT	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	e	enum:BENDY_GROUP	file:
ARRAY	src/Utils/json11.hpp	/^			ARRAY,$/;"	e	enum:json11::Json::Type
ARRAYSIZE	lib/minhook/hook.c	/^    #define ARRAYSIZE(/;"	d	file:
ARRAYSIZE	lib/minhook/trampoline.c	/^    #define ARRAYSIZE(/;"	d	file:
ASSET_NAME	src/Features/Updater.cpp	/^#	define ASSET_NAME /;"	d	file:
AUDIO_FRAME_READY	src/Features/Renderer.cpp	/^	AUDIO_FRAME_READY,$/;"	e	enum:WorkerMsg	file:
AUTOCOMPLETION_FUNCTION	src/Command.hpp	/^#define AUTOCOMPLETION_FUNCTION(/;"	d
AUTOSUBMIT_TOAST_TAG	src/Features/AutoSubmit.cpp	/^#define AUTOSUBMIT_TOAST_TAG /;"	d	file:
AVABufferSinkParams	lib/ffmpeg/include/libavfilter/buffersink.h	/^typedef struct AVABufferSinkParams {$/;"	s
AVABufferSinkParams	lib/ffmpeg/include/libavfilter/buffersink.h	/^} AVABufferSinkParams;$/;"	t	typeref:struct:AVABufferSinkParams
AVActiveFormatDescription	lib/ffmpeg/include/libavutil/frame.h	/^enum AVActiveFormatDescription {$/;"	g
AVAppToDevMessageType	lib/ffmpeg/include/libavdevice/avdevice.h	/^enum AVAppToDevMessageType {$/;"	g
AVAudioFifo	lib/ffmpeg/include/libavutil/audio_fifo.h	/^typedef struct AVAudioFifo AVAudioFifo;$/;"	t	typeref:struct:AVAudioFifo
AVAudioResampleContext	lib/ffmpeg/include/libavresample/avresample.h	/^typedef struct AVAudioResampleContext AVAudioResampleContext;$/;"	t	typeref:struct:AVAudioResampleContext
AVAudioServiceType	lib/ffmpeg/include/libavcodec/avcodec.h	/^enum AVAudioServiceType {$/;"	g
AVBSFContext	lib/ffmpeg/include/libavcodec/bsf.h	/^typedef struct AVBSFContext {$/;"	s
AVBSFContext	lib/ffmpeg/include/libavcodec/bsf.h	/^} AVBSFContext;$/;"	t	typeref:struct:AVBSFContext
AVBSFInternal	lib/ffmpeg/include/libavcodec/bsf.h	/^typedef struct AVBSFInternal AVBSFInternal;$/;"	t	typeref:struct:AVBSFInternal
AVBSFList	lib/ffmpeg/include/libavcodec/bsf.h	/^typedef struct AVBSFList AVBSFList;$/;"	t	typeref:struct:AVBSFList
AVBitStreamFilter	lib/ffmpeg/include/libavcodec/bsf.h	/^typedef struct AVBitStreamFilter {$/;"	s
AVBitStreamFilter	lib/ffmpeg/include/libavcodec/bsf.h	/^} AVBitStreamFilter;$/;"	t	typeref:struct:AVBitStreamFilter
AVBitStreamFilterContext	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVBitStreamFilterContext {$/;"	s
AVBitStreamFilterContext	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVBitStreamFilterContext;$/;"	t	typeref:struct:AVBitStreamFilterContext
AVBlowfish	lib/ffmpeg/include/libavutil/blowfish.h	/^typedef struct AVBlowfish {$/;"	s
AVBlowfish	lib/ffmpeg/include/libavutil/blowfish.h	/^} AVBlowfish;$/;"	t	typeref:struct:AVBlowfish
AVBuffer	lib/ffmpeg/include/libavutil/buffer.h	/^typedef struct AVBuffer AVBuffer;$/;"	t	typeref:struct:AVBuffer
AVBufferPool	lib/ffmpeg/include/libavutil/buffer.h	/^typedef struct AVBufferPool AVBufferPool;$/;"	t	typeref:struct:AVBufferPool
AVBufferRef	lib/ffmpeg/include/libavutil/buffer.h	/^typedef struct AVBufferRef {$/;"	s
AVBufferRef	lib/ffmpeg/include/libavutil/buffer.h	/^} AVBufferRef;$/;"	t	typeref:struct:AVBufferRef
AVBufferSinkParams	lib/ffmpeg/include/libavfilter/buffersink.h	/^typedef struct AVBufferSinkParams {$/;"	s
AVBufferSinkParams	lib/ffmpeg/include/libavfilter/buffersink.h	/^} AVBufferSinkParams;$/;"	t	typeref:struct:AVBufferSinkParams
AVBufferSrcParameters	lib/ffmpeg/include/libavfilter/buffersrc.h	/^typedef struct AVBufferSrcParameters {$/;"	s
AVBufferSrcParameters	lib/ffmpeg/include/libavfilter/buffersrc.h	/^} AVBufferSrcParameters;$/;"	t	typeref:struct:AVBufferSrcParameters
AVCHROMA_LOC_BOTTOM	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_BOTTOM      = 6,$/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_BOTTOMLEFT	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_BOTTOMLEFT  = 5,$/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_CENTER	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_CENTER      = 2, \/\/\/< MPEG-1 4:2:0, JPEG 4:2:0, H.263 4:2:0$/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_LEFT	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_LEFT        = 1, \/\/\/< MPEG-2\/4 4:2:0, H.264 default for 4:2:0$/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_NB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_NB               \/\/\/< Not part of ABI$/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_TOP	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_TOP         = 4,$/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_TOPLEFT	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_TOPLEFT     = 3, \/\/\/< ITU-R 601, SMPTE 274M 296M S314M(DV 4:1:1), mpeg2 4:2:/;"	e	enum:AVChromaLocation
AVCHROMA_LOC_UNSPECIFIED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCHROMA_LOC_UNSPECIFIED = 0,$/;"	e	enum:AVChromaLocation
AVCODEC_AC3_PARSER_H	lib/ffmpeg/include/libavcodec/ac3_parser.h	/^#define AVCODEC_AC3_PARSER_H$/;"	d
AVCODEC_ADTS_PARSER_H	lib/ffmpeg/include/libavcodec/adts_parser.h	/^#define AVCODEC_ADTS_PARSER_H$/;"	d
AVCODEC_AVCODEC_H	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AVCODEC_AVCODEC_H$/;"	d
AVCODEC_AVDCT_H	lib/ffmpeg/include/libavcodec/avdct.h	/^#define AVCODEC_AVDCT_H$/;"	d
AVCODEC_AVFFT_H	lib/ffmpeg/include/libavcodec/avfft.h	/^#define AVCODEC_AVFFT_H$/;"	d
AVCODEC_BSF_H	lib/ffmpeg/include/libavcodec/bsf.h	/^#define AVCODEC_BSF_H$/;"	d
AVCODEC_CODEC_DESC_H	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AVCODEC_CODEC_DESC_H$/;"	d
AVCODEC_CODEC_H	lib/ffmpeg/include/libavcodec/codec.h	/^#define AVCODEC_CODEC_H$/;"	d
AVCODEC_CODEC_ID_H	lib/ffmpeg/include/libavcodec/codec_id.h	/^#define AVCODEC_CODEC_ID_H$/;"	d
AVCODEC_CODEC_PAR_H	lib/ffmpeg/include/libavcodec/codec_par.h	/^#define AVCODEC_CODEC_PAR_H$/;"	d
AVCODEC_D3D11VA_H	lib/ffmpeg/include/libavcodec/d3d11va.h	/^#define AVCODEC_D3D11VA_H$/;"	d
AVCODEC_DIRAC_H	lib/ffmpeg/include/libavcodec/dirac.h	/^#define AVCODEC_DIRAC_H$/;"	d
AVCODEC_DNXHDDATA_H	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define AVCODEC_DNXHDDATA_H$/;"	d
AVCODEC_DV_PROFILE_H	lib/ffmpeg/include/libavcodec/dv_profile.h	/^#define AVCODEC_DV_PROFILE_H$/;"	d
AVCODEC_DXVA2_H	lib/ffmpeg/include/libavcodec/dxva2.h	/^#define AVCODEC_DXVA2_H$/;"	d
AVCODEC_JNI_H	lib/ffmpeg/include/libavcodec/jni.h	/^#define AVCODEC_JNI_H$/;"	d
AVCODEC_MEDIACODEC_H	lib/ffmpeg/include/libavcodec/mediacodec.h	/^#define AVCODEC_MEDIACODEC_H$/;"	d
AVCODEC_PACKET_H	lib/ffmpeg/include/libavcodec/packet.h	/^#define AVCODEC_PACKET_H$/;"	d
AVCODEC_QSV_H	lib/ffmpeg/include/libavcodec/qsv.h	/^#define AVCODEC_QSV_H$/;"	d
AVCODEC_VAAPI_H	lib/ffmpeg/include/libavcodec/vaapi.h	/^#define AVCODEC_VAAPI_H$/;"	d
AVCODEC_VDPAU_H	lib/ffmpeg/include/libavcodec/vdpau.h	/^#define AVCODEC_VDPAU_H$/;"	d
AVCODEC_VERSION_H	lib/ffmpeg/include/libavcodec/version.h	/^#define AVCODEC_VERSION_H$/;"	d
AVCODEC_VIDEOTOOLBOX_H	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^#define AVCODEC_VIDEOTOOLBOX_H$/;"	d
AVCODEC_VORBIS_PARSER_H	lib/ffmpeg/include/libavcodec/vorbis_parser.h	/^#define AVCODEC_VORBIS_PARSER_H$/;"	d
AVCODEC_XVMC_H	lib/ffmpeg/include/libavcodec/xvmc.h	/^#define AVCODEC_XVMC_H$/;"	d
AVCOL_PRI_BT2020	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_BT2020      = 9,  \/\/\/< ITU-R BT2020$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_BT470BG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_BT470BG     = 5,  \/\/\/< also ITU-R BT601-6 625 \/ ITU-R BT1358 625 \/ ITU-R BT17/;"	e	enum:AVColorPrimaries
AVCOL_PRI_BT470M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_BT470M      = 4,  \/\/\/< also FCC Title 47 Code of Federal Regulations 73.682 (a)/;"	e	enum:AVColorPrimaries
AVCOL_PRI_BT709	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_BT709       = 1,  \/\/\/< also ITU-R BT1361 \/ IEC 61966-2-4 \/ SMPTE RP177 Annex /;"	e	enum:AVColorPrimaries
AVCOL_PRI_EBU3213	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_EBU3213     = 22, \/\/\/< EBU Tech. 3213-E \/ JEDEC P22 phosphors$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_FILM	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_FILM        = 8,  \/\/\/< colour filters using Illuminant C$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_JEDEC_P22	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_JEDEC_P22   = AVCOL_PRI_EBU3213,$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_NB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_NB                \/\/\/< Not part of ABI$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_RESERVED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_RESERVED    = 3,$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_RESERVED0	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_RESERVED0   = 0,$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_SMPTE170M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_SMPTE170M   = 6,  \/\/\/< also ITU-R BT601-6 525 \/ ITU-R BT1358 525 \/ ITU-R BT17/;"	e	enum:AVColorPrimaries
AVCOL_PRI_SMPTE240M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_SMPTE240M   = 7,  \/\/\/< functionally identical to above$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_SMPTE428	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_SMPTE428    = 10, \/\/\/< SMPTE ST 428-1 (CIE 1931 XYZ)$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_SMPTE431	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_SMPTE431    = 11, \/\/\/< SMPTE ST 431-2 (2011) \/ DCI P3$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_SMPTE432	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_SMPTE432    = 12, \/\/\/< SMPTE ST 432-1 (2010) \/ P3 D65 \/ Display P3$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_SMPTEST428_1	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_SMPTEST428_1 = AVCOL_PRI_SMPTE428,$/;"	e	enum:AVColorPrimaries
AVCOL_PRI_UNSPECIFIED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_PRI_UNSPECIFIED = 2,$/;"	e	enum:AVColorPrimaries
AVCOL_RANGE_JPEG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_RANGE_JPEG        = 2, \/\/\/< the normal     2^n-1   "JPEG" YUV ranges$/;"	e	enum:AVColorRange
AVCOL_RANGE_MPEG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_RANGE_MPEG        = 1, \/\/\/< the normal 219*2^(n-8) "MPEG" YUV ranges$/;"	e	enum:AVColorRange
AVCOL_RANGE_NB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_RANGE_NB               \/\/\/< Not part of ABI$/;"	e	enum:AVColorRange
AVCOL_RANGE_UNSPECIFIED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_RANGE_UNSPECIFIED = 0,$/;"	e	enum:AVColorRange
AVCOL_SPC_BT2020_CL	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_BT2020_CL   = 10, \/\/\/< ITU-R BT2020 constant luminance system$/;"	e	enum:AVColorSpace
AVCOL_SPC_BT2020_NCL	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_BT2020_NCL  = 9,  \/\/\/< ITU-R BT2020 non-constant luminance system$/;"	e	enum:AVColorSpace
AVCOL_SPC_BT470BG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_BT470BG     = 5,  \/\/\/< also ITU-R BT601-6 625 \/ ITU-R BT1358 625 \/ ITU-R BT17/;"	e	enum:AVColorSpace
AVCOL_SPC_BT709	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_BT709       = 1,  \/\/\/< also ITU-R BT1361 \/ IEC 61966-2-4 xvYCC709 \/ SMPTE RP1/;"	e	enum:AVColorSpace
AVCOL_SPC_CHROMA_DERIVED_CL	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_CHROMA_DERIVED_CL = 13, \/\/\/< Chromaticity-derived constant luminance system$/;"	e	enum:AVColorSpace
AVCOL_SPC_CHROMA_DERIVED_NCL	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_CHROMA_DERIVED_NCL = 12, \/\/\/< Chromaticity-derived non-constant luminance syste/;"	e	enum:AVColorSpace
AVCOL_SPC_FCC	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_FCC         = 4,  \/\/\/< FCC Title 47 Code of Federal Regulations 73.682 (a)(20)$/;"	e	enum:AVColorSpace
AVCOL_SPC_ICTCP	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_ICTCP       = 14, \/\/\/< ITU-R BT.2100-0, ICtCp$/;"	e	enum:AVColorSpace
AVCOL_SPC_NB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_NB                \/\/\/< Not part of ABI$/;"	e	enum:AVColorSpace
AVCOL_SPC_RESERVED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_RESERVED    = 3,$/;"	e	enum:AVColorSpace
AVCOL_SPC_RGB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_RGB         = 0,  \/\/\/< order of coefficients is actually GBR, also IEC 61966-2-/;"	e	enum:AVColorSpace
AVCOL_SPC_SMPTE170M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_SMPTE170M   = 6,  \/\/\/< also ITU-R BT601-6 525 \/ ITU-R BT1358 525 \/ ITU-R BT17/;"	e	enum:AVColorSpace
AVCOL_SPC_SMPTE2085	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_SMPTE2085   = 11, \/\/\/< SMPTE 2085, Y'D'zD'x$/;"	e	enum:AVColorSpace
AVCOL_SPC_SMPTE240M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_SMPTE240M   = 7,  \/\/\/< functionally identical to above$/;"	e	enum:AVColorSpace
AVCOL_SPC_UNSPECIFIED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_UNSPECIFIED = 2,$/;"	e	enum:AVColorSpace
AVCOL_SPC_YCGCO	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_YCGCO       = 8,  \/\/\/< Used by Dirac \/ VC-2 and H.264 FRext, see ITU-T SG16$/;"	e	enum:AVColorSpace
AVCOL_SPC_YCOCG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_SPC_YCOCG       = AVCOL_SPC_YCGCO,$/;"	e	enum:AVColorSpace
AVCOL_TRC_ARIB_STD_B67	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_ARIB_STD_B67 = 18, \/\/\/< ARIB STD-B67, known as "Hybrid log-gamma"$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_BT1361_ECG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_BT1361_ECG   = 12, \/\/\/< ITU-R BT1361 Extended Colour Gamut$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_BT2020_10	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_BT2020_10    = 14, \/\/\/< ITU-R BT2020 for 10-bit system$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_BT2020_12	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_BT2020_12    = 15, \/\/\/< ITU-R BT2020 for 12-bit system$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_BT709	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_BT709        = 1,  \/\/\/< also ITU-R BT1361$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_GAMMA22	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_GAMMA22      = 4,  \/\/\/< also ITU-R BT470M \/ ITU-R BT1700 625 PAL & SECAM$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_GAMMA28	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_GAMMA28      = 5,  \/\/\/< also ITU-R BT470BG$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_IEC61966_2_1	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_IEC61966_2_1 = 13, \/\/\/< IEC 61966-2-1 (sRGB or sYCC)$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_IEC61966_2_4	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_IEC61966_2_4 = 11, \/\/\/< IEC 61966-2-4$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_LINEAR	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_LINEAR       = 8,  \/\/\/< "Linear transfer characteristics"$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_LOG	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_LOG          = 9,  \/\/\/< "Logarithmic transfer characteristic (100:1 range)"$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_LOG_SQRT	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_LOG_SQRT     = 10, \/\/\/< "Logarithmic transfer characteristic (100 * Sqrt(10) : /;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_NB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_NB                 \/\/\/< Not part of ABI$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_RESERVED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_RESERVED     = 3,$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_RESERVED0	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_RESERVED0    = 0,$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_SMPTE170M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_SMPTE170M    = 6,  \/\/\/< also ITU-R BT601-6 525 or 625 \/ ITU-R BT1358 525 or 62/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_SMPTE2084	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_SMPTE2084    = 16, \/\/\/< SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_SMPTE240M	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_SMPTE240M    = 7,$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_SMPTE428	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_SMPTE428     = 17, \/\/\/< SMPTE ST 428-1$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_SMPTEST2084	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_SMPTEST2084  = AVCOL_TRC_SMPTE2084,$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_SMPTEST428_1	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_SMPTEST428_1 = AVCOL_TRC_SMPTE428,$/;"	e	enum:AVColorTransferCharacteristic
AVCOL_TRC_UNSPECIFIED	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AVCOL_TRC_UNSPECIFIED  = 2,$/;"	e	enum:AVColorTransferCharacteristic
AVCPBProperties	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVCPBProperties {$/;"	s
AVCPBProperties	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVCPBProperties;$/;"	t	typeref:struct:AVCPBProperties
AVCRC	lib/ffmpeg/include/libavutil/crc.h	/^typedef uint32_t AVCRC;$/;"	t	typeref:typename:uint32_t
AVCRCId	lib/ffmpeg/include/libavutil/crc.h	/^}AVCRCId;$/;"	t	typeref:enum:__anon6d61168b0103
AVCUDADeviceContext	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^typedef struct AVCUDADeviceContext {$/;"	s
AVCUDADeviceContext	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^} AVCUDADeviceContext;$/;"	t	typeref:struct:AVCUDADeviceContext
AVCUDADeviceContextInternal	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^typedef struct AVCUDADeviceContextInternal AVCUDADeviceContextInternal;$/;"	t	typeref:struct:AVCUDADeviceContextInternal
AVChapter	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVChapter {$/;"	s
AVChapter	lib/ffmpeg/include/libavformat/avformat.h	/^} AVChapter;$/;"	t	typeref:struct:AVChapter
AVChromaLocation	lib/ffmpeg/include/libavutil/pixfmt.h	/^enum AVChromaLocation {$/;"	g
AVClass	lib/ffmpeg/include/libavutil/log.h	/^typedef struct AVClass {$/;"	s
AVClass	lib/ffmpeg/include/libavutil/log.h	/^} AVClass;$/;"	t	typeref:struct:AVClass
AVClassCategory	lib/ffmpeg/include/libavutil/log.h	/^}AVClassCategory;$/;"	t	typeref:enum:__anon6e025ef50103
AVCodec	lib/ffmpeg/include/libavcodec/codec.h	/^typedef struct AVCodec {$/;"	s
AVCodec	lib/ffmpeg/include/libavcodec/codec.h	/^} AVCodec;$/;"	t	typeref:struct:AVCodec
AVCodecContext	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVCodecContext {$/;"	s
AVCodecContext	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVCodecContext;$/;"	t	typeref:struct:AVCodecContext
AVCodecDefault	lib/ffmpeg/include/libavcodec/codec.h	/^typedef struct AVCodecDefault AVCodecDefault;$/;"	t	typeref:struct:AVCodecDefault
AVCodecDescriptor	lib/ffmpeg/include/libavcodec/codec_desc.h	/^typedef struct AVCodecDescriptor {$/;"	s
AVCodecDescriptor	lib/ffmpeg/include/libavcodec/codec_desc.h	/^} AVCodecDescriptor;$/;"	t	typeref:struct:AVCodecDescriptor
AVCodecHWConfig	lib/ffmpeg/include/libavcodec/codec.h	/^typedef struct AVCodecHWConfig {$/;"	s
AVCodecHWConfig	lib/ffmpeg/include/libavcodec/codec.h	/^} AVCodecHWConfig;$/;"	t	typeref:struct:AVCodecHWConfig
AVCodecID	lib/ffmpeg/include/libavcodec/codec_id.h	/^enum AVCodecID {$/;"	g
AVCodecParameters	lib/ffmpeg/include/libavcodec/codec_par.h	/^typedef struct AVCodecParameters {$/;"	s
AVCodecParameters	lib/ffmpeg/include/libavcodec/codec_par.h	/^} AVCodecParameters;$/;"	t	typeref:struct:AVCodecParameters
AVCodecParser	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVCodecParser {$/;"	s
AVCodecParser	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVCodecParser;$/;"	t	typeref:struct:AVCodecParser
AVCodecParserContext	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVCodecParserContext {$/;"	s
AVCodecParserContext	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVCodecParserContext;$/;"	t	typeref:struct:AVCodecParserContext
AVColorPrimaries	lib/ffmpeg/include/libavutil/pixfmt.h	/^enum AVColorPrimaries {$/;"	g
AVColorRange	lib/ffmpeg/include/libavutil/pixfmt.h	/^enum AVColorRange {$/;"	g
AVColorSpace	lib/ffmpeg/include/libavutil/pixfmt.h	/^enum AVColorSpace {$/;"	g
AVColorTransferCharacteristic	lib/ffmpeg/include/libavutil/pixfmt.h	/^enum AVColorTransferCharacteristic {$/;"	g
AVComplexDouble	lib/ffmpeg/include/libavutil/tx.h	/^typedef struct AVComplexDouble {$/;"	s
AVComplexDouble	lib/ffmpeg/include/libavutil/tx.h	/^} AVComplexDouble;$/;"	t	typeref:struct:AVComplexDouble
AVComplexFloat	lib/ffmpeg/include/libavutil/tx.h	/^typedef struct AVComplexFloat {$/;"	s
AVComplexFloat	lib/ffmpeg/include/libavutil/tx.h	/^} AVComplexFloat;$/;"	t	typeref:struct:AVComplexFloat
AVComplexInt32	lib/ffmpeg/include/libavutil/tx.h	/^typedef struct AVComplexInt32 {$/;"	s
AVComplexInt32	lib/ffmpeg/include/libavutil/tx.h	/^} AVComplexInt32;$/;"	t	typeref:struct:AVComplexInt32
AVComponentDescriptor	lib/ffmpeg/include/libavutil/pixdesc.h	/^typedef struct AVComponentDescriptor {$/;"	s
AVComponentDescriptor	lib/ffmpeg/include/libavutil/pixdesc.h	/^} AVComponentDescriptor;$/;"	t	typeref:struct:AVComponentDescriptor
AVContentLightMetadata	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^typedef struct AVContentLightMetadata {$/;"	s
AVContentLightMetadata	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^} AVContentLightMetadata;$/;"	t	typeref:struct:AVContentLightMetadata
AVD3D11FrameDescriptor	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^typedef struct AVD3D11FrameDescriptor {$/;"	s
AVD3D11FrameDescriptor	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^} AVD3D11FrameDescriptor;$/;"	t	typeref:struct:AVD3D11FrameDescriptor
AVD3D11VAContext	lib/ffmpeg/include/libavcodec/d3d11va.h	/^typedef struct AVD3D11VAContext {$/;"	s
AVD3D11VAContext	lib/ffmpeg/include/libavcodec/d3d11va.h	/^} AVD3D11VAContext;$/;"	t	typeref:struct:AVD3D11VAContext
AVD3D11VADeviceContext	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^typedef struct AVD3D11VADeviceContext {$/;"	s
AVD3D11VADeviceContext	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^} AVD3D11VADeviceContext;$/;"	t	typeref:struct:AVD3D11VADeviceContext
AVD3D11VAFramesContext	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^typedef struct AVD3D11VAFramesContext {$/;"	s
AVD3D11VAFramesContext	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^} AVD3D11VAFramesContext;$/;"	t	typeref:struct:AVD3D11VAFramesContext
AVDCT	lib/ffmpeg/include/libavcodec/avdct.h	/^typedef struct AVDCT {$/;"	s
AVDCT	lib/ffmpeg/include/libavcodec/avdct.h	/^} AVDCT;$/;"	t	typeref:struct:AVDCT
AVDES	lib/ffmpeg/include/libavutil/des.h	/^typedef struct AVDES {$/;"	s
AVDES	lib/ffmpeg/include/libavutil/des.h	/^} AVDES;$/;"	t	typeref:struct:AVDES
AVDEVICE_AVDEVICE_H	lib/ffmpeg/include/libavdevice/avdevice.h	/^#define AVDEVICE_AVDEVICE_H$/;"	d
AVDEVICE_VERSION_H	lib/ffmpeg/include/libavdevice/version.h	/^#define AVDEVICE_VERSION_H$/;"	d
AVDISCARD_ALL	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_ALL     = 48, \/\/\/< discard all$/;"	e	enum:AVDiscard
AVDISCARD_BIDIR	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_BIDIR   = 16, \/\/\/< discard all bidirectional frames$/;"	e	enum:AVDiscard
AVDISCARD_DEFAULT	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_DEFAULT =  0, \/\/\/< discard useless packets like 0 size packets in avi$/;"	e	enum:AVDiscard
AVDISCARD_NONE	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_NONE    =-16, \/\/\/< discard nothing$/;"	e	enum:AVDiscard
AVDISCARD_NONINTRA	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_NONINTRA= 24, \/\/\/< discard all non intra frames$/;"	e	enum:AVDiscard
AVDISCARD_NONKEY	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_NONKEY  = 32, \/\/\/< discard all frames except keyframes$/;"	e	enum:AVDiscard
AVDISCARD_NONREF	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVDISCARD_NONREF  =  8, \/\/\/< discard all non reference$/;"	e	enum:AVDiscard
AVDOVIDecoderConfigurationRecord	lib/ffmpeg/include/libavutil/dovi_meta.h	/^typedef struct AVDOVIDecoderConfigurationRecord {$/;"	s
AVDOVIDecoderConfigurationRecord	lib/ffmpeg/include/libavutil/dovi_meta.h	/^} AVDOVIDecoderConfigurationRecord;$/;"	t	typeref:struct:AVDOVIDecoderConfigurationRecord
AVDRMDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^typedef struct AVDRMDeviceContext {$/;"	s
AVDRMDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^} AVDRMDeviceContext;$/;"	t	typeref:struct:AVDRMDeviceContext
AVDRMFrameDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^typedef struct AVDRMFrameDescriptor {$/;"	s
AVDRMFrameDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^} AVDRMFrameDescriptor;$/;"	t	typeref:struct:AVDRMFrameDescriptor
AVDRMLayerDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^typedef struct AVDRMLayerDescriptor {$/;"	s
AVDRMLayerDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^} AVDRMLayerDescriptor;$/;"	t	typeref:struct:AVDRMLayerDescriptor
AVDRMObjectDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^typedef struct AVDRMObjectDescriptor {$/;"	s
AVDRMObjectDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^} AVDRMObjectDescriptor;$/;"	t	typeref:struct:AVDRMObjectDescriptor
AVDRMPlaneDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^typedef struct AVDRMPlaneDescriptor {$/;"	s
AVDRMPlaneDescriptor	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^} AVDRMPlaneDescriptor;$/;"	t	typeref:struct:AVDRMPlaneDescriptor
AVDVProfile	lib/ffmpeg/include/libavcodec/dv_profile.h	/^typedef struct AVDVProfile {$/;"	s
AVDVProfile	lib/ffmpeg/include/libavcodec/dv_profile.h	/^} AVDVProfile;$/;"	t	typeref:struct:AVDVProfile
AVDXVA2DeviceContext	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^typedef struct AVDXVA2DeviceContext {$/;"	s
AVDXVA2DeviceContext	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^} AVDXVA2DeviceContext;$/;"	t	typeref:struct:AVDXVA2DeviceContext
AVDXVA2FramesContext	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^typedef struct AVDXVA2FramesContext {$/;"	s
AVDXVA2FramesContext	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^} AVDXVA2FramesContext;$/;"	t	typeref:struct:AVDXVA2FramesContext
AVDevToAppMessageType	lib/ffmpeg/include/libavdevice/avdevice.h	/^enum AVDevToAppMessageType {$/;"	g
AVDeviceCapabilitiesQuery	lib/ffmpeg/include/libavdevice/avdevice.h	/^typedef struct AVDeviceCapabilitiesQuery {$/;"	s
AVDeviceCapabilitiesQuery	lib/ffmpeg/include/libavdevice/avdevice.h	/^} AVDeviceCapabilitiesQuery;$/;"	t	typeref:struct:AVDeviceCapabilitiesQuery
AVDeviceInfo	lib/ffmpeg/include/libavdevice/avdevice.h	/^typedef struct AVDeviceInfo {$/;"	s
AVDeviceInfo	lib/ffmpeg/include/libavdevice/avdevice.h	/^} AVDeviceInfo;$/;"	t	typeref:struct:AVDeviceInfo
AVDeviceInfoList	lib/ffmpeg/include/libavdevice/avdevice.h	/^typedef struct AVDeviceInfoList {$/;"	s
AVDeviceInfoList	lib/ffmpeg/include/libavdevice/avdevice.h	/^} AVDeviceInfoList;$/;"	t	typeref:struct:AVDeviceInfoList
AVDeviceRect	lib/ffmpeg/include/libavdevice/avdevice.h	/^typedef struct AVDeviceRect {$/;"	s
AVDeviceRect	lib/ffmpeg/include/libavdevice/avdevice.h	/^} AVDeviceRect;$/;"	t	typeref:struct:AVDeviceRect
AVDictionary	lib/ffmpeg/include/libavutil/dict.h	/^typedef struct AVDictionary AVDictionary;$/;"	t	typeref:struct:AVDictionary
AVDictionaryEntry	lib/ffmpeg/include/libavutil/dict.h	/^typedef struct AVDictionaryEntry {$/;"	s
AVDictionaryEntry	lib/ffmpeg/include/libavutil/dict.h	/^} AVDictionaryEntry;$/;"	t	typeref:struct:AVDictionaryEntry
AVDiracSeqHeader	lib/ffmpeg/include/libavcodec/dirac.h	/^typedef struct AVDiracSeqHeader {$/;"	s
AVDiracSeqHeader	lib/ffmpeg/include/libavcodec/dirac.h	/^} AVDiracSeqHeader;$/;"	t	typeref:struct:AVDiracSeqHeader
AVDiscard	lib/ffmpeg/include/libavcodec/avcodec.h	/^enum AVDiscard{$/;"	g
AVDownmixInfo	lib/ffmpeg/include/libavutil/downmix_info.h	/^typedef struct AVDownmixInfo {$/;"	s
AVDownmixInfo	lib/ffmpeg/include/libavutil/downmix_info.h	/^} AVDownmixInfo;$/;"	t	typeref:struct:AVDownmixInfo
AVDownmixType	lib/ffmpeg/include/libavutil/downmix_info.h	/^enum AVDownmixType {$/;"	g
AVDurationEstimationMethod	lib/ffmpeg/include/libavformat/avformat.h	/^enum AVDurationEstimationMethod {$/;"	g
AVDynamicHDRPlus	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^typedef struct AVDynamicHDRPlus {$/;"	s
AVDynamicHDRPlus	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^} AVDynamicHDRPlus;$/;"	t	typeref:struct:AVDynamicHDRPlus
AVERROR	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR(/;"	d
AVERROR_BSF_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_BSF_NOT_FOUND /;"	d
AVERROR_BUFFER_TOO_SMALL	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_BUFFER_TOO_SMALL /;"	d
AVERROR_BUG	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_BUG /;"	d
AVERROR_BUG2	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_BUG2 /;"	d
AVERROR_DECODER_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_DECODER_NOT_FOUND /;"	d
AVERROR_DEMUXER_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_DEMUXER_NOT_FOUND /;"	d
AVERROR_ENCODER_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_ENCODER_NOT_FOUND /;"	d
AVERROR_EOF	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_EOF /;"	d
AVERROR_EXIT	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_EXIT /;"	d
AVERROR_EXPERIMENTAL	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_EXPERIMENTAL /;"	d
AVERROR_EXTERNAL	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_EXTERNAL /;"	d
AVERROR_FILTER_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_FILTER_NOT_FOUND /;"	d
AVERROR_HTTP_BAD_REQUEST	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_HTTP_BAD_REQUEST /;"	d
AVERROR_HTTP_FORBIDDEN	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_HTTP_FORBIDDEN /;"	d
AVERROR_HTTP_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_HTTP_NOT_FOUND /;"	d
AVERROR_HTTP_OTHER_4XX	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_HTTP_OTHER_4XX /;"	d
AVERROR_HTTP_SERVER_ERROR	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_HTTP_SERVER_ERROR /;"	d
AVERROR_HTTP_UNAUTHORIZED	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_HTTP_UNAUTHORIZED /;"	d
AVERROR_INPUT_CHANGED	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_INPUT_CHANGED /;"	d
AVERROR_INVALIDDATA	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_INVALIDDATA /;"	d
AVERROR_MUXER_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_MUXER_NOT_FOUND /;"	d
AVERROR_OPTION_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_OPTION_NOT_FOUND /;"	d
AVERROR_OUTPUT_CHANGED	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_OUTPUT_CHANGED /;"	d
AVERROR_PATCHWELCOME	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_PATCHWELCOME /;"	d
AVERROR_PROTOCOL_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_PROTOCOL_NOT_FOUND /;"	d
AVERROR_STREAM_NOT_FOUND	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_STREAM_NOT_FOUND /;"	d
AVERROR_UNKNOWN	lib/ffmpeg/include/libavutil/error.h	/^#define AVERROR_UNKNOWN /;"	d
AVEncryptionInfo	lib/ffmpeg/include/libavutil/encryption_info.h	/^typedef struct AVEncryptionInfo {$/;"	s
AVEncryptionInfo	lib/ffmpeg/include/libavutil/encryption_info.h	/^} AVEncryptionInfo;$/;"	t	typeref:struct:AVEncryptionInfo
AVEncryptionInitInfo	lib/ffmpeg/include/libavutil/encryption_info.h	/^typedef struct AVEncryptionInitInfo {$/;"	s
AVEncryptionInitInfo	lib/ffmpeg/include/libavutil/encryption_info.h	/^} AVEncryptionInitInfo;$/;"	t	typeref:struct:AVEncryptionInitInfo
AVEscapeMode	lib/ffmpeg/include/libavutil/avstring.h	/^enum AVEscapeMode {$/;"	g
AVExpr	lib/ffmpeg/include/libavutil/eval.h	/^typedef struct AVExpr AVExpr;$/;"	t	typeref:struct:AVExpr
AVFILTER_AUTO_CONVERT_ALL	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFILTER_AUTO_CONVERT_ALL  =  0, \/**< all automatic conversions enabled *\/$/;"	e	enum:__anon3784a0f80203
AVFILTER_AUTO_CONVERT_NONE	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFILTER_AUTO_CONVERT_NONE = -1, \/**< all automatic conversions disabled *\/$/;"	e	enum:__anon3784a0f80203
AVFILTER_AVFILTER_H	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_AVFILTER_H$/;"	d
AVFILTER_BUFFERSINK_H	lib/ffmpeg/include/libavfilter/buffersink.h	/^#define AVFILTER_BUFFERSINK_H$/;"	d
AVFILTER_BUFFERSRC_H	lib/ffmpeg/include/libavfilter/buffersrc.h	/^#define AVFILTER_BUFFERSRC_H$/;"	d
AVFILTER_CMD_FLAG_FAST	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_CMD_FLAG_FAST /;"	d
AVFILTER_CMD_FLAG_ONE	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_CMD_FLAG_ONE /;"	d
AVFILTER_FLAG_DYNAMIC_INPUTS	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_FLAG_DYNAMIC_INPUTS /;"	d
AVFILTER_FLAG_DYNAMIC_OUTPUTS	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_FLAG_DYNAMIC_OUTPUTS /;"	d
AVFILTER_FLAG_SLICE_THREADS	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_FLAG_SLICE_THREADS /;"	d
AVFILTER_FLAG_SUPPORT_TIMELINE	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_FLAG_SUPPORT_TIMELINE /;"	d
AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC /;"	d
AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL /;"	d
AVFILTER_THREAD_SLICE	lib/ffmpeg/include/libavfilter/avfilter.h	/^#define AVFILTER_THREAD_SLICE /;"	d
AVFILTER_VERSION_H	lib/ffmpeg/include/libavfilter/version.h	/^#define AVFILTER_VERSION_H$/;"	d
AVFMTCTX_NOHEADER	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMTCTX_NOHEADER /;"	d
AVFMTCTX_UNSEEKABLE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMTCTX_UNSEEKABLE /;"	d
AVFMT_ALLOW_FLUSH	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_ALLOW_FLUSH /;"	d
AVFMT_AVOID_NEG_TS_AUTO	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_AVOID_NEG_TS_AUTO /;"	d
AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE /;"	d
AVFMT_AVOID_NEG_TS_MAKE_ZERO	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_AVOID_NEG_TS_MAKE_ZERO /;"	d
AVFMT_DURATION_FROM_BITRATE	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_DURATION_FROM_BITRATE \/\/\/< Duration estimated from bitrate (less accurate)$/;"	e	enum:AVDurationEstimationMethod
AVFMT_DURATION_FROM_PTS	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_DURATION_FROM_PTS,    \/\/\/< Duration accurately estimated from PTSes$/;"	e	enum:AVDurationEstimationMethod
AVFMT_DURATION_FROM_STREAM	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_DURATION_FROM_STREAM, \/\/\/< Duration estimated from a stream with a known duration$/;"	e	enum:AVDurationEstimationMethod
AVFMT_EVENT_FLAG_METADATA_UPDATED	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_EVENT_FLAG_METADATA_UPDATED /;"	d
AVFMT_FLAG_AUTO_BSF	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_AUTO_BSF /;"	d
AVFMT_FLAG_BITEXACT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_BITEXACT /;"	d
AVFMT_FLAG_CUSTOM_IO	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_CUSTOM_IO /;"	d
AVFMT_FLAG_DISCARD_CORRUPT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_DISCARD_CORRUPT /;"	d
AVFMT_FLAG_FAST_SEEK	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_FAST_SEEK /;"	d
AVFMT_FLAG_FLUSH_PACKETS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_FLUSH_PACKETS /;"	d
AVFMT_FLAG_GENPTS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_GENPTS /;"	d
AVFMT_FLAG_IGNDTS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_IGNDTS /;"	d
AVFMT_FLAG_IGNIDX	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_IGNIDX /;"	d
AVFMT_FLAG_KEEP_SIDE_DATA	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_KEEP_SIDE_DATA /;"	d
AVFMT_FLAG_MP4A_LATM	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_MP4A_LATM /;"	d
AVFMT_FLAG_NOBUFFER	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_NOBUFFER /;"	d
AVFMT_FLAG_NOFILLIN	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_NOFILLIN /;"	d
AVFMT_FLAG_NONBLOCK	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_NONBLOCK /;"	d
AVFMT_FLAG_NOPARSE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_NOPARSE /;"	d
AVFMT_FLAG_PRIV_OPT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_PRIV_OPT /;"	d
AVFMT_FLAG_SHORTEST	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_SHORTEST /;"	d
AVFMT_FLAG_SORT_DTS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_FLAG_SORT_DTS /;"	d
AVFMT_GENERIC_INDEX	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_GENERIC_INDEX /;"	d
AVFMT_GLOBALHEADER	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_GLOBALHEADER /;"	d
AVFMT_NEEDNUMBER	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NEEDNUMBER /;"	d
AVFMT_NOBINSEARCH	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NOBINSEARCH /;"	d
AVFMT_NODIMENSIONS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NODIMENSIONS /;"	d
AVFMT_NOFILE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NOFILE /;"	d
AVFMT_NOGENSEARCH	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NOGENSEARCH /;"	d
AVFMT_NOSTREAMS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NOSTREAMS /;"	d
AVFMT_NOTIMESTAMPS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NOTIMESTAMPS /;"	d
AVFMT_NO_BYTE_SEEK	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_NO_BYTE_SEEK /;"	d
AVFMT_SEEK_TO_PTS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_SEEK_TO_PTS /;"	d
AVFMT_SHOW_IDS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_SHOW_IDS /;"	d
AVFMT_TBCF_AUTO	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_TBCF_AUTO = -1,$/;"	e	enum:AVTimebaseSource
AVFMT_TBCF_DECODER	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_TBCF_DECODER,$/;"	e	enum:AVTimebaseSource
AVFMT_TBCF_DEMUXER	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_TBCF_DEMUXER,$/;"	e	enum:AVTimebaseSource
AVFMT_TBCF_R_FRAMERATE	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFMT_TBCF_R_FRAMERATE,$/;"	e	enum:AVTimebaseSource
AVFMT_TS_DISCONT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_TS_DISCONT /;"	d
AVFMT_TS_NEGATIVE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_TS_NEGATIVE /;"	d
AVFMT_TS_NONSTRICT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_TS_NONSTRICT /;"	d
AVFMT_VARIABLE_FPS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFMT_VARIABLE_FPS /;"	d
AVFORMAT_AVFORMAT_H	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVFORMAT_AVFORMAT_H$/;"	d
AVFORMAT_AVIO_H	lib/ffmpeg/include/libavformat/avio.h	/^#define AVFORMAT_AVIO_H$/;"	d
AVFORMAT_VERSION_H	lib/ffmpeg/include/libavformat/version.h	/^#define AVFORMAT_VERSION_H$/;"	d
AVFieldOrder	lib/ffmpeg/include/libavcodec/codec_par.h	/^enum AVFieldOrder {$/;"	g
AVFifoBuffer	lib/ffmpeg/include/libavutil/fifo.h	/^typedef struct AVFifoBuffer {$/;"	s
AVFifoBuffer	lib/ffmpeg/include/libavutil/fifo.h	/^} AVFifoBuffer;$/;"	t	typeref:struct:AVFifoBuffer
AVFilter	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilter {$/;"	s
AVFilter	lib/ffmpeg/include/libavfilter/avfilter.h	/^} AVFilter;$/;"	t	typeref:struct:AVFilter
AVFilterContext	lib/ffmpeg/include/libavfilter/avfilter.h	/^struct AVFilterContext {$/;"	s
AVFilterContext	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterContext AVFilterContext;$/;"	t	typeref:struct:AVFilterContext
AVFilterFormats	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterFormats AVFilterFormats;$/;"	t	typeref:struct:AVFilterFormats
AVFilterGraph	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterGraph {$/;"	s
AVFilterGraph	lib/ffmpeg/include/libavfilter/avfilter.h	/^} AVFilterGraph;$/;"	t	typeref:struct:AVFilterGraph
AVFilterGraphInternal	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterGraphInternal AVFilterGraphInternal;$/;"	t	typeref:struct:AVFilterGraphInternal
AVFilterInOut	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterInOut {$/;"	s
AVFilterInOut	lib/ffmpeg/include/libavfilter/avfilter.h	/^} AVFilterInOut;$/;"	t	typeref:struct:AVFilterInOut
AVFilterInternal	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterInternal AVFilterInternal;$/;"	t	typeref:struct:AVFilterInternal
AVFilterLink	lib/ffmpeg/include/libavfilter/avfilter.h	/^struct AVFilterLink {$/;"	s
AVFilterLink	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterLink    AVFilterLink;$/;"	t	typeref:struct:AVFilterLink
AVFilterPad	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef struct AVFilterPad     AVFilterPad;$/;"	t	typeref:struct:AVFilterPad
AVFormatContext	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVFormatContext {$/;"	s
AVFormatContext	lib/ffmpeg/include/libavformat/avformat.h	/^} AVFormatContext;$/;"	t	typeref:struct:AVFormatContext
AVFormatInternal	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVFormatInternal AVFormatInternal;$/;"	t	typeref:struct:AVFormatInternal
AVFrame	lib/ffmpeg/include/libavutil/frame.h	/^typedef struct AVFrame {$/;"	s
AVFrame	lib/ffmpeg/include/libavutil/frame.h	/^} AVFrame;$/;"	t	typeref:struct:AVFrame
AVFrameSideData	lib/ffmpeg/include/libavutil/frame.h	/^typedef struct AVFrameSideData {$/;"	s
AVFrameSideData	lib/ffmpeg/include/libavutil/frame.h	/^} AVFrameSideData;$/;"	t	typeref:struct:AVFrameSideData
AVFrameSideDataType	lib/ffmpeg/include/libavutil/frame.h	/^enum AVFrameSideDataType {$/;"	g
AVHDRPlusColorTransformParams	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^typedef struct AVHDRPlusColorTransformParams {$/;"	s
AVHDRPlusColorTransformParams	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^} AVHDRPlusColorTransformParams;$/;"	t	typeref:struct:AVHDRPlusColorTransformParams
AVHDRPlusOverlapProcessOption	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^enum AVHDRPlusOverlapProcessOption {$/;"	g
AVHDRPlusPercentile	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^typedef struct AVHDRPlusPercentile {$/;"	s
AVHDRPlusPercentile	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^} AVHDRPlusPercentile;$/;"	t	typeref:struct:AVHDRPlusPercentile
AVHMAC	lib/ffmpeg/include/libavutil/hmac.h	/^typedef struct AVHMAC AVHMAC;$/;"	t	typeref:struct:AVHMAC
AVHMACType	lib/ffmpeg/include/libavutil/hmac.h	/^enum AVHMACType {$/;"	g
AVHWAccel	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVHWAccel {$/;"	s
AVHWAccel	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVHWAccel;$/;"	t	typeref:struct:AVHWAccel
AVHWDeviceContext	lib/ffmpeg/include/libavutil/hwcontext.h	/^typedef struct AVHWDeviceContext {$/;"	s
AVHWDeviceContext	lib/ffmpeg/include/libavutil/hwcontext.h	/^} AVHWDeviceContext;$/;"	t	typeref:struct:AVHWDeviceContext
AVHWDeviceInternal	lib/ffmpeg/include/libavutil/hwcontext.h	/^typedef struct AVHWDeviceInternal AVHWDeviceInternal;$/;"	t	typeref:struct:AVHWDeviceInternal
AVHWDeviceType	lib/ffmpeg/include/libavutil/hwcontext.h	/^enum AVHWDeviceType {$/;"	g
AVHWFrameTransferDirection	lib/ffmpeg/include/libavutil/hwcontext.h	/^enum AVHWFrameTransferDirection {$/;"	g
AVHWFramesConstraints	lib/ffmpeg/include/libavutil/hwcontext.h	/^typedef struct AVHWFramesConstraints {$/;"	s
AVHWFramesConstraints	lib/ffmpeg/include/libavutil/hwcontext.h	/^} AVHWFramesConstraints;$/;"	t	typeref:struct:AVHWFramesConstraints
AVHWFramesContext	lib/ffmpeg/include/libavutil/hwcontext.h	/^typedef struct AVHWFramesContext {$/;"	s
AVHWFramesContext	lib/ffmpeg/include/libavutil/hwcontext.h	/^} AVHWFramesContext;$/;"	t	typeref:struct:AVHWFramesContext
AVHWFramesInternal	lib/ffmpeg/include/libavutil/hwcontext.h	/^typedef struct AVHWFramesInternal AVHWFramesInternal;$/;"	t	typeref:struct:AVHWFramesInternal
AVINDEX_DISCARD_FRAME	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVINDEX_DISCARD_FRAME /;"	d
AVINDEX_KEYFRAME	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVINDEX_KEYFRAME /;"	d
AVIOContext	lib/ffmpeg/include/libavformat/avio.h	/^typedef struct AVIOContext {$/;"	s
AVIOContext	lib/ffmpeg/include/libavformat/avio.h	/^} AVIOContext;$/;"	t	typeref:struct:AVIOContext
AVIODataMarkerType	lib/ffmpeg/include/libavformat/avio.h	/^enum AVIODataMarkerType {$/;"	g
AVIODirContext	lib/ffmpeg/include/libavformat/avio.h	/^typedef struct AVIODirContext {$/;"	s
AVIODirContext	lib/ffmpeg/include/libavformat/avio.h	/^} AVIODirContext;$/;"	t	typeref:struct:AVIODirContext
AVIODirEntry	lib/ffmpeg/include/libavformat/avio.h	/^typedef struct AVIODirEntry {$/;"	s
AVIODirEntry	lib/ffmpeg/include/libavformat/avio.h	/^} AVIODirEntry;$/;"	t	typeref:struct:AVIODirEntry
AVIODirEntryType	lib/ffmpeg/include/libavformat/avio.h	/^enum AVIODirEntryType {$/;"	g
AVIOInterruptCB	lib/ffmpeg/include/libavformat/avio.h	/^typedef struct AVIOInterruptCB {$/;"	s
AVIOInterruptCB	lib/ffmpeg/include/libavformat/avio.h	/^} AVIOInterruptCB;$/;"	t	typeref:struct:AVIOInterruptCB
AVIO_DATA_MARKER_BOUNDARY_POINT	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_DATA_MARKER_BOUNDARY_POINT,$/;"	e	enum:AVIODataMarkerType
AVIO_DATA_MARKER_FLUSH_POINT	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_DATA_MARKER_FLUSH_POINT,$/;"	e	enum:AVIODataMarkerType
AVIO_DATA_MARKER_HEADER	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_DATA_MARKER_HEADER,$/;"	e	enum:AVIODataMarkerType
AVIO_DATA_MARKER_SYNC_POINT	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_DATA_MARKER_SYNC_POINT,$/;"	e	enum:AVIODataMarkerType
AVIO_DATA_MARKER_TRAILER	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_DATA_MARKER_TRAILER,$/;"	e	enum:AVIODataMarkerType
AVIO_DATA_MARKER_UNKNOWN	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_DATA_MARKER_UNKNOWN,$/;"	e	enum:AVIODataMarkerType
AVIO_ENTRY_BLOCK_DEVICE	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_BLOCK_DEVICE,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_CHARACTER_DEVICE	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_CHARACTER_DEVICE,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_DIRECTORY	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_DIRECTORY,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_FILE	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_FILE,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_NAMED_PIPE	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_NAMED_PIPE,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_SERVER	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_SERVER,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_SHARE	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_SHARE,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_SOCKET	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_SOCKET,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_SYMBOLIC_LINK	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_SYMBOLIC_LINK,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_UNKNOWN	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_UNKNOWN,$/;"	e	enum:AVIODirEntryType
AVIO_ENTRY_WORKGROUP	lib/ffmpeg/include/libavformat/avio.h	/^    AVIO_ENTRY_WORKGROUP,$/;"	e	enum:AVIODirEntryType
AVIO_FLAG_DIRECT	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_FLAG_DIRECT /;"	d
AVIO_FLAG_NONBLOCK	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_FLAG_NONBLOCK /;"	d
AVIO_FLAG_READ	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_FLAG_READ /;"	d
AVIO_FLAG_READ_WRITE	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_FLAG_READ_WRITE /;"	d
AVIO_FLAG_WRITE	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_FLAG_WRITE /;"	d
AVIO_SEEKABLE_NORMAL	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_SEEKABLE_NORMAL /;"	d
AVIO_SEEKABLE_TIME	lib/ffmpeg/include/libavformat/avio.h	/^#define AVIO_SEEKABLE_TIME /;"	d
AVIndexEntry	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVIndexEntry {$/;"	s
AVIndexEntry	lib/ffmpeg/include/libavformat/avformat.h	/^} AVIndexEntry;$/;"	t	typeref:struct:AVIndexEntry
AVInputFormat	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVInputFormat {$/;"	s
AVInputFormat	lib/ffmpeg/include/libavformat/avformat.h	/^} AVInputFormat;$/;"	t	typeref:struct:AVInputFormat
AVLFG	lib/ffmpeg/include/libavutil/lfg.h	/^typedef struct AVLFG {$/;"	s
AVLFG	lib/ffmpeg/include/libavutil/lfg.h	/^} AVLFG;$/;"	t	typeref:struct:AVLFG
AVLINK_INIT	lib/ffmpeg/include/libavfilter/avfilter.h	/^        AVLINK_INIT             \/\/\/< complete$/;"	e	enum:AVFilterLink::__anon3784a0f80103
AVLINK_STARTINIT	lib/ffmpeg/include/libavfilter/avfilter.h	/^        AVLINK_STARTINIT,       \/\/\/< started, but incomplete$/;"	e	enum:AVFilterLink::__anon3784a0f80103
AVLINK_UNINIT	lib/ffmpeg/include/libavfilter/avfilter.h	/^        AVLINK_UNINIT = 0,      \/\/\/< not started$/;"	e	enum:AVFilterLink::__anon3784a0f80103
AVLockOp	lib/ffmpeg/include/libavcodec/avcodec.h	/^enum AVLockOp {$/;"	g
AVMEDIA_TYPE_ATTACHMENT	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_ATTACHMENT,    \/\/\/< Opaque data information usually sparse$/;"	e	enum:AVMediaType
AVMEDIA_TYPE_AUDIO	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_AUDIO,$/;"	e	enum:AVMediaType
AVMEDIA_TYPE_DATA	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_DATA,          \/\/\/< Opaque data information usually continuous$/;"	e	enum:AVMediaType
AVMEDIA_TYPE_NB	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_NB$/;"	e	enum:AVMediaType
AVMEDIA_TYPE_SUBTITLE	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_SUBTITLE,$/;"	e	enum:AVMediaType
AVMEDIA_TYPE_UNKNOWN	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_UNKNOWN = -1,  \/\/\/< Usually treated as AVMEDIA_TYPE_DATA$/;"	e	enum:AVMediaType
AVMEDIA_TYPE_VIDEO	lib/ffmpeg/include/libavutil/avutil.h	/^    AVMEDIA_TYPE_VIDEO,$/;"	e	enum:AVMediaType
AVMasteringDisplayMetadata	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^typedef struct AVMasteringDisplayMetadata {$/;"	s
AVMasteringDisplayMetadata	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^} AVMasteringDisplayMetadata;$/;"	t	typeref:struct:AVMasteringDisplayMetadata
AVMatrixEncoding	lib/ffmpeg/include/libavutil/channel_layout.h	/^enum AVMatrixEncoding {$/;"	g
AVMediaCodecBuffer	lib/ffmpeg/include/libavcodec/mediacodec.h	/^typedef struct MediaCodecBuffer AVMediaCodecBuffer;$/;"	t	typeref:struct:MediaCodecBuffer
AVMediaCodecContext	lib/ffmpeg/include/libavcodec/mediacodec.h	/^typedef struct AVMediaCodecContext {$/;"	s
AVMediaCodecContext	lib/ffmpeg/include/libavcodec/mediacodec.h	/^} AVMediaCodecContext;$/;"	t	typeref:struct:AVMediaCodecContext
AVMediaCodecDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_mediacodec.h	/^typedef struct AVMediaCodecDeviceContext {$/;"	s
AVMediaCodecDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_mediacodec.h	/^} AVMediaCodecDeviceContext;$/;"	t	typeref:struct:AVMediaCodecDeviceContext
AVMediaType	lib/ffmpeg/include/libavutil/avutil.h	/^enum AVMediaType {$/;"	g
AVMixCoeffType	lib/ffmpeg/include/libavresample/avresample.h	/^enum attribute_deprecated AVMixCoeffType {$/;"	g
AVMotionVector	lib/ffmpeg/include/libavutil/motion_vector.h	/^typedef struct AVMotionVector {$/;"	s
AVMotionVector	lib/ffmpeg/include/libavutil/motion_vector.h	/^} AVMotionVector;$/;"	t	typeref:struct:AVMotionVector
AVOpenCLDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^typedef struct AVOpenCLDeviceContext {$/;"	s
AVOpenCLDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^} AVOpenCLDeviceContext;$/;"	t	typeref:struct:AVOpenCLDeviceContext
AVOpenCLFrameDescriptor	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^typedef struct AVOpenCLFrameDescriptor {$/;"	s
AVOpenCLFrameDescriptor	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^} AVOpenCLFrameDescriptor;$/;"	t	typeref:struct:AVOpenCLFrameDescriptor
AVOpenCLFramesContext	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^typedef struct AVOpenCLFramesContext {$/;"	s
AVOpenCLFramesContext	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^} AVOpenCLFramesContext;$/;"	t	typeref:struct:AVOpenCLFramesContext
AVOpenCallback	lib/ffmpeg/include/libavformat/avformat.h	/^typedef int (*AVOpenCallback)(struct AVFormatContext *s, AVIOContext **pb, const char *url, int /;"	t	typeref:typename:int (*)(struct AVFormatContext * s,AVIOContext ** pb,const char * url,int flags,const AVIOInterruptCB * int_cb,AVDictionary ** options)
AVOption	lib/ffmpeg/include/libavutil/opt.h	/^typedef struct AVOption {$/;"	s
AVOption	lib/ffmpeg/include/libavutil/opt.h	/^} AVOption;$/;"	t	typeref:struct:AVOption
AVOptionRange	lib/ffmpeg/include/libavutil/opt.h	/^typedef struct AVOptionRange {$/;"	s
AVOptionRange	lib/ffmpeg/include/libavutil/opt.h	/^} AVOptionRange;$/;"	t	typeref:struct:AVOptionRange
AVOptionRanges	lib/ffmpeg/include/libavutil/opt.h	/^typedef struct AVOptionRanges {$/;"	s
AVOptionRanges	lib/ffmpeg/include/libavutil/opt.h	/^} AVOptionRanges;$/;"	t	typeref:struct:AVOptionRanges
AVOptionType	lib/ffmpeg/include/libavutil/opt.h	/^enum AVOptionType{$/;"	g
AVOutputFormat	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVOutputFormat {$/;"	s
AVOutputFormat	lib/ffmpeg/include/libavformat/avformat.h	/^} AVOutputFormat;$/;"	t	typeref:struct:AVOutputFormat
AVPALETTE_COUNT	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AVPALETTE_COUNT /;"	d
AVPALETTE_SIZE	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AVPALETTE_SIZE /;"	d
AVPROBE_PADDING_SIZE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVPROBE_PADDING_SIZE /;"	d
AVPROBE_SCORE_EXTENSION	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVPROBE_SCORE_EXTENSION /;"	d
AVPROBE_SCORE_MAX	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVPROBE_SCORE_MAX /;"	d
AVPROBE_SCORE_MIME	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVPROBE_SCORE_MIME /;"	d
AVPROBE_SCORE_RETRY	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVPROBE_SCORE_RETRY /;"	d
AVPROBE_SCORE_STREAM_RETRY	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVPROBE_SCORE_STREAM_RETRY /;"	d
AVPacket	lib/ffmpeg/include/libavcodec/packet.h	/^typedef struct AVPacket {$/;"	s
AVPacket	lib/ffmpeg/include/libavcodec/packet.h	/^} AVPacket;$/;"	t	typeref:struct:AVPacket
AVPacketList	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVPacketList {$/;"	s
AVPacketList	lib/ffmpeg/include/libavformat/avformat.h	/^} AVPacketList;$/;"	t	typeref:struct:AVPacketList
AVPacketSideData	lib/ffmpeg/include/libavcodec/packet.h	/^typedef struct AVPacketSideData {$/;"	s
AVPacketSideData	lib/ffmpeg/include/libavcodec/packet.h	/^} AVPacketSideData;$/;"	t	typeref:struct:AVPacketSideData
AVPacketSideDataType	lib/ffmpeg/include/libavcodec/packet.h	/^enum AVPacketSideDataType {$/;"	g
AVPanScan	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVPanScan {$/;"	s
AVPanScan	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVPanScan;$/;"	t	typeref:struct:AVPanScan
AVPicture	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVPicture {$/;"	s
AVPicture	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVPicture;$/;"	t	typeref:struct:AVPicture
AVPictureStructure	lib/ffmpeg/include/libavcodec/avcodec.h	/^enum AVPictureStructure {$/;"	g
AVPictureType	lib/ffmpeg/include/libavutil/avutil.h	/^enum AVPictureType {$/;"	g
AVPixFmtDescriptor	lib/ffmpeg/include/libavutil/pixdesc.h	/^typedef struct AVPixFmtDescriptor {$/;"	s
AVPixFmtDescriptor	lib/ffmpeg/include/libavutil/pixdesc.h	/^} AVPixFmtDescriptor;$/;"	t	typeref:struct:AVPixFmtDescriptor
AVPixelFormat	lib/ffmpeg/include/libavutil/pixfmt.h	/^enum AVPixelFormat {$/;"	g
AVProbeData	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVProbeData {$/;"	s
AVProbeData	lib/ffmpeg/include/libavformat/avformat.h	/^} AVProbeData;$/;"	t	typeref:struct:AVProbeData
AVProducerReferenceTime	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVProducerReferenceTime {$/;"	s
AVProducerReferenceTime	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVProducerReferenceTime;$/;"	t	typeref:struct:AVProducerReferenceTime
AVProfile	lib/ffmpeg/include/libavcodec/codec.h	/^typedef struct AVProfile {$/;"	s
AVProfile	lib/ffmpeg/include/libavcodec/codec.h	/^} AVProfile;$/;"	t	typeref:struct:AVProfile
AVProgram	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVProgram {$/;"	s
AVProgram	lib/ffmpeg/include/libavformat/avformat.h	/^} AVProgram;$/;"	t	typeref:struct:AVProgram
AVQSVContext	lib/ffmpeg/include/libavcodec/qsv.h	/^typedef struct AVQSVContext {$/;"	s
AVQSVContext	lib/ffmpeg/include/libavcodec/qsv.h	/^} AVQSVContext;$/;"	t	typeref:struct:AVQSVContext
AVQSVDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^typedef struct AVQSVDeviceContext {$/;"	s
AVQSVDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^} AVQSVDeviceContext;$/;"	t	typeref:struct:AVQSVDeviceContext
AVQSVFramesContext	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^typedef struct AVQSVFramesContext {$/;"	s
AVQSVFramesContext	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^} AVQSVFramesContext;$/;"	t	typeref:struct:AVQSVFramesContext
AVRC4	lib/ffmpeg/include/libavutil/rc4.h	/^typedef struct AVRC4 {$/;"	s
AVRC4	lib/ffmpeg/include/libavutil/rc4.h	/^} AVRC4;$/;"	t	typeref:struct:AVRC4
AVRESAMPLE_AVRESAMPLE_H	lib/ffmpeg/include/libavresample/avresample.h	/^#define AVRESAMPLE_AVRESAMPLE_H$/;"	d
AVRESAMPLE_MAX_CHANNELS	lib/ffmpeg/include/libavresample/avresample.h	/^#define AVRESAMPLE_MAX_CHANNELS /;"	d
AVRESAMPLE_VERSION_H	lib/ffmpeg/include/libavresample/version.h	/^#define AVRESAMPLE_VERSION_H$/;"	d
AVRational	lib/ffmpeg/include/libavutil/rational.h	/^typedef struct AVRational{$/;"	s
AVRational	lib/ffmpeg/include/libavutil/rational.h	/^} AVRational;$/;"	t	typeref:struct:AVRational
AVRegionOfInterest	lib/ffmpeg/include/libavutil/frame.h	/^typedef struct AVRegionOfInterest {$/;"	s
AVRegionOfInterest	lib/ffmpeg/include/libavutil/frame.h	/^} AVRegionOfInterest;$/;"	t	typeref:struct:AVRegionOfInterest
AVReplayGain	lib/ffmpeg/include/libavutil/replaygain.h	/^typedef struct AVReplayGain {$/;"	s
AVReplayGain	lib/ffmpeg/include/libavutil/replaygain.h	/^} AVReplayGain;$/;"	t	typeref:struct:AVReplayGain
AVResampleDitherMethod	lib/ffmpeg/include/libavresample/avresample.h	/^enum attribute_deprecated AVResampleDitherMethod {$/;"	g
AVResampleFilterType	lib/ffmpeg/include/libavresample/avresample.h	/^enum attribute_deprecated AVResampleFilterType {$/;"	g
AVRounding	lib/ffmpeg/include/libavutil/mathematics.h	/^enum AVRounding {$/;"	g
AVSEEK_FLAG_ANY	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSEEK_FLAG_ANY /;"	d
AVSEEK_FLAG_BACKWARD	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSEEK_FLAG_BACKWARD /;"	d
AVSEEK_FLAG_BYTE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSEEK_FLAG_BYTE /;"	d
AVSEEK_FLAG_FRAME	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSEEK_FLAG_FRAME /;"	d
AVSEEK_FORCE	lib/ffmpeg/include/libavformat/avio.h	/^#define AVSEEK_FORCE /;"	d
AVSEEK_SIZE	lib/ffmpeg/include/libavformat/avio.h	/^#define AVSEEK_SIZE /;"	d
AVSTREAM_EVENT_FLAG_METADATA_UPDATED	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSTREAM_EVENT_FLAG_METADATA_UPDATED /;"	d
AVSTREAM_INIT_IN_INIT_OUTPUT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSTREAM_INIT_IN_INIT_OUTPUT /;"	d
AVSTREAM_INIT_IN_WRITE_HEADER	lib/ffmpeg/include/libavformat/avformat.h	/^#define AVSTREAM_INIT_IN_WRITE_HEADER /;"	d
AVSTREAM_PARSE_FULL	lib/ffmpeg/include/libavformat/avformat.h	/^    AVSTREAM_PARSE_FULL,       \/**< full parsing and repack *\/$/;"	e	enum:AVStreamParseType
AVSTREAM_PARSE_FULL_ONCE	lib/ffmpeg/include/libavformat/avformat.h	/^    AVSTREAM_PARSE_FULL_ONCE,  \/**< full parsing and repack of the first frame only, only imple/;"	e	enum:AVStreamParseType
AVSTREAM_PARSE_FULL_RAW	lib/ffmpeg/include/libavformat/avformat.h	/^    AVSTREAM_PARSE_FULL_RAW,   \/**< full parsing and repack with timestamp and position generat/;"	e	enum:AVStreamParseType
AVSTREAM_PARSE_HEADERS	lib/ffmpeg/include/libavformat/avformat.h	/^    AVSTREAM_PARSE_HEADERS,    \/**< Only parse headers, do not repack. *\/$/;"	e	enum:AVStreamParseType
AVSTREAM_PARSE_NONE	lib/ffmpeg/include/libavformat/avformat.h	/^    AVSTREAM_PARSE_NONE,$/;"	e	enum:AVStreamParseType
AVSTREAM_PARSE_TIMESTAMPS	lib/ffmpeg/include/libavformat/avformat.h	/^    AVSTREAM_PARSE_TIMESTAMPS, \/**< full parsing and interpolation of timestamps for frames not/;"	e	enum:AVStreamParseType
AVSampleFormat	lib/ffmpeg/include/libavutil/samplefmt.h	/^enum AVSampleFormat {$/;"	g
AVSideDataParamChangeFlags	lib/ffmpeg/include/libavcodec/packet.h	/^enum AVSideDataParamChangeFlags {$/;"	g
AVSphericalMapping	lib/ffmpeg/include/libavutil/spherical.h	/^typedef struct AVSphericalMapping {$/;"	s
AVSphericalMapping	lib/ffmpeg/include/libavutil/spherical.h	/^} AVSphericalMapping;$/;"	t	typeref:struct:AVSphericalMapping
AVSphericalProjection	lib/ffmpeg/include/libavutil/spherical.h	/^enum AVSphericalProjection {$/;"	g
AVStereo3D	lib/ffmpeg/include/libavutil/stereo3d.h	/^typedef struct AVStereo3D {$/;"	s
AVStereo3D	lib/ffmpeg/include/libavutil/stereo3d.h	/^} AVStereo3D;$/;"	t	typeref:struct:AVStereo3D
AVStereo3DType	lib/ffmpeg/include/libavutil/stereo3d.h	/^enum AVStereo3DType {$/;"	g
AVStereo3DView	lib/ffmpeg/include/libavutil/stereo3d.h	/^enum AVStereo3DView {$/;"	g
AVStream	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVStream {$/;"	s
AVStream	lib/ffmpeg/include/libavformat/avformat.h	/^} AVStream;$/;"	t	typeref:struct:AVStream
AVStreamInternal	lib/ffmpeg/include/libavformat/avformat.h	/^typedef struct AVStreamInternal AVStreamInternal;$/;"	t	typeref:struct:AVStreamInternal
AVStreamParseType	lib/ffmpeg/include/libavformat/avformat.h	/^enum AVStreamParseType {$/;"	g
AVSubsampleEncryptionInfo	lib/ffmpeg/include/libavutil/encryption_info.h	/^typedef struct AVSubsampleEncryptionInfo {$/;"	s
AVSubsampleEncryptionInfo	lib/ffmpeg/include/libavutil/encryption_info.h	/^} AVSubsampleEncryptionInfo;$/;"	t	typeref:struct:AVSubsampleEncryptionInfo
AVSubtitle	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVSubtitle {$/;"	s
AVSubtitle	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVSubtitle;$/;"	t	typeref:struct:AVSubtitle
AVSubtitleRect	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct AVSubtitleRect {$/;"	s
AVSubtitleRect	lib/ffmpeg/include/libavcodec/avcodec.h	/^} AVSubtitleRect;$/;"	t	typeref:struct:AVSubtitleRect
AVSubtitleType	lib/ffmpeg/include/libavcodec/avcodec.h	/^enum AVSubtitleType {$/;"	g
AVTXContext	lib/ffmpeg/include/libavutil/tx.h	/^typedef struct AVTXContext AVTXContext;$/;"	t	typeref:struct:AVTXContext
AVTXType	lib/ffmpeg/include/libavutil/tx.h	/^enum AVTXType {$/;"	g
AVThreadMessageFlags	lib/ffmpeg/include/libavutil/threadmessage.h	/^typedef enum AVThreadMessageFlags {$/;"	g
AVThreadMessageFlags	lib/ffmpeg/include/libavutil/threadmessage.h	/^} AVThreadMessageFlags;$/;"	t	typeref:enum:AVThreadMessageFlags
AVThreadMessageQueue	lib/ffmpeg/include/libavutil/threadmessage.h	/^typedef struct AVThreadMessageQueue AVThreadMessageQueue;$/;"	t	typeref:struct:AVThreadMessageQueue
AVTimebaseSource	lib/ffmpeg/include/libavformat/avformat.h	/^enum AVTimebaseSource {$/;"	g
AVTimecode	lib/ffmpeg/include/libavutil/timecode.h	/^} AVTimecode;$/;"	t	typeref:struct:__anon74cc4c7d0108
AVTimecodeFlag	lib/ffmpeg/include/libavutil/timecode.h	/^enum AVTimecodeFlag {$/;"	g
AVUNERROR	lib/ffmpeg/include/libavutil/error.h	/^#define AVUNERROR(/;"	d
AVUTIL_ADLER32_H	lib/ffmpeg/include/libavutil/adler32.h	/^#define AVUTIL_ADLER32_H$/;"	d
AVUTIL_AES_CTR_H	lib/ffmpeg/include/libavutil/aes_ctr.h	/^#define AVUTIL_AES_CTR_H$/;"	d
AVUTIL_AES_H	lib/ffmpeg/include/libavutil/aes.h	/^#define AVUTIL_AES_H$/;"	d
AVUTIL_ATTRIBUTES_H	lib/ffmpeg/include/libavutil/attributes.h	/^#define AVUTIL_ATTRIBUTES_H$/;"	d
AVUTIL_AUDIO_FIFO_H	lib/ffmpeg/include/libavutil/audio_fifo.h	/^#define AVUTIL_AUDIO_FIFO_H$/;"	d
AVUTIL_AVASSERT_H	lib/ffmpeg/include/libavutil/avassert.h	/^#define AVUTIL_AVASSERT_H$/;"	d
AVUTIL_AVCONFIG_H	lib/ffmpeg/include/libavutil/avconfig.h	/^#define AVUTIL_AVCONFIG_H$/;"	d
AVUTIL_AVSTRING_H	lib/ffmpeg/include/libavutil/avstring.h	/^#define AVUTIL_AVSTRING_H$/;"	d
AVUTIL_AVUTIL_H	lib/ffmpeg/include/libavutil/avutil.h	/^#define AVUTIL_AVUTIL_H$/;"	d
AVUTIL_BASE64_H	lib/ffmpeg/include/libavutil/base64.h	/^#define AVUTIL_BASE64_H$/;"	d
AVUTIL_BLOWFISH_H	lib/ffmpeg/include/libavutil/blowfish.h	/^#define AVUTIL_BLOWFISH_H$/;"	d
AVUTIL_BPRINT_H	lib/ffmpeg/include/libavutil/bprint.h	/^#define AVUTIL_BPRINT_H$/;"	d
AVUTIL_BSWAP_H	lib/ffmpeg/include/libavutil/bswap.h	/^#define AVUTIL_BSWAP_H$/;"	d
AVUTIL_BUFFER_H	lib/ffmpeg/include/libavutil/buffer.h	/^#define AVUTIL_BUFFER_H$/;"	d
AVUTIL_CAMELLIA_H	lib/ffmpeg/include/libavutil/camellia.h	/^#define AVUTIL_CAMELLIA_H$/;"	d
AVUTIL_CAST5_H	lib/ffmpeg/include/libavutil/cast5.h	/^#define AVUTIL_CAST5_H$/;"	d
AVUTIL_CHANNEL_LAYOUT_H	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AVUTIL_CHANNEL_LAYOUT_H$/;"	d
AVUTIL_COMMON_H	lib/ffmpeg/include/libavutil/common.h	/^#define AVUTIL_COMMON_H$/;"	d
AVUTIL_CPU_H	lib/ffmpeg/include/libavutil/cpu.h	/^#define AVUTIL_CPU_H$/;"	d
AVUTIL_CRC_H	lib/ffmpeg/include/libavutil/crc.h	/^#define AVUTIL_CRC_H$/;"	d
AVUTIL_DES_H	lib/ffmpeg/include/libavutil/des.h	/^#define AVUTIL_DES_H$/;"	d
AVUTIL_DICT_H	lib/ffmpeg/include/libavutil/dict.h	/^#define AVUTIL_DICT_H$/;"	d
AVUTIL_DISPLAY_H	lib/ffmpeg/include/libavutil/display.h	/^#define AVUTIL_DISPLAY_H$/;"	d
AVUTIL_DOVI_META_H	lib/ffmpeg/include/libavutil/dovi_meta.h	/^#define AVUTIL_DOVI_META_H$/;"	d
AVUTIL_DOWNMIX_INFO_H	lib/ffmpeg/include/libavutil/downmix_info.h	/^#define AVUTIL_DOWNMIX_INFO_H$/;"	d
AVUTIL_ENCRYPTION_INFO_H	lib/ffmpeg/include/libavutil/encryption_info.h	/^#define AVUTIL_ENCRYPTION_INFO_H$/;"	d
AVUTIL_ERROR_H	lib/ffmpeg/include/libavutil/error.h	/^#define AVUTIL_ERROR_H$/;"	d
AVUTIL_EVAL_H	lib/ffmpeg/include/libavutil/eval.h	/^#define AVUTIL_EVAL_H$/;"	d
AVUTIL_FFVERSION_H	lib/ffmpeg/include/libavutil/ffversion.h	/^#define AVUTIL_FFVERSION_H$/;"	d
AVUTIL_FIFO_H	lib/ffmpeg/include/libavutil/fifo.h	/^#define AVUTIL_FIFO_H$/;"	d
AVUTIL_FILE_H	lib/ffmpeg/include/libavutil/file.h	/^#define AVUTIL_FILE_H$/;"	d
AVUTIL_FRAME_H	lib/ffmpeg/include/libavutil/frame.h	/^#define AVUTIL_FRAME_H$/;"	d
AVUTIL_HASH_H	lib/ffmpeg/include/libavutil/hash.h	/^#define AVUTIL_HASH_H$/;"	d
AVUTIL_HDR_DYNAMIC_METADATA_H	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^#define AVUTIL_HDR_DYNAMIC_METADATA_H$/;"	d
AVUTIL_HMAC_H	lib/ffmpeg/include/libavutil/hmac.h	/^#define AVUTIL_HMAC_H$/;"	d
AVUTIL_HWCONTEXT_CUDA_H	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^#define AVUTIL_HWCONTEXT_CUDA_H$/;"	d
AVUTIL_HWCONTEXT_D3D11VA_H	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^#define AVUTIL_HWCONTEXT_D3D11VA_H$/;"	d
AVUTIL_HWCONTEXT_DRM_H	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^#define AVUTIL_HWCONTEXT_DRM_H$/;"	d
AVUTIL_HWCONTEXT_DXVA2_H	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^#define AVUTIL_HWCONTEXT_DXVA2_H$/;"	d
AVUTIL_HWCONTEXT_H	lib/ffmpeg/include/libavutil/hwcontext.h	/^#define AVUTIL_HWCONTEXT_H$/;"	d
AVUTIL_HWCONTEXT_MEDIACODEC_H	lib/ffmpeg/include/libavutil/hwcontext_mediacodec.h	/^#define AVUTIL_HWCONTEXT_MEDIACODEC_H$/;"	d
AVUTIL_HWCONTEXT_OPENCL_H	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^#define AVUTIL_HWCONTEXT_OPENCL_H$/;"	d
AVUTIL_HWCONTEXT_QSV_H	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^#define AVUTIL_HWCONTEXT_QSV_H$/;"	d
AVUTIL_HWCONTEXT_VAAPI_H	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^#define AVUTIL_HWCONTEXT_VAAPI_H$/;"	d
AVUTIL_HWCONTEXT_VDPAU_H	lib/ffmpeg/include/libavutil/hwcontext_vdpau.h	/^#define AVUTIL_HWCONTEXT_VDPAU_H$/;"	d
AVUTIL_HWCONTEXT_VIDEOTOOLBOX_H	lib/ffmpeg/include/libavutil/hwcontext_videotoolbox.h	/^#define AVUTIL_HWCONTEXT_VIDEOTOOLBOX_H$/;"	d
AVUTIL_HWCONTEXT_VULKAN_H	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^#define AVUTIL_HWCONTEXT_VULKAN_H$/;"	d
AVUTIL_IMGUTILS_H	lib/ffmpeg/include/libavutil/imgutils.h	/^#define AVUTIL_IMGUTILS_H$/;"	d
AVUTIL_INTFLOAT_H	lib/ffmpeg/include/libavutil/intfloat.h	/^#define AVUTIL_INTFLOAT_H$/;"	d
AVUTIL_INTREADWRITE_H	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AVUTIL_INTREADWRITE_H$/;"	d
AVUTIL_LFG_H	lib/ffmpeg/include/libavutil/lfg.h	/^#define AVUTIL_LFG_H$/;"	d
AVUTIL_LOG_H	lib/ffmpeg/include/libavutil/log.h	/^#define AVUTIL_LOG_H$/;"	d
AVUTIL_LZO_H	lib/ffmpeg/include/libavutil/lzo.h	/^#define AVUTIL_LZO_H$/;"	d
AVUTIL_MASTERING_DISPLAY_METADATA_H	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^#define AVUTIL_MASTERING_DISPLAY_METADATA_H$/;"	d
AVUTIL_MATHEMATICS_H	lib/ffmpeg/include/libavutil/mathematics.h	/^#define AVUTIL_MATHEMATICS_H$/;"	d
AVUTIL_MD5_H	lib/ffmpeg/include/libavutil/md5.h	/^#define AVUTIL_MD5_H$/;"	d
AVUTIL_MEM_H	lib/ffmpeg/include/libavutil/mem.h	/^#define AVUTIL_MEM_H$/;"	d
AVUTIL_MOTION_VECTOR_H	lib/ffmpeg/include/libavutil/motion_vector.h	/^#define AVUTIL_MOTION_VECTOR_H$/;"	d
AVUTIL_MURMUR3_H	lib/ffmpeg/include/libavutil/murmur3.h	/^#define AVUTIL_MURMUR3_H$/;"	d
AVUTIL_OPT_H	lib/ffmpeg/include/libavutil/opt.h	/^#define AVUTIL_OPT_H$/;"	d
AVUTIL_PARSEUTILS_H	lib/ffmpeg/include/libavutil/parseutils.h	/^#define AVUTIL_PARSEUTILS_H$/;"	d
AVUTIL_PIXDESC_H	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AVUTIL_PIXDESC_H$/;"	d
AVUTIL_PIXELUTILS_H	lib/ffmpeg/include/libavutil/pixelutils.h	/^#define AVUTIL_PIXELUTILS_H$/;"	d
AVUTIL_PIXFMT_H	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AVUTIL_PIXFMT_H$/;"	d
AVUTIL_RANDOM_SEED_H	lib/ffmpeg/include/libavutil/random_seed.h	/^#define AVUTIL_RANDOM_SEED_H$/;"	d
AVUTIL_RATIONAL_H	lib/ffmpeg/include/libavutil/rational.h	/^#define AVUTIL_RATIONAL_H$/;"	d
AVUTIL_RC4_H	lib/ffmpeg/include/libavutil/rc4.h	/^#define AVUTIL_RC4_H$/;"	d
AVUTIL_REPLAYGAIN_H	lib/ffmpeg/include/libavutil/replaygain.h	/^#define AVUTIL_REPLAYGAIN_H$/;"	d
AVUTIL_RIPEMD_H	lib/ffmpeg/include/libavutil/ripemd.h	/^#define AVUTIL_RIPEMD_H$/;"	d
AVUTIL_SAMPLEFMT_H	lib/ffmpeg/include/libavutil/samplefmt.h	/^#define AVUTIL_SAMPLEFMT_H$/;"	d
AVUTIL_SHA512_H	lib/ffmpeg/include/libavutil/sha512.h	/^#define AVUTIL_SHA512_H$/;"	d
AVUTIL_SHA_H	lib/ffmpeg/include/libavutil/sha.h	/^#define AVUTIL_SHA_H$/;"	d
AVUTIL_SPHERICAL_H	lib/ffmpeg/include/libavutil/spherical.h	/^#define AVUTIL_SPHERICAL_H$/;"	d
AVUTIL_STEREO3D_H	lib/ffmpeg/include/libavutil/stereo3d.h	/^#define AVUTIL_STEREO3D_H$/;"	d
AVUTIL_TEA_H	lib/ffmpeg/include/libavutil/tea.h	/^#define AVUTIL_TEA_H$/;"	d
AVUTIL_THREADMESSAGE_H	lib/ffmpeg/include/libavutil/threadmessage.h	/^#define AVUTIL_THREADMESSAGE_H$/;"	d
AVUTIL_TIMECODE_H	lib/ffmpeg/include/libavutil/timecode.h	/^#define AVUTIL_TIMECODE_H$/;"	d
AVUTIL_TIMESTAMP_H	lib/ffmpeg/include/libavutil/timestamp.h	/^#define AVUTIL_TIMESTAMP_H$/;"	d
AVUTIL_TIME_H	lib/ffmpeg/include/libavutil/time.h	/^#define AVUTIL_TIME_H$/;"	d
AVUTIL_TREE_H	lib/ffmpeg/include/libavutil/tree.h	/^#define AVUTIL_TREE_H$/;"	d
AVUTIL_TWOFISH_H	lib/ffmpeg/include/libavutil/twofish.h	/^#define AVUTIL_TWOFISH_H$/;"	d
AVUTIL_TX_H	lib/ffmpeg/include/libavutil/tx.h	/^#define AVUTIL_TX_H$/;"	d
AVUTIL_VERSION_H	lib/ffmpeg/include/libavutil/version.h	/^#define AVUTIL_VERSION_H$/;"	d
AVUTIL_VIDEO_ENC_PARAMS_H	lib/ffmpeg/include/libavutil/video_enc_params.h	/^#define AVUTIL_VIDEO_ENC_PARAMS_H$/;"	d
AVUTIL_XTEA_H	lib/ffmpeg/include/libavutil/xtea.h	/^#define AVUTIL_XTEA_H$/;"	d
AVVAAPIDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^typedef struct AVVAAPIDeviceContext {$/;"	s
AVVAAPIDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^} AVVAAPIDeviceContext;$/;"	t	typeref:struct:AVVAAPIDeviceContext
AVVAAPIFramesContext	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^typedef struct AVVAAPIFramesContext {$/;"	s
AVVAAPIFramesContext	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^} AVVAAPIFramesContext;$/;"	t	typeref:struct:AVVAAPIFramesContext
AVVAAPIHWConfig	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^typedef struct AVVAAPIHWConfig {$/;"	s
AVVAAPIHWConfig	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^} AVVAAPIHWConfig;$/;"	t	typeref:struct:AVVAAPIHWConfig
AVVDPAUContext	lib/ffmpeg/include/libavcodec/vdpau.h	/^typedef struct AVVDPAUContext {$/;"	s
AVVDPAUContext	lib/ffmpeg/include/libavcodec/vdpau.h	/^} AVVDPAUContext;$/;"	t	typeref:struct:AVVDPAUContext
AVVDPAUDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_vdpau.h	/^typedef struct AVVDPAUDeviceContext {$/;"	s
AVVDPAUDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_vdpau.h	/^} AVVDPAUDeviceContext;$/;"	t	typeref:struct:AVVDPAUDeviceContext
AVVDPAU_Render2	lib/ffmpeg/include/libavcodec/vdpau.h	/^typedef int (*AVVDPAU_Render2)(struct AVCodecContext *, struct AVFrame *,$/;"	t	typeref:typename:int (*)(struct AVCodecContext *,struct AVFrame *,const VdpPictureInfo *,uint32_t,const VdpBitstreamBuffer *)
AVVideoBlockParams	lib/ffmpeg/include/libavutil/video_enc_params.h	/^typedef struct AVVideoBlockParams {$/;"	s
AVVideoBlockParams	lib/ffmpeg/include/libavutil/video_enc_params.h	/^} AVVideoBlockParams;$/;"	t	typeref:struct:AVVideoBlockParams
AVVideoEncParams	lib/ffmpeg/include/libavutil/video_enc_params.h	/^typedef struct AVVideoEncParams {$/;"	s
AVVideoEncParams	lib/ffmpeg/include/libavutil/video_enc_params.h	/^} AVVideoEncParams;$/;"	t	typeref:struct:AVVideoEncParams
AVVideoEncParamsType	lib/ffmpeg/include/libavutil/video_enc_params.h	/^enum AVVideoEncParamsType {$/;"	g
AVVideotoolboxContext	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^typedef struct AVVideotoolboxContext {$/;"	s
AVVideotoolboxContext	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^} AVVideotoolboxContext;$/;"	t	typeref:struct:AVVideotoolboxContext
AVVkFrame	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^typedef struct AVVkFrame {$/;"	s
AVVkFrame	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^} AVVkFrame;$/;"	t	typeref:struct:AVVkFrame
AVVorbisParseContext	lib/ffmpeg/include/libavcodec/vorbis_parser.h	/^typedef struct AVVorbisParseContext AVVorbisParseContext;$/;"	t	typeref:struct:AVVorbisParseContext
AVVulkanDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^typedef struct AVVulkanDeviceContext {$/;"	s
AVVulkanDeviceContext	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^} AVVulkanDeviceContext;$/;"	t	typeref:struct:AVVulkanDeviceContext
AVVulkanFramesContext	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^typedef struct AVVulkanFramesContext {$/;"	s
AVVulkanFramesContext	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^} AVVulkanFramesContext;$/;"	t	typeref:struct:AVVulkanFramesContext
AVXTEA	lib/ffmpeg/include/libavutil/xtea.h	/^typedef struct AVXTEA {$/;"	s
AVXTEA	lib/ffmpeg/include/libavutil/xtea.h	/^} AVXTEA;$/;"	t	typeref:struct:AVXTEA
AV_AAC_ADTS_HEADER_SIZE	lib/ffmpeg/include/libavcodec/adts_parser.h	/^#define AV_AAC_ADTS_HEADER_SIZE /;"	d
AV_AFD_14_9	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_14_9         = 11,$/;"	e	enum:AVActiveFormatDescription
AV_AFD_16_9	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_16_9         = 10,$/;"	e	enum:AVActiveFormatDescription
AV_AFD_16_9_SP_14_9	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_16_9_SP_14_9 = 14,$/;"	e	enum:AVActiveFormatDescription
AV_AFD_4_3	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_4_3          = 9,$/;"	e	enum:AVActiveFormatDescription
AV_AFD_4_3_SP_14_9	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_4_3_SP_14_9  = 13,$/;"	e	enum:AVActiveFormatDescription
AV_AFD_SAME	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_SAME         = 8,$/;"	e	enum:AVActiveFormatDescription
AV_AFD_SP_4_3	lib/ffmpeg/include/libavutil/frame.h	/^    AV_AFD_SP_4_3       = 15,$/;"	e	enum:AVActiveFormatDescription
AV_APP_TO_DEV_GET_MUTE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_GET_MUTE   = MKBETAG('G', 'M', 'U', 'T'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_GET_VOLUME	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_GET_VOLUME = MKBETAG('G', 'V', 'O', 'L'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_MUTE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_MUTE        = MKBETAG(' ', 'M', 'U', 'T'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_NONE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_NONE = MKBETAG('N','O','N','E'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_PAUSE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_PAUSE        = MKBETAG('P', 'A', 'U', ' '),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_PLAY	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_PLAY         = MKBETAG('P', 'L', 'A', 'Y'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_SET_VOLUME	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_SET_VOLUME = MKBETAG('S', 'V', 'O', 'L'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_TOGGLE_MUTE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_TOGGLE_MUTE = MKBETAG('T', 'M', 'U', 'T'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_TOGGLE_PAUSE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_TOGGLE_PAUSE = MKBETAG('P', 'A', 'U', 'T'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_UNMUTE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_UNMUTE      = MKBETAG('U', 'M', 'U', 'T'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_WINDOW_REPAINT	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_WINDOW_REPAINT = MKBETAG('R','E','P','A'),$/;"	e	enum:AVAppToDevMessageType
AV_APP_TO_DEV_WINDOW_SIZE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_APP_TO_DEV_WINDOW_SIZE = MKBETAG('G','E','O','M'),$/;"	e	enum:AVAppToDevMessageType
AV_AUDIO_SERVICE_TYPE_COMMENTARY	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_COMMENTARY        = 5,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_DIALOGUE	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_DIALOGUE          = 4,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_EFFECTS	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_EFFECTS           = 1,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_EMERGENCY	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_EMERGENCY         = 6,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED  = 3,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_KARAOKE	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_KARAOKE           = 8,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_MAIN              = 0,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_NB	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_NB                   , \/\/\/< Not part of ABI$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2,$/;"	e	enum:AVAudioServiceType
AV_AUDIO_SERVICE_TYPE_VOICE_OVER	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_AUDIO_SERVICE_TYPE_VOICE_OVER        = 7,$/;"	e	enum:AVAudioServiceType
AV_BASE64_DECODE_SIZE	lib/ffmpeg/include/libavutil/base64.h	/^#define AV_BASE64_DECODE_SIZE(/;"	d
AV_BASE64_SIZE	lib/ffmpeg/include/libavutil/base64.h	/^#define AV_BASE64_SIZE(/;"	d
AV_BE2NE16C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BE2NE16C(/;"	d
AV_BE2NE32C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BE2NE32C(/;"	d
AV_BE2NE64C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BE2NE64C(/;"	d
AV_BE2NEC	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BE2NEC(/;"	d
AV_BF_ROUNDS	lib/ffmpeg/include/libavutil/blowfish.h	/^#define AV_BF_ROUNDS /;"	d
AV_BPRINT_SIZE_AUTOMATIC	lib/ffmpeg/include/libavutil/bprint.h	/^#define AV_BPRINT_SIZE_AUTOMATIC /;"	d
AV_BPRINT_SIZE_COUNT_ONLY	lib/ffmpeg/include/libavutil/bprint.h	/^#define AV_BPRINT_SIZE_COUNT_ONLY /;"	d
AV_BPRINT_SIZE_UNLIMITED	lib/ffmpeg/include/libavutil/bprint.h	/^#define AV_BPRINT_SIZE_UNLIMITED /;"	d
AV_BSWAP16C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BSWAP16C(/;"	d
AV_BSWAP32C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BSWAP32C(/;"	d
AV_BSWAP64C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BSWAP64C(/;"	d
AV_BSWAPC	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_BSWAPC(/;"	d
AV_BUFFERSINK_FLAG_NO_REQUEST	lib/ffmpeg/include/libavfilter/buffersink.h	/^#define AV_BUFFERSINK_FLAG_NO_REQUEST /;"	d
AV_BUFFERSINK_FLAG_PEEK	lib/ffmpeg/include/libavfilter/buffersink.h	/^#define AV_BUFFERSINK_FLAG_PEEK /;"	d
AV_BUFFERSRC_FLAG_KEEP_REF	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AV_BUFFERSRC_FLAG_KEEP_REF = 8,$/;"	e	enum:__anonc6219c5d0103
AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT = 1,$/;"	e	enum:__anonc6219c5d0103
AV_BUFFERSRC_FLAG_PUSH	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AV_BUFFERSRC_FLAG_PUSH = 4,$/;"	e	enum:__anonc6219c5d0103
AV_BUFFER_FLAG_READONLY	lib/ffmpeg/include/libavutil/buffer.h	/^#define AV_BUFFER_FLAG_READONLY /;"	d
AV_CEIL_RSHIFT	lib/ffmpeg/include/libavutil/common.h	/^#define AV_CEIL_RSHIFT(/;"	d
AV_CH_BACK_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_BACK_CENTER /;"	d
AV_CH_BACK_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_BACK_LEFT /;"	d
AV_CH_BACK_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_BACK_RIGHT /;"	d
AV_CH_FRONT_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_FRONT_CENTER /;"	d
AV_CH_FRONT_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_FRONT_LEFT /;"	d
AV_CH_FRONT_LEFT_OF_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_FRONT_LEFT_OF_CENTER /;"	d
AV_CH_FRONT_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_FRONT_RIGHT /;"	d
AV_CH_FRONT_RIGHT_OF_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_FRONT_RIGHT_OF_CENTER /;"	d
AV_CH_LAYOUT_2POINT1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_2POINT1 /;"	d
AV_CH_LAYOUT_2_1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_2_1 /;"	d
AV_CH_LAYOUT_2_2	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_2_2 /;"	d
AV_CH_LAYOUT_3POINT1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_3POINT1 /;"	d
AV_CH_LAYOUT_4POINT0	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_4POINT0 /;"	d
AV_CH_LAYOUT_4POINT1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_4POINT1 /;"	d
AV_CH_LAYOUT_5POINT0	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_5POINT0 /;"	d
AV_CH_LAYOUT_5POINT0_BACK	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_5POINT0_BACK /;"	d
AV_CH_LAYOUT_5POINT1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_5POINT1 /;"	d
AV_CH_LAYOUT_5POINT1_BACK	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_5POINT1_BACK /;"	d
AV_CH_LAYOUT_6POINT0	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_6POINT0 /;"	d
AV_CH_LAYOUT_6POINT0_FRONT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_6POINT0_FRONT /;"	d
AV_CH_LAYOUT_6POINT1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_6POINT1 /;"	d
AV_CH_LAYOUT_6POINT1_BACK	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_6POINT1_BACK /;"	d
AV_CH_LAYOUT_6POINT1_FRONT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_6POINT1_FRONT /;"	d
AV_CH_LAYOUT_7POINT0	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_7POINT0 /;"	d
AV_CH_LAYOUT_7POINT0_FRONT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_7POINT0_FRONT /;"	d
AV_CH_LAYOUT_7POINT1	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_7POINT1 /;"	d
AV_CH_LAYOUT_7POINT1_WIDE	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_7POINT1_WIDE /;"	d
AV_CH_LAYOUT_7POINT1_WIDE_BACK	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_7POINT1_WIDE_BACK /;"	d
AV_CH_LAYOUT_HEXADECAGONAL	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_HEXADECAGONAL /;"	d
AV_CH_LAYOUT_HEXAGONAL	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_HEXAGONAL /;"	d
AV_CH_LAYOUT_MONO	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_MONO /;"	d
AV_CH_LAYOUT_NATIVE	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_NATIVE /;"	d
AV_CH_LAYOUT_OCTAGONAL	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_OCTAGONAL /;"	d
AV_CH_LAYOUT_QUAD	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_QUAD /;"	d
AV_CH_LAYOUT_STEREO	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_STEREO /;"	d
AV_CH_LAYOUT_STEREO_DOWNMIX	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_STEREO_DOWNMIX /;"	d
AV_CH_LAYOUT_SURROUND	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LAYOUT_SURROUND /;"	d
AV_CH_LOW_FREQUENCY	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LOW_FREQUENCY /;"	d
AV_CH_LOW_FREQUENCY_2	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_LOW_FREQUENCY_2 /;"	d
AV_CH_SIDE_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_SIDE_LEFT /;"	d
AV_CH_SIDE_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_SIDE_RIGHT /;"	d
AV_CH_STEREO_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_STEREO_LEFT /;"	d
AV_CH_STEREO_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_STEREO_RIGHT /;"	d
AV_CH_SURROUND_DIRECT_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_SURROUND_DIRECT_LEFT /;"	d
AV_CH_SURROUND_DIRECT_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_SURROUND_DIRECT_RIGHT /;"	d
AV_CH_TOP_BACK_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_BACK_CENTER /;"	d
AV_CH_TOP_BACK_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_BACK_LEFT /;"	d
AV_CH_TOP_BACK_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_BACK_RIGHT /;"	d
AV_CH_TOP_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_CENTER /;"	d
AV_CH_TOP_FRONT_CENTER	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_FRONT_CENTER /;"	d
AV_CH_TOP_FRONT_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_FRONT_LEFT /;"	d
AV_CH_TOP_FRONT_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_TOP_FRONT_RIGHT /;"	d
AV_CH_WIDE_LEFT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_WIDE_LEFT /;"	d
AV_CH_WIDE_RIGHT	lib/ffmpeg/include/libavutil/channel_layout.h	/^#define AV_CH_WIDE_RIGHT /;"	d
AV_CLASS_CATEGORY_BITSTREAM_FILTER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_BITSTREAM_FILTER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DECODER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DECODER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEMUXER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEMUXER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEVICE_INPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEVICE_INPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEVICE_OUTPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEVICE_OUTPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_ENCODER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_ENCODER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_FILTER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_FILTER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_INPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_INPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_MUXER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_MUXER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_NA	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_NA = 0,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_NB	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_NB  \/\/\/< not part of ABI\/API$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_OUTPUT	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_OUTPUT,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_SWRESAMPLER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_SWRESAMPLER,$/;"	e	enum:__anon6e025ef50103
AV_CLASS_CATEGORY_SWSCALER	lib/ffmpeg/include/libavutil/log.h	/^    AV_CLASS_CATEGORY_SWSCALER,$/;"	e	enum:__anon6e025ef50103
AV_CODEC_CAP_AUTO_THREADS	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_AUTO_THREADS /;"	d
AV_CODEC_CAP_AVOID_PROBING	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_AVOID_PROBING /;"	d
AV_CODEC_CAP_CHANNEL_CONF	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_CHANNEL_CONF /;"	d
AV_CODEC_CAP_DELAY	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_DELAY /;"	d
AV_CODEC_CAP_DR1	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_DR1 /;"	d
AV_CODEC_CAP_DRAW_HORIZ_BAND	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_DRAW_HORIZ_BAND /;"	d
AV_CODEC_CAP_ENCODER_FLUSH	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_ENCODER_FLUSH /;"	d
AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE /;"	d
AV_CODEC_CAP_EXPERIMENTAL	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_EXPERIMENTAL /;"	d
AV_CODEC_CAP_FRAME_THREADS	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_FRAME_THREADS /;"	d
AV_CODEC_CAP_HARDWARE	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_HARDWARE /;"	d
AV_CODEC_CAP_HYBRID	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_HYBRID /;"	d
AV_CODEC_CAP_INTRA_ONLY	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_INTRA_ONLY /;"	d
AV_CODEC_CAP_LOSSLESS	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_LOSSLESS /;"	d
AV_CODEC_CAP_PARAM_CHANGE	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_PARAM_CHANGE /;"	d
AV_CODEC_CAP_SLICE_THREADS	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_SLICE_THREADS /;"	d
AV_CODEC_CAP_SMALL_LAST_FRAME	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_SMALL_LAST_FRAME /;"	d
AV_CODEC_CAP_SUBFRAMES	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_SUBFRAMES /;"	d
AV_CODEC_CAP_TRUNCATED	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_TRUNCATED /;"	d
AV_CODEC_CAP_VARIABLE_FRAME_SIZE	lib/ffmpeg/include/libavcodec/codec.h	/^#define AV_CODEC_CAP_VARIABLE_FRAME_SIZE /;"	d
AV_CODEC_EXPORT_DATA_MVS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_EXPORT_DATA_MVS /;"	d
AV_CODEC_EXPORT_DATA_PRFT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_EXPORT_DATA_PRFT /;"	d
AV_CODEC_EXPORT_DATA_VIDEO_ENC_PARAMS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_EXPORT_DATA_VIDEO_ENC_PARAMS /;"	d
AV_CODEC_FLAG2_CHUNKS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_CHUNKS /;"	d
AV_CODEC_FLAG2_DROP_FRAME_TIMECODE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_DROP_FRAME_TIMECODE /;"	d
AV_CODEC_FLAG2_EXPORT_MVS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_EXPORT_MVS /;"	d
AV_CODEC_FLAG2_FAST	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_FAST /;"	d
AV_CODEC_FLAG2_IGNORE_CROP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_IGNORE_CROP /;"	d
AV_CODEC_FLAG2_LOCAL_HEADER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_LOCAL_HEADER /;"	d
AV_CODEC_FLAG2_NO_OUTPUT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_NO_OUTPUT /;"	d
AV_CODEC_FLAG2_RO_FLUSH_NOOP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_RO_FLUSH_NOOP /;"	d
AV_CODEC_FLAG2_SHOW_ALL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_SHOW_ALL /;"	d
AV_CODEC_FLAG2_SKIP_MANUAL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG2_SKIP_MANUAL /;"	d
AV_CODEC_FLAG_4MV	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_4MV /;"	d
AV_CODEC_FLAG_AC_PRED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_AC_PRED /;"	d
AV_CODEC_FLAG_BITEXACT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_BITEXACT /;"	d
AV_CODEC_FLAG_CLOSED_GOP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_CLOSED_GOP /;"	d
AV_CODEC_FLAG_DROPCHANGED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_DROPCHANGED /;"	d
AV_CODEC_FLAG_GLOBAL_HEADER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_GLOBAL_HEADER /;"	d
AV_CODEC_FLAG_GRAY	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_GRAY /;"	d
AV_CODEC_FLAG_INTERLACED_DCT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_INTERLACED_DCT /;"	d
AV_CODEC_FLAG_INTERLACED_ME	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_INTERLACED_ME /;"	d
AV_CODEC_FLAG_LOOP_FILTER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_LOOP_FILTER /;"	d
AV_CODEC_FLAG_LOW_DELAY	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_LOW_DELAY /;"	d
AV_CODEC_FLAG_OUTPUT_CORRUPT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_OUTPUT_CORRUPT /;"	d
AV_CODEC_FLAG_PASS1	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_PASS1 /;"	d
AV_CODEC_FLAG_PASS2	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_PASS2 /;"	d
AV_CODEC_FLAG_PSNR	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_PSNR /;"	d
AV_CODEC_FLAG_QPEL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_QPEL /;"	d
AV_CODEC_FLAG_QSCALE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_QSCALE /;"	d
AV_CODEC_FLAG_TRUNCATED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_TRUNCATED /;"	d
AV_CODEC_FLAG_UNALIGNED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_CODEC_FLAG_UNALIGNED /;"	d
AV_CODEC_HW_CONFIG_METHOD_AD_HOC	lib/ffmpeg/include/libavcodec/codec.h	/^    AV_CODEC_HW_CONFIG_METHOD_AD_HOC        = 0x08,$/;"	e	enum:__anon92a1ced10103
AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX	lib/ffmpeg/include/libavcodec/codec.h	/^    AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX = 0x01,$/;"	e	enum:__anon92a1ced10103
AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX	lib/ffmpeg/include/libavcodec/codec.h	/^    AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX = 0x02,$/;"	e	enum:__anon92a1ced10103
AV_CODEC_HW_CONFIG_METHOD_INTERNAL	lib/ffmpeg/include/libavcodec/codec.h	/^    AV_CODEC_HW_CONFIG_METHOD_INTERNAL      = 0x04,$/;"	e	enum:__anon92a1ced10103
AV_CODEC_ID_012V	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_012V,$/;"	e	enum:AVCodecID
AV_CODEC_ID_4GV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_4GV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_4XM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_4XM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_8BPS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_8BPS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_8SVX_EXP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_8SVX_EXP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_8SVX_FIB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_8SVX_FIB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_A64_MULTI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_A64_MULTI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_A64_MULTI5	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_A64_MULTI5,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AAC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AAC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AAC_LATM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AAC_LATM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AASC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AASC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AC3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AC3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ACELP_KELVIN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ACELP_KELVIN,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_4XM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_4XM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_ADX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_ADX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_AFC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_AFC = 0x11800,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_AGM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_AGM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_AICA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_AICA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_ARGO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_ARGO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_CT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_CT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_DTK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_DTK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_EA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_EA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_EA_MAXIS_XA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_EA_MAXIS_XA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_EA_R1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_EA_R1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_EA_R2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_EA_R2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_EA_R3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_EA_R3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_EA_XAS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_EA_XAS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_G722	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_G722,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_G726	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_G726,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_G726LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_G726LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_ALP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_ALP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_AMV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_AMV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_APC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_APC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_APM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_APM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_CUNNING	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_CUNNING,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_DAT4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_DAT4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_DK3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_DK3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_DK4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_DK4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_EA_EACS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_EA_EACS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_EA_SEAD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_EA_SEAD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_ISS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_ISS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_MTF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_MTF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_OKI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_OKI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_QT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_QT = 0x11000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_RAD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_RAD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_SMJPEG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_SMJPEG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_SSI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_SSI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_WAV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_WAV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_IMA_WS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_IMA_WS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_MS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_MS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_MTAF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_MTAF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_PSX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_PSX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_SBPRO_2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_SBPRO_2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_SBPRO_3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_SBPRO_3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_SBPRO_4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_SBPRO_4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_SWF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_SWF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_THP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_THP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_THP_LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_THP_LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_VIMA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_VIMA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_XA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_XA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_YAMAHA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_YAMAHA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ADPCM_ZORK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ADPCM_ZORK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AGM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AGM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AIC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AIC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ALAC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ALAC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ALIAS_PIX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ALIAS_PIX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AMR_NB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AMR_NB = 0x12000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AMR_WB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AMR_WB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AMV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AMV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ANM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ANM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ANSI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ANSI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_APE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_APE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_APNG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_APNG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_APTX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_APTX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_APTX_HD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_APTX_HD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ARBC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ARBC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ARIB_CAPTION	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ARIB_CAPTION,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ASS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ASS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ASV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ASV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ASV2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ASV2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ATRAC1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ATRAC1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ATRAC3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ATRAC3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ATRAC3AL	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ATRAC3AL,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ATRAC3P	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ATRAC3P,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ATRAC3PAL	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ATRAC3PAL,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ATRAC9	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ATRAC9,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AURA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AURA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AURA2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AURA2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AVRN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AVRN,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AVRP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AVRP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AVS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AVS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AVS2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AVS2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AVUI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AVUI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_AYUV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_AYUV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BETHSOFTVID	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BETHSOFTVID,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BFI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BFI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BINKAUDIO_DCT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BINKAUDIO_DCT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BINKAUDIO_RDFT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BINKAUDIO_RDFT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BINKVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BINKVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BINTEXT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BINTEXT    = 0x18800,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BIN_DATA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BIN_DATA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BITPACKED	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BITPACKED,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BMP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BMP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BMV_AUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BMV_AUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BMV_VIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BMV_VIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_BRENDER_PIX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_BRENDER_PIX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_C93	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_C93,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CAVS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CAVS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CDGRAPHICS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CDGRAPHICS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CDTOONS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CDTOONS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CDXL	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CDXL,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CELT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CELT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CFHD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CFHD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CINEPAK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CINEPAK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CLEARVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CLEARVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CLJR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CLJR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CLLC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CLLC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CMV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CMV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CODEC2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CODEC2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_COMFORT_NOISE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_COMFORT_NOISE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_COOK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_COOK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CPIA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CPIA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CSCD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CSCD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_CYUV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_CYUV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DAALA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DAALA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DDS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DDS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DERF_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DERF_DPCM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DFA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DFA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DIRAC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DIRAC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DNXHD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DNXHD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DOLBY_E	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DOLBY_E,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DPX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DPX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSD_LSBF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSD_LSBF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSD_LSBF_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSD_LSBF_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSD_MSBF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSD_MSBF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSD_MSBF_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSD_MSBF_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSICINAUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSICINAUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSICINVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSICINVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DSS_SP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DSS_SP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DST	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DST,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DTS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DTS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DVAUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DVAUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DVB_SUBTITLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DVB_SUBTITLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DVB_TELETEXT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DVB_TELETEXT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DVD_NAV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DVD_NAV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DVD_SUBTITLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DVD_SUBTITLE = 0x17000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DVVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DVVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DXA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DXA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DXTORY	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DXTORY,$/;"	e	enum:AVCodecID
AV_CODEC_ID_DXV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_DXV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_EAC3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_EAC3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_EIA_608	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_EIA_608,$/;"	e	enum:AVCodecID
AV_CODEC_ID_EPG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_EPG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ESCAPE124	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ESCAPE124,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ESCAPE130	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ESCAPE130,$/;"	e	enum:AVCodecID
AV_CODEC_ID_EVRC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_EVRC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_EXR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_EXR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FFMETADATA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FFMETADATA = 0x21000,   \/\/\/< Dummy codec for streams containing only metadata/;"	e	enum:AVCodecID
AV_CODEC_ID_FFV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FFV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FFVHUFF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FFVHUFF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FFWAVESYNTH	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FFWAVESYNTH = 0x15800,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FIC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FIC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FIRST_AUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FIRST_AUDIO = 0x10000,     \/\/\/< A dummy id pointing at the start of audio cod/;"	e	enum:AVCodecID
AV_CODEC_ID_FIRST_SUBTITLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FIRST_SUBTITLE = 0x17000,          \/\/\/< A dummy ID pointing at the start of s/;"	e	enum:AVCodecID
AV_CODEC_ID_FIRST_UNKNOWN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FIRST_UNKNOWN = 0x18000,           \/\/\/< A dummy ID pointing at the start of v/;"	e	enum:AVCodecID
AV_CODEC_ID_FITS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FITS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FLAC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FLAC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FLASHSV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FLASHSV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FLASHSV2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FLASHSV2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FLIC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FLIC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FLV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FLV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FMVC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FMVC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FRAPS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FRAPS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_FRWU	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_FRWU,$/;"	e	enum:AVCodecID
AV_CODEC_ID_G2M	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_G2M,$/;"	e	enum:AVCodecID
AV_CODEC_ID_G723_1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_G723_1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_G729	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_G729,$/;"	e	enum:AVCodecID
AV_CODEC_ID_GDV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_GDV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_GIF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_GIF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_GREMLIN_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_GREMLIN_DPCM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_GSM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_GSM, \/\/\/< as in Berlin toast format$/;"	e	enum:AVCodecID
AV_CODEC_ID_GSM_MS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_GSM_MS, \/* as found in WAV *\/$/;"	e	enum:AVCodecID
AV_CODEC_ID_H261	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_H261,$/;"	e	enum:AVCodecID
AV_CODEC_ID_H263	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_H263,$/;"	e	enum:AVCodecID
AV_CODEC_ID_H263I	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_H263I,$/;"	e	enum:AVCodecID
AV_CODEC_ID_H263P	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_H263P,$/;"	e	enum:AVCodecID
AV_CODEC_ID_H264	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_H264,$/;"	e	enum:AVCodecID
AV_CODEC_ID_H265	lib/ffmpeg/include/libavcodec/codec_id.h	/^#define AV_CODEC_ID_H265 /;"	d
AV_CODEC_ID_HAP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HAP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HCA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HCA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HCOM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HCOM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HDMV_PGS_SUBTITLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HDMV_PGS_SUBTITLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HDMV_TEXT_SUBTITLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HDMV_TEXT_SUBTITLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HEVC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HEVC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HNM4_VIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HNM4_VIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HQX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HQX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HQ_HQA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HQ_HQA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HUFFYUV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HUFFYUV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_HYMT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_HYMT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IAC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IAC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IDCIN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IDCIN,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IDF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IDF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IFF_BYTERUN1	lib/ffmpeg/include/libavcodec/codec_id.h	/^#define AV_CODEC_ID_IFF_BYTERUN1 /;"	d
AV_CODEC_ID_IFF_ILBM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IFF_ILBM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ILBC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ILBC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IMC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IMC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IMM4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IMM4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_IMM5	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_IMM5,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INDEO2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INDEO2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INDEO3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INDEO3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INDEO4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INDEO4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INDEO5	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INDEO5,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INTERPLAY_ACM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INTERPLAY_ACM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INTERPLAY_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INTERPLAY_DPCM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_INTERPLAY_VIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_INTERPLAY_VIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_JACOSUB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_JACOSUB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_JPEG2000	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_JPEG2000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_JPEGLS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_JPEGLS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_JV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_JV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_KGV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_KGV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_KMVC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_KMVC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_LAGARITH	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_LAGARITH,$/;"	e	enum:AVCodecID
AV_CODEC_ID_LJPEG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_LJPEG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_LOCO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_LOCO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_LSCR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_LSCR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_M101	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_M101,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MACE3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MACE3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MACE6	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MACE6,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MAD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MAD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MAGICYUV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MAGICYUV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MDEC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MDEC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_METASOUND	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_METASOUND,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MICRODVD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MICRODVD   = 0x17800,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MIMIC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MIMIC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MJPEG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MJPEG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MJPEGB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MJPEGB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MLP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MLP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MMVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MMVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MOTIONPIXELS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MOTIONPIXELS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MOV_TEXT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MOV_TEXT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MP1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MP1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MP2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MP2 = 0x15000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MP3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MP3, \/\/\/< preferred ID for decoding MPEG audio layer 1, 2 or 3$/;"	e	enum:AVCodecID
AV_CODEC_ID_MP3ADU	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MP3ADU,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MP3ON4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MP3ON4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MP4ALS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MP4ALS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPEG1VIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPEG1VIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPEG2TS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPEG2TS = 0x20000, \/**< _FAKE_ codec to indicate a raw MPEG-2 TS$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPEG2VIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPEG2VIDEO, \/\/\/< preferred ID for MPEG-1\/2 video decoding$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPEG4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPEG4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPEG4SYSTEMS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPEG4SYSTEMS = 0x20001, \/**< _FAKE_ codec to indicate a MPEG-4 Systems$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPEGH_3D_AUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPEGH_3D_AUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MPL2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MPL2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSA1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSA1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSCC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSCC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSMPEG4V1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSMPEG4V1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSMPEG4V2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSMPEG4V2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSMPEG4V3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSMPEG4V3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSRLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSRLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSS1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSS1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSS2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSS2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSVIDEO1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSVIDEO1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MSZH	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MSZH,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MTS2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MTS2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MUSEPACK7	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MUSEPACK7,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MUSEPACK8	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MUSEPACK8,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MV30	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MV30,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MVC1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MVC1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MVC2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MVC2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MVDV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MVDV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MVHA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MVHA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MWSC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MWSC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_MXPEG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_MXPEG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_NELLYMOSER	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_NELLYMOSER,$/;"	e	enum:AVCodecID
AV_CODEC_ID_NONE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_NONE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_NOTCHLC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_NOTCHLC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_NUV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_NUV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ON2AVC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ON2AVC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_OPUS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_OPUS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_OTF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_OTF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PAF_AUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PAF_AUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PAF_VIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PAF_VIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PAM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PAM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PBM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PBM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_ALAW	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_ALAW,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_BLURAY	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_BLURAY,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_DVD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_DVD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_F16LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_F16LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_F24LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_F24LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_F32BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_F32BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_F32LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_F32LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_F64BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_F64BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_F64LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_F64LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_LXF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_LXF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_MULAW	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_MULAW,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S16BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S16BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S16BE_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S16BE_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S16LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S16LE = 0x10000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S16LE_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S16LE_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S24BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S24BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S24DAUD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S24DAUD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S24LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S24LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S24LE_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S24LE_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S32BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S32BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S32LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S32LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S32LE_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S32LE_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S64BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S64BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S64LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S64LE = 0x10800,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S8	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S8,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_S8_PLANAR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_S8_PLANAR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U16BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U16BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U16LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U16LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U24BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U24BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U24LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U24LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U32BE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U32BE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U32LE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U32LE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_U8	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_U8,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_VIDC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_VIDC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCM_ZORK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCM_ZORK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PCX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PCX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PFM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PFM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PGM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PGM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PGMYUV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PGMYUV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PICTOR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PICTOR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PIXLET	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PIXLET,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PJS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PJS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PNG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PNG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PPM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PPM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PROBE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PROBE = 0x19000, \/\/\/< codec_id is not known (like AV_CODEC_ID_NONE) but lavf /;"	e	enum:AVCodecID
AV_CODEC_ID_PRORES	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PRORES,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PROSUMER	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PROSUMER,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PSD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PSD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_PTX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_PTX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_QCELP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_QCELP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_QDM2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_QDM2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_QDMC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_QDMC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_QDRAW	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_QDRAW,$/;"	e	enum:AVCodecID
AV_CODEC_ID_QPEG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_QPEG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_QTRLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_QTRLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_R10K	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_R10K,$/;"	e	enum:AVCodecID
AV_CODEC_ID_R210	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_R210,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RALF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RALF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RASC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RASC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RAWVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RAWVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RA_144	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RA_144 = 0x13000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RA_288	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RA_288,$/;"	e	enum:AVCodecID
AV_CODEC_ID_REALTEXT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_REALTEXT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RL2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RL2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ROQ	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ROQ,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ROQ_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ROQ_DPCM = 0x14000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RPZA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RPZA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RSCC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RSCC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RV10	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RV10,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RV20	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RV20,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RV30	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RV30,$/;"	e	enum:AVCodecID
AV_CODEC_ID_RV40	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_RV40,$/;"	e	enum:AVCodecID
AV_CODEC_ID_S302M	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_S302M,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SAMI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SAMI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SANM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SANM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SBC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SBC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SCPR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SCPR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SCREENPRESSO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SCREENPRESSO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SCTE_35	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SCTE_35, \/\/\/< Contain timestamp estimated through PCR of program stream.$/;"	e	enum:AVCodecID
AV_CODEC_ID_SDX2_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SDX2_DPCM = 0x14800,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SGI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SGI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SGIRLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SGIRLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SHEERVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SHEERVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SHORTEN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SHORTEN,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SIPR	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SIPR,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SIREN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SIREN,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SMACKAUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SMACKAUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SMACKVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SMACKVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SMC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SMC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SMPTE_KLV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SMPTE_KLV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SMV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SMV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SMVJPEG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SMVJPEG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SNOW	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SNOW,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SOL_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SOL_DPCM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SONIC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SONIC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SONIC_LS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SONIC_LS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SP5X	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SP5X,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SPEEDHQ	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SPEEDHQ,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SPEEX	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SPEEX,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SRGC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SRGC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SRT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SRT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SSA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SSA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_STL	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_STL,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SUBRIP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SUBRIP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SUBVIEWER	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SUBVIEWER,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SUBVIEWER1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SUBVIEWER1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SUNRAST	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SUNRAST,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SVG	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SVG,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SVQ1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SVQ1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_SVQ3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_SVQ3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TAK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TAK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TARGA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TARGA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TARGA_Y216	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TARGA_Y216,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TDSC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TDSC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TEXT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TEXT,  \/\/\/< raw UTF-8 text$/;"	e	enum:AVCodecID
AV_CODEC_ID_TGQ	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TGQ,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TGV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TGV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_THEORA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_THEORA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_THP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_THP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TIERTEXSEQVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TIERTEXSEQVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TIFF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TIFF,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TIMED_ID3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TIMED_ID3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TMV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TMV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TQI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TQI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TRUEHD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TRUEHD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TRUEMOTION1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TRUEMOTION1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TRUEMOTION2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TRUEMOTION2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TRUEMOTION2RT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TRUEMOTION2RT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TRUESPEECH	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TRUESPEECH,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TSCC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TSCC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TSCC2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TSCC2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TTA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TTA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TTF	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TTF = 0x18000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TTML	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TTML,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TWINVQ	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TWINVQ,$/;"	e	enum:AVCodecID
AV_CODEC_ID_TXD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_TXD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ULTI	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ULTI,$/;"	e	enum:AVCodecID
AV_CODEC_ID_UTVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_UTVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_V210	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_V210,$/;"	e	enum:AVCodecID
AV_CODEC_ID_V210X	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_V210X,$/;"	e	enum:AVCodecID
AV_CODEC_ID_V308	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_V308,$/;"	e	enum:AVCodecID
AV_CODEC_ID_V408	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_V408,$/;"	e	enum:AVCodecID
AV_CODEC_ID_V410	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_V410,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VBLE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VBLE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VC1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VC1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VC1IMAGE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VC1IMAGE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VCR1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VCR1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VIXL	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VIXL,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VMDAUDIO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VMDAUDIO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VMDVIDEO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VMDVIDEO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VMNC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VMNC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VORBIS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VORBIS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP5	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP5,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP6	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP6,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP6A	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP6A,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP6F	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP6F,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP7	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP7,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP8	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP8,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VP9	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VP9,$/;"	e	enum:AVCodecID
AV_CODEC_ID_VPLAYER	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_VPLAYER,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WAVPACK	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WAVPACK,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WCMV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WCMV,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WEBP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WEBP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WEBVTT	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WEBVTT,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WESTWOOD_SND1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WESTWOOD_SND1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMALOSSLESS	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMALOSSLESS,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMAPRO	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMAPRO,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMAV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMAV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMAV2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMAV2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMAVOICE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMAVOICE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMV2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMV2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMV3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMV3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WMV3IMAGE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WMV3IMAGE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WNV1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WNV1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_WRAPPED_AVFRAME	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WRAPPED_AVFRAME = 0x21001, \/\/\/< Passthrough codec, AVFrames wrapped in AVPack/;"	e	enum:AVCodecID
AV_CODEC_ID_WS_VQA	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_WS_VQA,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XAN_DPCM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XAN_DPCM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XAN_WC3	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XAN_WC3,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XAN_WC4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XAN_WC4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XBIN	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XBIN,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XBM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XBM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XFACE	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XFACE,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XMA1	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XMA1,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XMA2	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XMA2,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XPM	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XPM,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XSUB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XSUB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_XWD	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_XWD,$/;"	e	enum:AVCodecID
AV_CODEC_ID_Y41P	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_Y41P = 0x8000,$/;"	e	enum:AVCodecID
AV_CODEC_ID_YLC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_YLC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_YOP	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_YOP,$/;"	e	enum:AVCodecID
AV_CODEC_ID_YUV4	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_YUV4,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ZEROCODEC	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ZEROCODEC,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ZLIB	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ZLIB,$/;"	e	enum:AVCodecID
AV_CODEC_ID_ZMBV	lib/ffmpeg/include/libavcodec/codec_id.h	/^    AV_CODEC_ID_ZMBV,$/;"	e	enum:AVCodecID
AV_CODEC_PROP_BITMAP_SUB	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AV_CODEC_PROP_BITMAP_SUB /;"	d
AV_CODEC_PROP_INTRA_ONLY	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AV_CODEC_PROP_INTRA_ONLY /;"	d
AV_CODEC_PROP_LOSSLESS	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AV_CODEC_PROP_LOSSLESS /;"	d
AV_CODEC_PROP_LOSSY	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AV_CODEC_PROP_LOSSY /;"	d
AV_CODEC_PROP_REORDER	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AV_CODEC_PROP_REORDER /;"	d
AV_CODEC_PROP_TEXT_SUB	lib/ffmpeg/include/libavcodec/codec_desc.h	/^#define AV_CODEC_PROP_TEXT_SUB /;"	d
AV_COPY	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_COPY(/;"	d
AV_COPY128	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY128(/;"	d
AV_COPY128U	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY128U(/;"	d
AV_COPY16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY16(/;"	d
AV_COPY16U	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY16U(/;"	d
AV_COPY32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY32(/;"	d
AV_COPY32U	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY32U(/;"	d
AV_COPY64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY64(/;"	d
AV_COPY64U	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_COPY64U(/;"	d
AV_COPYU	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_COPYU(/;"	d
AV_CPU_FLAG_3DNOW	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_3DNOW /;"	d
AV_CPU_FLAG_3DNOWEXT	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_3DNOWEXT /;"	d
AV_CPU_FLAG_AESNI	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_AESNI /;"	d
AV_CPU_FLAG_ALTIVEC	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_ALTIVEC /;"	d
AV_CPU_FLAG_ARMV5TE	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_ARMV5TE /;"	d
AV_CPU_FLAG_ARMV6	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_ARMV6 /;"	d
AV_CPU_FLAG_ARMV6T2	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_ARMV6T2 /;"	d
AV_CPU_FLAG_ARMV8	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_ARMV8 /;"	d
AV_CPU_FLAG_ATOM	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_ATOM /;"	d
AV_CPU_FLAG_AVX	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_AVX /;"	d
AV_CPU_FLAG_AVX2	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_AVX2 /;"	d
AV_CPU_FLAG_AVX512	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_AVX512 /;"	d
AV_CPU_FLAG_AVXSLOW	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_AVXSLOW /;"	d
AV_CPU_FLAG_BMI1	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_BMI1 /;"	d
AV_CPU_FLAG_BMI2	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_BMI2 /;"	d
AV_CPU_FLAG_CMOV	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_CMOV /;"	d
AV_CPU_FLAG_FMA3	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_FMA3 /;"	d
AV_CPU_FLAG_FMA4	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_FMA4 /;"	d
AV_CPU_FLAG_FORCE	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_FORCE /;"	d
AV_CPU_FLAG_MMX	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_MMX /;"	d
AV_CPU_FLAG_MMX2	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_MMX2 /;"	d
AV_CPU_FLAG_MMXEXT	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_MMXEXT /;"	d
AV_CPU_FLAG_NEON	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_NEON /;"	d
AV_CPU_FLAG_POWER8	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_POWER8 /;"	d
AV_CPU_FLAG_SETEND	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SETEND /;"	d
AV_CPU_FLAG_SSE	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE /;"	d
AV_CPU_FLAG_SSE2	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE2 /;"	d
AV_CPU_FLAG_SSE2SLOW	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE2SLOW /;"	d
AV_CPU_FLAG_SSE3	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE3 /;"	d
AV_CPU_FLAG_SSE3SLOW	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE3SLOW /;"	d
AV_CPU_FLAG_SSE4	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE4 /;"	d
AV_CPU_FLAG_SSE42	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSE42 /;"	d
AV_CPU_FLAG_SSSE3	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSSE3 /;"	d
AV_CPU_FLAG_SSSE3SLOW	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_SSSE3SLOW /;"	d
AV_CPU_FLAG_VFP	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_VFP /;"	d
AV_CPU_FLAG_VFPV3	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_VFPV3 /;"	d
AV_CPU_FLAG_VFP_VM	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_VFP_VM /;"	d
AV_CPU_FLAG_VSX	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_VSX /;"	d
AV_CPU_FLAG_XOP	lib/ffmpeg/include/libavutil/cpu.h	/^#define AV_CPU_FLAG_XOP /;"	d
AV_CRC_16_ANSI	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_16_ANSI,$/;"	e	enum:__anon6d61168b0103
AV_CRC_16_ANSI_LE	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_16_ANSI_LE,  \/*< reversed bitorder version of AV_CRC_16_ANSI *\/$/;"	e	enum:__anon6d61168b0103
AV_CRC_16_CCITT	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_16_CCITT,$/;"	e	enum:__anon6d61168b0103
AV_CRC_24_IEEE	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_24_IEEE,$/;"	e	enum:__anon6d61168b0103
AV_CRC_32_IEEE	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_32_IEEE,$/;"	e	enum:__anon6d61168b0103
AV_CRC_32_IEEE_LE	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_32_IEEE_LE,  \/*< reversed bitorder version of AV_CRC_32_IEEE *\/$/;"	e	enum:__anon6d61168b0103
AV_CRC_8_ATM	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_8_ATM,$/;"	e	enum:__anon6d61168b0103
AV_CRC_8_EBU	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_8_EBU,$/;"	e	enum:__anon6d61168b0103
AV_CRC_MAX	lib/ffmpeg/include/libavutil/crc.h	/^    AV_CRC_MAX,         \/*< Not part of public API! Do not use outside libavutil. *\/$/;"	e	enum:__anon6d61168b0103
AV_CUDA_USE_PRIMARY_CONTEXT	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^#define AV_CUDA_USE_PRIMARY_CONTEXT /;"	d
AV_DEV_TO_APP_BUFFER_OVERFLOW	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_BUFFER_OVERFLOW = MKBETAG('B','O','F','L'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_BUFFER_READABLE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_BUFFER_READABLE = MKBETAG('B','R','D',' '),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_BUFFER_UNDERFLOW	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_BUFFER_UNDERFLOW = MKBETAG('B','U','F','L'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_BUFFER_WRITABLE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_BUFFER_WRITABLE = MKBETAG('B','W','R',' '),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_CREATE_WINDOW_BUFFER	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_CREATE_WINDOW_BUFFER = MKBETAG('B','C','R','E'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_DESTROY_WINDOW_BUFFER	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_DESTROY_WINDOW_BUFFER = MKBETAG('B','D','E','S'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER = MKBETAG('B','D','I','S'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_MUTE_STATE_CHANGED	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_MUTE_STATE_CHANGED = MKBETAG('C','M','U','T'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_NONE	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_NONE = MKBETAG('N','O','N','E'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER = MKBETAG('B','P','R','E'),$/;"	e	enum:AVDevToAppMessageType
AV_DEV_TO_APP_VOLUME_LEVEL_CHANGED	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AV_DEV_TO_APP_VOLUME_LEVEL_CHANGED = MKBETAG('C','V','O','L'),$/;"	e	enum:AVDevToAppMessageType
AV_DICT_APPEND	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_APPEND /;"	d
AV_DICT_DONT_OVERWRITE	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_DONT_OVERWRITE /;"	d
AV_DICT_DONT_STRDUP_KEY	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_DONT_STRDUP_KEY /;"	d
AV_DICT_DONT_STRDUP_VAL	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_DONT_STRDUP_VAL /;"	d
AV_DICT_IGNORE_SUFFIX	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_IGNORE_SUFFIX /;"	d
AV_DICT_MATCH_CASE	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_MATCH_CASE /;"	d
AV_DICT_MULTIKEY	lib/ffmpeg/include/libavutil/dict.h	/^#define AV_DICT_MULTIKEY /;"	d
AV_DISPOSITION_ATTACHED_PIC	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_ATTACHED_PIC /;"	d
AV_DISPOSITION_CAPTIONS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_CAPTIONS /;"	d
AV_DISPOSITION_CLEAN_EFFECTS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_CLEAN_EFFECTS /;"	d
AV_DISPOSITION_COMMENT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_COMMENT /;"	d
AV_DISPOSITION_DEFAULT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_DEFAULT /;"	d
AV_DISPOSITION_DEPENDENT	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_DEPENDENT /;"	d
AV_DISPOSITION_DESCRIPTIONS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_DESCRIPTIONS /;"	d
AV_DISPOSITION_DUB	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_DUB /;"	d
AV_DISPOSITION_FORCED	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_FORCED /;"	d
AV_DISPOSITION_HEARING_IMPAIRED	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_HEARING_IMPAIRED /;"	d
AV_DISPOSITION_KARAOKE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_KARAOKE /;"	d
AV_DISPOSITION_LYRICS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_LYRICS /;"	d
AV_DISPOSITION_METADATA	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_METADATA /;"	d
AV_DISPOSITION_ORIGINAL	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_ORIGINAL /;"	d
AV_DISPOSITION_STILL_IMAGE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_STILL_IMAGE /;"	d
AV_DISPOSITION_TIMED_THUMBNAILS	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_TIMED_THUMBNAILS /;"	d
AV_DISPOSITION_VISUAL_IMPAIRED	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_DISPOSITION_VISUAL_IMPAIRED /;"	d
AV_DOWNMIX_TYPE_DPLII	lib/ffmpeg/include/libavutil/downmix_info.h	/^    AV_DOWNMIX_TYPE_DPLII,   \/**< Lt\/Rt 2-channel downmix, Dolby Pro Logic II compatible. *\/$/;"	e	enum:AVDownmixType
AV_DOWNMIX_TYPE_LORO	lib/ffmpeg/include/libavutil/downmix_info.h	/^    AV_DOWNMIX_TYPE_LORO,    \/**< Lo\/Ro 2-channel downmix (Stereo). *\/$/;"	e	enum:AVDownmixType
AV_DOWNMIX_TYPE_LTRT	lib/ffmpeg/include/libavutil/downmix_info.h	/^    AV_DOWNMIX_TYPE_LTRT,    \/**< Lt\/Rt 2-channel downmix, Dolby Surround compatible. *\/$/;"	e	enum:AVDownmixType
AV_DOWNMIX_TYPE_NB	lib/ffmpeg/include/libavutil/downmix_info.h	/^    AV_DOWNMIX_TYPE_NB       \/**< Number of downmix types. Not part of ABI. *\/$/;"	e	enum:AVDownmixType
AV_DOWNMIX_TYPE_UNKNOWN	lib/ffmpeg/include/libavutil/downmix_info.h	/^    AV_DOWNMIX_TYPE_UNKNOWN, \/**< Not indicated. *\/$/;"	e	enum:AVDownmixType
AV_DRM_MAX_PLANES	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    AV_DRM_MAX_PLANES = 4$/;"	e	enum:__anonf135e2f90103
AV_EF_AGGRESSIVE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_AGGRESSIVE /;"	d
AV_EF_BITSTREAM	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_BITSTREAM /;"	d
AV_EF_BUFFER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_BUFFER /;"	d
AV_EF_CAREFUL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_CAREFUL /;"	d
AV_EF_COMPLIANT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_COMPLIANT /;"	d
AV_EF_CRCCHECK	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_CRCCHECK /;"	d
AV_EF_EXPLODE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_EXPLODE /;"	d
AV_EF_IGNORE_ERR	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_EF_IGNORE_ERR /;"	d
AV_ERROR_MAX_STRING_SIZE	lib/ffmpeg/include/libavutil/error.h	/^#define AV_ERROR_MAX_STRING_SIZE /;"	d
AV_ESCAPE_FLAG_STRICT	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_ESCAPE_FLAG_STRICT /;"	d
AV_ESCAPE_FLAG_WHITESPACE	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_ESCAPE_FLAG_WHITESPACE /;"	d
AV_ESCAPE_MODE_AUTO	lib/ffmpeg/include/libavutil/avstring.h	/^    AV_ESCAPE_MODE_AUTO,      \/\/\/< Use auto-selected escaping mode.$/;"	e	enum:AVEscapeMode
AV_ESCAPE_MODE_BACKSLASH	lib/ffmpeg/include/libavutil/avstring.h	/^    AV_ESCAPE_MODE_BACKSLASH, \/\/\/< Use backslash escaping.$/;"	e	enum:AVEscapeMode
AV_ESCAPE_MODE_QUOTE	lib/ffmpeg/include/libavutil/avstring.h	/^    AV_ESCAPE_MODE_QUOTE,     \/\/\/< Use single-quote escaping.$/;"	e	enum:AVEscapeMode
AV_FIELD_BB	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AV_FIELD_BB,          \/\/< Bottom coded first, bottom displayed first$/;"	e	enum:AVFieldOrder
AV_FIELD_BT	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AV_FIELD_BT,          \/\/< Bottom coded first, top displayed first$/;"	e	enum:AVFieldOrder
AV_FIELD_PROGRESSIVE	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AV_FIELD_PROGRESSIVE,$/;"	e	enum:AVFieldOrder
AV_FIELD_TB	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AV_FIELD_TB,          \/\/< Top coded first, bottom displayed first$/;"	e	enum:AVFieldOrder
AV_FIELD_TT	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AV_FIELD_TT,          \/\/< Top coded_first, top displayed first$/;"	e	enum:AVFieldOrder
AV_FIELD_UNKNOWN	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AV_FIELD_UNKNOWN,$/;"	e	enum:AVFieldOrder
AV_FOURCC_MAX_STRING_SIZE	lib/ffmpeg/include/libavutil/avutil.h	/^#define AV_FOURCC_MAX_STRING_SIZE /;"	d
AV_FRAME_CROP_UNALIGNED	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_CROP_UNALIGNED     = 1 << 0,$/;"	e	enum:__anon30edeffe0103
AV_FRAME_DATA_A53_CC	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_A53_CC,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_AFD	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_AFD,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_AUDIO_SERVICE_TYPE	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_AUDIO_SERVICE_TYPE,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_CONTENT_LIGHT_LEVEL	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_CONTENT_LIGHT_LEVEL,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_DISPLAYMATRIX	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_DISPLAYMATRIX,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_DOWNMIX_INFO	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_DOWNMIX_INFO,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_DYNAMIC_HDR_PLUS	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_DYNAMIC_HDR_PLUS,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_GOP_TIMECODE	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_GOP_TIMECODE,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_ICC_PROFILE	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_ICC_PROFILE,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_MASTERING_DISPLAY_METADATA	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_MASTERING_DISPLAY_METADATA,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_MATRIXENCODING	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_MATRIXENCODING,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_MOTION_VECTORS	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_MOTION_VECTORS,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_PANSCAN	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_PANSCAN,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_QP_TABLE_DATA	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_QP_TABLE_DATA,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_QP_TABLE_PROPERTIES	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_QP_TABLE_PROPERTIES,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_REGIONS_OF_INTEREST	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_REGIONS_OF_INTEREST,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_REPLAYGAIN	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_REPLAYGAIN,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_S12M_TIMECODE	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_S12M_TIMECODE,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_SKIP_SAMPLES	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_SKIP_SAMPLES,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_SPHERICAL	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_SPHERICAL,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_STEREO3D	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_STEREO3D,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_DATA_VIDEO_ENC_PARAMS	lib/ffmpeg/include/libavutil/frame.h	/^    AV_FRAME_DATA_VIDEO_ENC_PARAMS,$/;"	e	enum:AVFrameSideDataType
AV_FRAME_FILENAME_FLAGS_MULTIPLE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_FRAME_FILENAME_FLAGS_MULTIPLE /;"	d
AV_FRAME_FLAG_CORRUPT	lib/ffmpeg/include/libavutil/frame.h	/^#define AV_FRAME_FLAG_CORRUPT /;"	d
AV_FRAME_FLAG_DISCARD	lib/ffmpeg/include/libavutil/frame.h	/^#define AV_FRAME_FLAG_DISCARD /;"	d
AV_GCC_VERSION_AT_LEAST	lib/ffmpeg/include/libavutil/attributes.h	/^#    define AV_GCC_VERSION_AT_LEAST(/;"	d
AV_GCC_VERSION_AT_MOST	lib/ffmpeg/include/libavutil/attributes.h	/^#    define AV_GCC_VERSION_AT_MOST(/;"	d
AV_GET_BUFFER_FLAG_REF	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_GET_BUFFER_FLAG_REF /;"	d
AV_HASH_MAX_SIZE	lib/ffmpeg/include/libavutil/hash.h	/^#define AV_HASH_MAX_SIZE /;"	d
AV_HAS_BUILTIN	lib/ffmpeg/include/libavutil/attributes.h	/^#    define AV_HAS_BUILTIN(/;"	d
AV_HAVE_BIGENDIAN	lib/ffmpeg/include/libavutil/avconfig.h	/^#define AV_HAVE_BIGENDIAN /;"	d
AV_HAVE_FAST_UNALIGNED	lib/ffmpeg/include/libavutil/avconfig.h	/^#define AV_HAVE_FAST_UNALIGNED /;"	d
AV_HDR_PLUS_OVERLAP_PROCESS_LAYERING	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AV_HDR_PLUS_OVERLAP_PROCESS_LAYERING = 1,$/;"	e	enum:AVHDRPlusOverlapProcessOption
AV_HDR_PLUS_OVERLAP_PROCESS_WEIGHTED_AVERAGING	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AV_HDR_PLUS_OVERLAP_PROCESS_WEIGHTED_AVERAGING = 0,$/;"	e	enum:AVHDRPlusOverlapProcessOption
AV_HMAC_MD5	lib/ffmpeg/include/libavutil/hmac.h	/^    AV_HMAC_MD5,$/;"	e	enum:AVHMACType
AV_HMAC_SHA1	lib/ffmpeg/include/libavutil/hmac.h	/^    AV_HMAC_SHA1,$/;"	e	enum:AVHMACType
AV_HMAC_SHA224	lib/ffmpeg/include/libavutil/hmac.h	/^    AV_HMAC_SHA224,$/;"	e	enum:AVHMACType
AV_HMAC_SHA256	lib/ffmpeg/include/libavutil/hmac.h	/^    AV_HMAC_SHA256,$/;"	e	enum:AVHMACType
AV_HMAC_SHA384	lib/ffmpeg/include/libavutil/hmac.h	/^    AV_HMAC_SHA384,$/;"	e	enum:AVHMACType
AV_HMAC_SHA512	lib/ffmpeg/include/libavutil/hmac.h	/^    AV_HMAC_SHA512,$/;"	e	enum:AVHMACType
AV_HWACCEL_CODEC_CAP_EXPERIMENTAL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_HWACCEL_CODEC_CAP_EXPERIMENTAL /;"	d
AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH /;"	d
AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH /;"	d
AV_HWACCEL_FLAG_IGNORE_LEVEL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_HWACCEL_FLAG_IGNORE_LEVEL /;"	d
AV_HWDEVICE_TYPE_CUDA	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_CUDA,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_D3D11VA	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_D3D11VA,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_DRM	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_DRM,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_DXVA2	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_DXVA2,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_MEDIACODEC	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_MEDIACODEC,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_NONE	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_NONE,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_OPENCL	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_OPENCL,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_QSV	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_QSV,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_VAAPI	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_VAAPI,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_VDPAU	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_VDPAU,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_VIDEOTOOLBOX	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_VIDEOTOOLBOX,$/;"	e	enum:AVHWDeviceType
AV_HWDEVICE_TYPE_VULKAN	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWDEVICE_TYPE_VULKAN,$/;"	e	enum:AVHWDeviceType
AV_HWFRAME_MAP_DIRECT	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWFRAME_MAP_DIRECT    = 1 << 3,$/;"	e	enum:__anon0ecf41770103
AV_HWFRAME_MAP_OVERWRITE	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWFRAME_MAP_OVERWRITE = 1 << 2,$/;"	e	enum:__anon0ecf41770103
AV_HWFRAME_MAP_READ	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWFRAME_MAP_READ      = 1 << 0,$/;"	e	enum:__anon0ecf41770103
AV_HWFRAME_MAP_WRITE	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWFRAME_MAP_WRITE     = 1 << 1,$/;"	e	enum:__anon0ecf41770103
AV_HWFRAME_TRANSFER_DIRECTION_FROM	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWFRAME_TRANSFER_DIRECTION_FROM,$/;"	e	enum:AVHWFrameTransferDirection
AV_HWFRAME_TRANSFER_DIRECTION_TO	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AV_HWFRAME_TRANSFER_DIRECTION_TO,$/;"	e	enum:AVHWFrameTransferDirection
AV_INPUT_BUFFER_MIN_SIZE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_INPUT_BUFFER_MIN_SIZE /;"	d
AV_INPUT_BUFFER_PADDING_SIZE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_INPUT_BUFFER_PADDING_SIZE /;"	d
AV_IS_INPUT_DEVICE	lib/ffmpeg/include/libavutil/log.h	/^#define AV_IS_INPUT_DEVICE(/;"	d
AV_IS_OUTPUT_DEVICE	lib/ffmpeg/include/libavutil/log.h	/^#define AV_IS_OUTPUT_DEVICE(/;"	d
AV_LE2NE16C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_LE2NE16C(/;"	d
AV_LE2NE32C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_LE2NE32C(/;"	d
AV_LE2NE64C	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_LE2NE64C(/;"	d
AV_LE2NEC	lib/ffmpeg/include/libavutil/bswap.h	/^#define AV_LE2NEC(/;"	d
AV_LOCK_CREATE	lib/ffmpeg/include/libavcodec/avcodec.h	/^  AV_LOCK_CREATE,  \/\/\/< Create a mutex$/;"	e	enum:AVLockOp
AV_LOCK_DESTROY	lib/ffmpeg/include/libavcodec/avcodec.h	/^  AV_LOCK_DESTROY, \/\/\/< Free mutex resources$/;"	e	enum:AVLockOp
AV_LOCK_OBTAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^  AV_LOCK_OBTAIN,  \/\/\/< Lock the mutex$/;"	e	enum:AVLockOp
AV_LOCK_RELEASE	lib/ffmpeg/include/libavcodec/avcodec.h	/^  AV_LOCK_RELEASE, \/\/\/< Unlock the mutex$/;"	e	enum:AVLockOp
AV_LOG_C	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_C(/;"	d
AV_LOG_DEBUG	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_DEBUG /;"	d
AV_LOG_ERROR	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_ERROR /;"	d
AV_LOG_FATAL	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_FATAL /;"	d
AV_LOG_INFO	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_INFO /;"	d
AV_LOG_MAX_OFFSET	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_MAX_OFFSET /;"	d
AV_LOG_PANIC	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_PANIC /;"	d
AV_LOG_PRINT_LEVEL	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_PRINT_LEVEL /;"	d
AV_LOG_QUIET	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_QUIET /;"	d
AV_LOG_SKIP_REPEATED	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_SKIP_REPEATED /;"	d
AV_LOG_TRACE	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_TRACE /;"	d
AV_LOG_VERBOSE	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_VERBOSE /;"	d
AV_LOG_WARNING	lib/ffmpeg/include/libavutil/log.h	/^#define AV_LOG_WARNING /;"	d
AV_LZO_ERROR	lib/ffmpeg/include/libavutil/lzo.h	/^#define AV_LZO_ERROR /;"	d
AV_LZO_INPUT_DEPLETED	lib/ffmpeg/include/libavutil/lzo.h	/^#define AV_LZO_INPUT_DEPLETED /;"	d
AV_LZO_INPUT_PADDING	lib/ffmpeg/include/libavutil/lzo.h	/^#define AV_LZO_INPUT_PADDING /;"	d
AV_LZO_INVALID_BACKPTR	lib/ffmpeg/include/libavutil/lzo.h	/^#define AV_LZO_INVALID_BACKPTR /;"	d
AV_LZO_OUTPUT_FULL	lib/ffmpeg/include/libavutil/lzo.h	/^#define AV_LZO_OUTPUT_FULL /;"	d
AV_LZO_OUTPUT_PADDING	lib/ffmpeg/include/libavutil/lzo.h	/^#define AV_LZO_OUTPUT_PADDING /;"	d
AV_MATRIX_ENCODING_DOLBY	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_DOLBY,$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_DOLBYEX	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_DOLBYEX,$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_DOLBYHEADPHONE	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_DOLBYHEADPHONE,$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_DPLII	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_DPLII,$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_DPLIIX	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_DPLIIX,$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_DPLIIZ	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_DPLIIZ,$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_NB	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_NB$/;"	e	enum:AVMatrixEncoding
AV_MATRIX_ENCODING_NONE	lib/ffmpeg/include/libavutil/channel_layout.h	/^    AV_MATRIX_ENCODING_NONE,$/;"	e	enum:AVMatrixEncoding
AV_MIX_COEFF_TYPE_FLT	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_MIX_COEFF_TYPE_FLT,  \/** floating-point                              *\/$/;"	e	enum:AVMixCoeffType
AV_MIX_COEFF_TYPE_NB	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_MIX_COEFF_TYPE_NB,   \/** Number of coeff types. Not part of ABI      *\/$/;"	e	enum:AVMixCoeffType
AV_MIX_COEFF_TYPE_Q15	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_MIX_COEFF_TYPE_Q15,  \/** 32-bit 17.15 fixed-point                    *\/$/;"	e	enum:AVMixCoeffType
AV_MIX_COEFF_TYPE_Q8	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_MIX_COEFF_TYPE_Q8,   \/** 16-bit 8.8 fixed-point                      *\/$/;"	e	enum:AVMixCoeffType
AV_NE	lib/ffmpeg/include/libavutil/common.h	/^#   define AV_NE(/;"	d
AV_NOPTS_VALUE	lib/ffmpeg/include/libavutil/avutil.h	/^#define AV_NOPTS_VALUE /;"	d
AV_NOWARN_DEPRECATED	lib/ffmpeg/include/libavutil/attributes.h	/^#    define AV_NOWARN_DEPRECATED(/;"	d
AV_NUM_DATA_POINTERS	lib/ffmpeg/include/libavutil/frame.h	/^#define AV_NUM_DATA_POINTERS /;"	d
AV_OPT_ALLOW_NULL	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_ALLOW_NULL /;"	d
AV_OPT_FLAG_AUDIO_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_AUDIO_PARAM /;"	d
AV_OPT_FLAG_BSF_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_BSF_PARAM /;"	d
AV_OPT_FLAG_CHILD_CONSTS	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_CHILD_CONSTS /;"	d
AV_OPT_FLAG_DECODING_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_DECODING_PARAM /;"	d
AV_OPT_FLAG_DEPRECATED	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_DEPRECATED /;"	d
AV_OPT_FLAG_ENCODING_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_ENCODING_PARAM /;"	d
AV_OPT_FLAG_EXPORT	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_EXPORT /;"	d
AV_OPT_FLAG_FILTERING_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_FILTERING_PARAM /;"	d
AV_OPT_FLAG_IMPLICIT_KEY	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_FLAG_IMPLICIT_KEY = 1,$/;"	e	enum:__anon6e396c260203
AV_OPT_FLAG_READONLY	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_READONLY /;"	d
AV_OPT_FLAG_RUNTIME_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_RUNTIME_PARAM /;"	d
AV_OPT_FLAG_SUBTITLE_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_SUBTITLE_PARAM /;"	d
AV_OPT_FLAG_VIDEO_PARAM	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_FLAG_VIDEO_PARAM /;"	d
AV_OPT_MULTI_COMPONENT_RANGE	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_MULTI_COMPONENT_RANGE /;"	d
AV_OPT_SEARCH_CHILDREN	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_SEARCH_CHILDREN /;"	d
AV_OPT_SEARCH_FAKE_OBJ	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_SEARCH_FAKE_OBJ /;"	d
AV_OPT_SERIALIZE_OPT_FLAGS_EXACT	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_SERIALIZE_OPT_FLAGS_EXACT /;"	d
AV_OPT_SERIALIZE_SKIP_DEFAULTS	lib/ffmpeg/include/libavutil/opt.h	/^#define AV_OPT_SERIALIZE_SKIP_DEFAULTS /;"	d
AV_OPT_TYPE_BINARY	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_BINARY,  \/\/\/< offset must point to a pointer immediately followed by an int f/;"	e	enum:AVOptionType
AV_OPT_TYPE_BOOL	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_BOOL,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_CHANNEL_LAYOUT	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_CHANNEL_LAYOUT,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_COLOR	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_COLOR,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_CONST	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_CONST,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_DICT	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_DICT,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_DOUBLE	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_DOUBLE,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_DURATION	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_DURATION,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_FLAGS	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_FLAGS,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_FLOAT	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_FLOAT,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_IMAGE_SIZE	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_IMAGE_SIZE, \/\/\/< offset must point to two consecutive integers$/;"	e	enum:AVOptionType
AV_OPT_TYPE_INT	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_INT,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_INT64	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_INT64,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_PIXEL_FMT	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_PIXEL_FMT,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_RATIONAL	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_RATIONAL,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_SAMPLE_FMT	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_SAMPLE_FMT,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_STRING	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_STRING,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_UINT64	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_UINT64,$/;"	e	enum:AVOptionType
AV_OPT_TYPE_VIDEO_RATE	lib/ffmpeg/include/libavutil/opt.h	/^    AV_OPT_TYPE_VIDEO_RATE, \/\/\/< offset must point to AVRational$/;"	e	enum:AVOptionType
AV_PARSER_PTS_NB	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_PARSER_PTS_NB /;"	d
AV_PICTURE_STRUCTURE_BOTTOM_FIELD	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_PICTURE_STRUCTURE_BOTTOM_FIELD, \/\/< coded as bottom field$/;"	e	enum:AVPictureStructure
AV_PICTURE_STRUCTURE_FRAME	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_PICTURE_STRUCTURE_FRAME,        \/\/< coded as frame$/;"	e	enum:AVPictureStructure
AV_PICTURE_STRUCTURE_TOP_FIELD	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_PICTURE_STRUCTURE_TOP_FIELD,    \/\/< coded as top field$/;"	e	enum:AVPictureStructure
AV_PICTURE_STRUCTURE_UNKNOWN	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AV_PICTURE_STRUCTURE_UNKNOWN,      \/\/< unknown$/;"	e	enum:AVPictureStructure
AV_PICTURE_TYPE_B	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_B,     \/\/\/< Bi-dir predicted$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_BI	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_BI,    \/\/\/< BI type$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_I	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_I,     \/\/\/< Intra$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_NONE	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_NONE = 0, \/\/\/< Undefined$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_P	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_P,     \/\/\/< Predicted$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_S	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_S,     \/\/\/< S(GMC)-VOP MPEG-4$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_SI	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_SI,    \/\/\/< Switching Intra$/;"	e	enum:AVPictureType
AV_PICTURE_TYPE_SP	lib/ffmpeg/include/libavutil/avutil.h	/^    AV_PICTURE_TYPE_SP,    \/\/\/< Switching Predicted$/;"	e	enum:AVPictureType
AV_PIX_FMT_0BGR	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_0BGR,        \/\/\/< packed BGR 8:8:8, 32bpp, XBGRXBGR...   X=unused\/undefined$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_0BGR32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_0BGR32 /;"	d
AV_PIX_FMT_0RGB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_0RGB,        \/\/\/< packed RGB 8:8:8, 32bpp, XRGBXRGB...   X=unused\/undefined$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_0RGB32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_0RGB32 /;"	d
AV_PIX_FMT_ABGR	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_ABGR,      \/\/\/< packed ABGR 8:8:8:8, 32bpp, ABGRABGR...$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_ARGB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_ARGB,      \/\/\/< packed ARGB 8:8:8:8, 32bpp, ARGBARGB...$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_AYUV64	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_AYUV64 /;"	d
AV_PIX_FMT_AYUV64BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_AYUV64BE,    \/\/\/< packed AYUV 4:4:4,64bpp (1 Cr & Cb sample per 1x1 Y & A samp/;"	e	enum:AVPixelFormat
AV_PIX_FMT_AYUV64LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_AYUV64LE,    \/\/\/< packed AYUV 4:4:4,64bpp (1 Cr & Cb sample per 1x1 Y & A samp/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_BGGR16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BAYER_BGGR16 /;"	d
AV_PIX_FMT_BAYER_BGGR16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_BGGR16BE, \/\/\/< bayer, BGBG..(odd line), GRGR..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_BGGR16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_BGGR16LE, \/\/\/< bayer, BGBG..(odd line), GRGR..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_BGGR8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_BGGR8,    \/\/\/< bayer, BGBG..(odd line), GRGR..(even line), 8-bit samples$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_GBRG16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BAYER_GBRG16 /;"	d
AV_PIX_FMT_BAYER_GBRG16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_GBRG16BE, \/\/\/< bayer, GBGB..(odd line), RGRG..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_GBRG16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_GBRG16LE, \/\/\/< bayer, GBGB..(odd line), RGRG..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_GBRG8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_GBRG8,    \/\/\/< bayer, GBGB..(odd line), RGRG..(even line), 8-bit samples$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_GRBG16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BAYER_GRBG16 /;"	d
AV_PIX_FMT_BAYER_GRBG16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_GRBG16BE, \/\/\/< bayer, GRGR..(odd line), BGBG..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_GRBG16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_GRBG16LE, \/\/\/< bayer, GRGR..(odd line), BGBG..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_GRBG8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_GRBG8,    \/\/\/< bayer, GRGR..(odd line), BGBG..(even line), 8-bit samples$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_RGGB16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BAYER_RGGB16 /;"	d
AV_PIX_FMT_BAYER_RGGB16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_RGGB16BE, \/\/\/< bayer, RGRG..(odd line), GBGB..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_RGGB16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_RGGB16LE, \/\/\/< bayer, RGRG..(odd line), GBGB..(even line), 16-bit sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BAYER_RGGB8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BAYER_RGGB8,    \/\/\/< bayer, RGRG..(odd line), GBGB..(even line), 8-bit samples$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR0	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR0,        \/\/\/< packed BGR 8:8:8, 32bpp, BGRXBGRX...   X=unused\/undefined$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR24	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR24,     \/\/\/< packed RGB 8:8:8, 24bpp, BGRBGR...$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGR32 /;"	d
AV_PIX_FMT_BGR32_1	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGR32_1 /;"	d
AV_PIX_FMT_BGR4	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR4,      \/\/\/< packed RGB 1:2:1 bitstream,  4bpp, (msb)1B 2G 1R(lsb), a byte /;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR444	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGR444 /;"	d
AV_PIX_FMT_BGR444BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR444BE,  \/\/\/< packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), big-endian,   /;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR444LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR444LE,  \/\/\/< packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), little-endian,/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR48	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGR48 /;"	d
AV_PIX_FMT_BGR48BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR48BE,   \/\/\/< packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value fo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR48LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR48LE,   \/\/\/< packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value fo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR4_BYTE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR4_BYTE, \/\/\/< packed RGB 1:2:1,  8bpp, (msb)1B 2G 1R(lsb)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR555	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGR555 /;"	d
AV_PIX_FMT_BGR555BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR555BE,  \/\/\/< packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), big-endian   ,/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR555LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR555LE,  \/\/\/< packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), little-endian,/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR565	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGR565 /;"	d
AV_PIX_FMT_BGR565BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR565BE,  \/\/\/< packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR565LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR565LE,  \/\/\/< packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGR8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGR8,      \/\/\/< packed RGB 3:3:2,  8bpp, (msb)2B 3G 3R(lsb)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGRA	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGRA,      \/\/\/< packed BGRA 8:8:8:8, 32bpp, BGRABGRA...$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGRA64	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_BGRA64 /;"	d
AV_PIX_FMT_BGRA64BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGRA64BE,     \/\/\/< packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-b/;"	e	enum:AVPixelFormat
AV_PIX_FMT_BGRA64LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_BGRA64LE,     \/\/\/< packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-b/;"	e	enum:AVPixelFormat
AV_PIX_FMT_CUDA	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_CUDA,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_D3D11	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_D3D11,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_D3D11VA_VLD	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_D3D11VA_VLD,  \/\/\/< HW decoding through Direct3D11 via old API, Picture.data[3]/;"	e	enum:AVPixelFormat
AV_PIX_FMT_DRM_PRIME	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_DRM_PRIME,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_DXVA2_VLD	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_DXVA2_VLD,    \/\/\/< HW decoding through DXVA2, Picture.data[3] contains a LPDIR/;"	e	enum:AVPixelFormat
AV_PIX_FMT_FLAG_ALPHA	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_ALPHA /;"	d
AV_PIX_FMT_FLAG_BAYER	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_BAYER /;"	d
AV_PIX_FMT_FLAG_BE	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_BE /;"	d
AV_PIX_FMT_FLAG_BITSTREAM	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_BITSTREAM /;"	d
AV_PIX_FMT_FLAG_FLOAT	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_FLOAT /;"	d
AV_PIX_FMT_FLAG_HWACCEL	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_HWACCEL /;"	d
AV_PIX_FMT_FLAG_PAL	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_PAL /;"	d
AV_PIX_FMT_FLAG_PLANAR	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_PLANAR /;"	d
AV_PIX_FMT_FLAG_PSEUDOPAL	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_PSEUDOPAL /;"	d
AV_PIX_FMT_FLAG_RGB	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define AV_PIX_FMT_FLAG_RGB /;"	d
AV_PIX_FMT_GBR24P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBR24P = AV_PIX_FMT_GBRP, \/\/ alias for #AV_PIX_FMT_GBRP$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP,        \/\/\/< planar GBRA 4:4:4:4 32bpp$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRAP10 /;"	d
AV_PIX_FMT_GBRAP10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP10BE,  \/\/\/< planar GBR 4:4:4:4 40bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP10LE,  \/\/\/< planar GBR 4:4:4:4 40bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRAP12 /;"	d
AV_PIX_FMT_GBRAP12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP12BE,  \/\/\/< planar GBR 4:4:4:4 48bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP12LE,  \/\/\/< planar GBR 4:4:4:4 48bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRAP16 /;"	d
AV_PIX_FMT_GBRAP16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP16BE,    \/\/\/< planar GBRA 4:4:4:4 64bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAP16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAP16LE,    \/\/\/< planar GBRA 4:4:4:4 64bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAPF32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRAPF32 /;"	d
AV_PIX_FMT_GBRAPF32BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAPF32BE, \/\/\/< IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, big-en/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRAPF32LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRAPF32LE, \/\/\/< IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, little/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP,      \/\/\/< planar GBR 4:4:4 24bpp$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRP10 /;"	d
AV_PIX_FMT_GBRP10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP10BE,  \/\/\/< planar GBR 4:4:4 30bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP10LE,  \/\/\/< planar GBR 4:4:4 30bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRP12 /;"	d
AV_PIX_FMT_GBRP12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP12BE,    \/\/\/< planar GBR 4:4:4 36bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP12LE,    \/\/\/< planar GBR 4:4:4 36bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP14	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRP14 /;"	d
AV_PIX_FMT_GBRP14BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP14BE,    \/\/\/< planar GBR 4:4:4 42bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP14LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP14LE,    \/\/\/< planar GBR 4:4:4 42bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRP16 /;"	d
AV_PIX_FMT_GBRP16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP16BE,  \/\/\/< planar GBR 4:4:4 48bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP16LE,  \/\/\/< planar GBR 4:4:4 48bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRP9 /;"	d
AV_PIX_FMT_GBRP9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP9BE,   \/\/\/< planar GBR 4:4:4 27bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRP9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRP9LE,   \/\/\/< planar GBR 4:4:4 27bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRPF32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GBRPF32 /;"	d
AV_PIX_FMT_GBRPF32BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRPF32BE,  \/\/\/< IEEE-754 single precision planar GBR 4:4:4,     96bpp, big-en/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GBRPF32LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GBRPF32LE,  \/\/\/< IEEE-754 single precision planar GBR 4:4:4,     96bpp, little/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GRAY10 /;"	d
AV_PIX_FMT_GRAY10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY10BE,   \/\/\/<        Y        , 10bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY10LE,   \/\/\/<        Y        , 10bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GRAY12 /;"	d
AV_PIX_FMT_GRAY12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY12BE,   \/\/\/<        Y        , 12bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY12LE,   \/\/\/<        Y        , 12bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY14	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GRAY14 /;"	d
AV_PIX_FMT_GRAY14BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY14BE,   \/\/\/<        Y        , 14bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY14LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY14LE,   \/\/\/<        Y        , 14bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GRAY16 /;"	d
AV_PIX_FMT_GRAY16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY16BE,  \/\/\/<        Y        , 16bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY16LE,  \/\/\/<        Y        , 16bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY8,     \/\/\/<        Y        ,  8bpp$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY8A	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY8A= AV_PIX_FMT_YA8, \/\/\/< alias for AV_PIX_FMT_YA8$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GRAY9 /;"	d
AV_PIX_FMT_GRAY9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY9BE,   \/\/\/<        Y        , 9bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAY9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAY9LE,   \/\/\/<        Y        , 9bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAYF32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_GRAYF32 /;"	d
AV_PIX_FMT_GRAYF32BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAYF32BE,  \/\/\/< IEEE-754 single precision Y, 32bpp, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_GRAYF32LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_GRAYF32LE,  \/\/\/< IEEE-754 single precision Y, 32bpp, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_MEDIACODEC	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_MEDIACODEC, \/\/\/< hardware decoding through MediaCodec$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_MMAL	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_MMAL,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_MONOBLACK	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_MONOBLACK, \/\/\/<        Y        ,  1bpp, 0 is black, 1 is white, in each byte /;"	e	enum:AVPixelFormat
AV_PIX_FMT_MONOWHITE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_MONOWHITE, \/\/\/<        Y        ,  1bpp, 0 is white, 1 is black, in each byte /;"	e	enum:AVPixelFormat
AV_PIX_FMT_NB	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NB         \/\/\/< number of pixel formats, DO NOT USE THIS if you want to link w/;"	e	enum:AVPixelFormat
AV_PIX_FMT_NE	lib/ffmpeg/include/libavutil/pixfmt.h	/^#   define AV_PIX_FMT_NE(/;"	d
AV_PIX_FMT_NONE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NONE = -1,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV12	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV12,      \/\/\/< planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV /;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV16	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV16,         \/\/\/< interleaved chroma YUV 4:2:2, 16bpp, (1 Cr & Cb sample per /;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV20	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_NV20 /;"	d
AV_PIX_FMT_NV20BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV20BE,       \/\/\/< interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per /;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV20LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV20LE,       \/\/\/< interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per /;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV21	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV21,      \/\/\/< as above, but U and V bytes are swapped$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV24	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV24,      \/\/\/< planar YUV 4:4:4, 24bpp, 1 plane for Y and 1 plane for the UV /;"	e	enum:AVPixelFormat
AV_PIX_FMT_NV42	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_NV42,      \/\/\/< as above, but U and V bytes are swapped$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_OPENCL	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_OPENCL,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_P010	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_P010 /;"	d
AV_PIX_FMT_P010BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_P010BE, \/\/\/< like NV12, with 10bpp per component, data in the high bits, zeros/;"	e	enum:AVPixelFormat
AV_PIX_FMT_P010LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_P010LE, \/\/\/< like NV12, with 10bpp per component, data in the high bits, zeros/;"	e	enum:AVPixelFormat
AV_PIX_FMT_P016	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_P016 /;"	d
AV_PIX_FMT_P016BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_P016BE, \/\/\/< like NV12, with 16bpp per component, big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_P016LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_P016LE, \/\/\/< like NV12, with 16bpp per component, little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_PAL8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_PAL8,      \/\/\/< 8 bits with AV_PIX_FMT_RGB32 palette$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_QSV	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_QSV,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB0	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB0,        \/\/\/< packed RGB 8:8:8, 32bpp, RGBXRGBX...   X=unused\/undefined$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB24	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB24,     \/\/\/< packed RGB 8:8:8, 24bpp, RGBRGB...$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB32	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGB32 /;"	d
AV_PIX_FMT_RGB32_1	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGB32_1 /;"	d
AV_PIX_FMT_RGB4	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB4,      \/\/\/< packed RGB 1:2:1 bitstream,  4bpp, (msb)1R 2G 1B(lsb), a byte /;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB444	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGB444 /;"	d
AV_PIX_FMT_RGB444BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB444BE,  \/\/\/< packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), big-endian,   /;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB444LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB444LE,  \/\/\/< packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), little-endian,/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB48	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGB48 /;"	d
AV_PIX_FMT_RGB48BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB48BE,   \/\/\/< packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value fo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB48LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB48LE,   \/\/\/< packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value fo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB4_BYTE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB4_BYTE, \/\/\/< packed RGB 1:2:1,  8bpp, (msb)1R 2G 1B(lsb)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB555	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGB555 /;"	d
AV_PIX_FMT_RGB555BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB555BE,  \/\/\/< packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian   ,/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB555LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB555LE,  \/\/\/< packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian,/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB565	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGB565 /;"	d
AV_PIX_FMT_RGB565BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB565BE,  \/\/\/< packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB565LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB565LE,  \/\/\/< packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGB8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGB8,      \/\/\/< packed RGB 3:3:2,  8bpp, (msb)2R 3G 3B(lsb)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGBA	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGBA,      \/\/\/< packed RGBA 8:8:8:8, 32bpp, RGBARGBA...$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGBA64	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_RGBA64 /;"	d
AV_PIX_FMT_RGBA64BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGBA64BE,     \/\/\/< packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-b/;"	e	enum:AVPixelFormat
AV_PIX_FMT_RGBA64LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_RGBA64LE,     \/\/\/< packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-b/;"	e	enum:AVPixelFormat
AV_PIX_FMT_UYVY422	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_UYVY422,   \/\/\/< packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_UYYVYY411	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_UYYVYY411, \/\/\/< packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VAAPI	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VAAPI = AV_PIX_FMT_VAAPI_VLD,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VAAPI_IDCT	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VAAPI_IDCT, \/\/\/< HW acceleration through VA API at IDCT entry-point, Picture.d/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VAAPI_MOCO	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VAAPI_MOCO, \/\/\/< HW acceleration through VA API at motion compensation entry-p/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VAAPI_VLD	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VAAPI_VLD,  \/\/\/< HW decoding through VA API, Picture.data[3] contains a VASurf/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VDPAU	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VDPAU,     \/\/\/< HW acceleration through VDPAU, Picture.data[3] contains a VdpV/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VIDEOTOOLBOX	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VIDEOTOOLBOX, \/\/\/< hardware decoding through Videotoolbox$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_VULKAN	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_VULKAN,$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_XVMC	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_XVMC,\/\/\/< XVideo Motion Acceleration via common packet passing$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_XYZ12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_XYZ12 /;"	d
AV_PIX_FMT_XYZ12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_XYZ12BE,      \/\/\/< packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-/;"	e	enum:AVPixelFormat
AV_PIX_FMT_XYZ12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_XYZ12LE,      \/\/\/< packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-/;"	e	enum:AVPixelFormat
AV_PIX_FMT_Y210	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_Y210 /;"	d
AV_PIX_FMT_Y210BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_Y210BE,    \/\/\/< packed YUV 4:2:2 like YUYV422, 20bpp, data in the high bits, b/;"	e	enum:AVPixelFormat
AV_PIX_FMT_Y210LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_Y210LE,    \/\/\/< packed YUV 4:2:2 like YUYV422, 20bpp, data in the high bits, l/;"	e	enum:AVPixelFormat
AV_PIX_FMT_Y400A	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_Y400A = AV_PIX_FMT_YA8, \/\/\/< alias for AV_PIX_FMT_YA8$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YA16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YA16 /;"	d
AV_PIX_FMT_YA16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YA16BE,       \/\/\/< 16 bits gray, 16 bits alpha (big-endian)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YA16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YA16LE,       \/\/\/< 16 bits gray, 16 bits alpha (little-endian)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YA8	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YA8,       \/\/\/< 8 bits gray, 8 bits alpha$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV410P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV410P,   \/\/\/< planar YUV 4:1:0,  9bpp, (1 Cr & Cb sample per 4x4 Y samples)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV411P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV411P,   \/\/\/< planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P,   \/\/\/< planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV420P10 /;"	d
AV_PIX_FMT_YUV420P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P10BE,\/\/\/< planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P10LE,\/\/\/< planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV420P12 /;"	d
AV_PIX_FMT_YUV420P12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P12BE, \/\/\/< planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P12LE, \/\/\/< planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P14	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV420P14 /;"	d
AV_PIX_FMT_YUV420P14BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P14BE, \/\/\/< planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P14LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P14LE, \/\/\/< planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV420P16 /;"	d
AV_PIX_FMT_YUV420P16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P16BE,  \/\/\/< planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P16LE,  \/\/\/< planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV420P9 /;"	d
AV_PIX_FMT_YUV420P9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P9BE, \/\/\/< planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV420P9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV420P9LE, \/\/\/< planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P,   \/\/\/< planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV422P10 /;"	d
AV_PIX_FMT_YUV422P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P10BE,\/\/\/< planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P10LE,\/\/\/< planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV422P12 /;"	d
AV_PIX_FMT_YUV422P12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P12BE, \/\/\/< planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P12LE, \/\/\/< planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P14	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV422P14 /;"	d
AV_PIX_FMT_YUV422P14BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P14BE, \/\/\/< planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P14LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P14LE, \/\/\/< planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV422P16 /;"	d
AV_PIX_FMT_YUV422P16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P16BE,  \/\/\/< planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P16LE,  \/\/\/< planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV422P9 /;"	d
AV_PIX_FMT_YUV422P9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P9BE, \/\/\/< planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV422P9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV422P9LE, \/\/\/< planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV440P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV440P,   \/\/\/< planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV440P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV440P10 /;"	d
AV_PIX_FMT_YUV440P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV440P10BE, \/\/\/< planar YUV 4:4:0,20bpp, (1 Cr & Cb sample per 1x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV440P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV440P10LE, \/\/\/< planar YUV 4:4:0,20bpp, (1 Cr & Cb sample per 1x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV440P12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV440P12 /;"	d
AV_PIX_FMT_YUV440P12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV440P12BE, \/\/\/< planar YUV 4:4:0,24bpp, (1 Cr & Cb sample per 1x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV440P12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV440P12LE, \/\/\/< planar YUV 4:4:0,24bpp, (1 Cr & Cb sample per 1x2 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P,   \/\/\/< planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples)$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV444P10 /;"	d
AV_PIX_FMT_YUV444P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P10BE,\/\/\/< planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P10LE,\/\/\/< planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV444P12 /;"	d
AV_PIX_FMT_YUV444P12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P12BE, \/\/\/< planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P12LE, \/\/\/< planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P14	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV444P14 /;"	d
AV_PIX_FMT_YUV444P14BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P14BE, \/\/\/< planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P14LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P14LE, \/\/\/< planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV444P16 /;"	d
AV_PIX_FMT_YUV444P16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P16BE,  \/\/\/< planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P16LE,  \/\/\/< planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUV444P9 /;"	d
AV_PIX_FMT_YUV444P9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P9BE, \/\/\/< planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUV444P9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUV444P9LE, \/\/\/< planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples)/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P,  \/\/\/< planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A sampl/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA420P10 /;"	d
AV_PIX_FMT_YUVA420P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P10BE, \/\/\/< planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P10LE, \/\/\/< planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA420P16 /;"	d
AV_PIX_FMT_YUVA420P16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P16BE, \/\/\/< planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P16LE, \/\/\/< planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA420P9 /;"	d
AV_PIX_FMT_YUVA420P9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P9BE,  \/\/\/< planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A s/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA420P9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA420P9LE,  \/\/\/< planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A s/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P,  \/\/\/< planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA422P10 /;"	d
AV_PIX_FMT_YUVA422P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P10BE, \/\/\/< planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P10LE, \/\/\/< planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA422P12 /;"	d
AV_PIX_FMT_YUVA422P12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P12BE, \/\/\/< planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P12LE, \/\/\/< planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA422P16 /;"	d
AV_PIX_FMT_YUVA422P16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P16BE, \/\/\/< planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P16LE, \/\/\/< planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA422P9 /;"	d
AV_PIX_FMT_YUVA422P9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P9BE,  \/\/\/< planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA422P9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA422P9LE,  \/\/\/< planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P,  \/\/\/< planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A sample/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P10	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA444P10 /;"	d
AV_PIX_FMT_YUVA444P10BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P10BE, \/\/\/< planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P10LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P10LE, \/\/\/< planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P12	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA444P12 /;"	d
AV_PIX_FMT_YUVA444P12BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P12BE, \/\/\/< planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P12LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P12LE, \/\/\/< planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P16	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA444P16 /;"	d
AV_PIX_FMT_YUVA444P16BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P16BE, \/\/\/< planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P16LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P16LE, \/\/\/< planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P9	lib/ffmpeg/include/libavutil/pixfmt.h	/^#define AV_PIX_FMT_YUVA444P9 /;"	d
AV_PIX_FMT_YUVA444P9BE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P9BE,  \/\/\/< planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVA444P9LE	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVA444P9LE,  \/\/\/< planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A sam/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVJ411P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVJ411P,    \/\/\/< planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVJ420P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVJ420P,  \/\/\/< planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVJ422P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVJ422P,  \/\/\/< planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVJ440P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVJ440P,  \/\/\/< planar YUV 4:4:0 full scale (JPEG), deprecated in favor of AV_/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUVJ444P	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUVJ444P,  \/\/\/< planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favo/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YUYV422	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YUYV422,   \/\/\/< packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr$/;"	e	enum:AVPixelFormat
AV_PIX_FMT_YVYU422	lib/ffmpeg/include/libavutil/pixfmt.h	/^    AV_PIX_FMT_YVYU422,   \/\/\/< packed YUV 4:2:2, 16bpp, Y0 Cr Y1 Cb$/;"	e	enum:AVPixelFormat
AV_PKT_DATA_A53_CC	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_A53_CC,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_AFD	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_AFD,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_AUDIO_SERVICE_TYPE	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_AUDIO_SERVICE_TYPE,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_CONTENT_LIGHT_LEVEL	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_CONTENT_LIGHT_LEVEL,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_CPB_PROPERTIES	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_CPB_PROPERTIES,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_DISPLAYMATRIX	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_DISPLAYMATRIX,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_DOVI_CONF	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_DOVI_CONF,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_ENCRYPTION_INFO	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_ENCRYPTION_INFO,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_ENCRYPTION_INIT_INFO	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_ENCRYPTION_INIT_INFO,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_FALLBACK_TRACK	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_FALLBACK_TRACK,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_H263_MB_INFO	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_H263_MB_INFO,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_ICC_PROFILE	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_ICC_PROFILE,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_JP_DUALMONO	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_JP_DUALMONO,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_MASTERING_DISPLAY_METADATA	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_MASTERING_DISPLAY_METADATA,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_METADATA_UPDATE	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_METADATA_UPDATE,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_MPEGTS_STREAM_ID	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_MPEGTS_STREAM_ID,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_NB	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_NB$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_NEW_EXTRADATA	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_NEW_EXTRADATA,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_PALETTE	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_PALETTE,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_PARAM_CHANGE	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_PARAM_CHANGE,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_PRFT	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_PRFT,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_QUALITY_FACTOR	lib/ffmpeg/include/libavcodec/packet.h	/^#define AV_PKT_DATA_QUALITY_FACTOR /;"	d
AV_PKT_DATA_QUALITY_STATS	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_QUALITY_STATS,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_REPLAYGAIN	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_REPLAYGAIN,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_SKIP_SAMPLES	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_SKIP_SAMPLES,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_SPHERICAL	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_SPHERICAL,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_STEREO3D	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_STEREO3D,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_STRINGS_METADATA	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_STRINGS_METADATA,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_SUBTITLE_POSITION	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_SUBTITLE_POSITION,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_WEBVTT_IDENTIFIER	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_WEBVTT_IDENTIFIER,$/;"	e	enum:AVPacketSideDataType
AV_PKT_DATA_WEBVTT_SETTINGS	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_PKT_DATA_WEBVTT_SETTINGS,$/;"	e	enum:AVPacketSideDataType
AV_PKT_FLAG_CORRUPT	lib/ffmpeg/include/libavcodec/packet.h	/^#define AV_PKT_FLAG_CORRUPT /;"	d
AV_PKT_FLAG_DISCARD	lib/ffmpeg/include/libavcodec/packet.h	/^#define AV_PKT_FLAG_DISCARD /;"	d
AV_PKT_FLAG_DISPOSABLE	lib/ffmpeg/include/libavcodec/packet.h	/^#define AV_PKT_FLAG_DISPOSABLE /;"	d
AV_PKT_FLAG_KEY	lib/ffmpeg/include/libavcodec/packet.h	/^#define AV_PKT_FLAG_KEY /;"	d
AV_PKT_FLAG_TRUSTED	lib/ffmpeg/include/libavcodec/packet.h	/^#define AV_PKT_FLAG_TRUSTED /;"	d
AV_PROGRAM_RUNNING	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_PROGRAM_RUNNING /;"	d
AV_PTS_WRAP_ADD_OFFSET	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_PTS_WRAP_ADD_OFFSET /;"	d
AV_PTS_WRAP_IGNORE	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_PTS_WRAP_IGNORE /;"	d
AV_PTS_WRAP_SUB_OFFSET	lib/ffmpeg/include/libavformat/avformat.h	/^#define AV_PTS_WRAP_SUB_OFFSET /;"	d
AV_RB	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RB(/;"	d
AV_RB16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RB16(/;"	d
AV_RB16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RB16(/;"	d
AV_RB24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RB24(/;"	d
AV_RB24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RB24(/;"	d
AV_RB32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RB32(/;"	d
AV_RB32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RB32(/;"	d
AV_RB48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RB48(/;"	d
AV_RB48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RB48(/;"	d
AV_RB64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RB64(/;"	d
AV_RB64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RB64(/;"	d
AV_RB8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_RB8(/;"	d
AV_RESAMPLE_DITHER_NB	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_DITHER_NB,              \/**< Number of dither types. Not part of ABI. *\/$/;"	e	enum:AVResampleDitherMethod
AV_RESAMPLE_DITHER_NONE	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_DITHER_NONE,            \/**< Do not use dithering *\/$/;"	e	enum:AVResampleDitherMethod
AV_RESAMPLE_DITHER_RECTANGULAR	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_DITHER_RECTANGULAR,     \/**< Rectangular Dither *\/$/;"	e	enum:AVResampleDitherMethod
AV_RESAMPLE_DITHER_TRIANGULAR	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_DITHER_TRIANGULAR,      \/**< Triangular Dither*\/$/;"	e	enum:AVResampleDitherMethod
AV_RESAMPLE_DITHER_TRIANGULAR_HP	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_DITHER_TRIANGULAR_HP,   \/**< Triangular Dither with High Pass *\/$/;"	e	enum:AVResampleDitherMethod
AV_RESAMPLE_DITHER_TRIANGULAR_NS	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_DITHER_TRIANGULAR_NS,   \/**< Triangular Dither with Noise Shaping *\/$/;"	e	enum:AVResampleDitherMethod
AV_RESAMPLE_FILTER_TYPE_BLACKMAN_NUTTALL	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_FILTER_TYPE_BLACKMAN_NUTTALL,   \/**< Blackman Nuttall Windowed Sinc *\/$/;"	e	enum:AVResampleFilterType
AV_RESAMPLE_FILTER_TYPE_CUBIC	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_FILTER_TYPE_CUBIC,              \/**< Cubic *\/$/;"	e	enum:AVResampleFilterType
AV_RESAMPLE_FILTER_TYPE_KAISER	lib/ffmpeg/include/libavresample/avresample.h	/^    AV_RESAMPLE_FILTER_TYPE_KAISER,             \/**< Kaiser Windowed Sinc *\/$/;"	e	enum:AVResampleFilterType
AV_RL	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL(/;"	d
AV_RL16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RL16(/;"	d
AV_RL16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL16(/;"	d
AV_RL24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RL24(/;"	d
AV_RL24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL24(/;"	d
AV_RL32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RL32(/;"	d
AV_RL32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL32(/;"	d
AV_RL48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RL48(/;"	d
AV_RL48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL48(/;"	d
AV_RL64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RL64(/;"	d
AV_RL64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL64(/;"	d
AV_RL64A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RL64A(/;"	d
AV_RL8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_RL8(/;"	d
AV_RLA	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RLA(/;"	d
AV_RN	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN(/;"	d
AV_RN16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RN16(/;"	d
AV_RN16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN16(/;"	d
AV_RN16A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN16A(/;"	d
AV_RN24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RN24(/;"	d
AV_RN32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RN32(/;"	d
AV_RN32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN32(/;"	d
AV_RN32A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN32A(/;"	d
AV_RN48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RN48(/;"	d
AV_RN64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_RN64(/;"	d
AV_RN64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN64(/;"	d
AV_RN64A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_RN64A(/;"	d
AV_RNA	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_RNA(/;"	d
AV_ROUND_DOWN	lib/ffmpeg/include/libavutil/mathematics.h	/^    AV_ROUND_DOWN     = 2, \/\/\/< Round toward -infinity.$/;"	e	enum:AVRounding
AV_ROUND_INF	lib/ffmpeg/include/libavutil/mathematics.h	/^    AV_ROUND_INF      = 1, \/\/\/< Round away from zero.$/;"	e	enum:AVRounding
AV_ROUND_NEAR_INF	lib/ffmpeg/include/libavutil/mathematics.h	/^    AV_ROUND_NEAR_INF = 5, \/\/\/< Round to nearest and halfway cases away from zero.$/;"	e	enum:AVRounding
AV_ROUND_PASS_MINMAX	lib/ffmpeg/include/libavutil/mathematics.h	/^    AV_ROUND_PASS_MINMAX = 8192,$/;"	e	enum:AVRounding
AV_ROUND_UP	lib/ffmpeg/include/libavutil/mathematics.h	/^    AV_ROUND_UP       = 3, \/\/\/< Round toward +infinity.$/;"	e	enum:AVRounding
AV_ROUND_ZERO	lib/ffmpeg/include/libavutil/mathematics.h	/^    AV_ROUND_ZERO     = 0, \/\/\/< Round toward zero.$/;"	e	enum:AVRounding
AV_SAMPLE_FMT_DBL	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_DBL,         \/\/\/< double$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_DBLP	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_DBLP,        \/\/\/< double, planar$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_FLT	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_FLT,         \/\/\/< float$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_FLTP	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_FLTP,        \/\/\/< float, planar$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_NB	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_NB           \/\/\/< Number of sample formats. DO NOT USE if linking dynamical/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_NONE	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_NONE = -1,$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_S16	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_S16,         \/\/\/< signed 16 bits$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_S16P	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_S16P,        \/\/\/< signed 16 bits, planar$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_S32	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_S32,         \/\/\/< signed 32 bits$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_S32P	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_S32P,        \/\/\/< signed 32 bits, planar$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_S64	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_S64,         \/\/\/< signed 64 bits$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_S64P	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_S64P,        \/\/\/< signed 64 bits, planar$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_U8	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_U8,          \/\/\/< unsigned 8 bits$/;"	e	enum:AVSampleFormat
AV_SAMPLE_FMT_U8P	lib/ffmpeg/include/libavutil/samplefmt.h	/^    AV_SAMPLE_FMT_U8P,         \/\/\/< unsigned 8 bits, planar$/;"	e	enum:AVSampleFormat
AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT  = 0x0001,$/;"	e	enum:AVSideDataParamChangeFlags
AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 0x0002,$/;"	e	enum:AVSideDataParamChangeFlags
AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS     = 0x0008,$/;"	e	enum:AVSideDataParamChangeFlags
AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE	lib/ffmpeg/include/libavcodec/packet.h	/^    AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE    = 0x0004,$/;"	e	enum:AVSideDataParamChangeFlags
AV_SPHERICAL_CUBEMAP	lib/ffmpeg/include/libavutil/spherical.h	/^    AV_SPHERICAL_CUBEMAP,$/;"	e	enum:AVSphericalProjection
AV_SPHERICAL_EQUIRECTANGULAR	lib/ffmpeg/include/libavutil/spherical.h	/^    AV_SPHERICAL_EQUIRECTANGULAR,$/;"	e	enum:AVSphericalProjection
AV_SPHERICAL_EQUIRECTANGULAR_TILE	lib/ffmpeg/include/libavutil/spherical.h	/^    AV_SPHERICAL_EQUIRECTANGULAR_TILE,$/;"	e	enum:AVSphericalProjection
AV_STEREO3D_2D	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_2D,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_CHECKERBOARD	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_CHECKERBOARD,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_COLUMNS	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_COLUMNS,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_FLAG_INVERT	lib/ffmpeg/include/libavutil/stereo3d.h	/^#define AV_STEREO3D_FLAG_INVERT /;"	d
AV_STEREO3D_FRAMESEQUENCE	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_FRAMESEQUENCE,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_LINES	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_LINES,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_SIDEBYSIDE	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_SIDEBYSIDE,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_SIDEBYSIDE_QUINCUNX	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_SIDEBYSIDE_QUINCUNX,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_TOPBOTTOM	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_TOPBOTTOM,$/;"	e	enum:AVStereo3DType
AV_STEREO3D_VIEW_LEFT	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_VIEW_LEFT,$/;"	e	enum:AVStereo3DView
AV_STEREO3D_VIEW_PACKED	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_VIEW_PACKED,$/;"	e	enum:AVStereo3DView
AV_STEREO3D_VIEW_RIGHT	lib/ffmpeg/include/libavutil/stereo3d.h	/^    AV_STEREO3D_VIEW_RIGHT,$/;"	e	enum:AVStereo3DView
AV_SUBTITLE_FLAG_FORCED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define AV_SUBTITLE_FLAG_FORCED /;"	d
AV_SWAP	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_SWAP(/;"	d
AV_SWAP64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_SWAP64(/;"	d
AV_THREAD_MESSAGE_NONBLOCK	lib/ffmpeg/include/libavutil/threadmessage.h	/^    AV_THREAD_MESSAGE_NONBLOCK = 1,$/;"	e	enum:AVThreadMessageFlags
AV_TIMECODE_FLAG_24HOURSMAX	lib/ffmpeg/include/libavutil/timecode.h	/^    AV_TIMECODE_FLAG_24HOURSMAX     = 1<<1, \/\/\/< timecode wraps after 24 hours$/;"	e	enum:AVTimecodeFlag
AV_TIMECODE_FLAG_ALLOWNEGATIVE	lib/ffmpeg/include/libavutil/timecode.h	/^    AV_TIMECODE_FLAG_ALLOWNEGATIVE  = 1<<2, \/\/\/< negative time values are allowed$/;"	e	enum:AVTimecodeFlag
AV_TIMECODE_FLAG_DROPFRAME	lib/ffmpeg/include/libavutil/timecode.h	/^    AV_TIMECODE_FLAG_DROPFRAME      = 1<<0, \/\/\/< timecode is drop frame$/;"	e	enum:AVTimecodeFlag
AV_TIMECODE_STR_SIZE	lib/ffmpeg/include/libavutil/timecode.h	/^#define AV_TIMECODE_STR_SIZE /;"	d
AV_TIME_BASE	lib/ffmpeg/include/libavutil/avutil.h	/^#define AV_TIME_BASE /;"	d
AV_TIME_BASE_Q	lib/ffmpeg/include/libavutil/avutil.h	/^#define AV_TIME_BASE_Q /;"	d
AV_TS_MAX_STRING_SIZE	lib/ffmpeg/include/libavutil/timestamp.h	/^#define AV_TS_MAX_STRING_SIZE /;"	d
AV_TX_DOUBLE_FFT	lib/ffmpeg/include/libavutil/tx.h	/^    AV_TX_DOUBLE_FFT = 2,$/;"	e	enum:AVTXType
AV_TX_DOUBLE_MDCT	lib/ffmpeg/include/libavutil/tx.h	/^    AV_TX_DOUBLE_MDCT = 3,$/;"	e	enum:AVTXType
AV_TX_FLOAT_FFT	lib/ffmpeg/include/libavutil/tx.h	/^    AV_TX_FLOAT_FFT = 0,$/;"	e	enum:AVTXType
AV_TX_FLOAT_MDCT	lib/ffmpeg/include/libavutil/tx.h	/^    AV_TX_FLOAT_MDCT = 1,$/;"	e	enum:AVTXType
AV_TX_INT32_FFT	lib/ffmpeg/include/libavutil/tx.h	/^    AV_TX_INT32_FFT = 4,$/;"	e	enum:AVTXType
AV_TX_INT32_MDCT	lib/ffmpeg/include/libavutil/tx.h	/^    AV_TX_INT32_MDCT = 5,$/;"	e	enum:AVTXType
AV_UTF8_FLAG_ACCEPT_ALL	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_UTF8_FLAG_ACCEPT_ALL /;"	d
AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_UTF8_FLAG_ACCEPT_INVALID_BIG_CODES /;"	d
AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_UTF8_FLAG_ACCEPT_NON_CHARACTERS /;"	d
AV_UTF8_FLAG_ACCEPT_SURROGATES	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_UTF8_FLAG_ACCEPT_SURROGATES /;"	d
AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES	lib/ffmpeg/include/libavutil/avstring.h	/^#define AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES /;"	d
AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE = (1 << 2),$/;"	e	enum:__anon57762da70103
AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS = (1 << 1),$/;"	e	enum:__anon57762da70103
AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES = (1 << 3),$/;"	e	enum:__anon57762da70103
AV_VAAPI_DRIVER_QUIRK_USER_SET	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    AV_VAAPI_DRIVER_QUIRK_USER_SET = (1 << 0),$/;"	e	enum:__anon57762da70103
AV_VERSION	lib/ffmpeg/include/libavutil/version.h	/^#define AV_VERSION(/;"	d
AV_VERSION_DOT	lib/ffmpeg/include/libavutil/version.h	/^#define AV_VERSION_DOT(/;"	d
AV_VERSION_INT	lib/ffmpeg/include/libavutil/version.h	/^#define AV_VERSION_INT(/;"	d
AV_VERSION_MAJOR	lib/ffmpeg/include/libavutil/version.h	/^#define AV_VERSION_MAJOR(/;"	d
AV_VERSION_MICRO	lib/ffmpeg/include/libavutil/version.h	/^#define AV_VERSION_MICRO(/;"	d
AV_VERSION_MINOR	lib/ffmpeg/include/libavutil/version.h	/^#define AV_VERSION_MINOR(/;"	d
AV_VIDEO_ENC_PARAMS_H264	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    AV_VIDEO_ENC_PARAMS_H264,$/;"	e	enum:AVVideoEncParamsType
AV_VIDEO_ENC_PARAMS_NONE	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    AV_VIDEO_ENC_PARAMS_NONE = -1,$/;"	e	enum:AVVideoEncParamsType
AV_VIDEO_ENC_PARAMS_VP9	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    AV_VIDEO_ENC_PARAMS_VP9,$/;"	e	enum:AVVideoEncParamsType
AV_WB	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WB(/;"	d
AV_WB16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WB16(/;"	d
AV_WB16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WB16(/;"	d
AV_WB24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WB24(/;"	d
AV_WB24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WB24(/;"	d
AV_WB32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WB32(/;"	d
AV_WB32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WB32(/;"	d
AV_WB48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WB48(/;"	d
AV_WB48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WB48(/;"	d
AV_WB64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WB64(/;"	d
AV_WB64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WB64(/;"	d
AV_WB8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_WB8(/;"	d
AV_WL	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL(/;"	d
AV_WL16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WL16(/;"	d
AV_WL16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL16(/;"	d
AV_WL24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WL24(/;"	d
AV_WL24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL24(/;"	d
AV_WL32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WL32(/;"	d
AV_WL32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL32(/;"	d
AV_WL48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WL48(/;"	d
AV_WL48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL48(/;"	d
AV_WL64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WL64(/;"	d
AV_WL64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL64(/;"	d
AV_WL64A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WL64A(/;"	d
AV_WL8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_WL8(/;"	d
AV_WLA	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WLA(/;"	d
AV_WN	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN(/;"	d
AV_WN16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WN16(/;"	d
AV_WN16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN16(/;"	d
AV_WN16A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN16A(/;"	d
AV_WN24	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WN24(/;"	d
AV_WN32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WN32(/;"	d
AV_WN32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN32(/;"	d
AV_WN32A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN32A(/;"	d
AV_WN48	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WN48(/;"	d
AV_WN64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#       define AV_WN64(/;"	d
AV_WN64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN64(/;"	d
AV_WN64A	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_WN64A(/;"	d
AV_WNA	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_WNA(/;"	d
AV_XVMC_ID	lib/ffmpeg/include/libavcodec/xvmc.h	/^#define AV_XVMC_ID /;"	d
AV_ZERO	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#define AV_ZERO(/;"	d
AV_ZERO128	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_ZERO128(/;"	d
AV_ZERO16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_ZERO16(/;"	d
AV_ZERO32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_ZERO32(/;"	d
AV_ZERO64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^#   define AV_ZERO64(/;"	d
Absolute	src/Utils/Memory.hpp	/^	T Absolute(const char *moduleName, int relative) {$/;"	f	namespace:Memory	typeref:typename:T
AbsoluteMoveTool	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^	AbsoluteMoveTool(const char *name, int slot)$/;"	f	class:AbsoluteMoveTool
AbsoluteMoveTool	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^class AbsoluteMoveTool : public TasTool {$/;"	c
AbsoluteMoveToolParams	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^	AbsoluteMoveToolParams()$/;"	f	struct:AbsoluteMoveToolParams
AbsoluteMoveToolParams	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^	AbsoluteMoveToolParams(float direction, float strength)$/;"	f	struct:AbsoluteMoveToolParams
AbsoluteMoveToolParams	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^struct AbsoluteMoveToolParams : public TasToolParams {$/;"	s
AcceptInput	src/Modules/Server.hpp	/^	_AcceptInput AcceptInput = nullptr;$/;"	m	class:Server	typeref:typename:_AcceptInput
AcceptInput	src/Offsets.cpp	/^	int AcceptInput;$/;"	v	namespace:Offsets	typeref:typename:int
AcceptInput_Hook	src/Modules/Server.cpp	/^static void __fastcall AcceptInput_Hook(void *thisptr, void *unused, const char *inputName, void/;"	f	typeref:typename:void __fastcall	file:
Accepted	lib/SFML/include/SFML/Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed l/;"	e	enum:sf::Http::Response::Status
Access Virtual Function	doc/contributing.md	/^#### Access Virtual Function$/;"	t	subsection:SAR: Contributing Guide""Coding""Memory Utils
AcknowledgeGhost	src/Features/Demo/NetworkGhostPlayer.cpp	/^bool NetworkManager::AcknowledgeGhost(std::shared_ptr<GhostEntity> ghost) {$/;"	f	class:NetworkManager	typeref:typename:bool
Activate	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::Activate() {$/;"	f	class:TasPlayer	typeref:typename:void
ActivateAutoCompleteFile	src/Command.cpp	/^bool Command::ActivateAutoCompleteFile(const char *name, _CommandCompletionCallback callback) {$/;"	f	class:Command	typeref:typename:bool
ActivateMouse	src/Offsets.cpp	/^	int ActivateMouse;$/;"	v	namespace:Offsets	typeref:typename:int
Adam7_deinterlace	src/Utils/lodepng.cpp	/^static void Adam7_deinterlace(unsigned char *out, const unsigned char *in, unsigned w, unsigned /;"	f	typeref:typename:void	file:
Adam7_getpassvalues	src/Utils/lodepng.cpp	/^static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8]/;"	f	typeref:typename:void	file:
Adam7_interlace	src/Utils/lodepng.cpp	/^static void Adam7_interlace(unsigned char *out, const unsigned char *in, unsigned w, unsigned h,/;"	f	typeref:typename:void	file:
Add	src/Features/Summary.cpp	/^void Summary::Add(int ticks, float time, std::string map) {$/;"	f	class:Summary	typeref:typename:void
Add	src/Features/Timer/TimerAverage.cpp	/^void TimerAverage::Add(int ticks, float time, std::string map) {$/;"	f	class:TimerAverage	typeref:typename:void
Add	src/Features/Timer/TimerCheckPoints.cpp	/^void TimerCheckPoints::Add(int ticks, float time, std::string map) {$/;"	f	class:TimerCheckPoints	typeref:typename:void
AddCallBack	src/Variable.cpp	/^void Variable::AddCallBack(FnChangeCallback_t callback) {$/;"	f	class:Variable	typeref:typename:void
AddCommandToQueue	src/Features/Tas/TasController.cpp	/^void TasController::AddCommandToQueue(std::string c) {$/;"	f	class:TasController	typeref:typename:void
AddDemoChecksum	src/Checksum.cpp	/^bool AddDemoChecksum(const char *filename) {$/;"	f	typeref:typename:bool
AddDemoFileChecksums	src/Checksum.cpp	/^void AddDemoFileChecksums() {$/;"	f	typeref:typename:void
AddElement	src/Features/Hud/InputHud.cpp	/^void InputHud::AddElement(std::string name, int type) {$/;"	f	class:InputHud	typeref:typename:void
AddFeature	src/Features/Feature.hpp	/^	void AddFeature(T **featurePtr) {$/;"	f	class:Features	typeref:typename:void
AddFlag	src/Variable.cpp	/^void Variable::AddFlag(int value) {$/;"	f	class:Variable	typeref:typename:void
AddGhost	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::AddGhost(DemoGhostEntity &ghost) {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
AddHookEntry	lib/minhook/hook.c	/^static PHOOK_ENTRY AddHookEntry()$/;"	f	typeref:typename:PHOOK_ENTRY	file:
AddLevelDatas	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::AddLevelDatas(DemoDatas &datas) {$/;"	f	class:DemoGhostEntity	typeref:typename:void
AddListener	src/Modules/Engine.hpp	/^	_AddListener AddListener = nullptr;$/;"	m	class:Engine	typeref:typename:_AddListener
AddListener	src/Offsets.cpp	/^	int AddListener;$/;"	v	namespace:Offsets	typeref:typename:int
AddModule	src/Modules/Module.hpp	/^	void AddModule(T **modulePtr) {$/;"	f	class:Modules	typeref:typename:void
AddPoint	src/Features/PlayerTrace.cpp	/^void PlayerTrace::AddPoint(size_t trace_idx, void *player, int slot, bool use_client_offset) {$/;"	f	class:PlayerTrace	typeref:typename:void
AddRuleToCategory	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::AddRuleToCategory(std::string category, std::string rule) {$/;"	f	class:SpeedrunTimer	typeref:typename:bool
AddRuler	src/Features/Routing/Ruler.cpp	/^void RulerManager::AddRuler(Vector start, Vector end) {$/;"	f	class:RulerManager	typeref:typename:void
AddText	src/Modules/Engine.hpp	/^	_AddText AddText = nullptr;$/;"	m	class:Engine	typeref:typename:_AddText
AddText	src/Offsets.cpp	/^	int AddText;$/;"	v	namespace:Offsets	typeref:typename:int
AddToBuffer	src/Modules/Tier1.cpp	/^	void AddToBuffer(const char *msg, BufferedPart::Type type, Color col) {$/;"	f	class:ConsoleDisplayHook	typeref:typename:void	file:
Adjust	src/Features/Demo/DemoParser.cpp	/^void DemoParser::Adjust(Demo *demo) {$/;"	f	class:DemoParser	typeref:typename:void
AdvanceFrame	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::AdvanceFrame() {$/;"	f	class:TasPlayer	typeref:typename:void
AdvanceTick	src/Modules/Engine.cpp	/^void Engine::AdvanceTick() {$/;"	f	class:Engine	typeref:typename:void
AirAccelerate	src/Offsets.cpp	/^	int AirAccelerate;$/;"	v	namespace:Offsets	typeref:typename:int
AirMove	src/Offsets.cpp	/^	int AirMove;$/;"	v	namespace:Offsets	typeref:typename:int
AirMove_Continue_Offset	src/Modules/Server.hpp	/^#	define AirMove_Continue_Offset /;"	d
AirMove_Mid_Offset	src/Modules/Server.hpp	/^#	define AirMove_Mid_Offset /;"	d
AirMove_Offset1	src/Offsets.cpp	/^	int AirMove_Offset1;$/;"	v	namespace:Offsets	typeref:typename:int
AirMove_Offset2	src/Offsets.cpp	/^	int AirMove_Offset2;$/;"	v	namespace:Offsets	typeref:typename:int
AirMove_Signature	src/Modules/Server.hpp	/^#	define AirMove_Signature /;"	d
AirMove_Skip_Offset	src/Modules/Server.hpp	/^#	define AirMove_Skip_Offset /;"	d
AliasInfo	src/Features/ConfigPlus.cpp	/^struct AliasInfo {$/;"	s	file:
Alignment	src/Features/Hud/Toasts.cpp	/^enum class Alignment {$/;"	g	file:
AllocateBuffer	lib/minhook/buffer.c	/^LPVOID AllocateBuffer(LPVOID pOrigin)$/;"	f	typeref:typename:LPVOID
AllowsMovementChanges	src/Modules/Server.cpp	/^bool Server::AllowsMovementChanges() {$/;"	f	class:Server	typeref:typename:bool
AngleNormalize	src/Utils/Math.cpp	/^float Math::AngleNormalize(float angle) {$/;"	f	class:Math	typeref:typename:float
AngleVectors	src/Utils/Math.cpp	/^void Math::AngleVectors(const QAngle &angles, Vector *forward) {$/;"	f	class:Math	typeref:typename:void
AngleVectors	src/Utils/Math.cpp	/^void Math::AngleVectors(const QAngle &angles, Vector *forward, Vector *right, Vector *up) {$/;"	f	class:Math	typeref:typename:void
Any	lib/SFML/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Any;       \/\/\/< Value representing any address (0.0.0.0)$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
AnyPort	lib/SFML/include/SFML/Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon06d434180103
ApertureTag	src/Games/Linux/ApertureTag.cpp	/^ApertureTag::ApertureTag() {$/;"	f	class:ApertureTag
ApertureTag	src/Games/Linux/ApertureTag.hpp	/^class ApertureTag : public Portal2 {$/;"	c
ApertureTag	src/Games/Windows/ApertureTag.cpp	/^ApertureTag::ApertureTag() {$/;"	f	class:ApertureTag
ApertureTag	src/Games/Windows/ApertureTag.hpp	/^class ApertureTag : public Portal2 {$/;"	c
Append	src/Utils/SDK.hpp	/^	void Append(const T &val) {$/;"	f	struct:CUtlVector	typeref:typename:void
Apply	src/Features/Tas/TasTools/AbsoluteMoveTool.cpp	/^void AbsoluteMoveTool::Apply(TasFramebulk &fb, const TasPlayerInfo &pInfo) {$/;"	f	class:AbsoluteMoveTool	typeref:typename:void
Apply	src/Features/Tas/TasTools/AutoAimTool.cpp	/^void AutoAimTool::Apply(TasFramebulk &bulk, const TasPlayerInfo &playerInfo) {$/;"	f	class:AutoAimTool	typeref:typename:void
Apply	src/Features/Tas/TasTools/AutoJumpTool.cpp	/^void AutoJumpTool::Apply(TasFramebulk &bulk, const TasPlayerInfo &pInfo) {$/;"	f	class:AutoJumpTool	typeref:typename:void
Apply	src/Features/Tas/TasTools/DecelTool.cpp	/^void DecelTool::Apply(TasFramebulk &bulk, const TasPlayerInfo &playerInfo) {$/;"	f	class:DecelTool	typeref:typename:void
Apply	src/Features/Tas/TasTools/SetAngleTool.cpp	/^void SetAngleTool::Apply(TasFramebulk &bulk, const TasPlayerInfo &playerInfo) {$/;"	f	class:SetAngleTool	typeref:typename:void
Apply	src/Features/Tas/TasTools/StrafeTool.cpp	/^void AutoStrafeTool::Apply(TasFramebulk &fb, const TasPlayerInfo &rawPInfo) {$/;"	f	class:AutoStrafeTool	typeref:typename:void
ApplyPreset	src/Features/Hud/InputHud.cpp	/^void InputHud::ApplyPreset(const char* preset, bool start) {$/;"	f	class:InputHud	typeref:typename:void
AreAllGhostsAheadOrSameMap	src/Features/Demo/NetworkGhostPlayer.cpp	/^bool NetworkManager::AreAllGhostsAheadOrSameMap() {$/;"	f	class:NetworkManager	typeref:typename:bool
Arg	src/Utils/SDK.hpp	/^	const char *Arg(int nIndex) const {$/;"	f	struct:CCommand	typeref:typename:const char *
ArgC	src/Utils/SDK.hpp	/^	int ArgC() const {$/;"	f	struct:CCommand	typeref:typename:int
ArrayLengthRecvProxyFn	src/Utils/SDK.hpp	/^typedef void (*ArrayLengthRecvProxyFn)(void *pStruct, int objectID, int currentArrayLength);$/;"	t	typeref:typename:void (*)(void * pStruct,int objectID,int currentArrayLength)
ArrayLengthSendProxyFn	src/Utils/SDK.hpp	/^typedef int (*ArrayLengthSendProxyFn)(const void *pStruct, int objectID);$/;"	t	typeref:typename:int (*)(const void * pStruct,int objectID)
Ascii	lib/SFML/include/SFML/Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
AutoAimParams	src/Features/Tas/TasTools/AutoAimTool.cpp	/^	AutoAimParams()$/;"	f	struct:AutoAimParams	file:
AutoAimParams	src/Features/Tas/TasTools/AutoAimTool.cpp	/^	AutoAimParams(Vector point, int ticks)$/;"	f	struct:AutoAimParams	file:
AutoAimParams	src/Features/Tas/TasTools/AutoAimTool.cpp	/^struct AutoAimParams : public TasToolParams {$/;"	s	file:
AutoAimTool	src/Features/Tas/TasTools/AutoAimTool.hpp	/^	AutoAimTool(int slot)$/;"	f	class:AutoAimTool
AutoAimTool	src/Features/Tas/TasTools/AutoAimTool.hpp	/^class AutoAimTool : public TasTool {$/;"	c
AutoCompletionFunc	src/Modules/Tier1.cpp	/^int CBaseAutoCompleteFileList::AutoCompletionFunc(char const *partial, char commands[COMMAND_COM/;"	f	class:CBaseAutoCompleteFileList	typeref:typename:int
AutoCompletionFunc	src/Modules/Tier1.hpp	/^	_AutoCompletionFunc AutoCompletionFunc = nullptr;$/;"	m	class:Tier1	typeref:typename:_AutoCompletionFunc
AutoCompletionFunc	src/Offsets.cpp	/^	int AutoCompletionFunc;$/;"	v	namespace:Offsets	typeref:typename:int
AutoJumpTool	src/Features/Tas/TasTools/AutoJumpTool.hpp	/^	AutoJumpTool(int slot)$/;"	f	class:AutoJumpTool
AutoJumpTool	src/Features/Tas/TasTools/AutoJumpTool.hpp	/^class AutoJumpTool : public TasTool {$/;"	c
AutoJumpToolParams	src/Features/Tas/TasTools/AutoJumpTool.hpp	/^	AutoJumpToolParams()$/;"	f	struct:AutoJumpToolParams
AutoJumpToolParams	src/Features/Tas/TasTools/AutoJumpTool.hpp	/^	AutoJumpToolParams(bool enabled)$/;"	f	struct:AutoJumpToolParams
AutoJumpToolParams	src/Features/Tas/TasTools/AutoJumpTool.hpp	/^struct AutoJumpToolParams : public TasToolParams {$/;"	s
AutoStrafeDirection	src/Features/Tas/TasTools/StrafeTool.hpp	/^struct AutoStrafeDirection {$/;"	s
AutoStrafeParamType	src/Features/Tas/TasTools/StrafeTool.hpp	/^enum AutoStrafeParamType {$/;"	g
AutoStrafeParams	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeParams()$/;"	f	struct:AutoStrafeParams
AutoStrafeParams	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeParams(AutoStrafeType type, AutoStrafeDirection dir, AutoStrafeSpeed speed, bool noPi/;"	f	struct:AutoStrafeParams
AutoStrafeParams	src/Features/Tas/TasTools/StrafeTool.hpp	/^struct AutoStrafeParams : public TasToolParams {$/;"	s
AutoStrafeSpeed	src/Features/Tas/TasTools/StrafeTool.hpp	/^struct AutoStrafeSpeed {$/;"	s
AutoStrafeTool	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeTool(int slot)$/;"	f	class:AutoStrafeTool
AutoStrafeTool	src/Features/Tas/TasTools/StrafeTool.hpp	/^class AutoStrafeTool : public TasTool {$/;"	c
AutoStrafeType	src/Features/Tas/TasTools/StrafeTool.hpp	/^enum AutoStrafeType {$/;"	g
AutoSubmit	src/Features/AutoSubmit.hpp	/^namespace AutoSubmit {$/;"	n
Autocompletion	doc/contributing.md	/^#### Autocompletion$/;"	t	subsection:SAR: Contributing Guide""Coding""Console Commands
AxisFlags	src/Utils/SDK.hpp	/^	unsigned int AxisFlags;   \/\/ 0$/;"	m	struct:__anon21a65a740708	typeref:typename:unsigned int
AxisMap	src/Utils/SDK.hpp	/^	unsigned int AxisMap;     \/\/ 4$/;"	m	struct:__anon21a65a740708	typeref:typename:unsigned int
BENDY	src/Features/Demo/GhostEntity.hpp	/^	BENDY = 4$/;"	e	enum:GhostType
BENDY_GROUP	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	g	file:
BENDY_GROUPS	src/Features/Demo/GhostRenderer.cpp	/^const short BENDY_GROUPS[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, /;"	v	typeref:typename:const short[]
BENDY_LOD_LEVELS	src/Features/Demo/GhostRenderer.cpp	/^const short BENDY_LOD_LEVELS[] = {3, 3, 3, 3, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1, 3, 3, 1, 2, 3, 2, 1,/;"	v	typeref:typename:const short[]
BENDY_MODELS	src/Features/Demo/GhostRenderer.cpp	/^const short* BENDY_MODELS[] = {BENDY_MODEL_1, BENDY_MODEL_2, BENDY_MODEL_3};$/;"	v	typeref:typename:const short * []
BENDY_MODEL_1	src/Features/Demo/GhostRenderer.cpp	/^const short BENDY_MODEL_1[] = {6, 4, 2, 3, 5, 7, 2, 12, 10, 7, 9, 3, 9, 11, 3, 11, 13, 3, 13, 14/;"	v	typeref:typename:const short[]
BENDY_MODEL_2	src/Features/Demo/GhostRenderer.cpp	/^const short BENDY_MODEL_2[] = {3, 14, 2, 3, 7, 11, 14, 3, 11, 14, 10, 2, 10, 6, 2, 25, 27, 29, 2/;"	v	typeref:typename:const short[]
BENDY_MODEL_3	src/Features/Demo/GhostRenderer.cpp	/^const short BENDY_MODEL_3[] = {3, 14, 2, 3, 9, 14, 2, 14, 8, 24, 27, 30, 36, 15, 18, 33, 36, 30,/;"	v	typeref:typename:const short[]
BENDY_VERTS	src/Features/Demo/GhostRenderer.cpp	/^const float BENDY_VERTS[] = {-13, 16, 13, 16, -13, 40, 13, 40, -12.55, 42.69, 12.55, 42.69, -11./;"	v	typeref:typename:const float[]
BLACK	src/SAR.cpp	/^#define BLACK /;"	d	file:
BLUE	src/Features/Speedrun/Rules.hpp	/^	BLUE,$/;"	e	enum:PortalColor
BLUE	src/SAR.cpp	/^#define BLUE /;"	d	file:
BODY	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	e	enum:BENDY_GROUP	file:
BOOL	src/Utils/json11.hpp	/^			BOOL,$/;"	e	enum:json11::Json::Type
BOUNCE_POWER	src/Utils/SDK.hpp	/^	BOUNCE_POWER,$/;"	e	enum:PaintPowerType
BROWN	src/SAR.cpp	/^#define BROWN /;"	d	file:
BUTTON_CODE_COUNT	src/Modules/InputSystem.hpp	/^	BUTTON_CODE_COUNT = BUTTON_CODE_LAST - KEY_FIRST + 1,$/;"	e	enum:ButtonCode_t
BUTTON_CODE_INVALID	src/Modules/InputSystem.hpp	/^	BUTTON_CODE_INVALID = -1,$/;"	e	enum:ButtonCode_t
BUTTON_CODE_INVALID	src/Modules/InputSystem.hpp	/^#define BUTTON_CODE_INVALID /;"	d
BUTTON_CODE_LAST	src/Modules/InputSystem.hpp	/^	BUTTON_CODE_LAST,$/;"	e	enum:ButtonCode_t
BUTTON_CODE_NONE	src/Modules/InputSystem.hpp	/^	BUTTON_CODE_NONE = 0,$/;"	e	enum:ButtonCode_t
Background	src/Features/Hud/Toasts.cpp	/^enum class Background {$/;"	g	file:
BadCommandSequence	lib/SFML/include/SFML/Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	lib/SFML/include/SFML/Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the/;"	e	enum:sf::Http::Response::Status
BadRequest	lib/SFML/include/SFML/Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (synta/;"	e	enum:sf::Http::Response::Status
BaseHud	src/Features/Hud/Hud.cpp	/^BaseHud::BaseHud(int type, bool drawSecondSplitScreen, int version)$/;"	f	class:BaseHud
BaseHud	src/Features/Hud/Hud.hpp	/^class BaseHud {$/;"	c
Binary	lib/SFML/include/SFML/Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
BindFlags	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    UINT BindFlags;$/;"	m	struct:AVD3D11VAFramesContext	typeref:typename:UINT
BoolType	lib/SFML/include/SFML/Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet	typeref:typename:bool (Packet::*)(std::size_t)
Broadcast	lib/SFML/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages /;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
BufferedPart	src/Modules/Tier1.cpp	/^struct BufferedPart {$/;"	s	file:
Building	doc/contributing.md	/^## Building$/;"	s	chapter:SAR: Contributing Guide
ButtonCode_t	src/Modules/InputSystem.hpp	/^enum ButtonCode_t {$/;"	g
Buttons	doc/contributing.md	/^#### Buttons$/;"	t	subsection:SAR: Contributing Guide""Coding""Separate
CALL_ABS	lib/minhook/trampoline.h	/^} CALL_ABS;$/;"	t	typeref:struct:_CALL_ABS
CALL_REL	lib/minhook/trampoline.h	/^} JMP_REL, *PJMP_REL, CALL_REL;$/;"	t	typeref:struct:_JMP_REL
CBaseAutoCompleteFileList	src/Modules/Tier1.cpp	/^CBaseAutoCompleteFileList::CBaseAutoCompleteFileList(const char *cmdname, const char *subdir, co/;"	f	class:CBaseAutoCompleteFileList
CBaseAutoCompleteFileList	src/Modules/Tier1.hpp	/^struct CBaseAutoCompleteFileList {$/;"	s
CBaseEdict	src/Utils/SDK.hpp	/^struct CBaseEdict {$/;"	s
CBaseHandle	src/Utils/SDK.hpp	/^class CBaseHandle {$/;"	c
CBaseTrace	src/Utils/SDK.hpp	/^struct CBaseTrace {$/;"	s
CCommand	src/Utils/SDK.hpp	/^struct CCommand {$/;"	s
CCommandBufferSize	src/Offsets.cpp	/^	int CCommandBufferSize;$/;"	v	namespace:Offsets	typeref:typename:int
CENTER	src/Features/Hud/Toasts.cpp	/^	CENTER,$/;"	e	enum:Alignment	file:
CERROR_BREAK	src/Utils/lodepng.cpp	/^#define CERROR_BREAK(/;"	d	file:
CERROR_RETURN_ERROR	src/Utils/lodepng.cpp	/^#define CERROR_RETURN_ERROR(/;"	d	file:
CERROR_TRY_RETURN	src/Utils/lodepng.cpp	/^#define CERROR_TRY_RETURN(/;"	d	file:
CEntInfo	src/Utils/SDK.hpp	/^struct CEntInfo {$/;"	s
CEventAction	src/Utils/SDK.hpp	/^struct CEventAction {$/;"	s
CEventQueue	src/Utils/SDK.hpp	/^struct CEventQueue {$/;"	s
CFontAmalgam	src/Utils/SDK.hpp	/^struct CFontAmalgam $/;"	s
CGameEventDescriptor_Size	src/Features/Listener.hpp	/^#define CGameEventDescriptor_Size /;"	d
CGameEventManager_m_GameEvents	src/Features/Listener.hpp	/^#define CGameEventManager_m_GameEvents /;"	d
CGameEventManager_m_GameEvents_name	src/Features/Listener.hpp	/^#define CGameEventManager_m_GameEvents_name /;"	d
CGameEventManager_m_Size	src/Features/Listener.hpp	/^#define CGameEventManager_m_Size /;"	d
CGameTrace	src/Utils/SDK.hpp	/^struct CGameTrace : public CBaseTrace {$/;"	s
CGlobalVars	src/Utils/SDK.hpp	/^struct CGlobalVars : CGlobalVarsBase {$/;"	s
CGlobalVarsBase	src/Utils/SDK.hpp	/^struct CGlobalVarsBase {$/;"	s
CHALLENGE	src/Modules/Client.hpp	/^	CHALLENGE,$/;"	e	enum:CMStatus
CHECK_TOKS	src/Features/Tas/TasParser.cpp	/^#define CHECK_TOKS(/;"	d	file:
CHLMoveData	src/Utils/SDK.hpp	/^class CHLMoveData : public CMoveData {$/;"	c
CHostState	src/Utils/SDK.hpp	/^struct CHostState {$/;"	s
CIDEntry	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^typedef struct CIDEntry {$/;"	s
CIDEntry	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^} CIDEntry;$/;"	t	typeref:struct:CIDEntry
CIRCLE	src/Features/Demo/GhostEntity.hpp	/^	CIRCLE = 0,$/;"	e	enum:GhostType
CLCL_ORDER	src/Utils/lodepng.cpp	/^static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11,/;"	v	typeref:typename:const unsigned[]	file:
CLEAR_OUT_STACK	src/Features/ConfigPlus.cpp	/^#define CLEAR_OUT_STACK /;"	d	file:
CM	src/Features/ConfigPlus.cpp	/^		CM,$/;"	e	enum:Condition::__anon194454350203	file:
CMD	src/Cheats.cpp	/^#define CMD(/;"	d	file:
CMStatus	src/Modules/Client.hpp	/^enum class CMStatus {$/;"	g
CMTotalTime	src/Features/Stats/StatsCounter.hpp	/^	float CMTotalTime;$/;"	m	struct:MapStats	typeref:typename:float
CM_FLAGS	src/Event.hpp	/^		CM_FLAGS,$/;"	e	enum:Event::EventType
CM_FLAGS_MESSAGE_TYPE	src/Modules/Server.cpp	/^#define CM_FLAGS_MESSAGE_TYPE /;"	d	file:
CMoveData	src/Utils/SDK.hpp	/^struct CMoveData {$/;"	s
CMretries	src/Features/Stats/StatsCounter.hpp	/^	int CMretries;$/;"	m	struct:MapStats	typeref:typename:int
COLOR_CHANGE	src/Features/Demo/NetworkGhostPlayer.hpp	/^	COLOR_CHANGE,$/;"	e	enum:HEADER
COL_PRINT	src/Modules/Tier1.cpp	/^		COL_PRINT,$/;"	e	enum:BufferedPart::Type	file:
COMMAND_COMPLETION_ITEM_LENGTH	src/Utils/SDK.hpp	/^#define COMMAND_COMPLETION_ITEM_LENGTH /;"	d
COMMAND_COMPLETION_MAXITEMS	src/Utils/SDK.hpp	/^#define COMMAND_COMPLETION_MAXITEMS /;"	d
COMMAND_MAX_ARGC	src/Utils/SDK.hpp	/^		COMMAND_MAX_ARGC = 64,$/;"	e	enum:CCommand::__anon21a65a740103
COMMAND_MAX_LENGTH	src/Utils/SDK.hpp	/^		COMMAND_MAX_LENGTH = 512$/;"	e	enum:CCommand::__anon21a65a740103
COMMENTS	src/Utils/json11.hpp	/^		COMMENTS$/;"	e	enum:json11::JsonParse
COMPACT_SIDE_PAD	src/Features/Hud/Toasts.cpp	/^#define COMPACT_SIDE_PAD /;"	d	file:
COMPACT_TOAST_PAD	src/Features/Hud/Toasts.cpp	/^#define COMPACT_TOAST_PAD /;"	d	file:
CONCOLORMSG_SYMBOL	src/Modules/Console.hpp	/^#	define CONCOLORMSG_SYMBOL /;"	d
CONFIG_EXEC	src/Event.hpp	/^		CONFIG_EXEC,$/;"	e	enum:Event::EventType
CONNECT	src/Features/Demo/NetworkGhostPlayer.hpp	/^	CONNECT,$/;"	e	enum:HEADER
CONSECUTIVE_END	src/Features/Hud/ScrollSpeed.cpp	/^#define CONSECUTIVE_END /;"	d	file:
CONTENTS_AREAPORTAL	src/Utils/SDK.hpp	/^#define CONTENTS_AREAPORTAL /;"	d
CONTENTS_AUX	src/Utils/SDK.hpp	/^#define CONTENTS_AUX /;"	d
CONTENTS_BLOCKLOS	src/Utils/SDK.hpp	/^#define CONTENTS_BLOCKLOS /;"	d
CONTENTS_CURRENT_0	src/Utils/SDK.hpp	/^#define CONTENTS_CURRENT_0 /;"	d
CONTENTS_CURRENT_180	src/Utils/SDK.hpp	/^#define CONTENTS_CURRENT_180 /;"	d
CONTENTS_CURRENT_270	src/Utils/SDK.hpp	/^#define CONTENTS_CURRENT_270 /;"	d
CONTENTS_CURRENT_90	src/Utils/SDK.hpp	/^#define CONTENTS_CURRENT_90 /;"	d
CONTENTS_CURRENT_DOWN	src/Utils/SDK.hpp	/^#define CONTENTS_CURRENT_DOWN /;"	d
CONTENTS_CURRENT_UP	src/Utils/SDK.hpp	/^#define CONTENTS_CURRENT_UP /;"	d
CONTENTS_DEBRIS	src/Utils/SDK.hpp	/^#define CONTENTS_DEBRIS /;"	d
CONTENTS_DETAIL	src/Utils/SDK.hpp	/^#define CONTENTS_DETAIL /;"	d
CONTENTS_EMPTY	src/Utils/SDK.hpp	/^#define CONTENTS_EMPTY /;"	d
CONTENTS_GRATE	src/Utils/SDK.hpp	/^#define CONTENTS_GRATE /;"	d
CONTENTS_HITBOX	src/Utils/SDK.hpp	/^#define CONTENTS_HITBOX /;"	d
CONTENTS_IGNORE_NODRAW_OPAQUE	src/Utils/SDK.hpp	/^#define CONTENTS_IGNORE_NODRAW_OPAQUE /;"	d
CONTENTS_LADDER	src/Utils/SDK.hpp	/^#define CONTENTS_LADDER /;"	d
CONTENTS_MONSTER	src/Utils/SDK.hpp	/^#define CONTENTS_MONSTER /;"	d
CONTENTS_MONSTERCLIP	src/Utils/SDK.hpp	/^#define CONTENTS_MONSTERCLIP /;"	d
CONTENTS_MOVEABLE	src/Utils/SDK.hpp	/^#define CONTENTS_MOVEABLE /;"	d
CONTENTS_OPAQUE	src/Utils/SDK.hpp	/^#define CONTENTS_OPAQUE /;"	d
CONTENTS_ORIGIN	src/Utils/SDK.hpp	/^#define CONTENTS_ORIGIN /;"	d
CONTENTS_PLAYERCLIP	src/Utils/SDK.hpp	/^#define CONTENTS_PLAYERCLIP /;"	d
CONTENTS_SLIME	src/Utils/SDK.hpp	/^#define CONTENTS_SLIME /;"	d
CONTENTS_SOLID	src/Utils/SDK.hpp	/^#define CONTENTS_SOLID /;"	d
CONTENTS_TEAM1	src/Utils/SDK.hpp	/^#define CONTENTS_TEAM1 /;"	d
CONTENTS_TEAM2	src/Utils/SDK.hpp	/^#define CONTENTS_TEAM2 /;"	d
CONTENTS_TESTFOGVOLUME	src/Utils/SDK.hpp	/^#define CONTENTS_TESTFOGVOLUME /;"	d
CONTENTS_TRANSLUCENT	src/Utils/SDK.hpp	/^#define CONTENTS_TRANSLUCENT /;"	d
CONTENTS_UNUSED	src/Utils/SDK.hpp	/^#define CONTENTS_UNUSED /;"	d
CONTENTS_UNUSED6	src/Utils/SDK.hpp	/^#define CONTENTS_UNUSED6 /;"	d
CONTENTS_WATER	src/Utils/SDK.hpp	/^#define CONTENTS_WATER /;"	d
CONTENTS_WINDOW	src/Utils/SDK.hpp	/^#define CONTENTS_WINDOW /;"	d
CON_COMMAND	src/Command.hpp	/^#define CON_COMMAND(/;"	d
CON_COMMAND_AUTOCOMPLETEFILE	src/Command.hpp	/^#define CON_COMMAND_AUTOCOMPLETEFILE(/;"	d
CON_COMMAND_COMPLETION	src/Command.hpp	/^#define CON_COMMAND_COMPLETION(/;"	d
CON_COMMAND_F	src/Command.hpp	/^#define CON_COMMAND_F(/;"	d
CON_COMMAND_F_COMPLETION	src/Command.hpp	/^#define CON_COMMAND_F_COMPLETION(/;"	d
CON_COMMAND_HUD_SETPOS	src/Features/Hud/Hud.hpp	/^#define CON_COMMAND_HUD_SETPOS(/;"	d
COOP	src/Features/ConfigPlus.cpp	/^		COOP,$/;"	e	enum:Condition::__anon194454350203	file:
COOP_NAME_MESSAGE_TYPE	src/Features/AutoSubmit.cpp	/^#define COOP_NAME_MESSAGE_TYPE /;"	d	file:
COOP_RESET_DONE	src/Event.hpp	/^		COOP_RESET_DONE,$/;"	e	enum:Event::EventType
COOP_RESET_REMOTE	src/Event.hpp	/^		COOP_RESET_REMOTE,$/;"	e	enum:Event::EventType
COUNTDOWN	src/Features/Demo/NetworkGhostPlayer.hpp	/^	COUNTDOWN,$/;"	e	enum:HEADER
CPlugin	src/Utils/SDK.hpp	/^struct CPlugin {$/;"	s
CPortalPlayerLocalData	src/Utils/SDK.hpp	/^class CPortalPlayerLocalData {$/;"	c
CRASH_REPORTS_DIR	src/CrashHandler.cpp	/^#define CRASH_REPORTS_DIR /;"	d	file:
CRC32_t	src/Utils/SDK.hpp	/^typedef unsigned long CRC32_t;$/;"	t	typeref:typename:unsigned long
CSV_EXTENSION	src/Utils.hpp	/^#define CSV_EXTENSION /;"	d
CSV_SEPARATOR	src/Utils.hpp	/^#define CSV_SEPARATOR /;"	d
CServerPlugin_m_Plugins	src/Plugin.hpp	/^#define CServerPlugin_m_Plugins /;"	d
CServerPlugin_m_Size	src/Plugin.hpp	/^#define CServerPlugin_m_Size /;"	d
CTraceFilter	src/Utils/SDK.hpp	/^class CTraceFilter : public ITraceFilter {$/;"	c
CTraceFilterSimple	src/Utils/SDK.hpp	/^class CTraceFilterSimple : public CTraceFilter {$/;"	c
CURL	lib/curl/include/curl/curl.h	/^typedef struct Curl_easy CURL;$/;"	t	typeref:struct:Curl_easy
CURLALTSVC_H1	lib/curl/include/curl/curl.h	/^#define CURLALTSVC_H1 /;"	d
CURLALTSVC_H2	lib/curl/include/curl/curl.h	/^#define CURLALTSVC_H2 /;"	d
CURLALTSVC_H3	lib/curl/include/curl/curl.h	/^#define CURLALTSVC_H3 /;"	d
CURLALTSVC_READONLYFILE	lib/curl/include/curl/curl.h	/^#define CURLALTSVC_READONLYFILE /;"	d
CURLAUTH_ANY	lib/curl/include/curl/curl.h	/^#define CURLAUTH_ANY /;"	d
CURLAUTH_ANYSAFE	lib/curl/include/curl/curl.h	/^#define CURLAUTH_ANYSAFE /;"	d
CURLAUTH_AWS_SIGV4	lib/curl/include/curl/curl.h	/^#define CURLAUTH_AWS_SIGV4 /;"	d
CURLAUTH_BASIC	lib/curl/include/curl/curl.h	/^#define CURLAUTH_BASIC /;"	d
CURLAUTH_BEARER	lib/curl/include/curl/curl.h	/^#define CURLAUTH_BEARER /;"	d
CURLAUTH_DIGEST	lib/curl/include/curl/curl.h	/^#define CURLAUTH_DIGEST /;"	d
CURLAUTH_DIGEST_IE	lib/curl/include/curl/curl.h	/^#define CURLAUTH_DIGEST_IE /;"	d
CURLAUTH_GSSAPI	lib/curl/include/curl/curl.h	/^#define CURLAUTH_GSSAPI /;"	d
CURLAUTH_GSSNEGOTIATE	lib/curl/include/curl/curl.h	/^#define CURLAUTH_GSSNEGOTIATE /;"	d
CURLAUTH_NEGOTIATE	lib/curl/include/curl/curl.h	/^#define CURLAUTH_NEGOTIATE /;"	d
CURLAUTH_NONE	lib/curl/include/curl/curl.h	/^#define CURLAUTH_NONE /;"	d
CURLAUTH_NTLM	lib/curl/include/curl/curl.h	/^#define CURLAUTH_NTLM /;"	d
CURLAUTH_NTLM_WB	lib/curl/include/curl/curl.h	/^#define CURLAUTH_NTLM_WB /;"	d
CURLAUTH_ONLY	lib/curl/include/curl/curl.h	/^#define CURLAUTH_ONLY /;"	d
CURLCLOSEPOLICY_CALLBACK	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_CALLBACK,$/;"	e	enum:__anon5737ba341b03
CURLCLOSEPOLICY_LAST	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_LAST \/* last, never use this *\/$/;"	e	enum:__anon5737ba341b03
CURLCLOSEPOLICY_LEAST_RECENTLY_USED	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_LEAST_RECENTLY_USED,$/;"	e	enum:__anon5737ba341b03
CURLCLOSEPOLICY_LEAST_TRAFFIC	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_LEAST_TRAFFIC,$/;"	e	enum:__anon5737ba341b03
CURLCLOSEPOLICY_NONE	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_NONE, \/* first, never use this *\/$/;"	e	enum:__anon5737ba341b03
CURLCLOSEPOLICY_OLDEST	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_OLDEST,$/;"	e	enum:__anon5737ba341b03
CURLCLOSEPOLICY_SLOWEST	lib/curl/include/curl/curl.h	/^  CURLCLOSEPOLICY_SLOWEST,$/;"	e	enum:__anon5737ba341b03
CURLE_ABORTED_BY_CALLBACK	lib/curl/include/curl/curl.h	/^  CURLE_ABORTED_BY_CALLBACK,     \/* 42 *\/$/;"	e	enum:__anon5737ba340803
CURLE_AGAIN	lib/curl/include/curl/curl.h	/^  CURLE_AGAIN,                   \/* 81 - socket is not ready for send\/recv,$/;"	e	enum:__anon5737ba340803
CURLE_ALREADY_COMPLETE	lib/curl/include/curl/curl.h	/^#define CURLE_ALREADY_COMPLETE /;"	d
CURLE_AUTH_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_AUTH_ERROR,              \/* 94 - an authentication function returned an$/;"	e	enum:__anon5737ba340803
CURLE_BAD_CALLING_ORDER	lib/curl/include/curl/curl.h	/^#define CURLE_BAD_CALLING_ORDER /;"	d
CURLE_BAD_CONTENT_ENCODING	lib/curl/include/curl/curl.h	/^  CURLE_BAD_CONTENT_ENCODING,    \/* 61 - Unrecognized\/bad encoding *\/$/;"	e	enum:__anon5737ba340803
CURLE_BAD_DOWNLOAD_RESUME	lib/curl/include/curl/curl.h	/^  CURLE_BAD_DOWNLOAD_RESUME,     \/* 36 - couldn't resume download *\/$/;"	e	enum:__anon5737ba340803
CURLE_BAD_FUNCTION_ARGUMENT	lib/curl/include/curl/curl.h	/^  CURLE_BAD_FUNCTION_ARGUMENT,   \/* 43 *\/$/;"	e	enum:__anon5737ba340803
CURLE_BAD_PASSWORD_ENTERED	lib/curl/include/curl/curl.h	/^#define CURLE_BAD_PASSWORD_ENTERED /;"	d
CURLE_CHUNK_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_CHUNK_FAILED,            \/* 88 - chunk callback reported error *\/$/;"	e	enum:__anon5737ba340803
CURLE_CONV_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_CONV_FAILED,             \/* 75 - conversion failed *\/$/;"	e	enum:__anon5737ba340803
CURLE_CONV_REQD	lib/curl/include/curl/curl.h	/^  CURLE_CONV_REQD,               \/* 76 - caller must register conversion$/;"	e	enum:__anon5737ba340803
CURLE_COULDNT_CONNECT	lib/curl/include/curl/curl.h	/^  CURLE_COULDNT_CONNECT,         \/* 7 *\/$/;"	e	enum:__anon5737ba340803
CURLE_COULDNT_RESOLVE_HOST	lib/curl/include/curl/curl.h	/^  CURLE_COULDNT_RESOLVE_HOST,    \/* 6 *\/$/;"	e	enum:__anon5737ba340803
CURLE_COULDNT_RESOLVE_PROXY	lib/curl/include/curl/curl.h	/^  CURLE_COULDNT_RESOLVE_PROXY,   \/* 5 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FAILED_INIT	lib/curl/include/curl/curl.h	/^  CURLE_FAILED_INIT,             \/* 2 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FILESIZE_EXCEEDED	lib/curl/include/curl/curl.h	/^  CURLE_FILESIZE_EXCEEDED,       \/* 63 - Maximum file size exceeded *\/$/;"	e	enum:__anon5737ba340803
CURLE_FILE_COULDNT_READ_FILE	lib/curl/include/curl/curl.h	/^  CURLE_FILE_COULDNT_READ_FILE,  \/* 37 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_ACCEPT_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_FTP_ACCEPT_FAILED,       \/* 10 - [was obsoleted in April 2006 for$/;"	e	enum:__anon5737ba340803
CURLE_FTP_ACCEPT_TIMEOUT	lib/curl/include/curl/curl.h	/^  CURLE_FTP_ACCEPT_TIMEOUT,      \/* 12 - timeout occurred accepting server$/;"	e	enum:__anon5737ba340803
CURLE_FTP_ACCESS_DENIED	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_ACCESS_DENIED /;"	d
CURLE_FTP_BAD_DOWNLOAD_RESUME	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_BAD_DOWNLOAD_RESUME /;"	d
CURLE_FTP_BAD_FILE_LIST	lib/curl/include/curl/curl.h	/^  CURLE_FTP_BAD_FILE_LIST,       \/* 87 - unable to parse FTP file list *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_CANT_GET_HOST	lib/curl/include/curl/curl.h	/^  CURLE_FTP_CANT_GET_HOST,       \/* 15 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_CANT_RECONNECT	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_CANT_RECONNECT /;"	d
CURLE_FTP_COULDNT_GET_SIZE	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_COULDNT_GET_SIZE /;"	d
CURLE_FTP_COULDNT_RETR_FILE	lib/curl/include/curl/curl.h	/^  CURLE_FTP_COULDNT_RETR_FILE,   \/* 19 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_COULDNT_SET_ASCII	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_COULDNT_SET_ASCII /;"	d
CURLE_FTP_COULDNT_SET_BINARY	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_COULDNT_SET_BINARY /;"	d
CURLE_FTP_COULDNT_SET_TYPE	lib/curl/include/curl/curl.h	/^  CURLE_FTP_COULDNT_SET_TYPE,    \/* 17 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_COULDNT_STOR_FILE	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_COULDNT_STOR_FILE /;"	d
CURLE_FTP_COULDNT_USE_REST	lib/curl/include/curl/curl.h	/^  CURLE_FTP_COULDNT_USE_REST,    \/* 31 - the REST command failed *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_PARTIAL_FILE	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_PARTIAL_FILE /;"	d
CURLE_FTP_PORT_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_FTP_PORT_FAILED,         \/* 30 - FTP PORT operation failed *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_PRET_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_FTP_PRET_FAILED,         \/* 84 - a PRET command failed *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_QUOTE_ERROR	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_QUOTE_ERROR /;"	d
CURLE_FTP_SSL_FAILED	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_SSL_FAILED /;"	d
CURLE_FTP_USER_PASSWORD_INCORRECT	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_USER_PASSWORD_INCORRECT /;"	d
CURLE_FTP_WEIRD_227_FORMAT	lib/curl/include/curl/curl.h	/^  CURLE_FTP_WEIRD_227_FORMAT,    \/* 14 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_WEIRD_PASS_REPLY	lib/curl/include/curl/curl.h	/^  CURLE_FTP_WEIRD_PASS_REPLY,    \/* 11 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_WEIRD_PASV_REPLY	lib/curl/include/curl/curl.h	/^  CURLE_FTP_WEIRD_PASV_REPLY,    \/* 13 *\/$/;"	e	enum:__anon5737ba340803
CURLE_FTP_WEIRD_SERVER_REPLY	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_WEIRD_SERVER_REPLY /;"	d
CURLE_FTP_WEIRD_USER_REPLY	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_WEIRD_USER_REPLY /;"	d
CURLE_FTP_WRITE_ERROR	lib/curl/include/curl/curl.h	/^#define CURLE_FTP_WRITE_ERROR /;"	d
CURLE_FUNCTION_NOT_FOUND	lib/curl/include/curl/curl.h	/^  CURLE_FUNCTION_NOT_FOUND,      \/* 41 - NOT USED starting with 7.53.0 *\/$/;"	e	enum:__anon5737ba340803
CURLE_GOT_NOTHING	lib/curl/include/curl/curl.h	/^  CURLE_GOT_NOTHING,             \/* 52 - when this is a specific error *\/$/;"	e	enum:__anon5737ba340803
CURLE_HTTP2	lib/curl/include/curl/curl.h	/^  CURLE_HTTP2,                   \/* 16 - A problem in the http2 framing layer.$/;"	e	enum:__anon5737ba340803
CURLE_HTTP2_STREAM	lib/curl/include/curl/curl.h	/^  CURLE_HTTP2_STREAM,            \/* 92 - stream error in HTTP\/2 framing layer$/;"	e	enum:__anon5737ba340803
CURLE_HTTP3	lib/curl/include/curl/curl.h	/^  CURLE_HTTP3,                   \/* 95 - An HTTP\/3 layer problem *\/$/;"	e	enum:__anon5737ba340803
CURLE_HTTP_NOT_FOUND	lib/curl/include/curl/curl.h	/^#define CURLE_HTTP_NOT_FOUND /;"	d
CURLE_HTTP_PORT_FAILED	lib/curl/include/curl/curl.h	/^#define CURLE_HTTP_PORT_FAILED /;"	d
CURLE_HTTP_POST_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_HTTP_POST_ERROR,         \/* 34 *\/$/;"	e	enum:__anon5737ba340803
CURLE_HTTP_RANGE_ERROR	lib/curl/include/curl/curl.h	/^#define CURLE_HTTP_RANGE_ERROR /;"	d
CURLE_HTTP_RETURNED_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_HTTP_RETURNED_ERROR,     \/* 22 *\/$/;"	e	enum:__anon5737ba340803
CURLE_INTERFACE_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_INTERFACE_FAILED,        \/* 45 - CURLOPT_INTERFACE failed *\/$/;"	e	enum:__anon5737ba340803
CURLE_LDAP_CANNOT_BIND	lib/curl/include/curl/curl.h	/^  CURLE_LDAP_CANNOT_BIND,        \/* 38 *\/$/;"	e	enum:__anon5737ba340803
CURLE_LDAP_INVALID_URL	lib/curl/include/curl/curl.h	/^  CURLE_LDAP_INVALID_URL,        \/* 62 - Invalid LDAP URL *\/$/;"	e	enum:__anon5737ba340803
CURLE_LDAP_SEARCH_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_LDAP_SEARCH_FAILED,      \/* 39 *\/$/;"	e	enum:__anon5737ba340803
CURLE_LIBRARY_NOT_FOUND	lib/curl/include/curl/curl.h	/^#define CURLE_LIBRARY_NOT_FOUND /;"	d
CURLE_LOGIN_DENIED	lib/curl/include/curl/curl.h	/^  CURLE_LOGIN_DENIED,            \/* 67 - user, password or similar was not$/;"	e	enum:__anon5737ba340803
CURLE_MALFORMAT_USER	lib/curl/include/curl/curl.h	/^#define CURLE_MALFORMAT_USER /;"	d
CURLE_NOT_BUILT_IN	lib/curl/include/curl/curl.h	/^  CURLE_NOT_BUILT_IN,            \/* 4 - [was obsoleted in August 2007 for$/;"	e	enum:__anon5737ba340803
CURLE_NO_CONNECTION_AVAILABLE	lib/curl/include/curl/curl.h	/^  CURLE_NO_CONNECTION_AVAILABLE, \/* 89 - No connection available, the$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE	lib/curl/include/curl/curl.h	/^#define CURLE_OBSOLETE /;"	d
CURLE_OBSOLETE10	lib/curl/include/curl/curl.h	/^#define CURLE_OBSOLETE10 /;"	d
CURLE_OBSOLETE12	lib/curl/include/curl/curl.h	/^#define CURLE_OBSOLETE12 /;"	d
CURLE_OBSOLETE16	lib/curl/include/curl/curl.h	/^#define CURLE_OBSOLETE16 /;"	d
CURLE_OBSOLETE20	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE20,              \/* 20 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE24	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE24,              \/* 24 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE29	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE29,              \/* 29 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE32	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE32,              \/* 32 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE40	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE40,              \/* 40 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE44	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE44,              \/* 44 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE46	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE46,              \/* 46 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE50	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE50,              \/* 50 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE51	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE51,              \/* 51 - NOT USED *\/$/;"	e	enum:__anon5737ba340803
CURLE_OBSOLETE57	lib/curl/include/curl/curl.h	/^  CURLE_OBSOLETE57,              \/* 57 - NOT IN USE *\/$/;"	e	enum:__anon5737ba340803
CURLE_OK	lib/curl/include/curl/curl.h	/^  CURLE_OK = 0,$/;"	e	enum:__anon5737ba340803
CURLE_OPERATION_TIMEDOUT	lib/curl/include/curl/curl.h	/^  CURLE_OPERATION_TIMEDOUT,      \/* 28 - the timeout time was reached *\/$/;"	e	enum:__anon5737ba340803
CURLE_OPERATION_TIMEOUTED	lib/curl/include/curl/curl.h	/^#define CURLE_OPERATION_TIMEOUTED /;"	d
CURLE_OUT_OF_MEMORY	lib/curl/include/curl/curl.h	/^  CURLE_OUT_OF_MEMORY,           \/* 27 *\/$/;"	e	enum:__anon5737ba340803
CURLE_PARTIAL_FILE	lib/curl/include/curl/curl.h	/^  CURLE_PARTIAL_FILE,            \/* 18 *\/$/;"	e	enum:__anon5737ba340803
CURLE_PEER_FAILED_VERIFICATION	lib/curl/include/curl/curl.h	/^  CURLE_PEER_FAILED_VERIFICATION, \/* 60 - peer's certificate or fingerprint$/;"	e	enum:__anon5737ba340803
CURLE_PROXY	lib/curl/include/curl/curl.h	/^  CURLE_PROXY,                   \/* 97 - proxy handshake error *\/$/;"	e	enum:__anon5737ba340803
CURLE_QUIC_CONNECT_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_QUIC_CONNECT_ERROR,      \/* 96 - QUIC connection error *\/$/;"	e	enum:__anon5737ba340803
CURLE_QUOTE_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_QUOTE_ERROR,             \/* 21 - quote command failure *\/$/;"	e	enum:__anon5737ba340803
CURLE_RANGE_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_RANGE_ERROR,             \/* 33 - RANGE "command" didn't work *\/$/;"	e	enum:__anon5737ba340803
CURLE_READ_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_READ_ERROR,              \/* 26 - couldn't open\/read from file *\/$/;"	e	enum:__anon5737ba340803
CURLE_RECURSIVE_API_CALL	lib/curl/include/curl/curl.h	/^  CURLE_RECURSIVE_API_CALL,      \/* 93 - an api function was called from$/;"	e	enum:__anon5737ba340803
CURLE_RECV_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_RECV_ERROR,              \/* 56 - failure in receiving network data *\/$/;"	e	enum:__anon5737ba340803
CURLE_REMOTE_ACCESS_DENIED	lib/curl/include/curl/curl.h	/^  CURLE_REMOTE_ACCESS_DENIED,    \/* 9 a service was denied by the server$/;"	e	enum:__anon5737ba340803
CURLE_REMOTE_DISK_FULL	lib/curl/include/curl/curl.h	/^  CURLE_REMOTE_DISK_FULL,        \/* 70 - out of disk space on server *\/$/;"	e	enum:__anon5737ba340803
CURLE_REMOTE_FILE_EXISTS	lib/curl/include/curl/curl.h	/^  CURLE_REMOTE_FILE_EXISTS,      \/* 73 - File already exists *\/$/;"	e	enum:__anon5737ba340803
CURLE_REMOTE_FILE_NOT_FOUND	lib/curl/include/curl/curl.h	/^  CURLE_REMOTE_FILE_NOT_FOUND,   \/* 78 - remote file not found *\/$/;"	e	enum:__anon5737ba340803
CURLE_RTSP_CSEQ_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_RTSP_CSEQ_ERROR,         \/* 85 - mismatch of RTSP CSeq numbers *\/$/;"	e	enum:__anon5737ba340803
CURLE_RTSP_SESSION_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_RTSP_SESSION_ERROR,      \/* 86 - mismatch of RTSP Session Ids *\/$/;"	e	enum:__anon5737ba340803
CURLE_SEND_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_SEND_ERROR,              \/* 55 - failed sending network data *\/$/;"	e	enum:__anon5737ba340803
CURLE_SEND_FAIL_REWIND	lib/curl/include/curl/curl.h	/^  CURLE_SEND_FAIL_REWIND,        \/* 65 - Sending the data requires a rewind$/;"	e	enum:__anon5737ba340803
CURLE_SHARE_IN_USE	lib/curl/include/curl/curl.h	/^#define CURLE_SHARE_IN_USE /;"	d
CURLE_SSH	lib/curl/include/curl/curl.h	/^  CURLE_SSH,                     \/* 79 - error from the SSH layer, somewhat$/;"	e	enum:__anon5737ba340803
CURLE_SSL_CACERT	lib/curl/include/curl/curl.h	/^#define CURLE_SSL_CACERT /;"	d
CURLE_SSL_CACERT_BADFILE	lib/curl/include/curl/curl.h	/^  CURLE_SSL_CACERT_BADFILE,      \/* 77 - could not load CACERT file, missing$/;"	e	enum:__anon5737ba340803
CURLE_SSL_CERTPROBLEM	lib/curl/include/curl/curl.h	/^  CURLE_SSL_CERTPROBLEM,         \/* 58 - problem with the local certificate *\/$/;"	e	enum:__anon5737ba340803
CURLE_SSL_CIPHER	lib/curl/include/curl/curl.h	/^  CURLE_SSL_CIPHER,              \/* 59 - couldn't use specified cipher *\/$/;"	e	enum:__anon5737ba340803
CURLE_SSL_CONNECT_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_SSL_CONNECT_ERROR,       \/* 35 - wrong when connecting with SSL *\/$/;"	e	enum:__anon5737ba340803
CURLE_SSL_CRL_BADFILE	lib/curl/include/curl/curl.h	/^  CURLE_SSL_CRL_BADFILE,         \/* 82 - could not load CRL file, missing or$/;"	e	enum:__anon5737ba340803
CURLE_SSL_ENGINE_INITFAILED	lib/curl/include/curl/curl.h	/^  CURLE_SSL_ENGINE_INITFAILED,   \/* 66 - failed to initialise ENGINE *\/$/;"	e	enum:__anon5737ba340803
CURLE_SSL_ENGINE_NOTFOUND	lib/curl/include/curl/curl.h	/^  CURLE_SSL_ENGINE_NOTFOUND,     \/* 53 - SSL crypto engine not found *\/$/;"	e	enum:__anon5737ba340803
CURLE_SSL_ENGINE_SETFAILED	lib/curl/include/curl/curl.h	/^  CURLE_SSL_ENGINE_SETFAILED,    \/* 54 - can not set SSL crypto engine as$/;"	e	enum:__anon5737ba340803
CURLE_SSL_INVALIDCERTSTATUS	lib/curl/include/curl/curl.h	/^  CURLE_SSL_INVALIDCERTSTATUS,   \/* 91 - invalid certificate status *\/$/;"	e	enum:__anon5737ba340803
CURLE_SSL_ISSUER_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_SSL_ISSUER_ERROR,        \/* 83 - Issuer check failed.  (Added in$/;"	e	enum:__anon5737ba340803
CURLE_SSL_PEER_CERTIFICATE	lib/curl/include/curl/curl.h	/^#define CURLE_SSL_PEER_CERTIFICATE /;"	d
CURLE_SSL_PINNEDPUBKEYNOTMATCH	lib/curl/include/curl/curl.h	/^  CURLE_SSL_PINNEDPUBKEYNOTMATCH, \/* 90 - specified pinned public key did not$/;"	e	enum:__anon5737ba340803
CURLE_SSL_SHUTDOWN_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_SSL_SHUTDOWN_FAILED,     \/* 80 - Failed to shut down the SSL$/;"	e	enum:__anon5737ba340803
CURLE_TELNET_OPTION_SYNTAX	lib/curl/include/curl/curl.h	/^  CURLE_TELNET_OPTION_SYNTAX,    \/* 49 - Malformed telnet option *\/$/;"	e	enum:__anon5737ba340803
CURLE_TFTP_DISKFULL	lib/curl/include/curl/curl.h	/^#define CURLE_TFTP_DISKFULL /;"	d
CURLE_TFTP_EXISTS	lib/curl/include/curl/curl.h	/^#define CURLE_TFTP_EXISTS /;"	d
CURLE_TFTP_ILLEGAL	lib/curl/include/curl/curl.h	/^  CURLE_TFTP_ILLEGAL,            \/* 71 - Illegal TFTP operation *\/$/;"	e	enum:__anon5737ba340803
CURLE_TFTP_NOSUCHUSER	lib/curl/include/curl/curl.h	/^  CURLE_TFTP_NOSUCHUSER,         \/* 74 - No such user *\/$/;"	e	enum:__anon5737ba340803
CURLE_TFTP_NOTFOUND	lib/curl/include/curl/curl.h	/^  CURLE_TFTP_NOTFOUND,           \/* 68 - file not found on server *\/$/;"	e	enum:__anon5737ba340803
CURLE_TFTP_PERM	lib/curl/include/curl/curl.h	/^  CURLE_TFTP_PERM,               \/* 69 - permission problem on server *\/$/;"	e	enum:__anon5737ba340803
CURLE_TFTP_UNKNOWNID	lib/curl/include/curl/curl.h	/^  CURLE_TFTP_UNKNOWNID,          \/* 72 - Unknown transfer ID *\/$/;"	e	enum:__anon5737ba340803
CURLE_TOO_MANY_REDIRECTS	lib/curl/include/curl/curl.h	/^  CURLE_TOO_MANY_REDIRECTS,      \/* 47 - catch endless re-direct loops *\/$/;"	e	enum:__anon5737ba340803
CURLE_UNKNOWN_OPTION	lib/curl/include/curl/curl.h	/^  CURLE_UNKNOWN_OPTION,          \/* 48 - User specified an unknown option *\/$/;"	e	enum:__anon5737ba340803
CURLE_UNKNOWN_TELNET_OPTION	lib/curl/include/curl/curl.h	/^#define CURLE_UNKNOWN_TELNET_OPTION /;"	d
CURLE_UNSUPPORTED_PROTOCOL	lib/curl/include/curl/curl.h	/^  CURLE_UNSUPPORTED_PROTOCOL,    \/* 1 *\/$/;"	e	enum:__anon5737ba340803
CURLE_UPLOAD_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_UPLOAD_FAILED,           \/* 25 - failed upload "command" *\/$/;"	e	enum:__anon5737ba340803
CURLE_URL_MALFORMAT	lib/curl/include/curl/curl.h	/^  CURLE_URL_MALFORMAT,           \/* 3 *\/$/;"	e	enum:__anon5737ba340803
CURLE_URL_MALFORMAT_USER	lib/curl/include/curl/curl.h	/^#define CURLE_URL_MALFORMAT_USER /;"	d
CURLE_USE_SSL_FAILED	lib/curl/include/curl/curl.h	/^  CURLE_USE_SSL_FAILED,          \/* 64 - Requested FTP SSL level failed *\/$/;"	e	enum:__anon5737ba340803
CURLE_WEIRD_SERVER_REPLY	lib/curl/include/curl/curl.h	/^  CURLE_WEIRD_SERVER_REPLY,      \/* 8 *\/$/;"	e	enum:__anon5737ba340803
CURLE_WRITE_ERROR	lib/curl/include/curl/curl.h	/^  CURLE_WRITE_ERROR,             \/* 23 *\/$/;"	e	enum:__anon5737ba340803
CURLFILETYPE_DEVICE_BLOCK	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_DEVICE_BLOCK,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_DEVICE_CHAR	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_DEVICE_CHAR,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_DIRECTORY	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_DIRECTORY,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_DOOR	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_DOOR, \/* is possible only on Sun Solaris now *\/$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_FILE	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_FILE = 0,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_NAMEDPIPE	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_NAMEDPIPE,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_SOCKET	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_SOCKET,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_SYMLINK	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_SYMLINK,$/;"	e	enum:__anon5737ba340203
CURLFILETYPE_UNKNOWN	lib/curl/include/curl/curl.h	/^  CURLFILETYPE_UNKNOWN \/* should never occur *\/$/;"	e	enum:__anon5737ba340203
CURLFINFOFLAG_KNOWN_FILENAME	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_FILENAME /;"	d
CURLFINFOFLAG_KNOWN_FILETYPE	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_FILETYPE /;"	d
CURLFINFOFLAG_KNOWN_GID	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_GID /;"	d
CURLFINFOFLAG_KNOWN_HLINKCOUNT	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_HLINKCOUNT /;"	d
CURLFINFOFLAG_KNOWN_PERM	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_PERM /;"	d
CURLFINFOFLAG_KNOWN_SIZE	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_SIZE /;"	d
CURLFINFOFLAG_KNOWN_TIME	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_TIME /;"	d
CURLFINFOFLAG_KNOWN_UID	lib/curl/include/curl/curl.h	/^#define CURLFINFOFLAG_KNOWN_UID /;"	d
CURLFORM_ARRAY	lib/curl/include/curl/curl.h	/^  CURLFORM_ARRAY,$/;"	e	enum:__anon5737ba341703
CURLFORM_BUFFER	lib/curl/include/curl/curl.h	/^  CURLFORM_BUFFER,$/;"	e	enum:__anon5737ba341703
CURLFORM_BUFFERLENGTH	lib/curl/include/curl/curl.h	/^  CURLFORM_BUFFERLENGTH,$/;"	e	enum:__anon5737ba341703
CURLFORM_BUFFERPTR	lib/curl/include/curl/curl.h	/^  CURLFORM_BUFFERPTR,$/;"	e	enum:__anon5737ba341703
CURLFORM_CONTENTHEADER	lib/curl/include/curl/curl.h	/^  CURLFORM_CONTENTHEADER,$/;"	e	enum:__anon5737ba341703
CURLFORM_CONTENTLEN	lib/curl/include/curl/curl.h	/^  CURLFORM_CONTENTLEN, \/* added in 7.46.0, provide a curl_off_t length *\/$/;"	e	enum:__anon5737ba341703
CURLFORM_CONTENTSLENGTH	lib/curl/include/curl/curl.h	/^  CURLFORM_CONTENTSLENGTH,$/;"	e	enum:__anon5737ba341703
CURLFORM_CONTENTTYPE	lib/curl/include/curl/curl.h	/^  CURLFORM_CONTENTTYPE,$/;"	e	enum:__anon5737ba341703
CURLFORM_COPYCONTENTS	lib/curl/include/curl/curl.h	/^  CURLFORM_COPYCONTENTS,$/;"	e	enum:__anon5737ba341703
CURLFORM_COPYNAME	lib/curl/include/curl/curl.h	/^  CURLFORM_COPYNAME,$/;"	e	enum:__anon5737ba341703
CURLFORM_END	lib/curl/include/curl/curl.h	/^  CURLFORM_END,$/;"	e	enum:__anon5737ba341703
CURLFORM_FILE	lib/curl/include/curl/curl.h	/^  CURLFORM_FILE,$/;"	e	enum:__anon5737ba341703
CURLFORM_FILECONTENT	lib/curl/include/curl/curl.h	/^  CURLFORM_FILECONTENT,$/;"	e	enum:__anon5737ba341703
CURLFORM_FILENAME	lib/curl/include/curl/curl.h	/^  CURLFORM_FILENAME,$/;"	e	enum:__anon5737ba341703
CURLFORM_LASTENTRY	lib/curl/include/curl/curl.h	/^  CURLFORM_LASTENTRY \/* the last unused *\/$/;"	e	enum:__anon5737ba341703
CURLFORM_NAMELENGTH	lib/curl/include/curl/curl.h	/^  CURLFORM_NAMELENGTH,$/;"	e	enum:__anon5737ba341703
CURLFORM_NOTHING	lib/curl/include/curl/curl.h	/^  CURLFORM_NOTHING,        \/********* the first one is unused ************\/$/;"	e	enum:__anon5737ba341703
CURLFORM_OBSOLETE	lib/curl/include/curl/curl.h	/^  CURLFORM_OBSOLETE,$/;"	e	enum:__anon5737ba341703
CURLFORM_OBSOLETE2	lib/curl/include/curl/curl.h	/^  CURLFORM_OBSOLETE2,$/;"	e	enum:__anon5737ba341703
CURLFORM_PTRCONTENTS	lib/curl/include/curl/curl.h	/^  CURLFORM_PTRCONTENTS,$/;"	e	enum:__anon5737ba341703
CURLFORM_PTRNAME	lib/curl/include/curl/curl.h	/^  CURLFORM_PTRNAME,$/;"	e	enum:__anon5737ba341703
CURLFORM_STREAM	lib/curl/include/curl/curl.h	/^  CURLFORM_STREAM,$/;"	e	enum:__anon5737ba341703
CURLFORMcode	lib/curl/include/curl/curl.h	/^} CURLFORMcode;$/;"	t	typeref:enum:__anon5737ba341803
CURLFTPAUTH_DEFAULT	lib/curl/include/curl/curl.h	/^  CURLFTPAUTH_DEFAULT, \/* let libcurl decide *\/$/;"	e	enum:__anon5737ba340d03
CURLFTPAUTH_LAST	lib/curl/include/curl/curl.h	/^  CURLFTPAUTH_LAST \/* not an option, never use *\/$/;"	e	enum:__anon5737ba340d03
CURLFTPAUTH_SSL	lib/curl/include/curl/curl.h	/^  CURLFTPAUTH_SSL,     \/* use "AUTH SSL" *\/$/;"	e	enum:__anon5737ba340d03
CURLFTPAUTH_TLS	lib/curl/include/curl/curl.h	/^  CURLFTPAUTH_TLS,     \/* use "AUTH TLS" *\/$/;"	e	enum:__anon5737ba340d03
CURLFTPMETHOD_DEFAULT	lib/curl/include/curl/curl.h	/^  CURLFTPMETHOD_DEFAULT,   \/* let libcurl pick *\/$/;"	e	enum:__anon5737ba340f03
CURLFTPMETHOD_LAST	lib/curl/include/curl/curl.h	/^  CURLFTPMETHOD_LAST       \/* not an option, never use *\/$/;"	e	enum:__anon5737ba340f03
CURLFTPMETHOD_MULTICWD	lib/curl/include/curl/curl.h	/^  CURLFTPMETHOD_MULTICWD,  \/* single CWD operation for each path part *\/$/;"	e	enum:__anon5737ba340f03
CURLFTPMETHOD_NOCWD	lib/curl/include/curl/curl.h	/^  CURLFTPMETHOD_NOCWD,     \/* no CWD at all *\/$/;"	e	enum:__anon5737ba340f03
CURLFTPMETHOD_SINGLECWD	lib/curl/include/curl/curl.h	/^  CURLFTPMETHOD_SINGLECWD, \/* one CWD to full dir, then work on file *\/$/;"	e	enum:__anon5737ba340f03
CURLFTPSSL_ALL	lib/curl/include/curl/curl.h	/^#define CURLFTPSSL_ALL /;"	d
CURLFTPSSL_CCC_ACTIVE	lib/curl/include/curl/curl.h	/^  CURLFTPSSL_CCC_ACTIVE,  \/* Initiate the shutdown *\/$/;"	e	enum:__anon5737ba340c03
CURLFTPSSL_CCC_LAST	lib/curl/include/curl/curl.h	/^  CURLFTPSSL_CCC_LAST     \/* not an option, never use *\/$/;"	e	enum:__anon5737ba340c03
CURLFTPSSL_CCC_NONE	lib/curl/include/curl/curl.h	/^  CURLFTPSSL_CCC_NONE,    \/* do not send CCC *\/$/;"	e	enum:__anon5737ba340c03
CURLFTPSSL_CCC_PASSIVE	lib/curl/include/curl/curl.h	/^  CURLFTPSSL_CCC_PASSIVE, \/* Let the server initiate the shutdown *\/$/;"	e	enum:__anon5737ba340c03
CURLFTPSSL_CONTROL	lib/curl/include/curl/curl.h	/^#define CURLFTPSSL_CONTROL /;"	d
CURLFTPSSL_LAST	lib/curl/include/curl/curl.h	/^#define CURLFTPSSL_LAST /;"	d
CURLFTPSSL_NONE	lib/curl/include/curl/curl.h	/^#define CURLFTPSSL_NONE /;"	d
CURLFTPSSL_TRY	lib/curl/include/curl/curl.h	/^#define CURLFTPSSL_TRY /;"	d
CURLFTP_CREATE_DIR	lib/curl/include/curl/curl.h	/^  CURLFTP_CREATE_DIR,       \/* (FTP\/SFTP) if CWD fails, try MKD and then CWD$/;"	e	enum:__anon5737ba340e03
CURLFTP_CREATE_DIR_LAST	lib/curl/include/curl/curl.h	/^  CURLFTP_CREATE_DIR_LAST   \/* not an option, never use *\/$/;"	e	enum:__anon5737ba340e03
CURLFTP_CREATE_DIR_NONE	lib/curl/include/curl/curl.h	/^  CURLFTP_CREATE_DIR_NONE,  \/* do NOT create missing dirs! *\/$/;"	e	enum:__anon5737ba340e03
CURLFTP_CREATE_DIR_RETRY	lib/curl/include/curl/curl.h	/^  CURLFTP_CREATE_DIR_RETRY, \/* (FTP only) if CWD fails, try MKD and then CWD$/;"	e	enum:__anon5737ba340e03
CURLGSSAPI_DELEGATION_FLAG	lib/curl/include/curl/curl.h	/^#define CURLGSSAPI_DELEGATION_FLAG /;"	d
CURLGSSAPI_DELEGATION_NONE	lib/curl/include/curl/curl.h	/^#define CURLGSSAPI_DELEGATION_NONE /;"	d
CURLGSSAPI_DELEGATION_POLICY_FLAG	lib/curl/include/curl/curl.h	/^#define CURLGSSAPI_DELEGATION_POLICY_FLAG /;"	d
CURLHEADER_SEPARATE	lib/curl/include/curl/curl.h	/^#define CURLHEADER_SEPARATE /;"	d
CURLHEADER_UNIFIED	lib/curl/include/curl/curl.h	/^#define CURLHEADER_UNIFIED /;"	d
CURLHSTS_ENABLE	lib/curl/include/curl/curl.h	/^#define CURLHSTS_ENABLE /;"	d
CURLHSTS_READONLYFILE	lib/curl/include/curl/curl.h	/^#define CURLHSTS_READONLYFILE /;"	d
CURLINC_CURLVER_H	lib/curl/include/curl/curlver.h	/^#define CURLINC_CURLVER_H$/;"	d
CURLINC_CURL_H	lib/curl/include/curl/curl.h	/^#define CURLINC_CURL_H$/;"	d
CURLINC_EASY_H	lib/curl/include/curl/easy.h	/^#define CURLINC_EASY_H$/;"	d
CURLINC_MPRINTF_H	lib/curl/include/curl/mprintf.h	/^#define CURLINC_MPRINTF_H$/;"	d
CURLINC_MULTI_H	lib/curl/include/curl/multi.h	/^#define CURLINC_MULTI_H$/;"	d
CURLINC_OFF_T_C_HLPR1	lib/curl/include/curl/system.h	/^#  define CURLINC_OFF_T_C_HLPR1(/;"	d
CURLINC_OFF_T_C_HLPR2	lib/curl/include/curl/system.h	/^#    define CURLINC_OFF_T_C_HLPR2(/;"	d
CURLINC_OFF_T_C_HLPR2	lib/curl/include/curl/system.h	/^#  define CURLINC_OFF_T_C_HLPR2(/;"	d
CURLINC_OPTIONS_H	lib/curl/include/curl/options.h	/^#define CURLINC_OPTIONS_H$/;"	d
CURLINC_STDCHEADERS_H	lib/curl/include/curl/stdcheaders.h	/^#define CURLINC_STDCHEADERS_H$/;"	d
CURLINC_SYSTEM_H	lib/curl/include/curl/system.h	/^#define CURLINC_SYSTEM_H$/;"	d
CURLINC_TYPECHECK_GCC_H	lib/curl/include/curl/typecheck-gcc.h	/^#define CURLINC_TYPECHECK_GCC_H$/;"	d
CURLINC_URLAPI_H	lib/curl/include/curl/urlapi.h	/^#define CURLINC_URLAPI_H$/;"	d
CURLINFO	lib/curl/include/curl/curl.h	/^} CURLINFO;$/;"	t	typeref:enum:__anon5737ba341a03
CURLINFO_ACTIVESOCKET	lib/curl/include/curl/curl.h	/^  CURLINFO_ACTIVESOCKET     = CURLINFO_SOCKET + 44,$/;"	e	enum:__anon5737ba341a03
CURLINFO_APPCONNECT_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_APPCONNECT_TIME  = CURLINFO_DOUBLE + 33,$/;"	e	enum:__anon5737ba341a03
CURLINFO_APPCONNECT_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_APPCONNECT_TIME_T = CURLINFO_OFF_T + 56,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CERTINFO	lib/curl/include/curl/curl.h	/^  CURLINFO_CERTINFO         = CURLINFO_PTR    + 34,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONDITION_UNMET	lib/curl/include/curl/curl.h	/^  CURLINFO_CONDITION_UNMET  = CURLINFO_LONG   + 35,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONNECT_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_CONNECT_TIME     = CURLINFO_DOUBLE + 5,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONNECT_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_CONNECT_TIME_T   = CURLINFO_OFF_T + 52,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONTENT_LENGTH_DOWNLOAD	lib/curl/include/curl/curl.h	/^  CURLINFO_CONTENT_LENGTH_DOWNLOAD   = CURLINFO_DOUBLE + 15,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONTENT_LENGTH_DOWNLOAD_T	lib/curl/include/curl/curl.h	/^  CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = CURLINFO_OFF_T  + 15,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONTENT_LENGTH_UPLOAD	lib/curl/include/curl/curl.h	/^  CURLINFO_CONTENT_LENGTH_UPLOAD     = CURLINFO_DOUBLE + 16,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONTENT_LENGTH_UPLOAD_T	lib/curl/include/curl/curl.h	/^  CURLINFO_CONTENT_LENGTH_UPLOAD_T   = CURLINFO_OFF_T  + 16,$/;"	e	enum:__anon5737ba341a03
CURLINFO_CONTENT_TYPE	lib/curl/include/curl/curl.h	/^  CURLINFO_CONTENT_TYPE     = CURLINFO_STRING + 18,$/;"	e	enum:__anon5737ba341a03
CURLINFO_COOKIELIST	lib/curl/include/curl/curl.h	/^  CURLINFO_COOKIELIST       = CURLINFO_SLIST  + 28,$/;"	e	enum:__anon5737ba341a03
CURLINFO_DATA_IN	lib/curl/include/curl/curl.h	/^  CURLINFO_DATA_IN,      \/* 3 *\/$/;"	e	enum:__anon5737ba340703
CURLINFO_DATA_OUT	lib/curl/include/curl/curl.h	/^  CURLINFO_DATA_OUT,     \/* 4 *\/$/;"	e	enum:__anon5737ba340703
CURLINFO_DOUBLE	lib/curl/include/curl/curl.h	/^#define CURLINFO_DOUBLE /;"	d
CURLINFO_EFFECTIVE_METHOD	lib/curl/include/curl/curl.h	/^  CURLINFO_EFFECTIVE_METHOD = CURLINFO_STRING + 58,$/;"	e	enum:__anon5737ba341a03
CURLINFO_EFFECTIVE_URL	lib/curl/include/curl/curl.h	/^  CURLINFO_EFFECTIVE_URL    = CURLINFO_STRING + 1,$/;"	e	enum:__anon5737ba341a03
CURLINFO_END	lib/curl/include/curl/curl.h	/^  CURLINFO_END$/;"	e	enum:__anon5737ba340703
CURLINFO_FILETIME	lib/curl/include/curl/curl.h	/^  CURLINFO_FILETIME         = CURLINFO_LONG   + 14,$/;"	e	enum:__anon5737ba341a03
CURLINFO_FILETIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_FILETIME_T       = CURLINFO_OFF_T  + 14,$/;"	e	enum:__anon5737ba341a03
CURLINFO_FTP_ENTRY_PATH	lib/curl/include/curl/curl.h	/^  CURLINFO_FTP_ENTRY_PATH   = CURLINFO_STRING + 30,$/;"	e	enum:__anon5737ba341a03
CURLINFO_HEADER_IN	lib/curl/include/curl/curl.h	/^  CURLINFO_HEADER_IN,    \/* 1 *\/$/;"	e	enum:__anon5737ba340703
CURLINFO_HEADER_OUT	lib/curl/include/curl/curl.h	/^  CURLINFO_HEADER_OUT,   \/* 2 *\/$/;"	e	enum:__anon5737ba340703
CURLINFO_HEADER_SIZE	lib/curl/include/curl/curl.h	/^  CURLINFO_HEADER_SIZE      = CURLINFO_LONG   + 11,$/;"	e	enum:__anon5737ba341a03
CURLINFO_HTTPAUTH_AVAIL	lib/curl/include/curl/curl.h	/^  CURLINFO_HTTPAUTH_AVAIL   = CURLINFO_LONG   + 23,$/;"	e	enum:__anon5737ba341a03
CURLINFO_HTTP_CODE	lib/curl/include/curl/curl.h	/^#define CURLINFO_HTTP_CODE /;"	d
CURLINFO_HTTP_CONNECTCODE	lib/curl/include/curl/curl.h	/^  CURLINFO_HTTP_CONNECTCODE = CURLINFO_LONG   + 22,$/;"	e	enum:__anon5737ba341a03
CURLINFO_HTTP_VERSION	lib/curl/include/curl/curl.h	/^  CURLINFO_HTTP_VERSION     = CURLINFO_LONG   + 46,$/;"	e	enum:__anon5737ba341a03
CURLINFO_LASTONE	lib/curl/include/curl/curl.h	/^  CURLINFO_LASTONE          = 60$/;"	e	enum:__anon5737ba341a03
CURLINFO_LASTSOCKET	lib/curl/include/curl/curl.h	/^  CURLINFO_LASTSOCKET       = CURLINFO_LONG   + 29,$/;"	e	enum:__anon5737ba341a03
CURLINFO_LOCAL_IP	lib/curl/include/curl/curl.h	/^  CURLINFO_LOCAL_IP         = CURLINFO_STRING + 41,$/;"	e	enum:__anon5737ba341a03
CURLINFO_LOCAL_PORT	lib/curl/include/curl/curl.h	/^  CURLINFO_LOCAL_PORT       = CURLINFO_LONG   + 42,$/;"	e	enum:__anon5737ba341a03
CURLINFO_LONG	lib/curl/include/curl/curl.h	/^#define CURLINFO_LONG /;"	d
CURLINFO_MASK	lib/curl/include/curl/curl.h	/^#define CURLINFO_MASK /;"	d
CURLINFO_NAMELOOKUP_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_NAMELOOKUP_TIME  = CURLINFO_DOUBLE + 4,$/;"	e	enum:__anon5737ba341a03
CURLINFO_NAMELOOKUP_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_NAMELOOKUP_TIME_T = CURLINFO_OFF_T + 51,$/;"	e	enum:__anon5737ba341a03
CURLINFO_NONE	lib/curl/include/curl/curl.h	/^  CURLINFO_NONE, \/* first, never use this *\/$/;"	e	enum:__anon5737ba341a03
CURLINFO_NUM_CONNECTS	lib/curl/include/curl/curl.h	/^  CURLINFO_NUM_CONNECTS     = CURLINFO_LONG   + 26,$/;"	e	enum:__anon5737ba341a03
CURLINFO_OFF_T	lib/curl/include/curl/curl.h	/^#define CURLINFO_OFF_T /;"	d
CURLINFO_OS_ERRNO	lib/curl/include/curl/curl.h	/^  CURLINFO_OS_ERRNO         = CURLINFO_LONG   + 25,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PRETRANSFER_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_PRETRANSFER_TIME = CURLINFO_DOUBLE + 6,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PRETRANSFER_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_PRETRANSFER_TIME_T = CURLINFO_OFF_T + 53,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PRIMARY_IP	lib/curl/include/curl/curl.h	/^  CURLINFO_PRIMARY_IP       = CURLINFO_STRING + 32,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PRIMARY_PORT	lib/curl/include/curl/curl.h	/^  CURLINFO_PRIMARY_PORT     = CURLINFO_LONG   + 40,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PRIVATE	lib/curl/include/curl/curl.h	/^  CURLINFO_PRIVATE          = CURLINFO_STRING + 21,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PROTOCOL	lib/curl/include/curl/curl.h	/^  CURLINFO_PROTOCOL         = CURLINFO_LONG   + 48,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PROXYAUTH_AVAIL	lib/curl/include/curl/curl.h	/^  CURLINFO_PROXYAUTH_AVAIL  = CURLINFO_LONG   + 24,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PROXY_ERROR	lib/curl/include/curl/curl.h	/^  CURLINFO_PROXY_ERROR      = CURLINFO_LONG + 59,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PROXY_SSL_VERIFYRESULT	lib/curl/include/curl/curl.h	/^  CURLINFO_PROXY_SSL_VERIFYRESULT = CURLINFO_LONG + 47,$/;"	e	enum:__anon5737ba341a03
CURLINFO_PTR	lib/curl/include/curl/curl.h	/^#define CURLINFO_PTR /;"	d
CURLINFO_REDIRECT_COUNT	lib/curl/include/curl/curl.h	/^  CURLINFO_REDIRECT_COUNT   = CURLINFO_LONG   + 20,$/;"	e	enum:__anon5737ba341a03
CURLINFO_REDIRECT_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_REDIRECT_TIME    = CURLINFO_DOUBLE + 19,$/;"	e	enum:__anon5737ba341a03
CURLINFO_REDIRECT_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_REDIRECT_TIME_T  = CURLINFO_OFF_T + 55,$/;"	e	enum:__anon5737ba341a03
CURLINFO_REDIRECT_URL	lib/curl/include/curl/curl.h	/^  CURLINFO_REDIRECT_URL     = CURLINFO_STRING + 31,$/;"	e	enum:__anon5737ba341a03
CURLINFO_REFERER	lib/curl/include/curl/curl.h	/^  CURLINFO_REFERER          = CURLINFO_STRING + 60,$/;"	e	enum:__anon5737ba341a03
CURLINFO_REQUEST_SIZE	lib/curl/include/curl/curl.h	/^  CURLINFO_REQUEST_SIZE     = CURLINFO_LONG   + 12,$/;"	e	enum:__anon5737ba341a03
CURLINFO_RESPONSE_CODE	lib/curl/include/curl/curl.h	/^  CURLINFO_RESPONSE_CODE    = CURLINFO_LONG   + 2,$/;"	e	enum:__anon5737ba341a03
CURLINFO_RETRY_AFTER	lib/curl/include/curl/curl.h	/^  CURLINFO_RETRY_AFTER      = CURLINFO_OFF_T + 57,$/;"	e	enum:__anon5737ba341a03
CURLINFO_RTSP_CLIENT_CSEQ	lib/curl/include/curl/curl.h	/^  CURLINFO_RTSP_CLIENT_CSEQ = CURLINFO_LONG   + 37,$/;"	e	enum:__anon5737ba341a03
CURLINFO_RTSP_CSEQ_RECV	lib/curl/include/curl/curl.h	/^  CURLINFO_RTSP_CSEQ_RECV   = CURLINFO_LONG   + 39,$/;"	e	enum:__anon5737ba341a03
CURLINFO_RTSP_SERVER_CSEQ	lib/curl/include/curl/curl.h	/^  CURLINFO_RTSP_SERVER_CSEQ = CURLINFO_LONG   + 38,$/;"	e	enum:__anon5737ba341a03
CURLINFO_RTSP_SESSION_ID	lib/curl/include/curl/curl.h	/^  CURLINFO_RTSP_SESSION_ID  = CURLINFO_STRING + 36,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SCHEME	lib/curl/include/curl/curl.h	/^  CURLINFO_SCHEME           = CURLINFO_STRING + 49,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SIZE_DOWNLOAD	lib/curl/include/curl/curl.h	/^  CURLINFO_SIZE_DOWNLOAD    = CURLINFO_DOUBLE + 8,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SIZE_DOWNLOAD_T	lib/curl/include/curl/curl.h	/^  CURLINFO_SIZE_DOWNLOAD_T  = CURLINFO_OFF_T  + 8,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SIZE_UPLOAD	lib/curl/include/curl/curl.h	/^  CURLINFO_SIZE_UPLOAD      = CURLINFO_DOUBLE + 7,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SIZE_UPLOAD_T	lib/curl/include/curl/curl.h	/^  CURLINFO_SIZE_UPLOAD_T    = CURLINFO_OFF_T  + 7,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SLIST	lib/curl/include/curl/curl.h	/^#define CURLINFO_SLIST /;"	d
CURLINFO_SOCKET	lib/curl/include/curl/curl.h	/^#define CURLINFO_SOCKET /;"	d
CURLINFO_SPEED_DOWNLOAD	lib/curl/include/curl/curl.h	/^  CURLINFO_SPEED_DOWNLOAD   = CURLINFO_DOUBLE + 9,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SPEED_DOWNLOAD_T	lib/curl/include/curl/curl.h	/^  CURLINFO_SPEED_DOWNLOAD_T = CURLINFO_OFF_T  + 9,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SPEED_UPLOAD	lib/curl/include/curl/curl.h	/^  CURLINFO_SPEED_UPLOAD     = CURLINFO_DOUBLE + 10,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SPEED_UPLOAD_T	lib/curl/include/curl/curl.h	/^  CURLINFO_SPEED_UPLOAD_T   = CURLINFO_OFF_T  + 10,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SSL_DATA_IN	lib/curl/include/curl/curl.h	/^  CURLINFO_SSL_DATA_IN,  \/* 5 *\/$/;"	e	enum:__anon5737ba340703
CURLINFO_SSL_DATA_OUT	lib/curl/include/curl/curl.h	/^  CURLINFO_SSL_DATA_OUT, \/* 6 *\/$/;"	e	enum:__anon5737ba340703
CURLINFO_SSL_ENGINES	lib/curl/include/curl/curl.h	/^  CURLINFO_SSL_ENGINES      = CURLINFO_SLIST  + 27,$/;"	e	enum:__anon5737ba341a03
CURLINFO_SSL_VERIFYRESULT	lib/curl/include/curl/curl.h	/^  CURLINFO_SSL_VERIFYRESULT = CURLINFO_LONG   + 13,$/;"	e	enum:__anon5737ba341a03
CURLINFO_STARTTRANSFER_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_STARTTRANSFER_TIME = CURLINFO_DOUBLE + 17,$/;"	e	enum:__anon5737ba341a03
CURLINFO_STARTTRANSFER_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_STARTTRANSFER_TIME_T = CURLINFO_OFF_T + 54,$/;"	e	enum:__anon5737ba341a03
CURLINFO_STRING	lib/curl/include/curl/curl.h	/^#define CURLINFO_STRING /;"	d
CURLINFO_TEXT	lib/curl/include/curl/curl.h	/^  CURLINFO_TEXT = 0,$/;"	e	enum:__anon5737ba340703
CURLINFO_TLS_SESSION	lib/curl/include/curl/curl.h	/^  CURLINFO_TLS_SESSION      = CURLINFO_PTR    + 43,$/;"	e	enum:__anon5737ba341a03
CURLINFO_TLS_SSL_PTR	lib/curl/include/curl/curl.h	/^  CURLINFO_TLS_SSL_PTR      = CURLINFO_PTR    + 45,$/;"	e	enum:__anon5737ba341a03
CURLINFO_TOTAL_TIME	lib/curl/include/curl/curl.h	/^  CURLINFO_TOTAL_TIME       = CURLINFO_DOUBLE + 3,$/;"	e	enum:__anon5737ba341a03
CURLINFO_TOTAL_TIME_T	lib/curl/include/curl/curl.h	/^  CURLINFO_TOTAL_TIME_T     = CURLINFO_OFF_T + 50,$/;"	e	enum:__anon5737ba341a03
CURLINFO_TYPEMASK	lib/curl/include/curl/curl.h	/^#define CURLINFO_TYPEMASK /;"	d
CURLIOCMD_LAST	lib/curl/include/curl/curl.h	/^  CURLIOCMD_LAST         \/* never use *\/$/;"	e	enum:__anon5737ba340603
CURLIOCMD_NOP	lib/curl/include/curl/curl.h	/^  CURLIOCMD_NOP,         \/* no operation *\/$/;"	e	enum:__anon5737ba340603
CURLIOCMD_RESTARTREAD	lib/curl/include/curl/curl.h	/^  CURLIOCMD_RESTARTREAD, \/* restart the read stream from start *\/$/;"	e	enum:__anon5737ba340603
CURLIOE_FAILRESTART	lib/curl/include/curl/curl.h	/^  CURLIOE_FAILRESTART,   \/* failed to restart the read *\/$/;"	e	enum:__anon5737ba340503
CURLIOE_LAST	lib/curl/include/curl/curl.h	/^  CURLIOE_LAST           \/* never use *\/$/;"	e	enum:__anon5737ba340503
CURLIOE_OK	lib/curl/include/curl/curl.h	/^  CURLIOE_OK,            \/* I\/O operation successful *\/$/;"	e	enum:__anon5737ba340503
CURLIOE_UNKNOWNCMD	lib/curl/include/curl/curl.h	/^  CURLIOE_UNKNOWNCMD,    \/* command was unknown to callback *\/$/;"	e	enum:__anon5737ba340503
CURLKHMATCH_LAST	lib/curl/include/curl/curl.h	/^  CURLKHMATCH_LAST      \/* not for use, only a marker for last-in-list *\/$/;"	e	enum:curl_khmatch
CURLKHMATCH_MISMATCH	lib/curl/include/curl/curl.h	/^  CURLKHMATCH_MISMATCH, \/* host found, key mismatch! *\/$/;"	e	enum:curl_khmatch
CURLKHMATCH_MISSING	lib/curl/include/curl/curl.h	/^  CURLKHMATCH_MISSING,  \/* no matching host\/key found *\/$/;"	e	enum:curl_khmatch
CURLKHMATCH_OK	lib/curl/include/curl/curl.h	/^  CURLKHMATCH_OK,       \/* match *\/$/;"	e	enum:curl_khmatch
CURLKHSTAT_DEFER	lib/curl/include/curl/curl.h	/^  CURLKHSTAT_DEFER,  \/* do not accept it, but we can't answer right now so$/;"	e	enum:curl_khstat
CURLKHSTAT_FINE	lib/curl/include/curl/curl.h	/^  CURLKHSTAT_FINE,$/;"	e	enum:curl_khstat
CURLKHSTAT_FINE_ADD_TO_FILE	lib/curl/include/curl/curl.h	/^  CURLKHSTAT_FINE_ADD_TO_FILE,$/;"	e	enum:curl_khstat
CURLKHSTAT_FINE_REPLACE	lib/curl/include/curl/curl.h	/^  CURLKHSTAT_FINE_REPLACE, \/* accept and replace the wrong key*\/$/;"	e	enum:curl_khstat
CURLKHSTAT_LAST	lib/curl/include/curl/curl.h	/^  CURLKHSTAT_LAST    \/* not for use, only a marker for last-in-list *\/$/;"	e	enum:curl_khstat
CURLKHSTAT_REJECT	lib/curl/include/curl/curl.h	/^  CURLKHSTAT_REJECT, \/* reject the connection, return an error *\/$/;"	e	enum:curl_khstat
CURLKHTYPE_DSS	lib/curl/include/curl/curl.h	/^  CURLKHTYPE_DSS,$/;"	e	enum:curl_khtype
CURLKHTYPE_ECDSA	lib/curl/include/curl/curl.h	/^  CURLKHTYPE_ECDSA,$/;"	e	enum:curl_khtype
CURLKHTYPE_ED25519	lib/curl/include/curl/curl.h	/^  CURLKHTYPE_ED25519$/;"	e	enum:curl_khtype
CURLKHTYPE_RSA	lib/curl/include/curl/curl.h	/^  CURLKHTYPE_RSA,$/;"	e	enum:curl_khtype
CURLKHTYPE_RSA1	lib/curl/include/curl/curl.h	/^  CURLKHTYPE_RSA1,$/;"	e	enum:curl_khtype
CURLKHTYPE_UNKNOWN	lib/curl/include/curl/curl.h	/^  CURLKHTYPE_UNKNOWN,$/;"	e	enum:curl_khtype
CURLM	lib/curl/include/curl/multi.h	/^typedef struct Curl_multi CURLM;$/;"	t	typeref:struct:Curl_multi
CURLMOPT_LASTENTRY	lib/curl/include/curl/multi.h	/^  CURLMOPT_LASTENTRY \/* the last unused *\/$/;"	e	enum:__anon3f8e24290403
CURLMSG	lib/curl/include/curl/multi.h	/^} CURLMSG;$/;"	t	typeref:enum:__anon3f8e24290203
CURLMSG_DONE	lib/curl/include/curl/multi.h	/^  CURLMSG_DONE, \/* This easy handle has completed. 'result' contains$/;"	e	enum:__anon3f8e24290203
CURLMSG_LAST	lib/curl/include/curl/multi.h	/^  CURLMSG_LAST \/* last, not used *\/$/;"	e	enum:__anon3f8e24290203
CURLMSG_NONE	lib/curl/include/curl/multi.h	/^  CURLMSG_NONE, \/* first, not used *\/$/;"	e	enum:__anon3f8e24290203
CURLM_ADDED_ALREADY	lib/curl/include/curl/multi.h	/^  CURLM_ADDED_ALREADY,   \/* an easy handle already added to a multi handle was$/;"	e	enum:__anon3f8e24290103
CURLM_BAD_EASY_HANDLE	lib/curl/include/curl/multi.h	/^  CURLM_BAD_EASY_HANDLE, \/* an easy handle was not good\/valid *\/$/;"	e	enum:__anon3f8e24290103
CURLM_BAD_FUNCTION_ARGUMENT	lib/curl/include/curl/multi.h	/^  CURLM_BAD_FUNCTION_ARGUMENT,  \/* function called with a bad parameter *\/$/;"	e	enum:__anon3f8e24290103
CURLM_BAD_HANDLE	lib/curl/include/curl/multi.h	/^  CURLM_BAD_HANDLE,      \/* the passed-in handle is not a valid CURLM handle *\/$/;"	e	enum:__anon3f8e24290103
CURLM_BAD_SOCKET	lib/curl/include/curl/multi.h	/^  CURLM_BAD_SOCKET,      \/* the passed in socket argument did not match *\/$/;"	e	enum:__anon3f8e24290103
CURLM_CALL_MULTI_PERFORM	lib/curl/include/curl/multi.h	/^  CURLM_CALL_MULTI_PERFORM = -1, \/* please call curl_multi_perform() or$/;"	e	enum:__anon3f8e24290103
CURLM_CALL_MULTI_SOCKET	lib/curl/include/curl/multi.h	/^#define CURLM_CALL_MULTI_SOCKET /;"	d
CURLM_INTERNAL_ERROR	lib/curl/include/curl/multi.h	/^  CURLM_INTERNAL_ERROR,  \/* this is a libcurl bug *\/$/;"	e	enum:__anon3f8e24290103
CURLM_LAST	lib/curl/include/curl/multi.h	/^  CURLM_LAST$/;"	e	enum:__anon3f8e24290103
CURLM_OK	lib/curl/include/curl/multi.h	/^  CURLM_OK,$/;"	e	enum:__anon3f8e24290103
CURLM_OUT_OF_MEMORY	lib/curl/include/curl/multi.h	/^  CURLM_OUT_OF_MEMORY,   \/* if you ever get this, you're in deep sh*t *\/$/;"	e	enum:__anon3f8e24290103
CURLM_RECURSIVE_API_CALL	lib/curl/include/curl/multi.h	/^  CURLM_RECURSIVE_API_CALL, \/* an api function was called from inside a$/;"	e	enum:__anon3f8e24290103
CURLM_UNKNOWN_OPTION	lib/curl/include/curl/multi.h	/^  CURLM_UNKNOWN_OPTION,  \/* curl_multi_setopt() with unsupported option *\/$/;"	e	enum:__anon3f8e24290103
CURLM_WAKEUP_FAILURE	lib/curl/include/curl/multi.h	/^  CURLM_WAKEUP_FAILURE,  \/* wakeup is unavailable or failed *\/$/;"	e	enum:__anon3f8e24290103
CURLMcode	lib/curl/include/curl/multi.h	/^} CURLMcode;$/;"	t	typeref:enum:__anon3f8e24290103
CURLMoption	lib/curl/include/curl/multi.h	/^} CURLMoption;$/;"	t	typeref:enum:__anon3f8e24290403
CURLMsg	lib/curl/include/curl/multi.h	/^struct CURLMsg {$/;"	s
CURLMsg	lib/curl/include/curl/multi.h	/^typedef struct CURLMsg CURLMsg;$/;"	t	typeref:struct:CURLMsg
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ABSTRACT_UNIX_SOCKET, CURLOPTTYPE_STRINGPOINT, 264),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ACCEPTTIMEOUT_MS, CURLOPTTYPE_LONG, 212),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ACCEPT_ENCODING, CURLOPTTYPE_STRINGPOINT, 102),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ADDRESS_SCOPE, CURLOPTTYPE_LONG, 171),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ALTSVC, CURLOPTTYPE_STRINGPOINT, 287),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ALTSVC_CTRL, CURLOPTTYPE_LONG, 286),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_APPEND, CURLOPTTYPE_LONG, 50),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_AUTOREFERER, CURLOPTTYPE_LONG, 58),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_AWS_SIGV4, CURLOPTTYPE_STRINGPOINT, 305),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_BUFFERSIZE, CURLOPTTYPE_LONG, 98),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CAINFO, CURLOPTTYPE_STRINGPOINT, 65),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CAPATH, CURLOPTTYPE_STRINGPOINT, 97),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CERTINFO, CURLOPTTYPE_LONG, 172),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CHUNK_BGN_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 198),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CHUNK_DATA, CURLOPTTYPE_CBPOINT, 201),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CHUNK_END_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 199),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CLOSESOCKETDATA, CURLOPTTYPE_CBPOINT, 209),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CLOSESOCKETFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 208),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONNECTTIMEOUT, CURLOPTTYPE_LONG, 78),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONNECTTIMEOUT_MS, CURLOPTTYPE_LONG, 156),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONNECT_ONLY, CURLOPTTYPE_LONG, 141),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONNECT_TO, CURLOPTTYPE_SLISTPOINT, 243),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONV_FROM_NETWORK_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 142),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONV_FROM_UTF8_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 144),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CONV_TO_NETWORK_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 143),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_COOKIE, CURLOPTTYPE_STRINGPOINT, 22),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_COOKIEFILE, CURLOPTTYPE_STRINGPOINT, 31),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_COOKIEJAR, CURLOPTTYPE_STRINGPOINT, 82),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_COOKIELIST, CURLOPTTYPE_STRINGPOINT, 135),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_COOKIESESSION, CURLOPTTYPE_LONG, 96),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_COPYPOSTFIELDS, CURLOPTTYPE_OBJECTPOINT, 165),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CRLF, CURLOPTTYPE_LONG, 27),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CRLFILE, CURLOPTTYPE_STRINGPOINT, 169),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CURLU, CURLOPTTYPE_OBJECTPOINT, 282),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_CUSTOMREQUEST, CURLOPTTYPE_STRINGPOINT, 36),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DEBUGDATA, CURLOPTTYPE_CBPOINT, 95),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DEBUGFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 94),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DEFAULT_PROTOCOL, CURLOPTTYPE_STRINGPOINT, 238),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DIRLISTONLY, CURLOPTTYPE_LONG, 48),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DISALLOW_USERNAME_IN_URL, CURLOPTTYPE_LONG, 278),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_CACHE_TIMEOUT, CURLOPTTYPE_LONG, 92),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_INTERFACE, CURLOPTTYPE_STRINGPOINT, 221),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_LOCAL_IP4, CURLOPTTYPE_STRINGPOINT, 222),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_LOCAL_IP6, CURLOPTTYPE_STRINGPOINT, 223),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_SERVERS, CURLOPTTYPE_STRINGPOINT, 211),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_SHUFFLE_ADDRESSES, CURLOPTTYPE_LONG, 275),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DNS_USE_GLOBAL_CACHE, CURLOPTTYPE_LONG, 91),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DOH_SSL_VERIFYHOST, CURLOPTTYPE_LONG, 307),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DOH_SSL_VERIFYPEER, CURLOPTTYPE_LONG, 306),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DOH_SSL_VERIFYSTATUS, CURLOPTTYPE_LONG, 308),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_DOH_URL, CURLOPTTYPE_STRINGPOINT, 279),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_EGDSOCKET, CURLOPTTYPE_STRINGPOINT, 77),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ERRORBUFFER, CURLOPTTYPE_OBJECTPOINT, 10),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_EXPECT_100_TIMEOUT_MS, CURLOPTTYPE_LONG, 227),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FAILONERROR, CURLOPTTYPE_LONG, 45),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FILETIME, CURLOPTTYPE_LONG, 69),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FNMATCH_DATA, CURLOPTTYPE_CBPOINT, 202),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FNMATCH_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 200),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FOLLOWLOCATION, CURLOPTTYPE_LONG, 52),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FORBID_REUSE, CURLOPTTYPE_LONG, 75),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FRESH_CONNECT, CURLOPTTYPE_LONG, 74),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTPPORT, CURLOPTTYPE_STRINGPOINT, 17),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTPSSLAUTH, CURLOPTTYPE_VALUES, 129),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_ACCOUNT, CURLOPTTYPE_STRINGPOINT, 134),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_ALTERNATIVE_TO_USER, CURLOPTTYPE_STRINGPOINT, 147),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_CREATE_MISSING_DIRS, CURLOPTTYPE_LONG, 110),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_FILEMETHOD, CURLOPTTYPE_VALUES, 138),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_RESPONSE_TIMEOUT, CURLOPTTYPE_LONG, 112),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_SKIP_PASV_IP, CURLOPTTYPE_LONG, 137),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_SSL_CCC, CURLOPTTYPE_LONG, 154),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_USE_EPRT, CURLOPTTYPE_LONG, 106),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_USE_EPSV, CURLOPTTYPE_LONG, 85),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_FTP_USE_PRET, CURLOPTTYPE_LONG, 188),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_GSSAPI_DELEGATION, CURLOPTTYPE_VALUES, 210),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS, CURLOPTTYPE_LONG, 271),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HAPROXYPROTOCOL, CURLOPTTYPE_LONG, 274),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HEADER, CURLOPTTYPE_LONG, 42),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HEADERDATA, CURLOPTTYPE_CBPOINT, 29),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HEADERFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 79),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HEADEROPT, CURLOPTTYPE_VALUES, 229),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HSTS, CURLOPTTYPE_STRINGPOINT, 300),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HSTSREADDATA, CURLOPTTYPE_CBPOINT, 302),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HSTSREADFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 301),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HSTSWRITEDATA, CURLOPTTYPE_CBPOINT, 304),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HSTSWRITEFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 303),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HSTS_CTRL, CURLOPTTYPE_LONG, 299),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTP09_ALLOWED, CURLOPTTYPE_LONG, 285),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTP200ALIASES, CURLOPTTYPE_SLISTPOINT, 104),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTPAUTH, CURLOPTTYPE_VALUES, 107),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTPGET, CURLOPTTYPE_LONG, 80),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTPHEADER, CURLOPTTYPE_SLISTPOINT, 23),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTPPOST, CURLOPTTYPE_OBJECTPOINT, 24),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTPPROXYTUNNEL, CURLOPTTYPE_LONG, 61),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTP_CONTENT_DECODING, CURLOPTTYPE_LONG, 158),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTP_TRANSFER_DECODING, CURLOPTTYPE_LONG, 157),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_HTTP_VERSION, CURLOPTTYPE_VALUES, 84),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_IGNORE_CONTENT_LENGTH, CURLOPTTYPE_LONG, 136),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_INFILESIZE, CURLOPTTYPE_LONG, 14),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_INFILESIZE_LARGE, CURLOPTTYPE_OFF_T, 115),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_INTERFACE, CURLOPTTYPE_STRINGPOINT, 62),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_INTERLEAVEDATA, CURLOPTTYPE_CBPOINT, 195),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_INTERLEAVEFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 196),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_IOCTLDATA, CURLOPTTYPE_CBPOINT, 131),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_IOCTLFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 130),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_IPRESOLVE, CURLOPTTYPE_VALUES, 113),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ISSUERCERT, CURLOPTTYPE_STRINGPOINT, 170),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_ISSUERCERT_BLOB, CURLOPTTYPE_BLOB, 295),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_KEEP_SENDING_ON_ERROR, CURLOPTTYPE_LONG, 245),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_KEYPASSWD, CURLOPTTYPE_STRINGPOINT, 26),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_KRBLEVEL, CURLOPTTYPE_STRINGPOINT, 63),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_LOCALPORT, CURLOPTTYPE_LONG, 139),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_LOCALPORTRANGE, CURLOPTTYPE_LONG, 140),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_LOGIN_OPTIONS, CURLOPTTYPE_STRINGPOINT, 224),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_LOW_SPEED_LIMIT, CURLOPTTYPE_LONG, 19),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_LOW_SPEED_TIME, CURLOPTTYPE_LONG, 20),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAIL_AUTH, CURLOPTTYPE_STRINGPOINT, 217),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAIL_FROM, CURLOPTTYPE_STRINGPOINT, 186),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAIL_RCPT, CURLOPTTYPE_SLISTPOINT, 187),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAIL_RCPT_ALLLOWFAILS, CURLOPTTYPE_LONG, 290),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAXAGE_CONN, CURLOPTTYPE_LONG, 288),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAXCONNECTS, CURLOPTTYPE_LONG, 71),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAXFILESIZE, CURLOPTTYPE_LONG, 114),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAXFILESIZE_LARGE, CURLOPTTYPE_OFF_T, 117),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAXREDIRS, CURLOPTTYPE_LONG, 68),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAX_RECV_SPEED_LARGE, CURLOPTTYPE_OFF_T, 146),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MAX_SEND_SPEED_LARGE, CURLOPTTYPE_OFF_T, 145),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_MIMEPOST, CURLOPTTYPE_OBJECTPOINT, 269),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NETRC, CURLOPTTYPE_VALUES, 51),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NETRC_FILE, CURLOPTTYPE_STRINGPOINT, 118),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NEW_DIRECTORY_PERMS, CURLOPTTYPE_LONG, 160),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NEW_FILE_PERMS, CURLOPTTYPE_LONG, 159),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NOBODY, CURLOPTTYPE_LONG, 44),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NOPROGRESS, CURLOPTTYPE_LONG, 43),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NOPROXY, CURLOPTTYPE_STRINGPOINT, 177),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_NOSIGNAL, CURLOPTTYPE_LONG, 99),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_OBSOLETE40, CURLOPTTYPE_OBJECTPOINT, 40),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_OBSOLETE72, CURLOPTTYPE_LONG, 72),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_OPENSOCKETDATA, CURLOPTTYPE_CBPOINT, 164),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_OPENSOCKETFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 163),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PASSWORD, CURLOPTTYPE_STRINGPOINT, 174),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PATH_AS_IS, CURLOPTTYPE_LONG, 234),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PINNEDPUBLICKEY, CURLOPTTYPE_STRINGPOINT, 230),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PIPEWAIT, CURLOPTTYPE_LONG, 237),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PORT, CURLOPTTYPE_LONG, 3),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_POST, CURLOPTTYPE_LONG, 47),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_POSTFIELDS, CURLOPTTYPE_OBJECTPOINT, 15),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_POSTFIELDSIZE, CURLOPTTYPE_LONG, 60),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_POSTFIELDSIZE_LARGE, CURLOPTTYPE_OFF_T, 120),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_POSTQUOTE, CURLOPTTYPE_SLISTPOINT, 39),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_POSTREDIR, CURLOPTTYPE_VALUES, 161),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PREQUOTE, CURLOPTTYPE_SLISTPOINT, 93),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PRE_PROXY, CURLOPTTYPE_STRINGPOINT, 262),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PRIVATE, CURLOPTTYPE_OBJECTPOINT, 103),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROGRESSFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 56),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROTOCOLS, CURLOPTTYPE_LONG, 181),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY, CURLOPTTYPE_STRINGPOINT, 4),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYAUTH, CURLOPTTYPE_VALUES, 111),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYHEADER, CURLOPTTYPE_SLISTPOINT, 228),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYPASSWORD, CURLOPTTYPE_STRINGPOINT, 176),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYPORT, CURLOPTTYPE_LONG, 59),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYTYPE, CURLOPTTYPE_VALUES, 101),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYUSERNAME, CURLOPTTYPE_STRINGPOINT, 175),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXYUSERPWD, CURLOPTTYPE_STRINGPOINT, 6),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_CAINFO, CURLOPTTYPE_STRINGPOINT, 246),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_CAPATH, CURLOPTTYPE_STRINGPOINT, 247),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_CRLFILE, CURLOPTTYPE_STRINGPOINT, 260),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_ISSUERCERT, CURLOPTTYPE_STRINGPOINT, 296),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_ISSUERCERT_BLOB, CURLOPTTYPE_BLOB, 297),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_KEYPASSWD, CURLOPTTYPE_STRINGPOINT, 258),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_PINNEDPUBLICKEY, CURLOPTTYPE_STRINGPOINT, 263),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SERVICE_NAME, CURLOPTTYPE_STRINGPOINT, 235),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLCERT, CURLOPTTYPE_STRINGPOINT, 254),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLCERTTYPE, CURLOPTTYPE_STRINGPOINT, 255),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLCERT_BLOB, CURLOPTTYPE_BLOB, 293),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLKEY, CURLOPTTYPE_STRINGPOINT, 256),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLKEYTYPE, CURLOPTTYPE_STRINGPOINT, 257),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLKEY_BLOB, CURLOPTTYPE_BLOB, 294),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSLVERSION, CURLOPTTYPE_VALUES, 250),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSL_CIPHER_LIST, CURLOPTTYPE_STRINGPOINT, 259),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSL_OPTIONS, CURLOPTTYPE_LONG, 261),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSL_VERIFYHOST, CURLOPTTYPE_LONG, 249),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_SSL_VERIFYPEER, CURLOPTTYPE_LONG, 248),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_TLS13_CIPHERS, CURLOPTTYPE_STRINGPOINT, 277),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_TLSAUTH_PASSWORD, CURLOPTTYPE_STRINGPOINT, 252),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_TLSAUTH_TYPE, CURLOPTTYPE_STRINGPOINT, 253),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_TLSAUTH_USERNAME, CURLOPTTYPE_STRINGPOINT, 251),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PROXY_TRANSFER_MODE, CURLOPTTYPE_LONG, 166),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_PUT, CURLOPTTYPE_LONG, 54),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_QUOTE, CURLOPTTYPE_SLISTPOINT, 28),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RANDOM_FILE, CURLOPTTYPE_STRINGPOINT, 76),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RANGE, CURLOPTTYPE_STRINGPOINT, 7),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_READDATA, CURLOPTTYPE_CBPOINT, 9),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_READFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 12),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_REDIR_PROTOCOLS, CURLOPTTYPE_LONG, 182),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_REFERER, CURLOPTTYPE_STRINGPOINT, 16),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_REQUEST_TARGET, CURLOPTTYPE_STRINGPOINT, 266),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RESOLVE, CURLOPTTYPE_SLISTPOINT, 203),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RESOLVER_START_DATA, CURLOPTTYPE_CBPOINT, 273),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RESOLVER_START_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 272),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RESUME_FROM, CURLOPTTYPE_LONG, 21),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RESUME_FROM_LARGE, CURLOPTTYPE_OFF_T, 116),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RTSP_CLIENT_CSEQ, CURLOPTTYPE_LONG, 193),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RTSP_REQUEST, CURLOPTTYPE_VALUES, 189),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RTSP_SERVER_CSEQ, CURLOPTTYPE_LONG, 194),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RTSP_SESSION_ID, CURLOPTTYPE_STRINGPOINT, 190),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RTSP_STREAM_URI, CURLOPTTYPE_STRINGPOINT, 191),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_RTSP_TRANSPORT, CURLOPTTYPE_STRINGPOINT, 192),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SASL_AUTHZID, CURLOPTTYPE_STRINGPOINT, 289),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SASL_IR, CURLOPTTYPE_LONG, 218),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SEEKDATA, CURLOPTTYPE_CBPOINT, 168),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SEEKFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 167),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SERVICE_NAME, CURLOPTTYPE_STRINGPOINT, 236),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SHARE, CURLOPTTYPE_OBJECTPOINT, 100),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SOCKOPTDATA, CURLOPTTYPE_CBPOINT, 149),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SOCKOPTFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 148),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SOCKS5_AUTH, CURLOPTTYPE_LONG, 267),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SOCKS5_GSSAPI_NEC, CURLOPTTYPE_LONG, 180),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SOCKS5_GSSAPI_SERVICE, CURLOPTTYPE_STRINGPOINT, 179),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_AUTH_TYPES, CURLOPTTYPE_VALUES, 151),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_COMPRESSION, CURLOPTTYPE_LONG, 268),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_HOST_PUBLIC_KEY_MD5, CURLOPTTYPE_STRINGPOINT, 162),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_KEYDATA, CURLOPTTYPE_CBPOINT, 185),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_KEYFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 184),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_KNOWNHOSTS, CURLOPTTYPE_STRINGPOINT, 183),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_PRIVATE_KEYFILE, CURLOPTTYPE_STRINGPOINT, 153),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSH_PUBLIC_KEYFILE, CURLOPTTYPE_STRINGPOINT, 152),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLCERT, CURLOPTTYPE_STRINGPOINT, 25),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLCERTTYPE, CURLOPTTYPE_STRINGPOINT, 86),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLCERT_BLOB, CURLOPTTYPE_BLOB, 291),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLENGINE, CURLOPTTYPE_STRINGPOINT, 89),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLENGINE_DEFAULT, CURLOPTTYPE_LONG, 90),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLKEY, CURLOPTTYPE_STRINGPOINT, 87),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLKEYTYPE, CURLOPTTYPE_STRINGPOINT, 88),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLKEY_BLOB, CURLOPTTYPE_BLOB, 292),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSLVERSION, CURLOPTTYPE_VALUES, 32),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_CIPHER_LIST, CURLOPTTYPE_STRINGPOINT, 83),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_CTX_DATA, CURLOPTTYPE_CBPOINT, 109),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_CTX_FUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 108),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_EC_CURVES, CURLOPTTYPE_STRINGPOINT, 298),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_ENABLE_ALPN, CURLOPTTYPE_LONG, 226),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_ENABLE_NPN, CURLOPTTYPE_LONG, 225),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_FALSESTART, CURLOPTTYPE_LONG, 233),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_OPTIONS, CURLOPTTYPE_VALUES, 216),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_SESSIONID_CACHE, CURLOPTTYPE_LONG, 150),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_VERIFYHOST, CURLOPTTYPE_LONG, 81),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_VERIFYPEER, CURLOPTTYPE_LONG, 64),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SSL_VERIFYSTATUS, CURLOPTTYPE_LONG, 232),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_STDERR, CURLOPTTYPE_OBJECTPOINT, 37),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_STREAM_DEPENDS, CURLOPTTYPE_OBJECTPOINT, 240),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_STREAM_DEPENDS_E, CURLOPTTYPE_OBJECTPOINT, 241),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_STREAM_WEIGHT, CURLOPTTYPE_LONG, 239),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_SUPPRESS_CONNECT_HEADERS, CURLOPTTYPE_LONG, 265),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TCP_FASTOPEN, CURLOPTTYPE_LONG, 244),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TCP_KEEPALIVE, CURLOPTTYPE_LONG, 213),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TCP_KEEPIDLE, CURLOPTTYPE_LONG, 214),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TCP_KEEPINTVL, CURLOPTTYPE_LONG, 215),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TCP_NODELAY, CURLOPTTYPE_LONG, 121),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TELNETOPTIONS, CURLOPTTYPE_SLISTPOINT, 70),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TFTP_BLKSIZE, CURLOPTTYPE_LONG, 178),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TFTP_NO_OPTIONS, CURLOPTTYPE_LONG, 242),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TIMECONDITION, CURLOPTTYPE_VALUES, 33),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TIMEOUT, CURLOPTTYPE_LONG, 13),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TIMEOUT_MS, CURLOPTTYPE_LONG, 155),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TIMEVALUE, CURLOPTTYPE_LONG, 34),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TIMEVALUE_LARGE, CURLOPTTYPE_OFF_T, 270),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TLS13_CIPHERS, CURLOPTTYPE_STRINGPOINT, 276),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TLSAUTH_PASSWORD, CURLOPTTYPE_STRINGPOINT, 205),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TLSAUTH_TYPE, CURLOPTTYPE_STRINGPOINT, 206),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TLSAUTH_USERNAME, CURLOPTTYPE_STRINGPOINT, 204),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TRAILERDATA, CURLOPTTYPE_CBPOINT, 284),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TRAILERFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 283),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TRANSFERTEXT, CURLOPTTYPE_LONG, 53),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_TRANSFER_ENCODING, CURLOPTTYPE_LONG, 207),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_UNIX_SOCKET_PATH, CURLOPTTYPE_STRINGPOINT, 231),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_UNRESTRICTED_AUTH, CURLOPTTYPE_LONG, 105),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_UPKEEP_INTERVAL_MS, CURLOPTTYPE_LONG, 281),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_UPLOAD, CURLOPTTYPE_LONG, 46),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_UPLOAD_BUFFERSIZE, CURLOPTTYPE_LONG, 280),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_URL, CURLOPTTYPE_STRINGPOINT, 2),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_USERAGENT, CURLOPTTYPE_STRINGPOINT, 18),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_USERNAME, CURLOPTTYPE_STRINGPOINT, 173),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_USERPWD, CURLOPTTYPE_STRINGPOINT, 5),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_USE_SSL, CURLOPTTYPE_VALUES, 119),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_VERBOSE, CURLOPTTYPE_LONG, 41),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_WILDCARDMATCH, CURLOPTTYPE_LONG, 197),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_WRITEDATA, CURLOPTTYPE_CBPOINT, 1),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_WRITEFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 11),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_XFERINFODATA, CURLOPTTYPE_CBPOINT, 57),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_XFERINFOFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 219),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^  CURLOPT(CURLOPT_XOAUTH2_BEARER, CURLOPTTYPE_STRINGPOINT, 220),$/;"	e	enum:__anon5737ba341103
CURLOPT	lib/curl/include/curl/curl.h	/^#define CURLOPT(/;"	d
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE, CURLOPTTYPE_OFF_T, 10),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE, CURLOPTTYPE_OFF_T, 9),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_MAXCONNECTS, CURLOPTTYPE_LONG, 6),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_MAX_CONCURRENT_STREAMS, CURLOPTTYPE_LONG, 16),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_MAX_HOST_CONNECTIONS, CURLOPTTYPE_LONG, 7),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_MAX_PIPELINE_LENGTH, CURLOPTTYPE_LONG, 8),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_MAX_TOTAL_CONNECTIONS, CURLOPTTYPE_LONG, 13),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_PIPELINING, CURLOPTTYPE_LONG, 3),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_PIPELINING_SERVER_BL, CURLOPTTYPE_OBJECTPOINT, 12),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_PIPELINING_SITE_BL, CURLOPTTYPE_OBJECTPOINT, 11),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_PUSHDATA, CURLOPTTYPE_OBJECTPOINT, 15),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_PUSHFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 14),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_SOCKETDATA, CURLOPTTYPE_OBJECTPOINT, 2),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_SOCKETFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 1),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_TIMERDATA, CURLOPTTYPE_OBJECTPOINT, 5),$/;"	e	enum:__anon3f8e24290403
CURLOPT	lib/curl/include/curl/multi.h	/^  CURLOPT(CURLMOPT_TIMERFUNCTION, CURLOPTTYPE_FUNCTIONPOINT, 4),$/;"	e	enum:__anon3f8e24290403
CURLOPTTYPE_BLOB	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_BLOB /;"	d
CURLOPTTYPE_CBPOINT	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_CBPOINT /;"	d
CURLOPTTYPE_FUNCTIONPOINT	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_FUNCTIONPOINT /;"	d
CURLOPTTYPE_LONG	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_LONG /;"	d
CURLOPTTYPE_OBJECTPOINT	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_OBJECTPOINT /;"	d
CURLOPTTYPE_OFF_T	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_OFF_T /;"	d
CURLOPTTYPE_SLISTPOINT	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_SLISTPOINT /;"	d
CURLOPTTYPE_STRINGPOINT	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_STRINGPOINT /;"	d
CURLOPTTYPE_VALUES	lib/curl/include/curl/curl.h	/^#define CURLOPTTYPE_VALUES /;"	d
CURLOPT_CLOSEPOLICY	lib/curl/include/curl/curl.h	/^#define CURLOPT_CLOSEPOLICY /;"	d
CURLOPT_ENCODING	lib/curl/include/curl/curl.h	/^#define CURLOPT_ENCODING /;"	d
CURLOPT_FILE	lib/curl/include/curl/curl.h	/^#define CURLOPT_FILE /;"	d
CURLOPT_FTPAPPEND	lib/curl/include/curl/curl.h	/^#define CURLOPT_FTPAPPEND /;"	d
CURLOPT_FTPLISTONLY	lib/curl/include/curl/curl.h	/^#define CURLOPT_FTPLISTONLY /;"	d
CURLOPT_FTP_SSL	lib/curl/include/curl/curl.h	/^#define CURLOPT_FTP_SSL /;"	d
CURLOPT_INFILE	lib/curl/include/curl/curl.h	/^#define CURLOPT_INFILE /;"	d
CURLOPT_KRB4LEVEL	lib/curl/include/curl/curl.h	/^#define CURLOPT_KRB4LEVEL /;"	d
CURLOPT_LASTENTRY	lib/curl/include/curl/curl.h	/^  CURLOPT_LASTENTRY \/* the last unused *\/$/;"	e	enum:__anon5737ba341103
CURLOPT_POST301	lib/curl/include/curl/curl.h	/^#define CURLOPT_POST301 /;"	d
CURLOPT_PROGRESSDATA	lib/curl/include/curl/curl.h	/^#define CURLOPT_PROGRESSDATA /;"	d
CURLOPT_RTSPHEADER	lib/curl/include/curl/curl.h	/^#define CURLOPT_RTSPHEADER /;"	d
CURLOPT_SERVER_RESPONSE_TIMEOUT	lib/curl/include/curl/curl.h	/^#define CURLOPT_SERVER_RESPONSE_TIMEOUT /;"	d
CURLOPT_SSLCERTPASSWD	lib/curl/include/curl/curl.h	/^#define CURLOPT_SSLCERTPASSWD /;"	d
CURLOPT_SSLKEYPASSWD	lib/curl/include/curl/curl.h	/^#define CURLOPT_SSLKEYPASSWD /;"	d
CURLOPT_WRITEHEADER	lib/curl/include/curl/curl.h	/^#define CURLOPT_WRITEHEADER /;"	d
CURLOPT_WRITEINFO	lib/curl/include/curl/curl.h	/^#define CURLOPT_WRITEINFO /;"	d
CURLOT_BLOB	lib/curl/include/curl/options.h	/^  CURLOT_BLOB,    \/* blob (struct curl_blob *) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_CBPTR	lib/curl/include/curl/options.h	/^  CURLOT_CBPTR,   \/*         (void * passed as-is to a callback) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_FLAG_ALIAS	lib/curl/include/curl/options.h	/^#define CURLOT_FLAG_ALIAS /;"	d
CURLOT_FUNCTION	lib/curl/include/curl/options.h	/^  CURLOT_FUNCTION \/* function pointer *\/$/;"	e	enum:__anonf610938a0103
CURLOT_LONG	lib/curl/include/curl/options.h	/^  CURLOT_LONG,    \/* long (a range of values) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_OBJECT	lib/curl/include/curl/options.h	/^  CURLOT_OBJECT,  \/* pointer (void *) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_OFF_T	lib/curl/include/curl/options.h	/^  CURLOT_OFF_T,   \/* curl_off_t (a range of values) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_SLIST	lib/curl/include/curl/options.h	/^  CURLOT_SLIST,   \/*         (struct curl_slist *) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_STRING	lib/curl/include/curl/options.h	/^  CURLOT_STRING,  \/*         (char * to zero terminated buffer) *\/$/;"	e	enum:__anonf610938a0103
CURLOT_VALUES	lib/curl/include/curl/options.h	/^  CURLOT_VALUES,  \/*      (a defined set or bitmask) *\/$/;"	e	enum:__anonf610938a0103
CURLPAUSE_ALL	lib/curl/include/curl/curl.h	/^#define CURLPAUSE_ALL /;"	d
CURLPAUSE_CONT	lib/curl/include/curl/curl.h	/^#define CURLPAUSE_CONT /;"	d
CURLPAUSE_RECV	lib/curl/include/curl/curl.h	/^#define CURLPAUSE_RECV /;"	d
CURLPAUSE_RECV_CONT	lib/curl/include/curl/curl.h	/^#define CURLPAUSE_RECV_CONT /;"	d
CURLPAUSE_SEND	lib/curl/include/curl/curl.h	/^#define CURLPAUSE_SEND /;"	d
CURLPAUSE_SEND_CONT	lib/curl/include/curl/curl.h	/^#define CURLPAUSE_SEND_CONT /;"	d
CURLPIPE_HTTP1	lib/curl/include/curl/multi.h	/^#define CURLPIPE_HTTP1 /;"	d
CURLPIPE_MULTIPLEX	lib/curl/include/curl/multi.h	/^#define CURLPIPE_MULTIPLEX /;"	d
CURLPIPE_NOTHING	lib/curl/include/curl/multi.h	/^#define CURLPIPE_NOTHING /;"	d
CURLPROTO_ALL	lib/curl/include/curl/curl.h	/^#define CURLPROTO_ALL /;"	d
CURLPROTO_DICT	lib/curl/include/curl/curl.h	/^#define CURLPROTO_DICT /;"	d
CURLPROTO_FILE	lib/curl/include/curl/curl.h	/^#define CURLPROTO_FILE /;"	d
CURLPROTO_FTP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_FTP /;"	d
CURLPROTO_FTPS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_FTPS /;"	d
CURLPROTO_GOPHER	lib/curl/include/curl/curl.h	/^#define CURLPROTO_GOPHER /;"	d
CURLPROTO_GOPHERS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_GOPHERS /;"	d
CURLPROTO_HTTP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_HTTP /;"	d
CURLPROTO_HTTPS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_HTTPS /;"	d
CURLPROTO_IMAP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_IMAP /;"	d
CURLPROTO_IMAPS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_IMAPS /;"	d
CURLPROTO_LDAP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_LDAP /;"	d
CURLPROTO_LDAPS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_LDAPS /;"	d
CURLPROTO_MQTT	lib/curl/include/curl/curl.h	/^#define CURLPROTO_MQTT /;"	d
CURLPROTO_POP3	lib/curl/include/curl/curl.h	/^#define CURLPROTO_POP3 /;"	d
CURLPROTO_POP3S	lib/curl/include/curl/curl.h	/^#define CURLPROTO_POP3S /;"	d
CURLPROTO_RTMP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTMP /;"	d
CURLPROTO_RTMPE	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTMPE /;"	d
CURLPROTO_RTMPS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTMPS /;"	d
CURLPROTO_RTMPT	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTMPT /;"	d
CURLPROTO_RTMPTE	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTMPTE /;"	d
CURLPROTO_RTMPTS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTMPTS /;"	d
CURLPROTO_RTSP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_RTSP /;"	d
CURLPROTO_SCP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_SCP /;"	d
CURLPROTO_SFTP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_SFTP /;"	d
CURLPROTO_SMB	lib/curl/include/curl/curl.h	/^#define CURLPROTO_SMB /;"	d
CURLPROTO_SMBS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_SMBS /;"	d
CURLPROTO_SMTP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_SMTP /;"	d
CURLPROTO_SMTPS	lib/curl/include/curl/curl.h	/^#define CURLPROTO_SMTPS /;"	d
CURLPROTO_TELNET	lib/curl/include/curl/curl.h	/^#define CURLPROTO_TELNET /;"	d
CURLPROTO_TFTP	lib/curl/include/curl/curl.h	/^#define CURLPROTO_TFTP /;"	d
CURLPROXY_HTTP	lib/curl/include/curl/curl.h	/^  CURLPROXY_HTTP = 0,   \/* added in 7.10, new in 7.19.4 default is to use$/;"	e	enum:__anon5737ba340a03
CURLPROXY_HTTPS	lib/curl/include/curl/curl.h	/^  CURLPROXY_HTTPS = 2, \/* added in 7.52.0 *\/$/;"	e	enum:__anon5737ba340a03
CURLPROXY_HTTP_1_0	lib/curl/include/curl/curl.h	/^  CURLPROXY_HTTP_1_0 = 1,   \/* added in 7.19.4, force to use CONNECT$/;"	e	enum:__anon5737ba340a03
CURLPROXY_SOCKS4	lib/curl/include/curl/curl.h	/^  CURLPROXY_SOCKS4 = 4, \/* support added in 7.15.2, enum existed already$/;"	e	enum:__anon5737ba340a03
CURLPROXY_SOCKS4A	lib/curl/include/curl/curl.h	/^  CURLPROXY_SOCKS4A = 6, \/* added in 7.18.0 *\/$/;"	e	enum:__anon5737ba340a03
CURLPROXY_SOCKS5	lib/curl/include/curl/curl.h	/^  CURLPROXY_SOCKS5 = 5, \/* added in 7.10 *\/$/;"	e	enum:__anon5737ba340a03
CURLPROXY_SOCKS5_HOSTNAME	lib/curl/include/curl/curl.h	/^  CURLPROXY_SOCKS5_HOSTNAME = 7 \/* Use the SOCKS5 protocol but pass along the$/;"	e	enum:__anon5737ba340a03
CURLPX_BAD_ADDRESS_TYPE	lib/curl/include/curl/curl.h	/^  CURLPX_BAD_ADDRESS_TYPE,$/;"	e	enum:__anon5737ba340903
CURLPX_BAD_VERSION	lib/curl/include/curl/curl.h	/^  CURLPX_BAD_VERSION,$/;"	e	enum:__anon5737ba340903
CURLPX_CLOSED	lib/curl/include/curl/curl.h	/^  CURLPX_CLOSED,$/;"	e	enum:__anon5737ba340903
CURLPX_GSSAPI	lib/curl/include/curl/curl.h	/^  CURLPX_GSSAPI,$/;"	e	enum:__anon5737ba340903
CURLPX_GSSAPI_PERMSG	lib/curl/include/curl/curl.h	/^  CURLPX_GSSAPI_PERMSG,$/;"	e	enum:__anon5737ba340903
CURLPX_GSSAPI_PROTECTION	lib/curl/include/curl/curl.h	/^  CURLPX_GSSAPI_PROTECTION,$/;"	e	enum:__anon5737ba340903
CURLPX_IDENTD	lib/curl/include/curl/curl.h	/^  CURLPX_IDENTD,$/;"	e	enum:__anon5737ba340903
CURLPX_IDENTD_DIFFER	lib/curl/include/curl/curl.h	/^  CURLPX_IDENTD_DIFFER,$/;"	e	enum:__anon5737ba340903
CURLPX_LAST	lib/curl/include/curl/curl.h	/^  CURLPX_LAST \/* never use *\/$/;"	e	enum:__anon5737ba340903
CURLPX_LONG_HOSTNAME	lib/curl/include/curl/curl.h	/^  CURLPX_LONG_HOSTNAME,$/;"	e	enum:__anon5737ba340903
CURLPX_LONG_PASSWD	lib/curl/include/curl/curl.h	/^  CURLPX_LONG_PASSWD,$/;"	e	enum:__anon5737ba340903
CURLPX_LONG_USER	lib/curl/include/curl/curl.h	/^  CURLPX_LONG_USER,$/;"	e	enum:__anon5737ba340903
CURLPX_NO_AUTH	lib/curl/include/curl/curl.h	/^  CURLPX_NO_AUTH,$/;"	e	enum:__anon5737ba340903
CURLPX_OK	lib/curl/include/curl/curl.h	/^  CURLPX_OK,$/;"	e	enum:__anon5737ba340903
CURLPX_RECV_ADDRESS	lib/curl/include/curl/curl.h	/^  CURLPX_RECV_ADDRESS,$/;"	e	enum:__anon5737ba340903
CURLPX_RECV_AUTH	lib/curl/include/curl/curl.h	/^  CURLPX_RECV_AUTH,$/;"	e	enum:__anon5737ba340903
CURLPX_RECV_CONNECT	lib/curl/include/curl/curl.h	/^  CURLPX_RECV_CONNECT,$/;"	e	enum:__anon5737ba340903
CURLPX_RECV_REQACK	lib/curl/include/curl/curl.h	/^  CURLPX_RECV_REQACK,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_COMMAND_NOT_SUPPORTED	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_COMMAND_NOT_SUPPORTED,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_CONNECTION_REFUSED	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_CONNECTION_REFUSED,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_GENERAL_SERVER_FAILURE	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_GENERAL_SERVER_FAILURE,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_HOST_UNREACHABLE	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_HOST_UNREACHABLE,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_NETWORK_UNREACHABLE	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_NETWORK_UNREACHABLE,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_NOT_ALLOWED	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_NOT_ALLOWED,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_TTL_EXPIRED	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_TTL_EXPIRED,$/;"	e	enum:__anon5737ba340903
CURLPX_REPLY_UNASSIGNED	lib/curl/include/curl/curl.h	/^  CURLPX_REPLY_UNASSIGNED,$/;"	e	enum:__anon5737ba340903
CURLPX_REQUEST_FAILED	lib/curl/include/curl/curl.h	/^  CURLPX_REQUEST_FAILED,$/;"	e	enum:__anon5737ba340903
CURLPX_RESOLVE_HOST	lib/curl/include/curl/curl.h	/^  CURLPX_RESOLVE_HOST,$/;"	e	enum:__anon5737ba340903
CURLPX_SEND_AUTH	lib/curl/include/curl/curl.h	/^  CURLPX_SEND_AUTH,$/;"	e	enum:__anon5737ba340903
CURLPX_SEND_CONNECT	lib/curl/include/curl/curl.h	/^  CURLPX_SEND_CONNECT,$/;"	e	enum:__anon5737ba340903
CURLPX_SEND_REQUEST	lib/curl/include/curl/curl.h	/^  CURLPX_SEND_REQUEST,$/;"	e	enum:__anon5737ba340903
CURLPX_UNKNOWN_FAIL	lib/curl/include/curl/curl.h	/^  CURLPX_UNKNOWN_FAIL,$/;"	e	enum:__anon5737ba340903
CURLPX_UNKNOWN_MODE	lib/curl/include/curl/curl.h	/^  CURLPX_UNKNOWN_MODE,$/;"	e	enum:__anon5737ba340903
CURLPX_USER_REJECTED	lib/curl/include/curl/curl.h	/^  CURLPX_USER_REJECTED,$/;"	e	enum:__anon5737ba340903
CURLSH	lib/curl/include/curl/curl.h	/^typedef struct Curl_share CURLSH;$/;"	t	typeref:struct:Curl_share
CURLSHE_BAD_OPTION	lib/curl/include/curl/curl.h	/^  CURLSHE_BAD_OPTION, \/* 1 *\/$/;"	e	enum:__anon5737ba341e03
CURLSHE_INVALID	lib/curl/include/curl/curl.h	/^  CURLSHE_INVALID,    \/* 3 *\/$/;"	e	enum:__anon5737ba341e03
CURLSHE_IN_USE	lib/curl/include/curl/curl.h	/^  CURLSHE_IN_USE,     \/* 2 *\/$/;"	e	enum:__anon5737ba341e03
CURLSHE_LAST	lib/curl/include/curl/curl.h	/^  CURLSHE_LAST        \/* never use *\/$/;"	e	enum:__anon5737ba341e03
CURLSHE_NOMEM	lib/curl/include/curl/curl.h	/^  CURLSHE_NOMEM,      \/* 4 out of memory *\/$/;"	e	enum:__anon5737ba341e03
CURLSHE_NOT_BUILT_IN	lib/curl/include/curl/curl.h	/^  CURLSHE_NOT_BUILT_IN, \/* 5 feature not present in lib *\/$/;"	e	enum:__anon5737ba341e03
CURLSHE_OK	lib/curl/include/curl/curl.h	/^  CURLSHE_OK,  \/* all is fine *\/$/;"	e	enum:__anon5737ba341e03
CURLSHOPT_LAST	lib/curl/include/curl/curl.h	/^  CURLSHOPT_LAST  \/* never use *\/$/;"	e	enum:__anon5737ba341f03
CURLSHOPT_LOCKFUNC	lib/curl/include/curl/curl.h	/^  CURLSHOPT_LOCKFUNC,   \/* pass in a 'curl_lock_function' pointer *\/$/;"	e	enum:__anon5737ba341f03
CURLSHOPT_NONE	lib/curl/include/curl/curl.h	/^  CURLSHOPT_NONE,  \/* don't use *\/$/;"	e	enum:__anon5737ba341f03
CURLSHOPT_SHARE	lib/curl/include/curl/curl.h	/^  CURLSHOPT_SHARE,   \/* specify a data type to share *\/$/;"	e	enum:__anon5737ba341f03
CURLSHOPT_UNLOCKFUNC	lib/curl/include/curl/curl.h	/^  CURLSHOPT_UNLOCKFUNC, \/* pass in a 'curl_unlock_function' pointer *\/$/;"	e	enum:__anon5737ba341f03
CURLSHOPT_UNSHARE	lib/curl/include/curl/curl.h	/^  CURLSHOPT_UNSHARE, \/* specify which data type to stop sharing *\/$/;"	e	enum:__anon5737ba341f03
CURLSHOPT_USERDATA	lib/curl/include/curl/curl.h	/^  CURLSHOPT_USERDATA,   \/* pass in a user data pointer used in the lock\/unlock$/;"	e	enum:__anon5737ba341f03
CURLSHcode	lib/curl/include/curl/curl.h	/^} CURLSHcode;$/;"	t	typeref:enum:__anon5737ba341e03
CURLSHoption	lib/curl/include/curl/curl.h	/^} CURLSHoption;$/;"	t	typeref:enum:__anon5737ba341f03
CURLSOCKTYPE_ACCEPT	lib/curl/include/curl/curl.h	/^  CURLSOCKTYPE_ACCEPT, \/* socket created by accept() call *\/$/;"	e	enum:__anon5737ba340403
CURLSOCKTYPE_IPCXN	lib/curl/include/curl/curl.h	/^  CURLSOCKTYPE_IPCXN,  \/* socket created for a specific IP connection *\/$/;"	e	enum:__anon5737ba340403
CURLSOCKTYPE_LAST	lib/curl/include/curl/curl.h	/^  CURLSOCKTYPE_LAST    \/* never use *\/$/;"	e	enum:__anon5737ba340403
CURLSSH_AUTH_AGENT	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_AGENT /;"	d
CURLSSH_AUTH_ANY	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_ANY /;"	d
CURLSSH_AUTH_DEFAULT	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_DEFAULT /;"	d
CURLSSH_AUTH_GSSAPI	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_GSSAPI /;"	d
CURLSSH_AUTH_HOST	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_HOST /;"	d
CURLSSH_AUTH_KEYBOARD	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_KEYBOARD /;"	d
CURLSSH_AUTH_NONE	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_NONE /;"	d
CURLSSH_AUTH_PASSWORD	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_PASSWORD /;"	d
CURLSSH_AUTH_PUBLICKEY	lib/curl/include/curl/curl.h	/^#define CURLSSH_AUTH_PUBLICKEY /;"	d
CURLSSLBACKEND_AXTLS	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_AXTLS = 10, \/* never used since 7.63.0 *\/$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_BEARSSL	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_BEARSSL = 13,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_BORINGSSL	lib/curl/include/curl/curl.h	/^#define CURLSSLBACKEND_BORINGSSL /;"	d
CURLSSLBACKEND_CYASSL	lib/curl/include/curl/curl.h	/^#define CURLSSLBACKEND_CYASSL /;"	d
CURLSSLBACKEND_DARWINSSL	lib/curl/include/curl/curl.h	/^#define CURLSSLBACKEND_DARWINSSL /;"	d
CURLSSLBACKEND_GNUTLS	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_GNUTLS = 2,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_GSKIT	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_GSKIT = 5,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_LIBRESSL	lib/curl/include/curl/curl.h	/^#define CURLSSLBACKEND_LIBRESSL /;"	d
CURLSSLBACKEND_MBEDTLS	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_MBEDTLS = 11,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_MESALINK	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_MESALINK = 12,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_NONE	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_NONE = 0,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_NSS	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_NSS = 3,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_OBSOLETE4	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_OBSOLETE4 = 4,  \/* Was QSOSSL. *\/$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_OPENSSL	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_OPENSSL = 1,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_POLARSSL	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_POLARSSL = 6,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_RUSTLS	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_RUSTLS = 14$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_SCHANNEL	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_SCHANNEL = 8,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_SECURETRANSPORT	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_SECURETRANSPORT = 9,$/;"	e	enum:__anon5737ba340103
CURLSSLBACKEND_WOLFSSL	lib/curl/include/curl/curl.h	/^  CURLSSLBACKEND_WOLFSSL = 7,$/;"	e	enum:__anon5737ba340103
CURLSSLOPT_ALLOW_BEAST	lib/curl/include/curl/curl.h	/^#define CURLSSLOPT_ALLOW_BEAST /;"	d
CURLSSLOPT_NATIVE_CA	lib/curl/include/curl/curl.h	/^#define CURLSSLOPT_NATIVE_CA /;"	d
CURLSSLOPT_NO_PARTIALCHAIN	lib/curl/include/curl/curl.h	/^#define CURLSSLOPT_NO_PARTIALCHAIN /;"	d
CURLSSLOPT_NO_REVOKE	lib/curl/include/curl/curl.h	/^#define CURLSSLOPT_NO_REVOKE /;"	d
CURLSSLOPT_REVOKE_BEST_EFFORT	lib/curl/include/curl/curl.h	/^#define CURLSSLOPT_REVOKE_BEST_EFFORT /;"	d
CURLSSLSET_NO_BACKENDS	lib/curl/include/curl/curl.h	/^  CURLSSLSET_NO_BACKENDS \/* libcurl was built without any SSL support *\/$/;"	e	enum:__anon5737ba341903
CURLSSLSET_OK	lib/curl/include/curl/curl.h	/^  CURLSSLSET_OK = 0,$/;"	e	enum:__anon5737ba341903
CURLSSLSET_TOO_LATE	lib/curl/include/curl/curl.h	/^  CURLSSLSET_TOO_LATE,$/;"	e	enum:__anon5737ba341903
CURLSSLSET_UNKNOWN_BACKEND	lib/curl/include/curl/curl.h	/^  CURLSSLSET_UNKNOWN_BACKEND,$/;"	e	enum:__anon5737ba341903
CURLSTS_DONE	lib/curl/include/curl/curl.h	/^  CURLSTS_DONE,$/;"	e	enum:__anon5737ba341003
CURLSTS_FAIL	lib/curl/include/curl/curl.h	/^  CURLSTS_FAIL$/;"	e	enum:__anon5737ba341003
CURLSTS_OK	lib/curl/include/curl/curl.h	/^  CURLSTS_OK,$/;"	e	enum:__anon5737ba341003
CURLSTScode	lib/curl/include/curl/curl.h	/^} CURLSTScode;$/;"	t	typeref:enum:__anon5737ba341003
CURLU	lib/curl/include/curl/urlapi.h	/^typedef struct Curl_URL CURLU;$/;"	t	typeref:struct:Curl_URL
CURLUE_BAD_HANDLE	lib/curl/include/curl/urlapi.h	/^  CURLUE_BAD_HANDLE,          \/* 1 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_BAD_PARTPOINTER	lib/curl/include/curl/urlapi.h	/^  CURLUE_BAD_PARTPOINTER,     \/* 2 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_BAD_PORT_NUMBER	lib/curl/include/curl/urlapi.h	/^  CURLUE_BAD_PORT_NUMBER,     \/* 4 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_MALFORMED_INPUT	lib/curl/include/curl/urlapi.h	/^  CURLUE_MALFORMED_INPUT,     \/* 3 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_FRAGMENT	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_FRAGMENT          \/* 17 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_HOST	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_HOST,             \/* 14 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_OPTIONS	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_OPTIONS,          \/* 13 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_PASSWORD	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_PASSWORD,         \/* 12 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_PORT	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_PORT,             \/* 15 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_QUERY	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_QUERY,            \/* 16 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_SCHEME	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_SCHEME,           \/* 10 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_NO_USER	lib/curl/include/curl/urlapi.h	/^  CURLUE_NO_USER,             \/* 11 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_OK	lib/curl/include/curl/urlapi.h	/^  CURLUE_OK,$/;"	e	enum:__anonab1f930b0103
CURLUE_OUT_OF_MEMORY	lib/curl/include/curl/urlapi.h	/^  CURLUE_OUT_OF_MEMORY,       \/* 7 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_UNKNOWN_PART	lib/curl/include/curl/urlapi.h	/^  CURLUE_UNKNOWN_PART,        \/* 9 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_UNSUPPORTED_SCHEME	lib/curl/include/curl/urlapi.h	/^  CURLUE_UNSUPPORTED_SCHEME,  \/* 5 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_URLDECODE	lib/curl/include/curl/urlapi.h	/^  CURLUE_URLDECODE,           \/* 6 *\/$/;"	e	enum:__anonab1f930b0103
CURLUE_USER_NOT_ALLOWED	lib/curl/include/curl/urlapi.h	/^  CURLUE_USER_NOT_ALLOWED,    \/* 8 *\/$/;"	e	enum:__anonab1f930b0103
CURLUPART_FRAGMENT	lib/curl/include/curl/urlapi.h	/^  CURLUPART_FRAGMENT,$/;"	e	enum:__anonab1f930b0203
CURLUPART_HOST	lib/curl/include/curl/urlapi.h	/^  CURLUPART_HOST,$/;"	e	enum:__anonab1f930b0203
CURLUPART_OPTIONS	lib/curl/include/curl/urlapi.h	/^  CURLUPART_OPTIONS,$/;"	e	enum:__anonab1f930b0203
CURLUPART_PASSWORD	lib/curl/include/curl/urlapi.h	/^  CURLUPART_PASSWORD,$/;"	e	enum:__anonab1f930b0203
CURLUPART_PATH	lib/curl/include/curl/urlapi.h	/^  CURLUPART_PATH,$/;"	e	enum:__anonab1f930b0203
CURLUPART_PORT	lib/curl/include/curl/urlapi.h	/^  CURLUPART_PORT,$/;"	e	enum:__anonab1f930b0203
CURLUPART_QUERY	lib/curl/include/curl/urlapi.h	/^  CURLUPART_QUERY,$/;"	e	enum:__anonab1f930b0203
CURLUPART_SCHEME	lib/curl/include/curl/urlapi.h	/^  CURLUPART_SCHEME,$/;"	e	enum:__anonab1f930b0203
CURLUPART_URL	lib/curl/include/curl/urlapi.h	/^  CURLUPART_URL,$/;"	e	enum:__anonab1f930b0203
CURLUPART_USER	lib/curl/include/curl/urlapi.h	/^  CURLUPART_USER,$/;"	e	enum:__anonab1f930b0203
CURLUPART_ZONEID	lib/curl/include/curl/urlapi.h	/^  CURLUPART_ZONEID \/* added in 7.65.0 *\/$/;"	e	enum:__anonab1f930b0203
CURLUPart	lib/curl/include/curl/urlapi.h	/^} CURLUPart;$/;"	t	typeref:enum:__anonab1f930b0203
CURLUSESSL_ALL	lib/curl/include/curl/curl.h	/^  CURLUSESSL_ALL,     \/* SSL for all communication or fail *\/$/;"	e	enum:__anon5737ba340b03
CURLUSESSL_CONTROL	lib/curl/include/curl/curl.h	/^  CURLUSESSL_CONTROL, \/* SSL for the control connection or fail *\/$/;"	e	enum:__anon5737ba340b03
CURLUSESSL_LAST	lib/curl/include/curl/curl.h	/^  CURLUSESSL_LAST     \/* not an option, never use *\/$/;"	e	enum:__anon5737ba340b03
CURLUSESSL_NONE	lib/curl/include/curl/curl.h	/^  CURLUSESSL_NONE,    \/* do not attempt to use SSL *\/$/;"	e	enum:__anon5737ba340b03
CURLUSESSL_TRY	lib/curl/include/curl/curl.h	/^  CURLUSESSL_TRY,     \/* try using SSL, proceed anyway otherwise *\/$/;"	e	enum:__anon5737ba340b03
CURLU_APPENDQUERY	lib/curl/include/curl/urlapi.h	/^#define CURLU_APPENDQUERY /;"	d
CURLU_DEFAULT_PORT	lib/curl/include/curl/urlapi.h	/^#define CURLU_DEFAULT_PORT /;"	d
CURLU_DEFAULT_SCHEME	lib/curl/include/curl/urlapi.h	/^#define CURLU_DEFAULT_SCHEME /;"	d
CURLU_DISALLOW_USER	lib/curl/include/curl/urlapi.h	/^#define CURLU_DISALLOW_USER /;"	d
CURLU_GUESS_SCHEME	lib/curl/include/curl/urlapi.h	/^#define CURLU_GUESS_SCHEME /;"	d
CURLU_NON_SUPPORT_SCHEME	lib/curl/include/curl/urlapi.h	/^#define CURLU_NON_SUPPORT_SCHEME /;"	d
CURLU_NO_AUTHORITY	lib/curl/include/curl/urlapi.h	/^#define CURLU_NO_AUTHORITY /;"	d
CURLU_NO_DEFAULT_PORT	lib/curl/include/curl/urlapi.h	/^#define CURLU_NO_DEFAULT_PORT /;"	d
CURLU_PATH_AS_IS	lib/curl/include/curl/urlapi.h	/^#define CURLU_PATH_AS_IS /;"	d
CURLU_URLDECODE	lib/curl/include/curl/urlapi.h	/^#define CURLU_URLDECODE /;"	d
CURLU_URLENCODE	lib/curl/include/curl/urlapi.h	/^#define CURLU_URLENCODE /;"	d
CURLUcode	lib/curl/include/curl/urlapi.h	/^} CURLUcode;$/;"	t	typeref:enum:__anonab1f930b0103
CURLVERSION_EIGHTH	lib/curl/include/curl/curl.h	/^  CURLVERSION_EIGHTH,$/;"	e	enum:__anon5737ba342003
CURLVERSION_FIFTH	lib/curl/include/curl/curl.h	/^  CURLVERSION_FIFTH,$/;"	e	enum:__anon5737ba342003
CURLVERSION_FIRST	lib/curl/include/curl/curl.h	/^  CURLVERSION_FIRST,$/;"	e	enum:__anon5737ba342003
CURLVERSION_FOURTH	lib/curl/include/curl/curl.h	/^  CURLVERSION_FOURTH,$/;"	e	enum:__anon5737ba342003
CURLVERSION_LAST	lib/curl/include/curl/curl.h	/^  CURLVERSION_LAST \/* never actually use this *\/$/;"	e	enum:__anon5737ba342003
CURLVERSION_NINTH	lib/curl/include/curl/curl.h	/^  CURLVERSION_NINTH,$/;"	e	enum:__anon5737ba342003
CURLVERSION_NOW	lib/curl/include/curl/curl.h	/^#define CURLVERSION_NOW /;"	d
CURLVERSION_SECOND	lib/curl/include/curl/curl.h	/^  CURLVERSION_SECOND,$/;"	e	enum:__anon5737ba342003
CURLVERSION_SEVENTH	lib/curl/include/curl/curl.h	/^  CURLVERSION_SEVENTH,$/;"	e	enum:__anon5737ba342003
CURLVERSION_SIXTH	lib/curl/include/curl/curl.h	/^  CURLVERSION_SIXTH,$/;"	e	enum:__anon5737ba342003
CURLVERSION_THIRD	lib/curl/include/curl/curl.h	/^  CURLVERSION_THIRD,$/;"	e	enum:__anon5737ba342003
CURLWARNING	lib/curl/include/curl/typecheck-gcc.h	/^#define CURLWARNING(/;"	d
CURL_AT_LEAST_VERSION	lib/curl/include/curl/curlver.h	/^#define CURL_AT_LEAST_VERSION(/;"	d
CURL_BLOB_COPY	lib/curl/include/curl/easy.h	/^#define CURL_BLOB_COPY /;"	d
CURL_BLOB_NOCOPY	lib/curl/include/curl/easy.h	/^#define CURL_BLOB_NOCOPY /;"	d
CURL_CHUNK_BGN_FUNC_FAIL	lib/curl/include/curl/curl.h	/^#define CURL_CHUNK_BGN_FUNC_FAIL /;"	d
CURL_CHUNK_BGN_FUNC_OK	lib/curl/include/curl/curl.h	/^#define CURL_CHUNK_BGN_FUNC_OK /;"	d
CURL_CHUNK_BGN_FUNC_SKIP	lib/curl/include/curl/curl.h	/^#define CURL_CHUNK_BGN_FUNC_SKIP /;"	d
CURL_CHUNK_END_FUNC_FAIL	lib/curl/include/curl/curl.h	/^#define CURL_CHUNK_END_FUNC_FAIL /;"	d
CURL_CHUNK_END_FUNC_OK	lib/curl/include/curl/curl.h	/^#define CURL_CHUNK_END_FUNC_OK /;"	d
CURL_CSELECT_ERR	lib/curl/include/curl/multi.h	/^#define CURL_CSELECT_ERR /;"	d
CURL_CSELECT_IN	lib/curl/include/curl/multi.h	/^#define CURL_CSELECT_IN /;"	d
CURL_CSELECT_OUT	lib/curl/include/curl/multi.h	/^#define CURL_CSELECT_OUT /;"	d
CURL_DID_MEMORY_FUNC_TYPEDEFS	lib/curl/include/curl/curl.h	/^#define CURL_DID_MEMORY_FUNC_TYPEDEFS$/;"	d
CURL_ERROR_SIZE	lib/curl/include/curl/curl.h	/^#define CURL_ERROR_SIZE /;"	d
CURL_EXTERN	lib/curl/include/curl/curl.h	/^#    define CURL_EXTERN /;"	d
CURL_EXTERN	lib/curl/include/curl/curl.h	/^#  define CURL_EXTERN /;"	d
CURL_EXTERN	lib/curl/include/curl/curl.h	/^#  define CURL_EXTERN$/;"	d
CURL_FNMATCHFUNC_FAIL	lib/curl/include/curl/curl.h	/^#define CURL_FNMATCHFUNC_FAIL /;"	d
CURL_FNMATCHFUNC_MATCH	lib/curl/include/curl/curl.h	/^#define CURL_FNMATCHFUNC_MATCH /;"	d
CURL_FNMATCHFUNC_NOMATCH	lib/curl/include/curl/curl.h	/^#define CURL_FNMATCHFUNC_NOMATCH /;"	d
CURL_FORMADD_DISABLED	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_DISABLED, \/* libcurl was built with this disabled *\/$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_ILLEGAL_ARRAY	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_ILLEGAL_ARRAY,$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_INCOMPLETE	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_INCOMPLETE,$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_LAST	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_LAST \/* last *\/$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_MEMORY	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_MEMORY,$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_NULL	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_NULL,$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_OK	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_OK, \/* first, no error *\/$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_OPTION_TWICE	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_OPTION_TWICE,$/;"	e	enum:__anon5737ba341803
CURL_FORMADD_UNKNOWN_OPTION	lib/curl/include/curl/curl.h	/^  CURL_FORMADD_UNKNOWN_OPTION,$/;"	e	enum:__anon5737ba341803
CURL_FORMAT_CURL_OFF_T	lib/curl/include/curl/system.h	/^#      define CURL_FORMAT_CURL_OFF_T /;"	d
CURL_FORMAT_CURL_OFF_T	lib/curl/include/curl/system.h	/^#    define CURL_FORMAT_CURL_OFF_T /;"	d
CURL_FORMAT_CURL_OFF_T	lib/curl/include/curl/system.h	/^#  define CURL_FORMAT_CURL_OFF_T /;"	d
CURL_FORMAT_CURL_OFF_T	lib/curl/include/curl/system.h	/^# define CURL_FORMAT_CURL_OFF_T /;"	d
CURL_FORMAT_CURL_OFF_TU	lib/curl/include/curl/system.h	/^#      define CURL_FORMAT_CURL_OFF_TU /;"	d
CURL_FORMAT_CURL_OFF_TU	lib/curl/include/curl/system.h	/^#    define CURL_FORMAT_CURL_OFF_TU /;"	d
CURL_FORMAT_CURL_OFF_TU	lib/curl/include/curl/system.h	/^#  define CURL_FORMAT_CURL_OFF_TU /;"	d
CURL_FORMAT_CURL_OFF_TU	lib/curl/include/curl/system.h	/^# define CURL_FORMAT_CURL_OFF_TU /;"	d
CURL_GLOBAL_ACK_EINTR	lib/curl/include/curl/curl.h	/^#define CURL_GLOBAL_ACK_EINTR /;"	d
CURL_GLOBAL_ALL	lib/curl/include/curl/curl.h	/^#define CURL_GLOBAL_ALL /;"	d
CURL_GLOBAL_DEFAULT	lib/curl/include/curl/curl.h	/^#define CURL_GLOBAL_DEFAULT /;"	d
CURL_GLOBAL_NOTHING	lib/curl/include/curl/curl.h	/^#define CURL_GLOBAL_NOTHING /;"	d
CURL_GLOBAL_SSL	lib/curl/include/curl/curl.h	/^#define CURL_GLOBAL_SSL /;"	d
CURL_GLOBAL_WIN32	lib/curl/include/curl/curl.h	/^#define CURL_GLOBAL_WIN32 /;"	d
CURL_HET_DEFAULT	lib/curl/include/curl/curl.h	/^#define CURL_HET_DEFAULT /;"	d
CURL_HTTPPOST_BUFFER	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_BUFFER /;"	d
CURL_HTTPPOST_CALLBACK	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_CALLBACK /;"	d
CURL_HTTPPOST_FILENAME	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_FILENAME /;"	d
CURL_HTTPPOST_LARGE	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_LARGE /;"	d
CURL_HTTPPOST_PTRBUFFER	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_PTRBUFFER /;"	d
CURL_HTTPPOST_PTRCONTENTS	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_PTRCONTENTS /;"	d
CURL_HTTPPOST_PTRNAME	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_PTRNAME /;"	d
CURL_HTTPPOST_READFILE	lib/curl/include/curl/curl.h	/^#define CURL_HTTPPOST_READFILE /;"	d
CURL_HTTP_VERSION_1_0	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_1_0,  \/* please use HTTP 1.0 in the request *\/$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_1_1	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_1_1,  \/* please use HTTP 1.1 in the request *\/$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_2	lib/curl/include/curl/curl.h	/^#define CURL_HTTP_VERSION_2 /;"	d
CURL_HTTP_VERSION_2TLS	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_2TLS, \/* use version 2 for HTTPS, version 1.1 for HTTP *\/$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_2_0	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_2_0,  \/* please use HTTP 2 in the request *\/$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE,  \/* please use HTTP 2 without HTTP\/1.1$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_3	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_3 = 30, \/* Makes use of explicit HTTP\/3 without fallback.$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_LAST	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_LAST \/* *ILLEGAL* http version *\/$/;"	e	enum:__anon5737ba341203
CURL_HTTP_VERSION_NONE	lib/curl/include/curl/curl.h	/^  CURL_HTTP_VERSION_NONE, \/* setting this means we don't care, and that we'd$/;"	e	enum:__anon5737ba341203
CURL_IPRESOLVE_V4	lib/curl/include/curl/curl.h	/^#define CURL_IPRESOLVE_V4 /;"	d
CURL_IPRESOLVE_V6	lib/curl/include/curl/curl.h	/^#define CURL_IPRESOLVE_V6 /;"	d
CURL_IPRESOLVE_WHATEVER	lib/curl/include/curl/curl.h	/^#define CURL_IPRESOLVE_WHATEVER /;"	d
CURL_ISOCPP	lib/curl/include/curl/system.h	/^#define CURL_ISOCPP$/;"	d
CURL_LAST	lib/curl/include/curl/curl.h	/^  CURL_LAST \/* never use! *\/$/;"	e	enum:__anon5737ba340803
CURL_LOCK_ACCESS_LAST	lib/curl/include/curl/curl.h	/^  CURL_LOCK_ACCESS_LAST        \/* never use *\/$/;"	e	enum:__anon5737ba341d03
CURL_LOCK_ACCESS_NONE	lib/curl/include/curl/curl.h	/^  CURL_LOCK_ACCESS_NONE = 0,   \/* unspecified action *\/$/;"	e	enum:__anon5737ba341d03
CURL_LOCK_ACCESS_SHARED	lib/curl/include/curl/curl.h	/^  CURL_LOCK_ACCESS_SHARED = 1, \/* for read perhaps *\/$/;"	e	enum:__anon5737ba341d03
CURL_LOCK_ACCESS_SINGLE	lib/curl/include/curl/curl.h	/^  CURL_LOCK_ACCESS_SINGLE = 2, \/* for write perhaps *\/$/;"	e	enum:__anon5737ba341d03
CURL_LOCK_DATA_CONNECT	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_CONNECT,$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_COOKIE	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_COOKIE,$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_DNS	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_DNS,$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_LAST	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_LAST$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_NONE	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_NONE = 0,$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_PSL	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_PSL,$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_SHARE	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_SHARE,$/;"	e	enum:__anon5737ba341c03
CURL_LOCK_DATA_SSL_SESSION	lib/curl/include/curl/curl.h	/^  CURL_LOCK_DATA_SSL_SESSION,$/;"	e	enum:__anon5737ba341c03
CURL_MAX_HTTP_HEADER	lib/curl/include/curl/curl.h	/^#define CURL_MAX_HTTP_HEADER /;"	d
CURL_MAX_READ_SIZE	lib/curl/include/curl/curl.h	/^#define CURL_MAX_READ_SIZE /;"	d
CURL_MAX_WRITE_SIZE	lib/curl/include/curl/curl.h	/^#define CURL_MAX_WRITE_SIZE /;"	d
CURL_NETRC_IGNORED	lib/curl/include/curl/curl.h	/^  CURL_NETRC_IGNORED,     \/* The .netrc will never be read.$/;"	e	enum:CURL_NETRC_OPTION
CURL_NETRC_LAST	lib/curl/include/curl/curl.h	/^  CURL_NETRC_LAST$/;"	e	enum:CURL_NETRC_OPTION
CURL_NETRC_OPTION	lib/curl/include/curl/curl.h	/^enum CURL_NETRC_OPTION {$/;"	g
CURL_NETRC_OPTIONAL	lib/curl/include/curl/curl.h	/^  CURL_NETRC_OPTIONAL,    \/* A user:password in the URL will be preferred$/;"	e	enum:CURL_NETRC_OPTION
CURL_NETRC_REQUIRED	lib/curl/include/curl/curl.h	/^  CURL_NETRC_REQUIRED,    \/* A user:password in the URL will be ignored.$/;"	e	enum:CURL_NETRC_OPTION
CURL_OFF_TU_C	lib/curl/include/curl/system.h	/^#  define CURL_OFF_TU_C(/;"	d
CURL_OFF_T_C	lib/curl/include/curl/system.h	/^#  define CURL_OFF_T_C(/;"	d
CURL_POLL_IN	lib/curl/include/curl/multi.h	/^#define CURL_POLL_IN /;"	d
CURL_POLL_INOUT	lib/curl/include/curl/multi.h	/^#define CURL_POLL_INOUT /;"	d
CURL_POLL_NONE	lib/curl/include/curl/multi.h	/^#define CURL_POLL_NONE /;"	d
CURL_POLL_OUT	lib/curl/include/curl/multi.h	/^#define CURL_POLL_OUT /;"	d
CURL_POLL_REMOVE	lib/curl/include/curl/multi.h	/^#define CURL_POLL_REMOVE /;"	d
CURL_PROGRESSFUNC_CONTINUE	lib/curl/include/curl/curl.h	/^#define CURL_PROGRESSFUNC_CONTINUE /;"	d
CURL_PULL_SYS_POLL_H	lib/curl/include/curl/system.h	/^#define CURL_PULL_SYS_POLL_H$/;"	d
CURL_PULL_SYS_SOCKET_H	lib/curl/include/curl/system.h	/^#    define CURL_PULL_SYS_SOCKET_H /;"	d
CURL_PULL_SYS_SOCKET_H	lib/curl/include/curl/system.h	/^#  define CURL_PULL_SYS_SOCKET_H /;"	d
CURL_PULL_SYS_TYPES_H	lib/curl/include/curl/system.h	/^#    define CURL_PULL_SYS_TYPES_H /;"	d
CURL_PULL_SYS_TYPES_H	lib/curl/include/curl/system.h	/^#  define CURL_PULL_SYS_TYPES_H /;"	d
CURL_PULL_WS2TCPIP_H	lib/curl/include/curl/system.h	/^#  define CURL_PULL_WS2TCPIP_H /;"	d
CURL_PUSH_DENY	lib/curl/include/curl/multi.h	/^#define CURL_PUSH_DENY /;"	d
CURL_PUSH_ERROROUT	lib/curl/include/curl/multi.h	/^#define CURL_PUSH_ERROROUT /;"	d
CURL_PUSH_OK	lib/curl/include/curl/multi.h	/^#define CURL_PUSH_OK /;"	d
CURL_READFUNC_ABORT	lib/curl/include/curl/curl.h	/^#define CURL_READFUNC_ABORT /;"	d
CURL_READFUNC_PAUSE	lib/curl/include/curl/curl.h	/^#define CURL_READFUNC_PAUSE /;"	d
CURL_REDIR_GET_ALL	lib/curl/include/curl/curl.h	/^#define CURL_REDIR_GET_ALL /;"	d
CURL_REDIR_POST_301	lib/curl/include/curl/curl.h	/^#define CURL_REDIR_POST_301 /;"	d
CURL_REDIR_POST_302	lib/curl/include/curl/curl.h	/^#define CURL_REDIR_POST_302 /;"	d
CURL_REDIR_POST_303	lib/curl/include/curl/curl.h	/^#define CURL_REDIR_POST_303 /;"	d
CURL_REDIR_POST_ALL	lib/curl/include/curl/curl.h	/^#define CURL_REDIR_POST_ALL /;"	d
CURL_RTSPREQ_ANNOUNCE	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_ANNOUNCE,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_DESCRIBE	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_DESCRIBE,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_GET_PARAMETER	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_GET_PARAMETER,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_LAST	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_LAST \/* last in list *\/$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_NONE	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_NONE, \/* first in list *\/$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_OPTIONS	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_OPTIONS,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_PAUSE	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_PAUSE,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_PLAY	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_PLAY,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_RECEIVE	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_RECEIVE,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_RECORD	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_RECORD,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_SETUP	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_SETUP,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_SET_PARAMETER	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_SET_PARAMETER,$/;"	e	enum:__anon5737ba341303
CURL_RTSPREQ_TEARDOWN	lib/curl/include/curl/curl.h	/^    CURL_RTSPREQ_TEARDOWN,$/;"	e	enum:__anon5737ba341303
CURL_SEEKFUNC_CANTSEEK	lib/curl/include/curl/curl.h	/^#define CURL_SEEKFUNC_CANTSEEK /;"	d
CURL_SEEKFUNC_FAIL	lib/curl/include/curl/curl.h	/^#define CURL_SEEKFUNC_FAIL /;"	d
CURL_SEEKFUNC_OK	lib/curl/include/curl/curl.h	/^#define CURL_SEEKFUNC_OK /;"	d
CURL_SOCKET_BAD	lib/curl/include/curl/curl.h	/^#define CURL_SOCKET_BAD /;"	d
CURL_SOCKET_TIMEOUT	lib/curl/include/curl/multi.h	/^#define CURL_SOCKET_TIMEOUT /;"	d
CURL_SOCKOPT_ALREADY_CONNECTED	lib/curl/include/curl/curl.h	/^#define CURL_SOCKOPT_ALREADY_CONNECTED /;"	d
CURL_SOCKOPT_ERROR	lib/curl/include/curl/curl.h	/^#define CURL_SOCKOPT_ERROR /;"	d
CURL_SOCKOPT_OK	lib/curl/include/curl/curl.h	/^#define CURL_SOCKOPT_OK /;"	d
CURL_SSLVERSION_DEFAULT	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_DEFAULT,$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_LAST	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_LAST \/* never use, keep last *\/$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_MAX_DEFAULT	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_DEFAULT =  (CURL_SSLVERSION_TLSv1   << 16),$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_MAX_LAST	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_LAST =     (CURL_SSLVERSION_LAST    << 16)$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_MAX_NONE	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_NONE =     0,$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_MAX_TLSv1_0	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_TLSv1_0 =  (CURL_SSLVERSION_TLSv1_0 << 16),$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_MAX_TLSv1_1	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_TLSv1_1 =  (CURL_SSLVERSION_TLSv1_1 << 16),$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_MAX_TLSv1_2	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_TLSv1_2 =  (CURL_SSLVERSION_TLSv1_2 << 16),$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_MAX_TLSv1_3	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_MAX_TLSv1_3 =  (CURL_SSLVERSION_TLSv1_3 << 16),$/;"	e	enum:__anon5737ba341503
CURL_SSLVERSION_SSLv2	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_SSLv2,$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_SSLv3	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_SSLv3,$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_TLSv1	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_TLSv1, \/* TLS 1.x *\/$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_TLSv1_0	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_TLSv1_0,$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_TLSv1_1	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_TLSv1_1,$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_TLSv1_2	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_TLSv1_2,$/;"	e	enum:__anon5737ba341403
CURL_SSLVERSION_TLSv1_3	lib/curl/include/curl/curl.h	/^  CURL_SSLVERSION_TLSv1_3,$/;"	e	enum:__anon5737ba341403
CURL_STRICTER	lib/curl/include/curl/curl.h	/^#define CURL_STRICTER$/;"	d
CURL_SUFFIX_CURL_OFF_T	lib/curl/include/curl/system.h	/^#      define CURL_SUFFIX_CURL_OFF_T /;"	d
CURL_SUFFIX_CURL_OFF_T	lib/curl/include/curl/system.h	/^#    define CURL_SUFFIX_CURL_OFF_T /;"	d
CURL_SUFFIX_CURL_OFF_T	lib/curl/include/curl/system.h	/^#  define CURL_SUFFIX_CURL_OFF_T /;"	d
CURL_SUFFIX_CURL_OFF_T	lib/curl/include/curl/system.h	/^# define CURL_SUFFIX_CURL_OFF_T /;"	d
CURL_SUFFIX_CURL_OFF_TU	lib/curl/include/curl/system.h	/^#      define CURL_SUFFIX_CURL_OFF_TU /;"	d
CURL_SUFFIX_CURL_OFF_TU	lib/curl/include/curl/system.h	/^#    define CURL_SUFFIX_CURL_OFF_TU /;"	d
CURL_SUFFIX_CURL_OFF_TU	lib/curl/include/curl/system.h	/^#  define CURL_SUFFIX_CURL_OFF_TU /;"	d
CURL_SUFFIX_CURL_OFF_TU	lib/curl/include/curl/system.h	/^# define CURL_SUFFIX_CURL_OFF_TU /;"	d
CURL_TIMECOND_IFMODSINCE	lib/curl/include/curl/curl.h	/^  CURL_TIMECOND_IFMODSINCE,$/;"	e	enum:__anon5737ba341603
CURL_TIMECOND_IFUNMODSINCE	lib/curl/include/curl/curl.h	/^  CURL_TIMECOND_IFUNMODSINCE,$/;"	e	enum:__anon5737ba341603
CURL_TIMECOND_LAST	lib/curl/include/curl/curl.h	/^  CURL_TIMECOND_LAST$/;"	e	enum:__anon5737ba341603
CURL_TIMECOND_LASTMOD	lib/curl/include/curl/curl.h	/^  CURL_TIMECOND_LASTMOD,$/;"	e	enum:__anon5737ba341603
CURL_TIMECOND_NONE	lib/curl/include/curl/curl.h	/^  CURL_TIMECOND_NONE,$/;"	e	enum:__anon5737ba341603
CURL_TLSAUTH	lib/curl/include/curl/curl.h	/^enum CURL_TLSAUTH {$/;"	g
CURL_TLSAUTH_LAST	lib/curl/include/curl/curl.h	/^  CURL_TLSAUTH_LAST \/* never use, keep last *\/$/;"	e	enum:CURL_TLSAUTH
CURL_TLSAUTH_NONE	lib/curl/include/curl/curl.h	/^  CURL_TLSAUTH_NONE,$/;"	e	enum:CURL_TLSAUTH
CURL_TLSAUTH_SRP	lib/curl/include/curl/curl.h	/^  CURL_TLSAUTH_SRP,$/;"	e	enum:CURL_TLSAUTH
CURL_TRAILERFUNC_ABORT	lib/curl/include/curl/curl.h	/^#define CURL_TRAILERFUNC_ABORT /;"	d
CURL_TRAILERFUNC_OK	lib/curl/include/curl/curl.h	/^#define CURL_TRAILERFUNC_OK /;"	d
CURL_TYPEOF_CURL_OFF_T	lib/curl/include/curl/system.h	/^#      define CURL_TYPEOF_CURL_OFF_T /;"	d
CURL_TYPEOF_CURL_OFF_T	lib/curl/include/curl/system.h	/^#    define CURL_TYPEOF_CURL_OFF_T /;"	d
CURL_TYPEOF_CURL_OFF_T	lib/curl/include/curl/system.h	/^#  define CURL_TYPEOF_CURL_OFF_T /;"	d
CURL_TYPEOF_CURL_OFF_T	lib/curl/include/curl/system.h	/^# define CURL_TYPEOF_CURL_OFF_T /;"	d
CURL_TYPEOF_CURL_SOCKLEN_T	lib/curl/include/curl/system.h	/^#    define CURL_TYPEOF_CURL_SOCKLEN_T /;"	d
CURL_TYPEOF_CURL_SOCKLEN_T	lib/curl/include/curl/system.h	/^#  define CURL_TYPEOF_CURL_SOCKLEN_T /;"	d
CURL_TYPEOF_CURL_SOCKLEN_T	lib/curl/include/curl/system.h	/^# define CURL_TYPEOF_CURL_SOCKLEN_T /;"	d
CURL_UPKEEP_INTERVAL_DEFAULT	lib/curl/include/curl/curl.h	/^#define CURL_UPKEEP_INTERVAL_DEFAULT /;"	d
CURL_VERSION_ALTSVC	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_ALTSVC /;"	d
CURL_VERSION_ASYNCHDNS	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_ASYNCHDNS /;"	d
CURL_VERSION_BITS	lib/curl/include/curl/curlver.h	/^#define CURL_VERSION_BITS(/;"	d
CURL_VERSION_BROTLI	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_BROTLI /;"	d
CURL_VERSION_CONV	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_CONV /;"	d
CURL_VERSION_CURLDEBUG	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_CURLDEBUG /;"	d
CURL_VERSION_DEBUG	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_DEBUG /;"	d
CURL_VERSION_GSASL	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_GSASL /;"	d
CURL_VERSION_GSSAPI	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_GSSAPI /;"	d
CURL_VERSION_GSSNEGOTIATE	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_GSSNEGOTIATE /;"	d
CURL_VERSION_HSTS	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_HSTS /;"	d
CURL_VERSION_HTTP2	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_HTTP2 /;"	d
CURL_VERSION_HTTP3	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_HTTP3 /;"	d
CURL_VERSION_HTTPS_PROXY	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_HTTPS_PROXY /;"	d
CURL_VERSION_IDN	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_IDN /;"	d
CURL_VERSION_IPV6	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_IPV6 /;"	d
CURL_VERSION_KERBEROS4	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_KERBEROS4 /;"	d
CURL_VERSION_KERBEROS5	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_KERBEROS5 /;"	d
CURL_VERSION_LARGEFILE	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_LARGEFILE /;"	d
CURL_VERSION_LIBZ	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_LIBZ /;"	d
CURL_VERSION_MULTI_SSL	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_MULTI_SSL /;"	d
CURL_VERSION_NTLM	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_NTLM /;"	d
CURL_VERSION_NTLM_WB	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_NTLM_WB /;"	d
CURL_VERSION_PSL	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_PSL /;"	d
CURL_VERSION_SPNEGO	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_SPNEGO /;"	d
CURL_VERSION_SSL	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_SSL /;"	d
CURL_VERSION_SSPI	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_SSPI /;"	d
CURL_VERSION_TLSAUTH_SRP	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_TLSAUTH_SRP /;"	d
CURL_VERSION_UNICODE	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_UNICODE /;"	d
CURL_VERSION_UNIX_SOCKETS	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_UNIX_SOCKETS /;"	d
CURL_VERSION_ZSTD	lib/curl/include/curl/curl.h	/^#define CURL_VERSION_ZSTD /;"	d
CURL_WAIT_POLLIN	lib/curl/include/curl/multi.h	/^#define CURL_WAIT_POLLIN /;"	d
CURL_WAIT_POLLOUT	lib/curl/include/curl/multi.h	/^#define CURL_WAIT_POLLOUT /;"	d
CURL_WAIT_POLLPRI	lib/curl/include/curl/multi.h	/^#define CURL_WAIT_POLLPRI /;"	d
CURL_WIN32	lib/curl/include/curl/curl.h	/^#define CURL_WIN32$/;"	d
CURL_WRITEFUNC_PAUSE	lib/curl/include/curl/curl.h	/^#define CURL_WRITEFUNC_PAUSE /;"	d
CURL_ZERO_TERMINATED	lib/curl/include/curl/curl.h	/^#define CURL_ZERO_TERMINATED /;"	d
CURLcode	lib/curl/include/curl/curl.h	/^} CURLcode;$/;"	t	typeref:enum:__anon5737ba340803
CURLformoption	lib/curl/include/curl/curl.h	/^} CURLformoption;$/;"	t	typeref:enum:__anon5737ba341703
CURLoption	lib/curl/include/curl/curl.h	/^} CURLoption;$/;"	t	typeref:enum:__anon5737ba341103
CURLproxycode	lib/curl/include/curl/curl.h	/^} CURLproxycode;$/;"	t	typeref:enum:__anon5737ba340903
CURLsslset	lib/curl/include/curl/curl.h	/^} CURLsslset;$/;"	t	typeref:enum:__anon5737ba341903
CURLversion	lib/curl/include/curl/curl.h	/^} CURLversion;$/;"	t	typeref:enum:__anon5737ba342003
CURRENT	src/Features/Tas/TasTools/StrafeTool.hpp	/^	CURRENT$/;"	e	enum:AutoStrafeParamType
CUserCmd	src/Utils/SDK.hpp	/^struct CUserCmd {$/;"	s
CUserCmdSize	src/Offsets.cpp	/^	int CUserCmdSize;$/;"	v	namespace:Offsets	typeref:typename:int
CUtlMemory	src/Utils/SDK.hpp	/^struct CUtlMemory {$/;"	s
CUtlVector	src/Utils/SDK.hpp	/^struct CUtlVector {$/;"	s
CVAR_HOOK_AND_CALLBACK	src/Variable.hpp	/^#define CVAR_HOOK_AND_CALLBACK(/;"	d
CVerifiedUserCmd	src/Utils/SDK.hpp	/^class CVerifiedUserCmd {$/;"	c
CViewSetup	src/Utils/SDK.hpp	/^struct CViewSetup {$/;"	s
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-std=c++17 -m32 $(WARNINGS) -I$(SDIR) -fPIC -D_GNU_SOURCE -Ilib\/ffmpeg\/include -Ilib\//;"	m
C_ERROR	lib/minhook/hde/table32.h	/^#define C_ERROR /;"	d
C_ERROR	lib/minhook/hde/table64.h	/^#define C_ERROR /;"	d
C_GROUP	lib/minhook/hde/table32.h	/^#define C_GROUP /;"	d
C_GROUP	lib/minhook/hde/table64.h	/^#define C_GROUP /;"	d
C_IMM16	lib/minhook/hde/table32.h	/^#define C_IMM16 /;"	d
C_IMM16	lib/minhook/hde/table64.h	/^#define C_IMM16 /;"	d
C_IMM8	lib/minhook/hde/table32.h	/^#define C_IMM8 /;"	d
C_IMM8	lib/minhook/hde/table64.h	/^#define C_IMM8 /;"	d
C_IMM_P66	lib/minhook/hde/table32.h	/^#define C_IMM_P66 /;"	d
C_IMM_P66	lib/minhook/hde/table64.h	/^#define C_IMM_P66 /;"	d
C_MODRM	lib/minhook/hde/table32.h	/^#define C_MODRM /;"	d
C_MODRM	lib/minhook/hde/table64.h	/^#define C_MODRM /;"	d
C_NONE	lib/minhook/hde/table32.h	/^#define C_NONE /;"	d
C_NONE	lib/minhook/hde/table64.h	/^#define C_NONE /;"	d
C_REL32	lib/minhook/hde/table32.h	/^#define C_REL32 /;"	d
C_REL32	lib/minhook/hde/table64.h	/^#define C_REL32 /;"	d
C_REL8	lib/minhook/hde/table32.h	/^#define C_REL8 /;"	d
C_REL8	lib/minhook/hde/table64.h	/^#define C_REL8 /;"	d
C_m_PortalLocal	src/Offsets.cpp	/^	int C_m_PortalLocal;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_StatsThisLevel	src/Offsets.cpp	/^	int C_m_StatsThisLevel;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_angAbsRotation	src/Offsets.cpp	/^	int C_m_angAbsRotation;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_bDucked	src/Offsets.cpp	/^	int C_m_bDucked;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_bDucking	src/Offsets.cpp	/^	int C_m_bDucking;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_bInDuckJump	src/Offsets.cpp	/^	int C_m_bInDuckJump;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_hGroundEntity	src/Offsets.cpp	/^	int C_m_hGroundEntity;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_nDuckJumpTimeMsecs	src/Offsets.cpp	/^	int C_m_nDuckJumpTimeMsecs;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_nDuckTimeMsecs	src/Offsets.cpp	/^	int C_m_nDuckTimeMsecs;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_nPlayerCond	src/Offsets.cpp	/^	int C_m_nPlayerCond;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_vecAbsOrigin	src/Offsets.cpp	/^	int C_m_vecAbsOrigin;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_vecVelocity	src/Offsets.cpp	/^	int C_m_vecVelocity;$/;"	v	namespace:Offsets	typeref:typename:int
C_m_vecViewOffset	src/Offsets.cpp	/^	int C_m_vecViewOffset;$/;"	v	namespace:Offsets	typeref:typename:int
CachedPaintPowerChoiceResult	src/Utils/SDK.hpp	/^struct CachedPaintPowerChoiceResult {$/;"	s
CalcButtonBits	src/Modules/Client.cpp	/^void Client::CalcButtonBits(int nSlot, int &bits, int in_button, int in_ignore, kbutton_t *butto/;"	f	class:Client	typeref:typename:void
Camera	src/Features/Camera.cpp	/^Camera::Camera() {$/;"	f	class:Camera
Camera	src/Features/Camera.hpp	/^class Camera : public Feature {$/;"	c
CameraControlType	src/Features/Camera.hpp	/^enum CameraControlType {$/;"	g
CameraState	src/Features/Camera.hpp	/^struct CameraState {$/;"	s
CameraStateParameter	src/Features/Camera.hpp	/^enum CameraStateParameter {$/;"	g
CameraStatesToInterpolationPoints	src/Features/Camera.cpp	/^std::vector<Vector> CameraStatesToInterpolationPoints(float *x, CameraState *y, CameraStateParam/;"	f	typeref:typename:std::vector<Vector>
CameraThirdData_t	src/Utils/SDK.hpp	/^struct CameraThirdData_t {$/;"	s
Cancel	src/Features/TimescaleDetect.cpp	/^void TimescaleDetect::Cancel() {$/;"	f	class:TimescaleDetect	typeref:typename:void
Categories	doc/contributing.md	/^#### Categories$/;"	t	subsection:SAR: Contributing Guide""Coding""Speedrun Timer
CategoryChanged	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::CategoryChanged() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Cbuf_AddText	src/Modules/Engine.hpp	/^	_Cbuf_AddText Cbuf_AddText = nullptr;$/;"	m	class:Engine	typeref:typename:_Cbuf_AddText
Cbuf_AddText	src/Offsets.cpp	/^	int Cbuf_AddText;$/;"	v	namespace:Offsets	typeref:typename:int
ChallengeFlagsRule	src/Features/Speedrun/Rules.hpp	/^struct ChallengeFlagsRule {$/;"	s
ChangeDemo	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::ChangeDemo() {$/;"	f	class:DemoGhostEntity	typeref:typename:void
ChangeLevel	src/Features/Tas/TasPlayer.hpp	/^	ChangeLevel,$/;"	e	enum:TasStartType
ChangeLevel	src/Offsets.cpp	/^	int ChangeLevel;$/;"	v	namespace:Offsets	typeref:typename:int
ChangeLevelCM	src/Features/Tas/TasPlayer.hpp	/^	ChangeLevelCM,$/;"	e	enum:TasStartType
Changed	src/Features/Session.cpp	/^void Session::Changed() {$/;"	f	class:Session	typeref:typename:void
Changed	src/Features/Session.cpp	/^void Session::Changed(int state) {$/;"	f	class:Session	typeref:typename:void
Chat	src/Modules/Client.cpp	/^void Client::Chat(Color col, const char *str) {$/;"	f	class:Client	typeref:typename:void
ChatData	src/Features/NetMessage.cpp	/^bool NetMessage::ChatData(std::string str) {$/;"	f	class:NetMessage	typeref:typename:bool
ChatPrintf	src/Modules/Client.hpp	/^	_ChatPrintf ChatPrintf = nullptr;$/;"	m	class:Client	typeref:typename:_ChatPrintf
ChatPrintf	src/Offsets.cpp	/^	int ChatPrintf;$/;"	v	namespace:Offsets	typeref:typename:int
Cheats	src/Cheats.hpp	/^class Cheats {$/;"	c
CheckJumpButton	src/Offsets.cpp	/^	int CheckJumpButton;$/;"	v	namespace:Offsets	typeref:typename:int
CheckJumpButtonBase	src/Modules/Server.hpp	/^	static _CheckJumpButton CheckJumpButtonBase;$/;"	m	class:Server	typeref:typename:_CheckJumpButton
Cinematic	src/Features/Camera.hpp	/^	Cinematic,$/;"	e	enum:CameraControlType
ClFrameStageNotify	src/Modules/Client.cpp	/^void Client::ClFrameStageNotify(int stage) {$/;"	f	class:Client	typeref:typename:void
ClassDumper	src/Features/ClassDumper.cpp	/^ClassDumper::ClassDumper()$/;"	f	class:ClassDumper
ClassDumper	src/Features/ClassDumper.hpp	/^class ClassDumper : public Feature {$/;"	c
Cleanup	src/CrashHandler.cpp	/^void CrashHandler::Cleanup() {$/;"	f	class:CrashHandler	typeref:typename:void
Cleanup	src/Features/Renderer.cpp	/^void Renderer::Cleanup() {$/;"	f	class:Renderer	typeref:typename:void
Clear	src/Features/PlayerTrace.cpp	/^void PlayerTrace::Clear(const size_t trace_idx) {$/;"	f	class:PlayerTrace	typeref:typename:void
Clear	src/Utils/SDK.hpp	/^	void Clear() {$/;"	f	struct:CUtlVector	typeref:typename:void
ClearAll	src/Features/PlayerTrace.cpp	/^void PlayerTrace::ClearAll() {$/;"	f	class:PlayerTrace	typeref:typename:void
ClearAllCallbacks	src/Variable.cpp	/^void Variable::ClearAllCallbacks() {$/;"	f	class:Variable	typeref:typename:void
ClearDemoQueue	src/Modules/EngineDemoPlayer.cpp	/^void EngineDemoPlayer::ClearDemoQueue() {$/;"	f	class:EngineDemoPlayer	typeref:typename:void
Client	src/Modules/Client.hpp	/^class Client : public Module {$/;"	c
ClientActive	src/SAR.cpp	/^void SAR::ClientActive(void *pEntity) {$/;"	f	class:SAR	typeref:typename:void
ClientClass	src/Utils/SDK.hpp	/^struct ClientClass {$/;"	s
ClientCmd	src/Modules/Engine.hpp	/^	_ClientCmd ClientCmd = nullptr;$/;"	m	class:Engine	typeref:typename:_ClientCmd
ClientCmd	src/Offsets.cpp	/^	int ClientCmd;$/;"	v	namespace:Offsets	typeref:typename:int
ClientCommand	src/Modules/Engine.hpp	/^	_ClientCommand ClientCommand = nullptr;$/;"	m	class:Engine	typeref:typename:_ClientCommand
ClientCommand	src/Offsets.cpp	/^	int ClientCommand;$/;"	v	namespace:Offsets	typeref:typename:int
ClientCommand	src/SAR.cpp	/^int SAR::ClientCommand(void *pEntity, const void *&args) {$/;"	f	class:SAR	typeref:typename:int
ClientConnect	src/SAR.cpp	/^int SAR::ClientConnect(bool *bAllowConnect, void *pEntity, const char *pszName, const char *pszA/;"	f	class:SAR	typeref:typename:int
ClientData	src/Features/Bot/BotServer.cpp	/^struct ClientData {$/;"	s	file:
ClientData	src/Features/Tas/TasServer.cpp	/^struct ClientData {$/;"	s	file:
ClientDisconnect	src/SAR.cpp	/^void SAR::ClientDisconnect(void *pEntity) {$/;"	f	class:SAR	typeref:typename:void
ClientFullyConnect	src/SAR.cpp	/^void SAR::ClientFullyConnect(void *pEdict) {$/;"	f	class:SAR	typeref:typename:void
ClientPutInServer	src/SAR.cpp	/^void SAR::ClientPutInServer(void *pEntity, char const *playername) {$/;"	f	class:SAR	typeref:typename:void
ClientSettingsChanged	src/SAR.cpp	/^void SAR::ClientSettingsChanged(void *pEdict) {$/;"	f	class:SAR	typeref:typename:void
ClientSide	src/Features/OffsetFinder.cpp	/^void OffsetFinder::ClientSide(const char *className, const char *propName, int *offset) {$/;"	f	class:OffsetFinder	typeref:typename:void
ClientTick	src/Offsets.cpp	/^	int ClientTick;$/;"	v	namespace:Offsets	typeref:typename:int
ClientTime	src/Modules/Engine.hpp	/^	_ClientTime ClientTime = nullptr;$/;"	m	class:Engine	typeref:typename:_ClientTime
ClientTime	src/Offsets.cpp	/^	int ClientTime;$/;"	v	namespace:Offsets	typeref:typename:int
Clock	lib/SFML/include/SFML/System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
CloseModuleHandle	src/Utils/Memory.cpp	/^void Memory::CloseModuleHandle(void *moduleHandle) {$/;"	f	class:Memory	typeref:typename:void
ClosingConnection	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action /;"	e	enum:sf::Ftp::Response::Status
Cmd_Shutdown	src/Cheats.cpp	/^	static _Cmd_Shutdown Cmd_Shutdown = nullptr;$/;"	v	typeref:typename:_Cmd_Shutdown	file:
Coding	doc/contributing.md	/^## Coding$/;"	s	chapter:SAR: Contributing Guide
Coding Style	doc/contributing.md	/^## Coding Style$/;"	s	chapter:SAR: Contributing Guide
Coin	src/Utils/lodepng.cpp	/^typedef struct Coin {$/;"	s	file:
Coin	src/Utils/lodepng.cpp	/^} Coin;$/;"	t	typeref:struct:Coin	file:
Color	src/Utils/SDK.hpp	/^	Color() {$/;"	f	struct:Color
Color	src/Utils/SDK.hpp	/^	Color(int _r, int _g, int _b) {$/;"	f	struct:Color
Color	src/Utils/SDK.hpp	/^	Color(int _r, int _g, int _b, int _a) {$/;"	f	struct:Color
Color	src/Utils/SDK.hpp	/^struct Color {$/;"	s
ColorMsg	src/Modules/Console.hpp	/^	_ColorMsg ColorMsg = nullptr;$/;"	m	class:Console	typeref:typename:_ColorMsg
ColorPrint	src/Modules/Tier1.cpp	/^	virtual void ColorPrint(const Color &clr, const char *msg) override {$/;"	f	class:ConsoleDisplayHook	typeref:typename:void	file:
ColorProfile	src/Utils/lodepng.cpp	/^typedef struct ColorProfile {$/;"	s	file:
ColorProfile	src/Utils/lodepng.cpp	/^} ColorProfile;$/;"	t	typeref:struct:ColorProfile	file:
ColorTree	src/Utils/lodepng.cpp	/^struct ColorTree {$/;"	s	file:
ColorTree	src/Utils/lodepng.cpp	/^typedef struct ColorTree ColorTree;$/;"	t	typeref:struct:ColorTree	file:
Command	src/Command.cpp	/^Command::Command()$/;"	f	class:Command
Command	src/Command.cpp	/^Command::Command(const char *name) {$/;"	f	class:Command
Command	src/Command.cpp	/^Command::Command(const char *pName, _CommandCallback callback, const char *pHelpString, int flag/;"	f	class:Command
Command	src/Command.hpp	/^class Command {$/;"	c
CommandNotImplemented	lib/SFML/include/SFML/Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	lib/SFML/include/SFML/Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
Commands	doc/contributing.md	/^#### Commands$/;"	t	subsection:SAR: Contributing Guide""Coding""Console Commands
ConCommand	src/Utils/SDK.hpp	/^	ConCommand(const char *pName, _CommandCallback callback, const char *pHelpString, int flags, _C/;"	f	struct:ConCommand
ConCommand	src/Utils/SDK.hpp	/^struct ConCommand : ConCommandBase {$/;"	s
ConCommandBase	src/Utils/SDK.hpp	/^	ConCommandBase(const char *name, int flags, const char *helpstr)$/;"	f	struct:ConCommandBase
ConCommandBase	src/Utils/SDK.hpp	/^struct ConCommandBase {$/;"	s
ConCommand_VTable	src/Modules/Tier1.hpp	/^	void *ConCommand_VTable = nullptr;$/;"	m	class:Tier1	typeref:typename:void *
ConFilterRule	src/Modules/Tier1.cpp	/^struct ConFilterRule {$/;"	s	file:
ConPrintEvent	src/Modules/Engine.hpp	/^	_ConPrintEvent ConPrintEvent = nullptr;$/;"	m	class:Engine	typeref:typename:_ConPrintEvent
ConPrintEvent	src/Offsets.cpp	/^	int ConPrintEvent;$/;"	v	namespace:Offsets	typeref:typename:int
ConVar	src/Utils/SDK.hpp	/^	ConVar(const char *name, const char *value, int flags, const char *helpstr, bool hasmin, float /;"	f	struct:ConVar
ConVar	src/Utils/SDK.hpp	/^struct ConVar : ConCommandBase {$/;"	s
ConVar_VTable	src/Modules/Tier1.hpp	/^	void *ConVar_VTable = nullptr;$/;"	m	class:Tier1	typeref:typename:void *
ConVar_VTable	src/Utils/SDK.hpp	/^	void *ConVar_VTable;                                \/\/ 24$/;"	m	struct:ConVar	typeref:typename:void *
ConVar_VTable2	src/Modules/Tier1.hpp	/^	void *ConVar_VTable2 = nullptr;$/;"	m	class:Tier1	typeref:typename:void *
Con_IsVisible	src/Modules/Engine.hpp	/^	_Con_IsVisible Con_IsVisible = nullptr;$/;"	m	class:Engine	typeref:typename:_Con_IsVisible
Con_IsVisible	src/Offsets.cpp	/^	int Con_IsVisible;$/;"	v	namespace:Offsets	typeref:typename:int
Condition	src/Features/ConfigPlus.cpp	/^struct Condition {$/;"	s	file:
Connect	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::Connect(sf::IpAddress ip, unsigned short int port, bool spectator) {$/;"	f	class:NetworkManager	typeref:typename:void
ConnectionClosed	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	lib/SFML/include/SFML/Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
Console	src/Modules/Console.hpp	/^class Console : public Module {$/;"	c
Console Commands	doc/contributing.md	/^### Console Commands$/;"	S	section:SAR: Contributing Guide""Coding
ConsoleDisplayHook	src/Modules/Tier1.cpp	/^class ConsoleDisplayHook : public IConsoleDisplayFunc {$/;"	c	file:
ConsoleListener	src/Modules/Console.cpp	/^ConsoleListener::ConsoleListener(std::function<void(const char *)> cbk)$/;"	f	class:ConsoleListener
ConsoleListener	src/Modules/Console.hpp	/^class ConsoleListener : private ILoggingListener {$/;"	c
ConsoleVisible	src/Modules/Engine.cpp	/^bool Engine::ConsoleVisible() {$/;"	f	class:Engine	typeref:typename:bool
ConstIterator	lib/SFML/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Read-only iterator /;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::const_iterator
ControlMap	src/Utils/SDK.hpp	/^	unsigned int ControlMap;  \/\/ 8$/;"	m	struct:__anon21a65a740708	typeref:typename:unsigned int
ControllerMove	src/Features/Tas/TasController.cpp	/^void TasController::ControllerMove(int nSlot, float flFrametime, CUserCmd *cmd) {$/;"	f	class:TasController	typeref:typename:void
ConvertFromSrgb	src/Utils.cpp	/^int Utils::ConvertFromSrgb(int s) {$/;"	f	class:Utils	typeref:typename:int
CopyVtable	src/Interface.cpp	/^void Interface::CopyVtable() {$/;"	f	class:Interface	typeref:typename:void
CountdownTimer	src/Utils/SDK.hpp	/^class CountdownTimer {$/;"	c
CrashHandler	src/CrashHandler.hpp	/^namespace CrashHandler {$/;"	n
Crc32_crc_table	src/Utils/lodepng.cpp	/^static unsigned Crc32_crc_table[256];$/;"	v	typeref:typename:unsigned[256]	file:
Crc32_crc_table_computed	src/Utils/lodepng.cpp	/^static unsigned Crc32_crc_table_computed = 0;$/;"	v	typeref:typename:unsigned	file:
Crc32_make_crc_table	src/Utils/lodepng.cpp	/^static void Crc32_make_crc_table(void) {$/;"	f	typeref:typename:void	file:
Crc32_update_crc	src/Utils/lodepng.cpp	/^static unsigned Crc32_update_crc(const unsigned char *buf, unsigned crc, size_t len) {$/;"	f	typeref:typename:unsigned	file:
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> ChallengeFlagsRule::Create(std::map<std::string, std::string> params/;"	f	class:ChallengeFlagsRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> CrouchFlyRule::Create(std::map<std::string, std::string> params) {$/;"	f	class:CrouchFlyRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> EntityInputRule::Create(std::map<std::string, std::string> params) {$/;"	f	class:EntityInputRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> MapEndRule::Create(std::map<std::string, std::string> params) {$/;"	f	class:MapEndRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> MapLoadRule::Create(std::map<std::string, std::string> params) {$/;"	f	class:MapLoadRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> PortalPlacementRule::Create(std::map<std::string, std::string> param/;"	f	class:PortalPlacementRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Features/Speedrun/Rules.cpp	/^std::optional<SpeedrunRule> ZoneTriggerRule::Create(std::map<std::string, std::string> params) {$/;"	f	class:ZoneTriggerRule	typeref:typename:std::optional<SpeedrunRule>
Create	src/Interface.cpp	/^Interface *Interface::Create(const char *filename, const char *interfaceSymbol, bool copyVtable,/;"	f	class:Interface	typeref:typename:Interface *
Create	src/Interface.cpp	/^Interface *Interface::Create(void *ptr, bool copyVtable, bool autoHook) {$/;"	f	class:Interface	typeref:typename:Interface *
Create	src/Modules/Tier1.hpp	/^	_Create Create = nullptr;$/;"	m	class:Tier1	typeref:typename:_Create
Create	src/Offsets.cpp	/^	int Create;$/;"	v	namespace:Offsets	typeref:typename:int
Create	src/Variable.cpp	/^void Variable::Create(const char *name, const char *value, int flags, const char *helpstr, bool /;"	f	class:Variable	typeref:typename:void
CreateCategory	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::CreateCategory(std::string name) {$/;"	f	class:SpeedrunTimer	typeref:typename:bool
CreateClientClassFn	src/Utils/SDK.hpp	/^typedef void *(*CreateClientClassFn)(int entnum, int serialNum);$/;"	t	typeref:typename:void * (*)(int entnum,int serialNum)
CreateDebugMesh	src/Offsets.cpp	/^	int CreateDebugMesh;$/;"	v	namespace:Offsets	typeref:typename:int
CreateEntityByName	src/Modules/Server.hpp	/^	_CreateEntityByName CreateEntityByName = nullptr;$/;"	m	class:Server	typeref:typename:_CreateEntityByName
CreateEntityByName	src/Offsets.cpp	/^	int CreateEntityByName;$/;"	v	namespace:Offsets	typeref:typename:int
CreateEventFn	src/Utils/SDK.hpp	/^typedef void *(*CreateEventFn)();$/;"	t	typeref:typename:void * (*)()
CreateInterface	src/Utils/SDK.cpp	/^DLL_EXPORT void *CreateInterface(const char *pName, int *pReturnCode) {$/;"	f	typeref:typename:DLL_EXPORT void *
CreateInterfaceFn	src/Utils/SDK.hpp	/^typedef void *(*CreateInterfaceFn)(const char *pName, int *pReturnCode);$/;"	t	typeref:typename:void * (*)(const char * pName,int * pReturnCode)
CreateInterfaceInternal	src/Utils/SDK.cpp	/^static void *CreateInterfaceInternal(const char *pName, int *pReturnCode) {$/;"	f	typeref:typename:void *	file:
CreateMove	src/Offsets.cpp	/^	int CreateMove;$/;"	v	namespace:Offsets	typeref:typename:int
CreateNew	src/Game.cpp	/^Game *Game::CreateNew() {$/;"	f	class:Game	typeref:typename:Game *
CreateNewTextureID	src/Modules/Surface.hpp	/^	_CreateNewTextureID CreateNewTextureID = nullptr;$/;"	m	class:Surface	typeref:typename:_CreateNewTextureID
CreateNewTextureID	src/Offsets.cpp	/^	int CreateNewTextureID;$/;"	v	namespace:Offsets	typeref:typename:int
CreateRule	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::CreateRule(std::string name, std::string type, std::map<std::string, std::st/;"	f	class:SpeedrunTimer	typeref:typename:bool
CreateTrampolineFunction	lib/minhook/trampoline.c	/^BOOL CreateTrampolineFunction(PTRAMPOLINE ct)$/;"	f	typeref:typename:BOOL
CreateWishDir	src/Features/Tas/TasTools/StrafeTool.cpp	/^Vector AutoStrafeTool::CreateWishDir(const TasPlayerInfo &player, float forwardMove, float sideM/;"	f	class:AutoStrafeTool	typeref:typename:Vector
Created	lib/SFML/include/SFML/Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
Cross	src/Utils/SDK.hpp	/^	inline Vector Cross(const Vector &v) {$/;"	f	struct:Vector	typeref:typename:Vector
Crosshair	src/Features/Hud/Crosshair.cpp	/^Crosshair::Crosshair()$/;"	f	class:Crosshair
Crosshair	src/Features/Hud/Crosshair.hpp	/^class Crosshair : public Hud {$/;"	c
Crouch	src/Features/Tas/TasController.hpp	/^	Crouch,$/;"	e	enum:TasControllerInput
CrouchFlyRule	src/Features/Speedrun/Rules.hpp	/^struct CrouchFlyRule {$/;"	s
Current	src/Interface.hpp	/^	T Current(int index) {$/;"	f	class:Interface	typeref:typename:T
CustomDataToString	src/Features/Demo/DemoGhostPlayer.cpp	/^std::string DemoGhostPlayer::CustomDataToString(Vector pos, std::optional<int> slot, PortalColor/;"	f	class:DemoGhostPlayer	typeref:typename:std::string
CustomDataToString	src/Features/Demo/DemoGhostPlayer.cpp	/^std::string DemoGhostPlayer::CustomDataToString(const char *entName, const char *className, cons/;"	f	class:DemoGhostPlayer	typeref:typename:std::string
CustomDataToString	src/Features/Demo/DemoGhostPlayer.cpp	/^std::string DemoGhostPlayer::CustomDataToString(std::optional<int> slot) {$/;"	f	class:DemoGhostPlayer	typeref:typename:std::string
CustomDatas	src/Features/Demo/DemoGhostEntity.hpp	/^typedef std::unordered_map<std::string, std::tuple<int, bool>> CustomDatas;$/;"	t	typeref:typename:std::unordered_map<std::string,std::tuple<int,bool>>
CustomDemoData	src/Modules/EngineDemoPlayer.cpp	/^void EngineDemoPlayer::CustomDemoData(char *data, size_t length) {$/;"	f	class:EngineDemoPlayer	typeref:typename:void
CustomSetPortalID	src/Features/ReloadedFix.cpp	/^void ReloadedFix::CustomSetPortalID() {$/;"	f	class:ReloadedFix	typeref:typename:void
Cvar	cvars.js	/^class Cvar {$/;"	c
Cvars	src/Features/Cvars.cpp	/^Cvars::Cvars()$/;"	f	class:Cvars
Cvars	src/Features/Cvars.hpp	/^class Cvars : public Feature {$/;"	c
DCTContext	lib/ffmpeg/include/libavcodec/avfft.h	/^typedef struct DCTContext DCTContext;$/;"	t	typeref:struct:DCTContext
DCTTransformType	lib/ffmpeg/include/libavcodec/avfft.h	/^enum DCTTransformType {$/;"	g
DCT_I	lib/ffmpeg/include/libavcodec/avfft.h	/^    DCT_I,$/;"	e	enum:DCTTransformType
DCT_II	lib/ffmpeg/include/libavcodec/avfft.h	/^    DCT_II = 0,$/;"	e	enum:DCTTransformType
DCT_III	lib/ffmpeg/include/libavcodec/avfft.h	/^    DCT_III,$/;"	e	enum:DCTTransformType
DECLARE_ALIGNED	lib/ffmpeg/include/libavutil/mem.h	/^    #define DECLARE_ALIGNED(/;"	d
DECLARE_ASM_ALIGNED	lib/ffmpeg/include/libavutil/mem.h	/^    #define DECLARE_ASM_ALIGNED(/;"	d
DECLARE_ASM_CONST	lib/ffmpeg/include/libavutil/mem.h	/^    #define DECLARE_ASM_CONST(/;"	d
DECLARE_AUTOCOMPLETION_FUNCTION	src/Command.hpp	/^#define DECLARE_AUTOCOMPLETION_FUNCTION(/;"	d
DECL_AUTO_COMMAND_COMPLETION	src/Command.hpp	/^#define DECL_AUTO_COMMAND_COMPLETION(/;"	d
DECL_COMMAND_COMPLETION	src/Command.hpp	/^#define DECL_COMMAND_COMPLETION(/;"	d
DECL_COMMAND_COMPLETION	src/Features/Camera.cpp	/^DECL_COMMAND_COMPLETION(sar_cam_path_remkf) {$/;"	f
DECL_COMMAND_COMPLETION	src/Features/Camera.cpp	/^DECL_COMMAND_COMPLETION(sar_cam_path_setkf) {$/;"	f
DECL_COMMAND_COMPLETION	src/Features/Camera.cpp	/^DECL_COMMAND_COMPLETION(sar_cam_path_showkf) {$/;"	f
DECL_COMMAND_COMPLETION	src/Features/Demo/GhostEntity.cpp	/^DECL_COMMAND_COMPLETION(ghost_spec_pov) {$/;"	f
DECL_COMMAND_COMPLETION	src/Features/Hud/Crosshair.cpp	/^DECL_COMMAND_COMPLETION(sar_quickhud_set_texture) {$/;"	f
DECL_COMMAND_COMPLETION	src/Features/Hud/InputHud.cpp	/^DECL_COMMAND_COMPLETION(sar_ihud_modify) {$/;"	f
DECL_COMMAND_COMPLETION	src/Features/WorkshopList.cpp	/^DECL_COMMAND_COMPLETION(sar_workshop) {$/;"	f
DECL_COMMAND_FILE_COMPLETION	src/Command.hpp	/^#define DECL_COMMAND_FILE_COMPLETION(/;"	d
DECL_CVAR_CALLBACK	src/Modules/Client.cpp	/^DECL_CVAR_CALLBACK(cl_fov) {$/;"	f
DECL_CVAR_CALLBACK	src/Modules/Engine.cpp	/^DECL_CVAR_CALLBACK(ss_force_primary_fullscreen) {$/;"	f
DECL_CVAR_CALLBACK	src/Variable.hpp	/^#define DECL_CVAR_CALLBACK(/;"	d
DECL_DECLARE_AUTOCOMPLETION_FUNCTION	src/Command.hpp	/^#define DECL_DECLARE_AUTOCOMPLETION_FUNCTION(/;"	d
DECL_DECLARE_AUTOCOMPLETION_FUNCTION	src/Features/ConfigPlus.cpp	/^DECL_DECLARE_AUTOCOMPLETION_FUNCTION(svar_set) {$/;"	f
DECL_DETOUR	src/Utils/Platform.hpp	/^#	define DECL_DETOUR(/;"	d
DECL_DETOUR_B	src/Utils/Platform.hpp	/^#	define DECL_DETOUR_B(/;"	d
DECL_DETOUR_COMMAND	src/Command.hpp	/^#define DECL_DETOUR_COMMAND(/;"	d
DECL_DETOUR_MH	src/Utils/Platform.hpp	/^#	define DECL_DETOUR_MH(/;"	d
DECL_DETOUR_MID_MH	src/Utils/Platform.hpp	/^#	define DECL_DETOUR_MID_MH(/;"	d
DECL_DETOUR_T	src/Utils/Platform.hpp	/^#	define DECL_DETOUR_T(/;"	d
DECL_M	src/Modules/Module.hpp	/^#define DECL_M(/;"	d
DEFAULT_WINDOWSIZE	src/Utils/lodepng.cpp	/^#	define DEFAULT_WINDOWSIZE /;"	d	file:
DEG2RAD	src/Utils/Math.hpp	/^#define DEG2RAD(/;"	d
DELTA_FPU_MODRM	lib/minhook/hde/table32.h	/^#define DELTA_FPU_MODRM /;"	d
DELTA_FPU_MODRM	lib/minhook/hde/table64.h	/^#define DELTA_FPU_MODRM /;"	d
DELTA_FPU_REG	lib/minhook/hde/table32.h	/^#define DELTA_FPU_REG /;"	d
DELTA_FPU_REG	lib/minhook/hde/table64.h	/^#define DELTA_FPU_REG /;"	d
DELTA_OP2_LOCK_OK	lib/minhook/hde/table32.h	/^#define DELTA_OP2_LOCK_OK /;"	d
DELTA_OP2_LOCK_OK	lib/minhook/hde/table64.h	/^#define DELTA_OP2_LOCK_OK /;"	d
DELTA_OP2_ONLY_MEM	lib/minhook/hde/table32.h	/^#define DELTA_OP2_ONLY_MEM /;"	d
DELTA_OP2_ONLY_MEM	lib/minhook/hde/table64.h	/^#define DELTA_OP2_ONLY_MEM /;"	d
DELTA_OPCODES	lib/minhook/hde/table32.h	/^#define DELTA_OPCODES /;"	d
DELTA_OPCODES	lib/minhook/hde/table64.h	/^#define DELTA_OPCODES /;"	d
DELTA_OP_LOCK_OK	lib/minhook/hde/table32.h	/^#define DELTA_OP_LOCK_OK /;"	d
DELTA_OP_LOCK_OK	lib/minhook/hde/table64.h	/^#define DELTA_OP_LOCK_OK /;"	d
DELTA_OP_ONLY_MEM	lib/minhook/hde/table32.h	/^#define DELTA_OP_ONLY_MEM /;"	d
DELTA_OP_ONLY_MEM	lib/minhook/hde/table64.h	/^#define DELTA_OP_ONLY_MEM /;"	d
DELTA_PREFIXES	lib/minhook/hde/table32.h	/^#define DELTA_PREFIXES /;"	d
DELTA_PREFIXES	lib/minhook/hde/table64.h	/^#define DELTA_PREFIXES /;"	d
DEMO_AUTOSTOP_DELAY	src/Modules/EngineDemoRecorder.hpp	/^#define DEMO_AUTOSTOP_DELAY /;"	d
DEMO_START	src/Event.hpp	/^		DEMO_START,$/;"	e	enum:Event::EventType
DEMO_STOP	src/Event.hpp	/^		DEMO_STOP,$/;"	e	enum:Event::EventType
DEPS	Makefile	/^DEPS=$(OBJS:%.o=%.d)$/;"	m
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::CInput_CreateMove, int sequence_number, float input_sample_frametime, bool active/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::CreateMove, float flInputSampleTime, CUserCmd *cmd) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::CreateMove2, float flInputSampleTime, CUserCmd *cmd) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::DecodeUserCmdFromBuffer, int nSlot, int buf, signed int sequence_number) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::DrawTranslucentRenderables, bool inSkybox, bool shadowDepth) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::GetButtonBits, bool bResetState) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::LevelInitPreEntity, const char *levelName) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::MsgFunc_SayText2, bf_read &msg) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::OverrideView, CViewSetup *m_View) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::ProcessMovement, void *player, CMoveData *move) {$/;"	f
DETOUR	src/Modules/Client.cpp	/^DETOUR(Client::SteamControllerMove, int nSlot, float flFrametime, CUserCmd *cmd) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::ChangeLevel, const char *s1, const char *s2) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::CreateDebugMesh, const void *collisionModel, Vector **outVerts) {$/;"	f	typeref:typename:exec,".cfg",Utils::ssprintf ("%s/cfg",engine->GetGameDirectory ()),1
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::DestroyDebugMesh, int vertCount, Vector *verts) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::Disconnect, bool bShowMainMenu) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::Frame) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::PurgeUnusedModels) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::ReadCustomData, int *callbackIndex, char **data) {$/;"	f
DETOUR	src/Modules/Engine.cpp	/^DETOUR(Engine::SetSignonState, int state, int count, void *unk) {$/;"	f
DETOUR	src/Modules/EngineDemoPlayer.cpp	/^DETOUR(EngineDemoPlayer::StartPlayback, const char *filename, bool bAsTimeDemo) {$/;"	f
DETOUR	src/Modules/EngineDemoPlayer.cpp	/^DETOUR(EngineDemoPlayer::StopPlayback) {$/;"	f
DETOUR	src/Modules/EngineDemoRecorder.cpp	/^DETOUR(EngineDemoRecorder::RecordCustomData, int id, const void *data, unsigned long length) {$/;"	f
DETOUR	src/Modules/EngineDemoRecorder.cpp	/^DETOUR(EngineDemoRecorder::SetSignonState, int state) {$/;"	f
DETOUR	src/Modules/EngineDemoRecorder.cpp	/^DETOUR(EngineDemoRecorder::StartRecording, const char *filename, bool continuously) {$/;"	f
DETOUR	src/Modules/EngineDemoRecorder.cpp	/^DETOUR(EngineDemoRecorder::StopRecording) {$/;"	f
DETOUR	src/Modules/InputSystem.cpp	/^DETOUR(InputSystem::SleepUntilInput, int nMaxSleepTimeMS) {$/;"	f
DETOUR	src/Modules/MaterialSystem.cpp	/^DETOUR(MaterialSystem::CreateMaterial, const char *pMaterialName, void *pVMTKeyValues) {$/;"	f
DETOUR	src/Modules/MaterialSystem.cpp	/^DETOUR(MaterialSystem::UncacheUnusedMaterials, bool bRecomputeStateSnapshots) {$/;"	f
DETOUR	src/Modules/Server.cpp	/^DETOUR(Server::FinishGravity) {$/;"	f
DETOUR	src/Modules/Server.cpp	/^DETOUR(Server::GameFrame, bool simulating)$/;"	f
DETOUR	src/Modules/Server.cpp	/^DETOUR(Server::PlayerMove) {$/;"	f
DETOUR	src/Modules/Server.cpp	/^DETOUR(Server::PlayerRunCommand, CUserCmd *cmd, void *moveHelper) {$/;"	f
DETOUR	src/Modules/Server.cpp	/^DETOUR(Server::ProcessMovement, void *player, CMoveData *move) {$/;"	f
DETOUR	src/Modules/Server.cpp	/^DETOUR(Server::StartTouchChallengeNode, void *entity) {$/;"	f
DETOUR	src/Modules/VGui.cpp	/^DETOUR(VGui::Paint, PaintMode_t mode) {$/;"	f
DETOUR	src/Modules/VGui.cpp	/^DETOUR(VGui::UpdateProgressBar, int progress) {$/;"	f
DETOUR	src/Utils/Platform.hpp	/^#	define DETOUR(/;"	d
DETOUR_B	src/Modules/Engine.cpp	/^DETOUR_B(Engine::OnGameOverlayActivated, GameOverlayActivated_t *pGameOverlayActivated) {$/;"	f
DETOUR_B	src/Modules/Server.cpp	/^DETOUR_B(Server::AirMove) {$/;"	f
DETOUR_B	src/Utils/Platform.hpp	/^#	define DETOUR_B(/;"	d
DETOUR_COMMAND	src/Command.hpp	/^#define DETOUR_COMMAND(/;"	d
DETOUR_COMMAND	src/Modules/Client.cpp	/^DETOUR_COMMAND(Client::playvideo_end_level_transition) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::exec) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::exit) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::gameui_activate) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::give) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::help) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::load) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::playvideo_end_level_transition) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::plugin_load) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::plugin_unload) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::quit) {$/;"	f
DETOUR_COMMAND	src/Modules/Engine.cpp	/^DETOUR_COMMAND(Engine::stop_transition_videos_fadeout) {$/;"	f
DETOUR_COMMAND	src/Modules/EngineDemoPlayer.cpp	/^DETOUR_COMMAND(EngineDemoPlayer::stopdemo) {$/;"	f
DETOUR_COMMAND	src/Modules/EngineDemoRecorder.cpp	/^DETOUR_COMMAND(EngineDemoRecorder::record) {$/;"	f
DETOUR_COMMAND	src/Modules/EngineDemoRecorder.cpp	/^DETOUR_COMMAND(EngineDemoRecorder::stop) {$/;"	f
DETOUR_COMMAND	src/Modules/Server.cpp	/^DETOUR_COMMAND(Server::say) {$/;"	f
DETOUR_MH	src/Utils/Platform.hpp	/^#	define DETOUR_MH(/;"	d
DETOUR_MID_MH	src/Modules/Engine.cpp	/^DETOUR_MID_MH(Engine::ParseSmoothingInfo_Mid) {$/;"	f
DETOUR_MID_MH	src/Utils/Platform.hpp	/^#	define DETOUR_MID_MH(/;"	d
DETOUR_T	src/Modules/Client.cpp	/^DETOUR_T(bool, Client::ShouldDraw_BasicInfo) {$/;"	f
DETOUR_T	src/Modules/Client.cpp	/^DETOUR_T(bool, Client::ShouldDraw_SaveStatus) {$/;"	f
DETOUR_T	src/Modules/Client.cpp	/^DETOUR_T(const char *, Client::GetName) {$/;"	f
DETOUR_T	src/Modules/Client.cpp	/^DETOUR_T(void *, Client::GetTextColorForClient, Color *col_out, TextColor color, int client_idx)/;"	f
DETOUR_T	src/Modules/Engine.cpp	/^DETOUR_T(const char *, Engine::ReadConsoleCommand) {$/;"	f
DETOUR_T	src/Modules/Server.cpp	/^DETOUR_T(bool, Server::CheckJumpButton) {$/;"	f
DETOUR_T	src/Utils/Platform.hpp	/^#	define DETOUR_T(/;"	d
DEVMSG_SYMBOL	src/Modules/Console.hpp	/^#	define DEVMSG_SYMBOL /;"	d
DEVWARNINGMSG_SYMBOL	src/Modules/Console.hpp	/^#	define DEVWARNINGMSG_SYMBOL /;"	d
DFT_C2R	lib/ffmpeg/include/libavcodec/avfft.h	/^    DFT_C2R,$/;"	e	enum:RDFTransformType
DFT_R2C	lib/ffmpeg/include/libavcodec/avfft.h	/^    DFT_R2C,$/;"	e	enum:RDFTransformType
DIRAC_PCODE_AUX	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_AUX             = 0x20,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_END_SEQ	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_END_SEQ         = 0x10,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTER_NOREF_CO1	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTER_NOREF_CO1 = 0x0A,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTER_NOREF_CO2	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTER_NOREF_CO2 = 0x09,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTER_REF_CO1	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTER_REF_CO1   = 0x0D,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTER_REF_CO2	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTER_REF_CO2   = 0x0E,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTRA_REF_CO	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTRA_REF_CO    = 0x0C,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTRA_REF_PICT	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTRA_REF_PICT  = 0xCC,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_INTRA_REF_RAW	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_INTRA_REF_RAW   = 0x4C,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_MAGIC	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_MAGIC           = 0x42424344,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_PAD	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_PAD             = 0x30,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_PICTURE_CODED	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_PICTURE_CODED   = 0x08,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_PICTURE_HQ	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_PICTURE_HQ      = 0xE8,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_PICTURE_LOW_DEL	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_PICTURE_LOW_DEL = 0xC8,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_PICTURE_RAW	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_PICTURE_RAW     = 0x48,$/;"	e	enum:DiracParseCodes
DIRAC_PCODE_SEQ_HEADER	lib/ffmpeg/include/libavcodec/dirac.h	/^    DIRAC_PCODE_SEQ_HEADER      = 0x00,$/;"	e	enum:DiracParseCodes
DISABLED	src/Features/Tas/TasTools/StrafeTool.hpp	/^	DISABLED,$/;"	e	enum:AutoStrafeType
DISCONNECT	src/Features/Demo/NetworkGhostPlayer.hpp	/^	DISCONNECT,$/;"	e	enum:HEADER
DISTANCEBASE	src/Utils/lodepng.cpp	/^static const unsigned DISTANCEBASE[30] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, /;"	v	typeref:typename:const unsigned[30]	file:
DISTANCEEXTRA	src/Utils/lodepng.cpp	/^static const unsigned DISTANCEEXTRA[30] = {0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,/;"	v	typeref:typename:const unsigned[30]	file:
DLL_EXPORT	src/Utils/Platform.hpp	/^#	define DLL_EXPORT /;"	d
DNXHD_444	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define DNXHD_444 /;"	d
DNXHD_HEADER_444	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define DNXHD_HEADER_444 /;"	d
DNXHD_HEADER_INITIAL	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define DNXHD_HEADER_INITIAL /;"	d
DNXHD_INTERLACED	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define DNXHD_INTERLACED /;"	d
DNXHD_MBAFF	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define DNXHD_MBAFF /;"	d
DNXHD_VARIABLE	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^#define DNXHD_VARIABLE /;"	d
DPRINT	src/Modules/Tier1.cpp	/^		DPRINT,$/;"	e	enum:BufferedPart::Type	file:
DPT_Array	src/Utils/SDK.hpp	/^	DPT_Array,$/;"	e	enum:__anon21a65a740503
DPT_DataTable	src/Utils/SDK.hpp	/^	DPT_DataTable,$/;"	e	enum:__anon21a65a740503
DPT_Float	src/Utils/SDK.hpp	/^	DPT_Float,$/;"	e	enum:__anon21a65a740503
DPT_Int	src/Utils/SDK.hpp	/^	DPT_Int = 0,$/;"	e	enum:__anon21a65a740503
DPT_Int64	src/Utils/SDK.hpp	/^	DPT_Int64,$/;"	e	enum:__anon21a65a740503
DPT_NUMSendPropTypes	src/Utils/SDK.hpp	/^	DPT_NUMSendPropTypes$/;"	e	enum:__anon21a65a740503
DPT_String	src/Utils/SDK.hpp	/^	DPT_String,$/;"	e	enum:__anon21a65a740503
DPT_Vector	src/Utils/SDK.hpp	/^	DPT_Vector,$/;"	e	enum:__anon21a65a740503
DPT_VectorXY	src/Utils/SDK.hpp	/^	DPT_VectorXY,$/;"	e	enum:__anon21a65a740503
DPrint	src/Modules/Tier1.cpp	/^	virtual void DPrint(const char *msg) override {$/;"	f	class:ConsoleDisplayHook	typeref:typename:void	file:
DST_I	lib/ffmpeg/include/libavcodec/avfft.h	/^    DST_I,$/;"	e	enum:DCTTransformType
DV_PROFILE_BYTES	lib/ffmpeg/include/libavcodec/dv_profile.h	/^#define DV_PROFILE_BYTES /;"	d
Data	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::vector<char>
DataConnectionAlreadyOpened	lib/SFML/include/SFML/Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer /;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	lib/SFML/include/SFML/Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	lib/SFML/include/SFML/Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
DataGhost	src/Features/Demo/GhostEntity.hpp	/^struct DataGhost {$/;"	s
DataMapDumper	src/Features/DataMapDumper.cpp	/^DataMapDumper::DataMapDumper()$/;"	f	class:DataMapDumper
DataMapDumper	src/Features/DataMapDumper.hpp	/^class DataMapDumper : public Feature {$/;"	c
DataTableRecvVarProxyFn	src/Utils/SDK.hpp	/^typedef void (*DataTableRecvVarProxyFn)(const RecvProp *pProp, void **pOut, void *pData, int obj/;"	t	typeref:typename:void (*)(const RecvProp * pProp,void ** pOut,void * pData,int objectID)
DeactivateMouse	src/Offsets.cpp	/^	int DeactivateMouse;$/;"	v	namespace:Offsets	typeref:typename:int
DebugDrawPhysCollide	src/Modules/Engine.hpp	/^	_DebugDrawPhysCollide DebugDrawPhysCollide = nullptr;$/;"	m	class:Engine	typeref:typename:_DebugDrawPhysCollide
DebugDrawPhysCollide	src/Offsets.cpp	/^	int DebugDrawPhysCollide;$/;"	v	namespace:Offsets	typeref:typename:int
DecelParams	src/Features/Tas/TasTools/DecelTool.cpp	/^	DecelParams()$/;"	f	struct:DecelParams	file:
DecelParams	src/Features/Tas/TasTools/DecelTool.cpp	/^	DecelParams(float targetVel)$/;"	f	struct:DecelParams	file:
DecelParams	src/Features/Tas/TasTools/DecelTool.cpp	/^struct DecelParams : public TasToolParams {$/;"	s	file:
DecelTool	src/Features/Tas/TasTools/DecelTool.hpp	/^	DecelTool(int slot)$/;"	f	class:DecelTool
DecelTool	src/Features/Tas/TasTools/DecelTool.hpp	/^class DecelTool : public TasTool {$/;"	c
DecodeCustomData	src/Features/Demo/DemoParser.cpp	/^std::string DemoParser::DecodeCustomData(char *data) {$/;"	f	class:DemoParser	typeref:typename:std::string
DecodeUserCmdFromBuffer	src/Offsets.cpp	/^	int DecodeUserCmdFromBuffer;$/;"	v	namespace:Offsets	typeref:typename:int
DectivateAutoCompleteFile	src/Command.cpp	/^bool Command::DectivateAutoCompleteFile(const char *name) {$/;"	f	class:Command	typeref:typename:bool
Default	src/Features/Camera.hpp	/^	Default,$/;"	e	enum:CameraControlType
Delete	lib/SFML/include/SFML/Network/Http.hpp	/^            Delete \/\/\/< Request in delete mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Delete	src/Interface.cpp	/^void Interface::Delete(Interface *ptr) {$/;"	f	class:Interface	typeref:typename:void
DeleteAll	src/Features/Feature.cpp	/^void Features::DeleteAll() {$/;"	f	class:Features	typeref:typename:void
DeleteAll	src/Modules/Module.cpp	/^void Modules::DeleteAll() {$/;"	f	class:Modules	typeref:typename:void
DeleteAllGhostModels	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::DeleteAllGhostModels() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
DeleteAllGhosts	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::DeleteAllGhosts() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
DeleteAllGhosts	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::DeleteAllGhosts() {$/;"	f	class:NetworkManager	typeref:typename:void
DeleteGhost	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::DeleteGhost() {$/;"	f	class:GhostEntity	typeref:typename:void
DeleteGhostsByID	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::DeleteGhostsByID(const unsigned int ID) {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
DeleteHookEntry	lib/minhook/hook.c	/^static void DeleteHookEntry(UINT pos)$/;"	f	typeref:typename:void	file:
Demo	src/Features/Demo/Demo.hpp	/^class Demo {$/;"	c
DemoDatas	src/Features/Demo/DemoGhostEntity.hpp	/^struct DemoDatas {$/;"	s
DemoGhostEntity	src/Features/Demo/DemoGhostEntity.cpp	/^DemoGhostEntity::DemoGhostEntity(unsigned int ID, std::string name, DataGhost data, std::string /;"	f	class:DemoGhostEntity
DemoGhostEntity	src/Features/Demo/DemoGhostEntity.hpp	/^class DemoGhostEntity : public GhostEntity {$/;"	c
DemoGhostPlayer	src/Features/Demo/DemoGhostPlayer.cpp	/^DemoGhostPlayer::DemoGhostPlayer()$/;"	f	class:DemoGhostPlayer
DemoGhostPlayer	src/Features/Demo/DemoGhostPlayer.hpp	/^class DemoGhostPlayer {$/;"	c
DemoName	src/Modules/EngineDemoPlayer.hpp	/^	char *DemoName = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:char *
DemoParser	src/Features/Demo/DemoParser.cpp	/^DemoParser::DemoParser()$/;"	f	class:DemoParser
DemoParser	src/Features/Demo/DemoParser.hpp	/^class DemoParser {$/;"	c
Deref	src/Utils/Memory.hpp	/^	inline T Deref(uintptr_t source) {$/;"	f	namespace:Memory	typeref:typename:T
Deref	src/Utils/Memory.hpp	/^	void Deref(uintptr_t source, T *destination) {$/;"	f	namespace:Memory	typeref:typename:void
DerefDeref	src/Utils/Memory.hpp	/^	inline T DerefDeref(uintptr_t source) {$/;"	f	namespace:Memory	typeref:typename:T
DerefDeref	src/Utils/Memory.hpp	/^	void DerefDeref(uintptr_t source, T *destination) {$/;"	f	namespace:Memory	typeref:typename:void
Describe	src/Features/Speedrun/Rules.cpp	/^std::string SpeedrunRule::Describe() {$/;"	f	class:SpeedrunRule	typeref:typename:std::string
DestroyDebugMesh	src/Offsets.cpp	/^	int DestroyDebugMesh;$/;"	v	namespace:Offsets	typeref:typename:int
DevMsg	src/Modules/Console.hpp	/^	_DevMsg DevMsg = nullptr;$/;"	m	class:Console	typeref:typename:_DevMsg
DevWarning	src/Modules/Console.hpp	/^	_DevWarning DevWarning = nullptr;$/;"	m	class:Console	typeref:typename:_DevWarning
DiracParseCodes	lib/ffmpeg/include/libavcodec/dirac.h	/^enum DiracParseCodes {$/;"	g
DiracVersionInfo	lib/ffmpeg/include/libavcodec/dirac.h	/^typedef struct DiracVersionInfo {$/;"	s
DiracVersionInfo	lib/ffmpeg/include/libavcodec/dirac.h	/^} DiracVersionInfo;$/;"	t	typeref:struct:DiracVersionInfo
DirectoryOk	lib/SFML/include/SFML/Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	lib/SFML/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	lib/SFML/include/SFML/Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Disable	src/Features/Tas/TasController.cpp	/^void TasController::Disable() {$/;"	f	class:TasController	typeref:typename:void
Disable	src/Hook.hpp	/^	void Disable() {$/;"	f	class:Hook	typeref:typename:void
DisableAll	src/SARHook.cpp	/^void Hook::DisableAll() {$/;"	f	class:Hook	typeref:typename:void
DisableChange	src/Variable.cpp	/^void Variable::DisableChange() {$/;"	f	class:Variable	typeref:typename:void
DisableHooks	src/Interface.cpp	/^void Interface::DisableHooks() {$/;"	f	class:Interface	typeref:typename:void
Disconnect	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::Disconnect() {$/;"	f	class:NetworkManager	typeref:typename:void
Disconnect	src/Offsets.cpp	/^	int Disconnect;$/;"	v	namespace:Offsets	typeref:typename:int
Disconnected	lib/SFML/include/SFML/Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
DispatchSpawn	src/Modules/Server.hpp	/^	_DispatchSpawn DispatchSpawn = nullptr;$/;"	m	class:Server	typeref:typename:_DispatchSpawn
DispatchSpawn	src/Offsets.cpp	/^	int DispatchSpawn;$/;"	v	namespace:Offsets	typeref:typename:int
Display	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::Display() {$/;"	f	class:GhostEntity	typeref:typename:void
Distance	src/Utils/Math.hpp	/^inline float Math::Distance(const QAngle &a, const QAngle &b) {$/;"	f	class:Math	typeref:typename:float
Distance	src/Utils/Math.hpp	/^inline float Math::Distance(const Vector &a, const Vector &b) {$/;"	f	class:Math	typeref:typename:float
DoFastLoads	src/Features/Session.cpp	/^void Session::DoFastLoads() {$/;"	f	class:Session	typeref:typename:void
Documentation	README.md	/^# Documentation$/;"	c
Done	lib/SFML/include/SFML/Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Dot	src/Utils/SDK.hpp	/^	inline float Dot(const Vector &vOther) const {$/;"	f	struct:Vector	typeref:typename:float
DotProduct	src/Utils/SDK.hpp	/^	static inline float DotProduct(const Vector &a, const Vector &b) {$/;"	f	struct:Vector	typeref:typename:float
Draw	src/Features/Demo/GhostRenderer.cpp	/^void GhostRenderer::Draw() {$/;"	f	class:GhostRenderer	typeref:typename:void
Draw	src/Modules/VGui.cpp	/^void VGui::Draw(Hud *const &hud) {$/;"	f	class:VGui	typeref:typename:void
Draw	src/Modules/VGui.cpp	/^void VGui::Draw(HudElement *const &element) {$/;"	f	class:VGui	typeref:typename:void
DrawBboxAt	src/Features/PlayerTrace.cpp	/^void PlayerTrace::DrawBboxAt(int tick) const {$/;"	f	class:PlayerTrace	typeref:typename:void
DrawCircle	src/Modules/Surface.cpp	/^void Surface::DrawCircle(int x, int y, float radius, Color clr) {$/;"	f	class:Surface	typeref:typename:void
DrawColoredCircle	src/Modules/Surface.hpp	/^	_DrawColoredCircle DrawColoredCircle = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawColoredCircle
DrawColoredCircle	src/Offsets.cpp	/^	int DrawColoredCircle;$/;"	v	namespace:Offsets	typeref:typename:int
DrawColoredLine	src/Modules/Surface.cpp	/^void Surface::DrawColoredLine(int x0, int y0, int x1, int y1, Color clr) {$/;"	f	class:Surface	typeref:typename:void
DrawColoredText	src/Modules/Surface.hpp	/^	_DrawColoredText DrawColoredText = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawColoredText
DrawColoredText	src/Offsets.cpp	/^	int DrawColoredText;$/;"	v	namespace:Offsets	typeref:typename:int
DrawElement	src/Features/Hud/Hud.cpp	/^void HudContext::DrawElement(const char *fmt, ...) {$/;"	f	class:HudContext	typeref:typename:void
DrawElementOnScreen	src/Features/Hud/Hud.cpp	/^void HudContext::DrawElementOnScreen(const int groupID, const float xPos, const float yPos, cons/;"	f	class:HudContext	typeref:typename:void
DrawFilledCircle	src/Modules/Surface.cpp	/^void Surface::DrawFilledCircle(int x, int y, float radius, Color clr) {$/;"	f	class:Surface	typeref:typename:void
DrawFilledRect	src/Modules/Surface.hpp	/^	_DrawFilledRect DrawFilledRect = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawFilledRect
DrawFilledRect	src/Offsets.cpp	/^	int DrawFilledRect;$/;"	v	namespace:Offsets	typeref:typename:int
DrawGetTextureFile	src/Modules/Surface.hpp	/^	_DrawGetTextureFile DrawGetTextureFile = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawGetTextureFile
DrawGetTextureId	src/Modules/Surface.hpp	/^	_DrawGetTextureId DrawGetTextureId = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawGetTextureId
DrawGetTextureSize	src/Modules/Surface.hpp	/^	_DrawGetTextureSize DrawGetTextureSize = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawGetTextureSize
DrawGetTextureSize	src/Offsets.cpp	/^	int DrawGetTextureSize;$/;"	v	namespace:Offsets	typeref:typename:int
DrawHudBackground	src/Modules/VGui.cpp	/^static void DrawHudBackground(int slot, HudContext &ctx) {$/;"	f	typeref:typename:void	file:
DrawInWorld	src/Features/PlayerTrace.cpp	/^void PlayerTrace::DrawInWorld() const {$/;"	f	class:PlayerTrace	typeref:typename:void
DrawInWorld	src/Features/Speedrun/Rules.cpp	/^void PortalPlacementRule::DrawInWorld() {$/;"	f	class:PortalPlacementRule	typeref:typename:void
DrawInWorld	src/Features/Speedrun/Rules.cpp	/^void ZoneTriggerRule::DrawInWorld() {$/;"	f	class:ZoneTriggerRule	typeref:typename:void
DrawLine	src/Modules/Surface.hpp	/^	_DrawLine DrawLine = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawLine
DrawLine	src/Offsets.cpp	/^	int DrawLine;$/;"	v	namespace:Offsets	typeref:typename:int
DrawLineInfo	src/Cheats.cpp	/^struct DrawLineInfo {$/;"	s	file:
DrawName	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::DrawName() {$/;"	f	class:GhostEntity	typeref:typename:void
DrawRect	src/Modules/Surface.cpp	/^void Surface::DrawRect(Color clr, int x0, int y0, int x1, int y1) {$/;"	f	class:Surface	typeref:typename:void
DrawRectAndCenterTxt	src/Modules/Surface.cpp	/^void Surface::DrawRectAndCenterTxt(Color clr, int x0, int y0, int x1, int y1, HFont font, Color /;"	f	class:Surface	typeref:typename:void
DrawRulers	src/Features/Routing/Ruler.cpp	/^void RulerManager::DrawRulers() {$/;"	f	class:RulerManager	typeref:typename:void
DrawSetColor	src/Modules/Surface.hpp	/^	_DrawSetColor DrawSetColor = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawSetColor
DrawSetColor	src/Offsets.cpp	/^	int DrawSetColor;$/;"	v	namespace:Offsets	typeref:typename:int
DrawSetTextColor	src/Modules/Surface.hpp	/^	_DrawSetTextColor DrawSetTextColor = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawSetTextColor
DrawSetTextColor	src/Offsets.cpp	/^	int DrawSetTextColor;$/;"	v	namespace:Offsets	typeref:typename:int
DrawSetTextFont	src/Modules/Surface.hpp	/^	_DrawSetTextFont DrawSetTextFont = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawSetTextFont
DrawSetTextFont	src/Offsets.cpp	/^	int DrawSetTextFont;$/;"	v	namespace:Offsets	typeref:typename:int
DrawSetTexture	src/Modules/Surface.hpp	/^	_DrawSetTexture DrawSetTexture = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawSetTexture
DrawSetTexture	src/Offsets.cpp	/^	int DrawSetTexture;$/;"	v	namespace:Offsets	typeref:typename:int
DrawSetTextureFile	src/Modules/Surface.hpp	/^	_DrawSetTextureFile DrawSetTextureFile = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawSetTextureFile
DrawSetTextureFile	src/Offsets.cpp	/^	int DrawSetTextureFile;$/;"	v	namespace:Offsets	typeref:typename:int
DrawSetTextureRGBA	src/Modules/Surface.hpp	/^	_DrawSetTextureRGBA DrawSetTextureRGBA = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawSetTextureRGBA
DrawSetTextureRGBA	src/Offsets.cpp	/^	int DrawSetTextureRGBA;$/;"	v	namespace:Offsets	typeref:typename:int
DrawSpeedDeltas	src/Features/PlayerTrace.cpp	/^void PlayerTrace::DrawSpeedDeltas() const {$/;"	f	class:PlayerTrace	typeref:typename:void
DrawTextLen	src/Modules/Surface.hpp	/^	_DrawTextLen DrawTextLen = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawTextLen
DrawTextLen	src/Offsets.cpp	/^	int DrawTextLen;$/;"	v	namespace:Offsets	typeref:typename:int
DrawTexturedRect	src/Modules/Surface.hpp	/^	_DrawTexturedRect DrawTexturedRect = nullptr;$/;"	m	class:Surface	typeref:typename:_DrawTexturedRect
DrawTexturedRect	src/Offsets.cpp	/^	int DrawTexturedRect;$/;"	v	namespace:Offsets	typeref:typename:int
DrawTxt	src/Modules/Surface.cpp	/^void Surface::DrawTxt(HFont font, int x, int y, Color clr, const char *fmt, ...) {$/;"	f	class:Surface	typeref:typename:void
DrawTxtRightAlign	src/Features/Demo/NetworkGhostPlayer.cpp	/^#define DrawTxtRightAlign(/;"	d	file:
Drive	src/Features/Camera.hpp	/^	Drive,$/;"	e	enum:CameraControlType
Dtor	src/Modules/Tier1.hpp	/^	_Dtor Dtor = nullptr;$/;"	m	class:Tier1	typeref:typename:_Dtor
Dtor	src/Offsets.cpp	/^	int Dtor;$/;"	v	namespace:Offsets	typeref:typename:int
Dump	src/Features/ClassDumper.cpp	/^void ClassDumper::Dump(bool dumpServer) {$/;"	f	class:ClassDumper	typeref:typename:void
Dump	src/Features/Cvars.cpp	/^int Cvars::Dump(std::ofstream &file) {$/;"	f	class:Cvars	typeref:typename:int
Dump	src/Features/DataMapDumper.cpp	/^void DataMapDumper::Dump(bool dumpServer) {$/;"	f	class:DataMapDumper	typeref:typename:void
DumpDoc	src/Features/Cvars.cpp	/^int Cvars::DumpDoc(std::ofstream &file) {$/;"	f	class:Cvars	typeref:typename:int
DumpRecvTable	src/Features/ClassDumper.cpp	/^void ClassDumper::DumpRecvTable(std::ofstream &file, RecvTable *table) {$/;"	f	class:ClassDumper	typeref:typename:void
DumpSendTable	src/Features/ClassDumper.cpp	/^void ClassDumper::DumpSendTable(std::ofstream &file, SendTable *table) {$/;"	f	class:ClassDumper	typeref:typename:void
DumpTable	src/Features/ClassDumper.cpp	/^	std::function<void(RecvTable * table, int &level)> DumpTable;$/;"	v	typeref:typename:std::function<void (RecvTable * table,int & level)>
DumpTable	src/Features/ClassDumper.cpp	/^	std::function<void(SendTable * table, int &level)> DumpTable;$/;"	v	typeref:typename:std::function<void (SendTable * table,int & level)>
DumpUsercmd	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::DumpUsercmd(int slot, const CUserCmd *cmd, int tick, const char *source) {$/;"	f	class:TasPlayer	typeref:typename:void
END	src/Features/Speedrun/SpeedrunTimer.cpp	/^	END,$/;"	e	enum:TimerAction	file:
ENTINDEX	src/Utils/SDK.cpp	/^inline int ENTINDEX(edict_t *pEdict) {$/;"	f	typeref:typename:int
ENTRULE_CLASSNAME	src/Features/Speedrun/Rules.hpp	/^#define ENTRULE_CLASSNAME /;"	d
ENTRULE_PARAMETER	src/Features/Speedrun/Rules.hpp	/^#define ENTRULE_PARAMETER /;"	d
ENTRULE_TARGETNAME	src/Features/Speedrun/Rules.hpp	/^#define ENTRULE_TARGETNAME /;"	d
ENT_ENTRY_MASK	src/Offsets.cpp	/^	int ENT_ENTRY_MASK;$/;"	v	namespace:Offsets	typeref:typename:int
ERROR_BREAK	src/Utils/lodepng.cpp	/^#define ERROR_BREAK(/;"	d	file:
EVENTS	src/Utils/SDK.hpp	/^static const char *EVENTS[] = {$/;"	v	typeref:typename:const char * []
EXPECT	src/Features/Hud/Minimap.cpp	/^#define EXPECT(/;"	d	file:
EXPOSE_INTERFACE	src/Utils/SDK.hpp	/^#define EXPOSE_INTERFACE(/;"	d
EXPOSE_INTERFACE_FN	src/Utils/SDK.hpp	/^#define EXPOSE_INTERFACE_FN(/;"	d
EXPOSE_SINGLE_INTERFACE	src/Utils/SDK.hpp	/^#define EXPOSE_SINGLE_INTERFACE(/;"	d
EXPOSE_SINGLE_INTERFACE_GLOBALVAR	src/Utils/SDK.hpp	/^#define EXPOSE_SINGLE_INTERFACE_GLOBALVAR(/;"	d
EXP_STR	src/Features/Hud/Toasts.cpp	/^#define EXP_STR(/;"	d	file:
Ebcdic	lib/SFML/include/SFML/Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
ElementName	src/Features/Hud/Hud.hpp	/^	const char *ElementName() const { return this->variable ? this->variable->ThisPtr()->m_pszName /;"	f	class:HudElement	typeref:typename:const char *
Elements	doc/contributing.md	/^#### Elements$/;"	t	subsection:SAR: Contributing Guide""Coding""HUD
Enable	src/Features/Tas/TasController.cpp	/^void TasController::Enable() {$/;"	f	class:TasController	typeref:typename:void
Enable	src/Hook.hpp	/^	void Enable() {$/;"	f	class:Hook	typeref:typename:void
EnableAllHooksLL	lib/minhook/hook.c	/^static MH_STATUS EnableAllHooksLL(BOOL enable)$/;"	f	typeref:typename:MH_STATUS	file:
EnableChange	src/Variable.cpp	/^void Variable::EnableChange() {$/;"	f	class:Variable	typeref:typename:void
EnableGravity	src/Features/Hud/VphysHud.cpp	/^	_EnableGravity EnableGravity = Memory::VMT<_EnableGravity>(m_pShadowStand, Offsets::EnableGravi/;"	v	typeref:typename:_EnableGravity
EnableGravity	src/Offsets.cpp	/^	int EnableGravity;$/;"	v	namespace:Offsets	typeref:typename:int
EnableHook	lib/minhook/hook.c	/^static MH_STATUS EnableHook(LPVOID pTarget, BOOL enable)$/;"	f	typeref:typename:MH_STATUS	file:
EnableHookLL	lib/minhook/hook.c	/^static MH_STATUS EnableHookLL(UINT pos, BOOL enable)$/;"	f	typeref:typename:MH_STATUS	file:
EnableHooks	src/Interface.cpp	/^void Interface::EnableHooks() {$/;"	f	class:Interface	typeref:typename:void
EndTrace	src/Features/Stats/JumpStats.cpp	/^void JumpStats::EndTrace(Vector destination, bool xyOnly) {$/;"	f	class:JumpStats	typeref:typename:void
Ended	src/Features/Session.cpp	/^void Session::Ended() {$/;"	f	class:Session	typeref:typename:void
EndsWith	src/Utils.cpp	/^bool Utils::EndsWith(const std::string &str, const std::string &suffix) {$/;"	f	class:Utils	typeref:typename:bool
Engine	src/Modules/Engine.hpp	/^class Engine : public Module {$/;"	c
EngineDemoPlayer	src/Modules/EngineDemoPlayer.hpp	/^class EngineDemoPlayer : public Module {$/;"	c
EngineDemoRecorder	src/Modules/EngineDemoRecorder.hpp	/^class EngineDemoRecorder : public Module {$/;"	c
EnterSpinLock	lib/minhook/hook.c	/^static VOID EnterSpinLock(VOID)$/;"	f	typeref:typename:VOID	file:
EnteringPassiveMode	lib/SFML/include/SFML/Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
EntityInputRule	src/Features/Speedrun/Rules.hpp	/^struct EntityInputRule {$/;"	s
EntityInspector	src/Features/Routing/EntityInspector.cpp	/^EntityInspector::EntityInspector()$/;"	f	class:EntityInspector
EntityInspector	src/Features/Routing/EntityInspector.hpp	/^class EntityInspector : public Feature {$/;"	c
EntityList	src/Features/EntityList.cpp	/^EntityList::EntityList() {$/;"	f	class:EntityList
EntityList	src/Features/EntityList.hpp	/^class EntityList : public Feature {$/;"	c
EnumerateThreads	lib/minhook/hook.c	/^static VOID EnumerateThreads(PFROZEN_THREADS pThreads)$/;"	f	typeref:typename:VOID	file:
Error	lib/SFML/include/SFML/Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
EvalCondition	src/Features/ConfigPlus.cpp	/^static bool EvalCondition(Condition *c) {$/;"	f	typeref:typename:bool	file:
Event	src/Event.hpp	/^namespace Event {$/;"	n
EventData	src/Event.hpp	/^	struct EventData {};$/;"	s	namespace:Event
EventData	src/Event.hpp	/^	struct EventData<CM_FLAGS> {$/;"	s	namespace:Event
EventData	src/Event.hpp	/^	struct EventData<POST_TICK> {$/;"	s	namespace:Event
EventData	src/Event.hpp	/^	struct EventData<PRE_TICK> {$/;"	s	namespace:Event
EventData	src/Event.hpp	/^	struct EventData<PROCESS_MOVEMENT> {$/;"	s	namespace:Event
EventData	src/Event.hpp	/^	struct EventData<SESSION_END> {$/;"	s	namespace:Event
EventData	src/Event.hpp	/^	struct EventData<SESSION_START> {$/;"	s	namespace:Event
EventQueuePrioritizedEvent_t	src/Utils/SDK.hpp	/^struct EventQueuePrioritizedEvent_t {$/;"	s
EventType	src/Event.hpp	/^	enum EventType {$/;"	g	namespace:Event
Execute	src/Utils/Memory.cpp	/^bool Memory::Patch::Execute(uintptr_t location, unsigned char *bytes) {$/;"	f	class:Memory::Patch	typeref:typename:bool
ExecuteClientCmd	src/Modules/Engine.hpp	/^	_ExecuteClientCmd ExecuteClientCmd = nullptr;$/;"	m	class:Engine	typeref:typename:_ExecuteClientCmd
ExecuteClientCmd	src/Offsets.cpp	/^	int ExecuteClientCmd;$/;"	v	namespace:Offsets	typeref:typename:int
ExecuteCommand	src/Modules/Engine.cpp	/^void Engine::ExecuteCommand(const char *cmd, bool immediately) {$/;"	f	class:Engine	typeref:typename:void
ExportData	src/Features/Routing/EntityInspector.cpp	/^bool EntityInspector::ExportData(std::string filePath) {$/;"	f	class:EntityInspector	typeref:typename:bool
ExportToFile	src/Features/Stats/StatsCounter.cpp	/^bool StatsCounter::ExportToFile(const std::string &path) {$/;"	f	class:StatsCounter	typeref:typename:bool
External Imports	doc/contributing.md	/^#### External Imports$/;"	t	subsection:SAR: Contributing Guide""Coding""Memory Utils
FADE_TIME	src/Features/Hud/Toasts.cpp	/^#define FADE_TIME /;"	d	file:
FCVAR_CHEAT	src/Utils/SDK.hpp	/^#define FCVAR_CHEAT /;"	d
FCVAR_DEVELOPMENTONLY	src/Utils/SDK.hpp	/^#define FCVAR_DEVELOPMENTONLY /;"	d
FCVAR_DONTRECORD	src/Utils/SDK.hpp	/^#define FCVAR_DONTRECORD /;"	d
FCVAR_HIDDEN	src/Utils/SDK.hpp	/^#define FCVAR_HIDDEN /;"	d
FCVAR_NEVER_AS_STRING	src/Utils/SDK.hpp	/^#define FCVAR_NEVER_AS_STRING /;"	d
FFABS	lib/ffmpeg/include/libavutil/common.h	/^#define FFABS(/;"	d
FFDIFFSIGN	lib/ffmpeg/include/libavutil/common.h	/^#define FFDIFFSIGN(/;"	d
FFERRTAG	lib/ffmpeg/include/libavutil/error.h	/^#define FFERRTAG(/;"	d
FFMAX	lib/ffmpeg/include/libavutil/common.h	/^#define FFMAX(/;"	d
FFMAX3	lib/ffmpeg/include/libavutil/common.h	/^#define FFMAX3(/;"	d
FFMIN	lib/ffmpeg/include/libavutil/common.h	/^#define FFMIN(/;"	d
FFMIN3	lib/ffmpeg/include/libavutil/common.h	/^#define FFMIN3(/;"	d
FFMPEG_VERSION	lib/ffmpeg/include/libavutil/ffversion.h	/^#define FFMPEG_VERSION /;"	d
FFNABS	lib/ffmpeg/include/libavutil/common.h	/^#define FFNABS(/;"	d
FFSIGN	lib/ffmpeg/include/libavutil/common.h	/^#define FFSIGN(/;"	d
FFSWAP	lib/ffmpeg/include/libavutil/common.h	/^#define FFSWAP(/;"	d
FFTComplex	lib/ffmpeg/include/libavcodec/avfft.h	/^typedef struct FFTComplex {$/;"	s
FFTComplex	lib/ffmpeg/include/libavcodec/avfft.h	/^} FFTComplex;$/;"	t	typeref:struct:FFTComplex
FFTContext	lib/ffmpeg/include/libavcodec/avfft.h	/^typedef struct FFTContext FFTContext;$/;"	t	typeref:struct:FFTContext
FFTSample	lib/ffmpeg/include/libavcodec/avfft.h	/^typedef float FFTSample;$/;"	t	typeref:typename:float
FFUDIV	lib/ffmpeg/include/libavutil/common.h	/^#define FFUDIV(/;"	d
FFUMOD	lib/ffmpeg/include/libavutil/common.h	/^#define FFUMOD(/;"	d
FF_API_ASS_TIMING	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_ASS_TIMING /;"	d
FF_API_AVCTX_TIMEBASE	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_AVCTX_TIMEBASE /;"	d
FF_API_AVIOFORMAT	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_AVIOFORMAT /;"	d
FF_API_AVPACKET_OLD_API	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_AVPACKET_OLD_API /;"	d
FF_API_AVPICTURE	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_AVPICTURE /;"	d
FF_API_CODEC_GET_SET	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_CODEC_GET_SET /;"	d
FF_API_CODED_FRAME	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_CODED_FRAME /;"	d
FF_API_CODER_TYPE	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_CODER_TYPE /;"	d
FF_API_COMPUTE_PKT_FIELDS2	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_COMPUTE_PKT_FIELDS2 /;"	d
FF_API_CONVERGENCE_DURATION	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_CONVERGENCE_DURATION /;"	d
FF_API_COPY_CONTEXT	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_COPY_CONTEXT /;"	d
FF_API_CRYPTO_SIZE_T	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_CRYPTO_SIZE_T /;"	d
FF_API_DASH_MIN_SEG_DURATION	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_DASH_MIN_SEG_DURATION /;"	d
FF_API_DEBUG_MV	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_DEBUG_MV /;"	d
FF_API_ERROR_FRAME	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_ERROR_FRAME /;"	d
FF_API_FILTER_GET_SET	lib/ffmpeg/include/libavfilter/version.h	/^#define FF_API_FILTER_GET_SET /;"	d
FF_API_FORMAT_FILENAME	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_FORMAT_FILENAME /;"	d
FF_API_FORMAT_GET_SET	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_FORMAT_GET_SET /;"	d
FF_API_FRAME_GET_SET	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_FRAME_GET_SET /;"	d
FF_API_FRAME_QP	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_FRAME_QP /;"	d
FF_API_GETCHROMA	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_GETCHROMA /;"	d
FF_API_GET_CONTEXT_DEFAULTS	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_GET_CONTEXT_DEFAULTS /;"	d
FF_API_HLS_USE_LOCALTIME	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_HLS_USE_LOCALTIME /;"	d
FF_API_HLS_WRAP	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_HLS_WRAP /;"	d
FF_API_HTTP_USER_AGENT	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_HTTP_USER_AGENT /;"	d
FF_API_LAVF_AVCTX	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_LAVF_AVCTX /;"	d
FF_API_LAVF_FFSERVER	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_LAVF_FFSERVER /;"	d
FF_API_LAVF_KEEPSIDE_FLAG	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_LAVF_KEEPSIDE_FLAG /;"	d
FF_API_LAVF_MP4A_LATM	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_LAVF_MP4A_LATM /;"	d
FF_API_LAVR_OPTS	lib/ffmpeg/include/libavfilter/version.h	/^#define FF_API_LAVR_OPTS /;"	d
FF_API_LOCKMGR	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_LOCKMGR /;"	d
FF_API_LOWRES	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_LOWRES /;"	d
FF_API_MERGE_SD_API	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_MERGE_SD_API /;"	d
FF_API_NEXT	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_NEXT /;"	d
FF_API_NEXT	lib/ffmpeg/include/libavfilter/version.h	/^#define FF_API_NEXT /;"	d
FF_API_NEXT	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_NEXT /;"	d
FF_API_NVENC_OLD_NAME	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_NVENC_OLD_NAME /;"	d
FF_API_OLD_AVIO_EOF_0	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_OLD_AVIO_EOF_0 /;"	d
FF_API_OLD_BSF	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_OLD_BSF /;"	d
FF_API_OLD_FILTER_OPTS_ERROR	lib/ffmpeg/include/libavfilter/version.h	/^#define FF_API_OLD_FILTER_OPTS_ERROR /;"	d
FF_API_OLD_OPEN_CALLBACKS	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_OLD_OPEN_CALLBACKS /;"	d
FF_API_OLD_ROTATE_API	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_OLD_ROTATE_API /;"	d
FF_API_OLD_RTSP_OPTIONS	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_OLD_RTSP_OPTIONS /;"	d
FF_API_OPENH264_CABAC	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_OPENH264_CABAC /;"	d
FF_API_OPENH264_SLICE_MODE	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_OPENH264_SLICE_MODE /;"	d
FF_API_PKT_PTS	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_PKT_PTS /;"	d
FF_API_PLUS1_MINUS1	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_PLUS1_MINUS1 /;"	d
FF_API_PRIVATE_OPT	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_PRIVATE_OPT /;"	d
FF_API_PSEUDOPAL	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_PSEUDOPAL /;"	d
FF_API_RTP_CALLBACK	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_RTP_CALLBACK /;"	d
FF_API_R_FRAME_RATE	lib/ffmpeg/include/libavformat/version.h	/^#define FF_API_R_FRAME_RATE /;"	d
FF_API_SIDEDATA_ONLY_PKT	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_SIDEDATA_ONLY_PKT /;"	d
FF_API_STAT_BITS	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_STAT_BITS /;"	d
FF_API_STRUCT_VAAPI_CONTEXT	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_STRUCT_VAAPI_CONTEXT /;"	d
FF_API_SWS_PARAM_OPTION	lib/ffmpeg/include/libavfilter/version.h	/^#define FF_API_SWS_PARAM_OPTION /;"	d
FF_API_SWS_VECTOR	lib/ffmpeg/include/libswscale/version.h	/^#define FF_API_SWS_VECTOR /;"	d
FF_API_TAG_STRING	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_TAG_STRING /;"	d
FF_API_UNSANITIZED_BITRATES	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_UNSANITIZED_BITRATES /;"	d
FF_API_UNUSED_CODEC_CAPS	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_UNUSED_CODEC_CAPS /;"	d
FF_API_USER_VISIBLE_AVHWACCEL	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_USER_VISIBLE_AVHWACCEL /;"	d
FF_API_VAAPI	lib/ffmpeg/include/libavutil/version.h	/^#define FF_API_VAAPI /;"	d
FF_API_VBV_DELAY	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_VBV_DELAY /;"	d
FF_API_VDPAU_PROFILE	lib/ffmpeg/include/libavcodec/version.h	/^#define FF_API_VDPAU_PROFILE /;"	d
FF_ARRAY_ELEMS	lib/ffmpeg/include/libavutil/common.h	/^#define FF_ARRAY_ELEMS(/;"	d
FF_BUG_AMV	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_AMV /;"	d
FF_BUG_AUTODETECT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_AUTODETECT /;"	d
FF_BUG_DC_CLIP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_DC_CLIP /;"	d
FF_BUG_DIRECT_BLOCKSIZE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_DIRECT_BLOCKSIZE /;"	d
FF_BUG_EDGE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_EDGE /;"	d
FF_BUG_HPEL_CHROMA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_HPEL_CHROMA /;"	d
FF_BUG_IEDGE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_IEDGE /;"	d
FF_BUG_MS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_MS /;"	d
FF_BUG_NO_PADDING	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_NO_PADDING /;"	d
FF_BUG_QPEL_CHROMA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_QPEL_CHROMA /;"	d
FF_BUG_QPEL_CHROMA2	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_QPEL_CHROMA2 /;"	d
FF_BUG_STD_QPEL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_STD_QPEL /;"	d
FF_BUG_TRUNCATED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_TRUNCATED /;"	d
FF_BUG_UMP4	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_UMP4 /;"	d
FF_BUG_XVID_ILACE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_BUG_XVID_ILACE /;"	d
FF_CEIL_RSHIFT	lib/ffmpeg/include/libavutil/common.h	/^#define FF_CEIL_RSHIFT /;"	d
FF_CMP_BIT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_BIT /;"	d
FF_CMP_CHROMA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_CHROMA /;"	d
FF_CMP_DCT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_DCT /;"	d
FF_CMP_DCT264	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_DCT264 /;"	d
FF_CMP_DCTMAX	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_DCTMAX /;"	d
FF_CMP_MEDIAN_SAD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_MEDIAN_SAD /;"	d
FF_CMP_NSSE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_NSSE /;"	d
FF_CMP_PSNR	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_PSNR /;"	d
FF_CMP_RD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_RD /;"	d
FF_CMP_SAD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_SAD /;"	d
FF_CMP_SATD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_SATD /;"	d
FF_CMP_SSE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_SSE /;"	d
FF_CMP_VSAD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_VSAD /;"	d
FF_CMP_VSSE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_VSSE /;"	d
FF_CMP_W53	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_W53 /;"	d
FF_CMP_W97	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_W97 /;"	d
FF_CMP_ZERO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CMP_ZERO /;"	d
FF_CODEC_PROPERTY_CLOSED_CAPTIONS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CODEC_PROPERTY_CLOSED_CAPTIONS /;"	d
FF_CODEC_PROPERTY_LOSSLESS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CODEC_PROPERTY_LOSSLESS /;"	d
FF_CODER_TYPE_AC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CODER_TYPE_AC /;"	d
FF_CODER_TYPE_RAW	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CODER_TYPE_RAW /;"	d
FF_CODER_TYPE_RLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CODER_TYPE_RLE /;"	d
FF_CODER_TYPE_VLC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_CODER_TYPE_VLC /;"	d
FF_COMPLIANCE_EXPERIMENTAL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_COMPLIANCE_EXPERIMENTAL /;"	d
FF_COMPLIANCE_NORMAL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_COMPLIANCE_NORMAL /;"	d
FF_COMPLIANCE_STRICT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_COMPLIANCE_STRICT /;"	d
FF_COMPLIANCE_UNOFFICIAL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_COMPLIANCE_UNOFFICIAL /;"	d
FF_COMPLIANCE_VERY_STRICT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_COMPLIANCE_VERY_STRICT /;"	d
FF_COMPRESSION_DEFAULT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_COMPRESSION_DEFAULT /;"	d
FF_DCT_ALTIVEC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DCT_ALTIVEC /;"	d
FF_DCT_AUTO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DCT_AUTO /;"	d
FF_DCT_FAAN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DCT_FAAN /;"	d
FF_DCT_FASTINT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DCT_FASTINT /;"	d
FF_DCT_INT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DCT_INT /;"	d
FF_DCT_MMX	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DCT_MMX /;"	d
FF_DEBUG_BITSTREAM	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_BITSTREAM /;"	d
FF_DEBUG_BUFFERS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_BUFFERS /;"	d
FF_DEBUG_BUGS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_BUGS /;"	d
FF_DEBUG_DCT_COEFF	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_DCT_COEFF /;"	d
FF_DEBUG_ER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_ER /;"	d
FF_DEBUG_GREEN_MD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_GREEN_MD /;"	d
FF_DEBUG_MB_TYPE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_MB_TYPE /;"	d
FF_DEBUG_MMCO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_MMCO /;"	d
FF_DEBUG_MV	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_MV /;"	d
FF_DEBUG_NOMC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_NOMC /;"	d
FF_DEBUG_PICT_INFO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_PICT_INFO /;"	d
FF_DEBUG_QP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_QP /;"	d
FF_DEBUG_RC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_RC /;"	d
FF_DEBUG_SKIP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_SKIP /;"	d
FF_DEBUG_STARTCODE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_STARTCODE /;"	d
FF_DEBUG_THREADS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_THREADS /;"	d
FF_DEBUG_VIS_MB_TYPE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_VIS_MB_TYPE /;"	d
FF_DEBUG_VIS_MV_B_BACK	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_VIS_MV_B_BACK /;"	d
FF_DEBUG_VIS_MV_B_FOR	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_VIS_MV_B_FOR /;"	d
FF_DEBUG_VIS_MV_P_FOR	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_VIS_MV_P_FOR /;"	d
FF_DEBUG_VIS_QP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_DEBUG_VIS_QP /;"	d
FF_DECODE_ERROR_CONCEALMENT_ACTIVE	lib/ffmpeg/include/libavutil/frame.h	/^#define FF_DECODE_ERROR_CONCEALMENT_ACTIVE /;"	d
FF_DECODE_ERROR_DECODE_SLICES	lib/ffmpeg/include/libavutil/frame.h	/^#define FF_DECODE_ERROR_DECODE_SLICES /;"	d
FF_DECODE_ERROR_INVALID_BITSTREAM	lib/ffmpeg/include/libavutil/frame.h	/^#define FF_DECODE_ERROR_INVALID_BITSTREAM /;"	d
FF_DECODE_ERROR_MISSING_REFERENCE	lib/ffmpeg/include/libavutil/frame.h	/^#define FF_DECODE_ERROR_MISSING_REFERENCE /;"	d
FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO	lib/ffmpeg/include/libavcodec/d3d11va.h	/^#define FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO /;"	d
FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO	lib/ffmpeg/include/libavcodec/dxva2.h	/^#define FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO /;"	d
FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG	lib/ffmpeg/include/libavcodec/d3d11va.h	/^#define FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG /;"	d
FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG	lib/ffmpeg/include/libavcodec/dxva2.h	/^#define FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG /;"	d
FF_EC_DEBLOCK	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_EC_DEBLOCK /;"	d
FF_EC_FAVOR_INTER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_EC_FAVOR_INTER /;"	d
FF_EC_GUESS_MVS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_EC_GUESS_MVS /;"	d
FF_FDEBUG_TS	lib/ffmpeg/include/libavformat/avformat.h	/^#define FF_FDEBUG_TS /;"	d
FF_IDCT_ALTIVEC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_ALTIVEC /;"	d
FF_IDCT_ARM	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_ARM /;"	d
FF_IDCT_AUTO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_AUTO /;"	d
FF_IDCT_FAAN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_FAAN /;"	d
FF_IDCT_INT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_INT /;"	d
FF_IDCT_NONE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_NONE /;"	d
FF_IDCT_SIMPLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLE /;"	d
FF_IDCT_SIMPLEARM	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLEARM /;"	d
FF_IDCT_SIMPLEARMV5TE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLEARMV5TE /;"	d
FF_IDCT_SIMPLEARMV6	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLEARMV6 /;"	d
FF_IDCT_SIMPLEAUTO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLEAUTO /;"	d
FF_IDCT_SIMPLEMMX	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLEMMX /;"	d
FF_IDCT_SIMPLENEON	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_SIMPLENEON /;"	d
FF_IDCT_XVID	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_IDCT_XVID /;"	d
FF_LAMBDA_MAX	lib/ffmpeg/include/libavutil/avutil.h	/^#define FF_LAMBDA_MAX /;"	d
FF_LAMBDA_SCALE	lib/ffmpeg/include/libavutil/avutil.h	/^#define FF_LAMBDA_SCALE /;"	d
FF_LAMBDA_SHIFT	lib/ffmpeg/include/libavutil/avutil.h	/^#define FF_LAMBDA_SHIFT /;"	d
FF_LEVEL_UNKNOWN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_LEVEL_UNKNOWN /;"	d
FF_LOSS_ALPHA	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define FF_LOSS_ALPHA /;"	d
FF_LOSS_CHROMA	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define FF_LOSS_CHROMA /;"	d
FF_LOSS_COLORQUANT	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define FF_LOSS_COLORQUANT /;"	d
FF_LOSS_COLORSPACE	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define FF_LOSS_COLORSPACE /;"	d
FF_LOSS_DEPTH	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define FF_LOSS_DEPTH /;"	d
FF_LOSS_RESOLUTION	lib/ffmpeg/include/libavutil/pixdesc.h	/^#define FF_LOSS_RESOLUTION /;"	d
FF_MB_DECISION_BITS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_MB_DECISION_BITS /;"	d
FF_MB_DECISION_RD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_MB_DECISION_RD /;"	d
FF_MB_DECISION_SIMPLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_MB_DECISION_SIMPLE /;"	d
FF_PAD_STRUCTURE	lib/ffmpeg/include/libavutil/bprint.h	/^#define FF_PAD_STRUCTURE(/;"	d
FF_PRED_LEFT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PRED_LEFT /;"	d
FF_PRED_MEDIAN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PRED_MEDIAN /;"	d
FF_PRED_PLANE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PRED_PLANE /;"	d
FF_PROFILE_AAC_ELD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_ELD /;"	d
FF_PROFILE_AAC_HE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_HE /;"	d
FF_PROFILE_AAC_HE_V2	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_HE_V2 /;"	d
FF_PROFILE_AAC_LD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_LD /;"	d
FF_PROFILE_AAC_LOW	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_LOW /;"	d
FF_PROFILE_AAC_LTP	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_LTP /;"	d
FF_PROFILE_AAC_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_MAIN /;"	d
FF_PROFILE_AAC_SSR	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AAC_SSR /;"	d
FF_PROFILE_ARIB_PROFILE_A	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_ARIB_PROFILE_A /;"	d
FF_PROFILE_ARIB_PROFILE_C	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_ARIB_PROFILE_C /;"	d
FF_PROFILE_AV1_HIGH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AV1_HIGH /;"	d
FF_PROFILE_AV1_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AV1_MAIN /;"	d
FF_PROFILE_AV1_PROFESSIONAL	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_AV1_PROFESSIONAL /;"	d
FF_PROFILE_DNXHD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DNXHD /;"	d
FF_PROFILE_DNXHR_444	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DNXHR_444 /;"	d
FF_PROFILE_DNXHR_HQ	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DNXHR_HQ /;"	d
FF_PROFILE_DNXHR_HQX	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DNXHR_HQX /;"	d
FF_PROFILE_DNXHR_LB	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DNXHR_LB /;"	d
FF_PROFILE_DNXHR_SQ	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DNXHR_SQ /;"	d
FF_PROFILE_DTS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DTS /;"	d
FF_PROFILE_DTS_96_24	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DTS_96_24 /;"	d
FF_PROFILE_DTS_ES	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DTS_ES /;"	d
FF_PROFILE_DTS_EXPRESS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DTS_EXPRESS /;"	d
FF_PROFILE_DTS_HD_HRA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DTS_HD_HRA /;"	d
FF_PROFILE_DTS_HD_MA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_DTS_HD_MA /;"	d
FF_PROFILE_H264_BASELINE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_BASELINE /;"	d
FF_PROFILE_H264_CAVLC_444	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_CAVLC_444 /;"	d
FF_PROFILE_H264_CONSTRAINED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_CONSTRAINED /;"	d
FF_PROFILE_H264_CONSTRAINED_BASELINE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_CONSTRAINED_BASELINE /;"	d
FF_PROFILE_H264_EXTENDED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_EXTENDED /;"	d
FF_PROFILE_H264_HIGH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH /;"	d
FF_PROFILE_H264_HIGH_10	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_10 /;"	d
FF_PROFILE_H264_HIGH_10_INTRA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_10_INTRA /;"	d
FF_PROFILE_H264_HIGH_422	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_422 /;"	d
FF_PROFILE_H264_HIGH_422_INTRA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_422_INTRA /;"	d
FF_PROFILE_H264_HIGH_444	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_444 /;"	d
FF_PROFILE_H264_HIGH_444_INTRA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_444_INTRA /;"	d
FF_PROFILE_H264_HIGH_444_PREDICTIVE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_HIGH_444_PREDICTIVE /;"	d
FF_PROFILE_H264_INTRA	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_INTRA /;"	d
FF_PROFILE_H264_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_MAIN /;"	d
FF_PROFILE_H264_MULTIVIEW_HIGH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_MULTIVIEW_HIGH /;"	d
FF_PROFILE_H264_STEREO_HIGH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_H264_STEREO_HIGH /;"	d
FF_PROFILE_HEVC_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_HEVC_MAIN /;"	d
FF_PROFILE_HEVC_MAIN_10	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_HEVC_MAIN_10 /;"	d
FF_PROFILE_HEVC_MAIN_STILL_PICTURE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_HEVC_MAIN_STILL_PICTURE /;"	d
FF_PROFILE_HEVC_REXT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_HEVC_REXT /;"	d
FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION /;"	d
FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0 /;"	d
FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1 /;"	d
FF_PROFILE_JPEG2000_DCINEMA_2K	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_JPEG2000_DCINEMA_2K /;"	d
FF_PROFILE_JPEG2000_DCINEMA_4K	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_JPEG2000_DCINEMA_4K /;"	d
FF_PROFILE_KLVA_ASYNC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_KLVA_ASYNC /;"	d
FF_PROFILE_KLVA_SYNC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_KLVA_SYNC /;"	d
FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT /;"	d
FF_PROFILE_MJPEG_HUFFMAN_EXTENDED_SEQUENTIAL_DCT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MJPEG_HUFFMAN_EXTENDED_SEQUENTIAL_DCT /;"	d
FF_PROFILE_MJPEG_HUFFMAN_LOSSLESS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MJPEG_HUFFMAN_LOSSLESS /;"	d
FF_PROFILE_MJPEG_HUFFMAN_PROGRESSIVE_DCT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MJPEG_HUFFMAN_PROGRESSIVE_DCT /;"	d
FF_PROFILE_MJPEG_JPEG_LS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MJPEG_JPEG_LS /;"	d
FF_PROFILE_MPEG2_422	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_422 /;"	d
FF_PROFILE_MPEG2_AAC_HE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_AAC_HE /;"	d
FF_PROFILE_MPEG2_AAC_LOW	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_AAC_LOW /;"	d
FF_PROFILE_MPEG2_HIGH	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_HIGH /;"	d
FF_PROFILE_MPEG2_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_MAIN /;"	d
FF_PROFILE_MPEG2_SIMPLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_SIMPLE /;"	d
FF_PROFILE_MPEG2_SNR_SCALABLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_SNR_SCALABLE /;"	d
FF_PROFILE_MPEG2_SS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG2_SS /;"	d
FF_PROFILE_MPEG4_ADVANCED_CODING	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_ADVANCED_CODING /;"	d
FF_PROFILE_MPEG4_ADVANCED_CORE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_ADVANCED_CORE /;"	d
FF_PROFILE_MPEG4_ADVANCED_REAL_TIME	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_ADVANCED_REAL_TIME /;"	d
FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE /;"	d
FF_PROFILE_MPEG4_ADVANCED_SIMPLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_ADVANCED_SIMPLE /;"	d
FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE /;"	d
FF_PROFILE_MPEG4_CORE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_CORE /;"	d
FF_PROFILE_MPEG4_CORE_SCALABLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_CORE_SCALABLE /;"	d
FF_PROFILE_MPEG4_HYBRID	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_HYBRID /;"	d
FF_PROFILE_MPEG4_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_MAIN /;"	d
FF_PROFILE_MPEG4_N_BIT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_N_BIT /;"	d
FF_PROFILE_MPEG4_SCALABLE_TEXTURE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_SCALABLE_TEXTURE /;"	d
FF_PROFILE_MPEG4_SIMPLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_SIMPLE /;"	d
FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION /;"	d
FF_PROFILE_MPEG4_SIMPLE_SCALABLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_SIMPLE_SCALABLE /;"	d
FF_PROFILE_MPEG4_SIMPLE_STUDIO	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_MPEG4_SIMPLE_STUDIO /;"	d
FF_PROFILE_PRORES_4444	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_PRORES_4444 /;"	d
FF_PROFILE_PRORES_HQ	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_PRORES_HQ /;"	d
FF_PROFILE_PRORES_LT	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_PRORES_LT /;"	d
FF_PROFILE_PRORES_PROXY	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_PRORES_PROXY /;"	d
FF_PROFILE_PRORES_STANDARD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_PRORES_STANDARD /;"	d
FF_PROFILE_PRORES_XQ	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_PRORES_XQ /;"	d
FF_PROFILE_RESERVED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_RESERVED /;"	d
FF_PROFILE_SBC_MSBC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_SBC_MSBC /;"	d
FF_PROFILE_UNKNOWN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_UNKNOWN /;"	d
FF_PROFILE_VC1_ADVANCED	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VC1_ADVANCED /;"	d
FF_PROFILE_VC1_COMPLEX	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VC1_COMPLEX /;"	d
FF_PROFILE_VC1_MAIN	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VC1_MAIN /;"	d
FF_PROFILE_VC1_SIMPLE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VC1_SIMPLE /;"	d
FF_PROFILE_VP9_0	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VP9_0 /;"	d
FF_PROFILE_VP9_1	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VP9_1 /;"	d
FF_PROFILE_VP9_2	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VP9_2 /;"	d
FF_PROFILE_VP9_3	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_PROFILE_VP9_3 /;"	d
FF_QP2LAMBDA	lib/ffmpeg/include/libavutil/avutil.h	/^#define FF_QP2LAMBDA /;"	d
FF_QUALITY_SCALE	lib/ffmpeg/include/libavutil/avutil.h	/^#define FF_QUALITY_SCALE /;"	d
FF_SUB_CHARENC_MODE_AUTOMATIC	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_SUB_CHARENC_MODE_AUTOMATIC /;"	d
FF_SUB_CHARENC_MODE_DO_NOTHING	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_SUB_CHARENC_MODE_DO_NOTHING /;"	d
FF_SUB_CHARENC_MODE_IGNORE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_SUB_CHARENC_MODE_IGNORE /;"	d
FF_SUB_CHARENC_MODE_PRE_DECODER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_SUB_CHARENC_MODE_PRE_DECODER /;"	d
FF_SUB_TEXT_FMT_ASS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_SUB_TEXT_FMT_ASS /;"	d
FF_SUB_TEXT_FMT_ASS_WITH_TIMINGS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_SUB_TEXT_FMT_ASS_WITH_TIMINGS /;"	d
FF_THREAD_FRAME	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_THREAD_FRAME /;"	d
FF_THREAD_SLICE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define FF_THREAD_SLICE /;"	d
FIELD_BOOLEAN	src/Utils/SDK.hpp	/^	FIELD_BOOLEAN,$/;"	e	enum:_fieldtypes
FIELD_CHARACTER	src/Utils/SDK.hpp	/^	FIELD_CHARACTER,$/;"	e	enum:_fieldtypes
FIELD_CLASSPTR	src/Utils/SDK.hpp	/^	FIELD_CLASSPTR,$/;"	e	enum:_fieldtypes
FIELD_COLOR32	src/Utils/SDK.hpp	/^	FIELD_COLOR32,$/;"	e	enum:_fieldtypes
FIELD_CUSTOM	src/Utils/SDK.hpp	/^	FIELD_CUSTOM,$/;"	e	enum:_fieldtypes
FIELD_EDICT	src/Utils/SDK.hpp	/^	FIELD_EDICT,$/;"	e	enum:_fieldtypes
FIELD_EHANDLE	src/Utils/SDK.hpp	/^	FIELD_EHANDLE,$/;"	e	enum:_fieldtypes
FIELD_EMBEDDED	src/Utils/SDK.hpp	/^	FIELD_EMBEDDED,$/;"	e	enum:_fieldtypes
FIELD_FLOAT	src/Utils/SDK.hpp	/^	FIELD_FLOAT,$/;"	e	enum:_fieldtypes
FIELD_FUNCTION	src/Utils/SDK.hpp	/^	FIELD_FUNCTION,$/;"	e	enum:_fieldtypes
FIELD_INPUT	src/Utils/SDK.hpp	/^	FIELD_INPUT,$/;"	e	enum:_fieldtypes
FIELD_INTEGER	src/Utils/SDK.hpp	/^	FIELD_INTEGER,$/;"	e	enum:_fieldtypes
FIELD_INTERVAL	src/Utils/SDK.hpp	/^	FIELD_INTERVAL,$/;"	e	enum:_fieldtypes
FIELD_MATERIALINDEX	src/Utils/SDK.hpp	/^	FIELD_MATERIALINDEX,$/;"	e	enum:_fieldtypes
FIELD_MATRIX3X4_WORLDSPACE	src/Utils/SDK.hpp	/^	FIELD_MATRIX3X4_WORLDSPACE,$/;"	e	enum:_fieldtypes
FIELD_MODELINDEX	src/Utils/SDK.hpp	/^	FIELD_MODELINDEX,$/;"	e	enum:_fieldtypes
FIELD_MODELNAME	src/Utils/SDK.hpp	/^	FIELD_MODELNAME,$/;"	e	enum:_fieldtypes
FIELD_POSITION_VECTOR	src/Utils/SDK.hpp	/^	FIELD_POSITION_VECTOR,$/;"	e	enum:_fieldtypes
FIELD_QUATERNION	src/Utils/SDK.hpp	/^	FIELD_QUATERNION,$/;"	e	enum:_fieldtypes
FIELD_SHORT	src/Utils/SDK.hpp	/^	FIELD_SHORT,$/;"	e	enum:_fieldtypes
FIELD_SOUNDNAME	src/Utils/SDK.hpp	/^	FIELD_SOUNDNAME,$/;"	e	enum:_fieldtypes
FIELD_STRING	src/Utils/SDK.hpp	/^	FIELD_STRING,$/;"	e	enum:_fieldtypes
FIELD_TICK	src/Utils/SDK.hpp	/^	FIELD_TICK,$/;"	e	enum:_fieldtypes
FIELD_TIME	src/Utils/SDK.hpp	/^	FIELD_TIME,$/;"	e	enum:_fieldtypes
FIELD_TYPECOUNT	src/Utils/SDK.hpp	/^	FIELD_TYPECOUNT$/;"	e	enum:_fieldtypes
FIELD_VECTOR	src/Utils/SDK.hpp	/^	FIELD_VECTOR,$/;"	e	enum:_fieldtypes
FIELD_VECTOR2D	src/Utils/SDK.hpp	/^	FIELD_VECTOR2D,$/;"	e	enum:_fieldtypes
FIELD_VMATRIX	src/Utils/SDK.hpp	/^	FIELD_VMATRIX,$/;"	e	enum:_fieldtypes
FIELD_VMATRIX_WORLDSPACE	src/Utils/SDK.hpp	/^	FIELD_VMATRIX_WORLDSPACE,$/;"	e	enum:_fieldtypes
FIELD_VOID	src/Utils/SDK.hpp	/^	FIELD_VOID = 0,$/;"	e	enum:_fieldtypes
FILL	src/SAR.cpp	/^#define FILL(/;"	d	file:
FINISH_COMMAND_COMPLETION	src/Command.hpp	/^#define FINISH_COMMAND_COMPLETION(/;"	d
FIRST	src/Features/Camera.cpp	/^	enum { FIRST,$/;"	e	enum:Camera::InterpolateStates::__anon821173e40203	file:
FIRST	src/Features/Camera.cpp	/^	enum { FIRST,$/;"	e	enum:InterpolateCurve::__anon821173e40103	file:
FIRST_LENGTH_CODE_INDEX	src/Utils/lodepng.cpp	/^#	define FIRST_LENGTH_CODE_INDEX /;"	d	file:
FLOAT	src/Features/Tas/TasParser.cpp	/^		FLOAT,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
FL_ATCONTROLS	src/Utils/SDK.hpp	/^#define FL_ATCONTROLS /;"	d
FL_DUCKING	src/Utils/SDK.hpp	/^#define FL_DUCKING /;"	d
FL_EDICT_FREE	src/Utils/SDK.hpp	/^#define FL_EDICT_FREE /;"	d
FL_FROZEN	src/Utils/SDK.hpp	/^#define FL_FROZEN /;"	d
FL_GODMODE	src/Utils/SDK.hpp	/^#define FL_GODMODE /;"	d
FL_ONGROUND	src/Utils/SDK.hpp	/^#define FL_ONGROUND /;"	d
FMOVIE_AVI	src/Utils/SDK.hpp	/^		FMOVIE_AVI = 1 << 1,$/;"	e	enum:MovieInfo_t::__anon21a65a740a03
FMOVIE_AVISOUND	src/Utils/SDK.hpp	/^		FMOVIE_AVISOUND = 1 << 3,$/;"	e	enum:MovieInfo_t::__anon21a65a740a03
FMOVIE_JPG	src/Utils/SDK.hpp	/^		FMOVIE_JPG = 1 << 4,$/;"	e	enum:MovieInfo_t::__anon21a65a740a03
FMOVIE_TGA	src/Utils/SDK.hpp	/^		FMOVIE_TGA = 1 << 0,$/;"	e	enum:MovieInfo_t::__anon21a65a740a03
FMOVIE_WAV	src/Utils/SDK.hpp	/^		FMOVIE_WAV = 1 << 2,$/;"	e	enum:MovieInfo_t::__anon21a65a740a03
FONT_DEFAULT	src/Features/OverlayRender.hpp	/^#define FONT_DEFAULT /;"	d
FORCE_START	src/Features/Speedrun/Rules.hpp	/^	FORCE_START,  \/\/ Restart timer if already running$/;"	e	enum:RuleAction
FOV	src/Features/Camera.hpp	/^	FOV$/;"	e	enum:CameraStateParameter
FRAME	src/Event.hpp	/^		FRAME,$/;"	e	enum:Event::EventType
FROZEN_THREADS	lib/minhook/hook.c	/^} FROZEN_THREADS, *PFROZEN_THREADS;$/;"	t	typeref:struct:_FROZEN_THREADS	file:
FULL	src/Features/Hud/Toasts.cpp	/^	FULL,$/;"	e	enum:Background	file:
F_2IMM16	lib/minhook/hde/hde32.h	/^#define F_2IMM16 /;"	d
F_DISP16	lib/minhook/hde/hde32.h	/^#define F_DISP16 /;"	d
F_DISP16	lib/minhook/hde/hde64.h	/^#define F_DISP16 /;"	d
F_DISP32	lib/minhook/hde/hde32.h	/^#define F_DISP32 /;"	d
F_DISP32	lib/minhook/hde/hde64.h	/^#define F_DISP32 /;"	d
F_DISP8	lib/minhook/hde/hde32.h	/^#define F_DISP8 /;"	d
F_DISP8	lib/minhook/hde/hde64.h	/^#define F_DISP8 /;"	d
F_ERROR	lib/minhook/hde/hde32.h	/^#define F_ERROR /;"	d
F_ERROR	lib/minhook/hde/hde64.h	/^#define F_ERROR /;"	d
F_ERROR_LENGTH	lib/minhook/hde/hde32.h	/^#define F_ERROR_LENGTH /;"	d
F_ERROR_LENGTH	lib/minhook/hde/hde64.h	/^#define F_ERROR_LENGTH /;"	d
F_ERROR_LOCK	lib/minhook/hde/hde32.h	/^#define F_ERROR_LOCK /;"	d
F_ERROR_LOCK	lib/minhook/hde/hde64.h	/^#define F_ERROR_LOCK /;"	d
F_ERROR_OPCODE	lib/minhook/hde/hde32.h	/^#define F_ERROR_OPCODE /;"	d
F_ERROR_OPCODE	lib/minhook/hde/hde64.h	/^#define F_ERROR_OPCODE /;"	d
F_ERROR_OPERAND	lib/minhook/hde/hde32.h	/^#define F_ERROR_OPERAND /;"	d
F_ERROR_OPERAND	lib/minhook/hde/hde64.h	/^#define F_ERROR_OPERAND /;"	d
F_IMM16	lib/minhook/hde/hde32.h	/^#define F_IMM16 /;"	d
F_IMM16	lib/minhook/hde/hde64.h	/^#define F_IMM16 /;"	d
F_IMM32	lib/minhook/hde/hde32.h	/^#define F_IMM32 /;"	d
F_IMM32	lib/minhook/hde/hde64.h	/^#define F_IMM32 /;"	d
F_IMM64	lib/minhook/hde/hde64.h	/^#define F_IMM64 /;"	d
F_IMM8	lib/minhook/hde/hde32.h	/^#define F_IMM8 /;"	d
F_IMM8	lib/minhook/hde/hde64.h	/^#define F_IMM8 /;"	d
F_MODRM	lib/minhook/hde/hde32.h	/^#define F_MODRM /;"	d
F_MODRM	lib/minhook/hde/hde64.h	/^#define F_MODRM /;"	d
F_PREFIX_66	lib/minhook/hde/hde32.h	/^#define F_PREFIX_66 /;"	d
F_PREFIX_66	lib/minhook/hde/hde64.h	/^#define F_PREFIX_66 /;"	d
F_PREFIX_67	lib/minhook/hde/hde32.h	/^#define F_PREFIX_67 /;"	d
F_PREFIX_67	lib/minhook/hde/hde64.h	/^#define F_PREFIX_67 /;"	d
F_PREFIX_ANY	lib/minhook/hde/hde32.h	/^#define F_PREFIX_ANY /;"	d
F_PREFIX_ANY	lib/minhook/hde/hde64.h	/^#define F_PREFIX_ANY /;"	d
F_PREFIX_LOCK	lib/minhook/hde/hde32.h	/^#define F_PREFIX_LOCK /;"	d
F_PREFIX_LOCK	lib/minhook/hde/hde64.h	/^#define F_PREFIX_LOCK /;"	d
F_PREFIX_REP	lib/minhook/hde/hde32.h	/^#define F_PREFIX_REP /;"	d
F_PREFIX_REP	lib/minhook/hde/hde64.h	/^#define F_PREFIX_REP /;"	d
F_PREFIX_REPNZ	lib/minhook/hde/hde32.h	/^#define F_PREFIX_REPNZ /;"	d
F_PREFIX_REPNZ	lib/minhook/hde/hde64.h	/^#define F_PREFIX_REPNZ /;"	d
F_PREFIX_REPX	lib/minhook/hde/hde32.h	/^#define F_PREFIX_REPX /;"	d
F_PREFIX_REPX	lib/minhook/hde/hde64.h	/^#define F_PREFIX_REPX /;"	d
F_PREFIX_REX	lib/minhook/hde/hde64.h	/^#define F_PREFIX_REX /;"	d
F_PREFIX_SEG	lib/minhook/hde/hde32.h	/^#define F_PREFIX_SEG /;"	d
F_PREFIX_SEG	lib/minhook/hde/hde64.h	/^#define F_PREFIX_SEG /;"	d
F_RELATIVE	lib/minhook/hde/hde32.h	/^#define F_RELATIVE /;"	d
F_RELATIVE	lib/minhook/hde/hde64.h	/^#define F_RELATIVE /;"	d
F_SIB	lib/minhook/hde/hde32.h	/^#define F_SIB /;"	d
F_SIB	lib/minhook/hde/hde64.h	/^#define F_SIB /;"	d
Feature	src/Features/Feature.hpp	/^class Feature {$/;"	c
Features	README.md	/^# Features$/;"	c
Features	doc/contributing.md	/^### Features$/;"	S	section:SAR: Contributing Guide""Coding
Features	src/Features/Feature.cpp	/^Features::Features()$/;"	f	class:Features
Features	src/Features/Feature.hpp	/^class Features {$/;"	c
FetchInputs	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::FetchInputs(int slot, TasController *controller) {$/;"	f	class:TasPlayer	typeref:typename:void
FieldTable	lib/SFML/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request	typeref:typename:std::map<std::string,std::string>
FieldTable	lib/SFML/include/SFML/Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response	typeref:typename:std::map<std::string,std::string>
FileActionAborted	lib/SFML/include/SFML/Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	lib/SFML/include/SFML/Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileInputStream	lib/SFML/include/SFML/System/FileInputStream.hpp	/^class SFML_SYSTEM_API FileInputStream : public InputStream, NonCopyable$/;"	c	namespace:sf
FileStatus	lib/SFML/include/SFML/Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	lib/SFML/include/SFML/Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	lib/SFML/include/SFML/Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not all/;"	e	enum:sf::Ftp::Response::Status
Find	src/Command.cpp	/^Command *Command::Find(const char *name) {$/;"	f	class:Command	typeref:typename:Command *
Find	src/Features/OffsetFinder.cpp	/^int16_t OffsetFinder::Find(RecvTable *table, const char *propName) {$/;"	f	class:OffsetFinder	typeref:typename:int16_t
Find	src/Features/OffsetFinder.cpp	/^int16_t OffsetFinder::Find(SendTable *table, const char *propName) {$/;"	f	class:OffsetFinder	typeref:typename:int16_t
Find	src/Variable.cpp	/^Variable *Variable::Find(const char *name) {$/;"	f	class:Variable	typeref:typename:Variable *
FindAddress	src/Utils/Memory.cpp	/^uintptr_t Memory::FindAddress(const uintptr_t start, const uintptr_t end, const char *target) {$/;"	f	class:Memory	typeref:typename:uintptr_t
FindCommandBase	src/Modules/Tier1.hpp	/^	_FindCommandBase FindCommandBase = nullptr;$/;"	m	class:Tier1	typeref:typename:_FindCommandBase
FindCommandBase	src/Offsets.cpp	/^	int FindCommandBase;$/;"	v	namespace:Offsets	typeref:typename:int
FindElement	src/Offsets.cpp	/^	int FindElement;$/;"	v	namespace:Offsets	typeref:typename:int
FindHookEntry	lib/minhook/hook.c	/^static UINT FindHookEntry(LPVOID pTarget)$/;"	f	typeref:typename:UINT	file:
FindMaterial	src/Modules/MaterialSystem.cpp	/^IMaterial *MaterialSystem::FindMaterial(const char *materialName, const char *textureGroupName) /;"	f	class:MaterialSystem	typeref:typename:IMaterial *
FindMaterial	src/Offsets.cpp	/^	int FindMaterial;$/;"	v	namespace:Offsets	typeref:typename:int
FindNewIP	lib/minhook/hook.c	/^static DWORD_PTR FindNewIP(PHOOK_ENTRY pHook, DWORD_PTR ip)$/;"	f	typeref:typename:DWORD_PTR	file:
FindNextFreeRegion	lib/minhook/buffer.c	/^static LPVOID FindNextFreeRegion(LPVOID pAddress, LPVOID pMaxAddr, DWORD dwAllocationGranularity/;"	f	typeref:typename:LPVOID	file:
FindOldIP	lib/minhook/hook.c	/^static DWORD_PTR FindOldIP(PHOOK_ENTRY pHook, DWORD_PTR ip)$/;"	f	typeref:typename:DWORD_PTR	file:
FindPortal	src/Modules/Server.hpp	/^	_FindPortal FindPortal = nullptr;$/;"	m	class:Server	typeref:typename:_FindPortal
FindPrevFreeRegion	lib/minhook/buffer.c	/^static LPVOID FindPrevFreeRegion(LPVOID pAddress, LPVOID pMinAddr, DWORD dwAllocationGranularity/;"	f	typeref:typename:LPVOID	file:
FinishDrawing	src/Modules/Surface.hpp	/^	_FinishDrawing FinishDrawing = nullptr;$/;"	m	class:Surface	typeref:typename:_FinishDrawing
FinishDrawing	src/Offsets.cpp	/^	int FinishDrawing;$/;"	v	namespace:Offsets	typeref:typename:int
FinishGravity	src/Offsets.cpp	/^	int FinishGravity;$/;"	v	namespace:Offsets	typeref:typename:int
FinishLoad	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::FinishLoad() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
FinishRun	src/Features/AutoSubmit.cpp	/^void AutoSubmit::FinishRun(float final_time, const char *demopath, std::optional<std::string> re/;"	f	class:AutoSubmit	typeref:typename:void
FireBlue	src/Features/Tas/TasController.hpp	/^	FireBlue,$/;"	e	enum:TasControllerInput
FireEventClientSide	src/Offsets.cpp	/^	int FireEventClientSide;$/;"	v	namespace:Offsets	typeref:typename:int
FireEventIntern	src/Offsets.cpp	/^	int FireEventIntern;$/;"	v	namespace:Offsets	typeref:typename:int
FireGameEvent	src/Features/Listener.cpp	/^void Listener::FireGameEvent(IGameEvent *ev) {$/;"	f	class:Listener	typeref:typename:void
FireOrange	src/Features/Tas/TasController.hpp	/^	FireOrange$/;"	e	enum:TasControllerInput
Flush	src/Modules/Tier1.cpp	/^	void Flush() {$/;"	f	class:ConsoleDisplayHook	typeref:typename:void	file:
FnChangeCallback_t	src/Utils/SDK.hpp	/^typedef void (*FnChangeCallback_t)(void *var, const char *pOldValue, float flOldValue);$/;"	t	typeref:typename:void (*)(void * var,const char * pOldValue,float flOldValue)
Follow	src/Features/Camera.hpp	/^	Follow$/;"	e	enum:CameraControlType
FollowLine	src/Features/Tas/TasTools/StrafeTool.cpp	/^void AutoStrafeTool::FollowLine(const TasPlayerInfo &pInfo) {$/;"	f	class:AutoStrafeTool	typeref:typename:void
FollowPov	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::FollowPov(CViewSetup *view) {$/;"	f	class:GhostEntity	typeref:typename:void
FontManager	src/Offsets.cpp	/^	int FontManager;$/;"	v	namespace:Offsets	typeref:typename:int
Forbidden	lib/SFML/include/SFML/Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, eve/;"	e	enum:sf::Http::Response::Status
Force	src/Features/FovChanger.cpp	/^void FovChanger::Force() {$/;"	f	class:FovChanger	typeref:typename:void
Format	src/Features/Speedrun/SpeedrunTimer.cpp	/^std::string SpeedrunTimer::Format(float raw) {$/;"	f	class:SpeedrunTimer	typeref:typename:std::string
FovChanger	src/Features/FovChanger.cpp	/^FovChanger::FovChanger()$/;"	f	class:FovChanger
FovChanger	src/Features/FovChanger.hpp	/^class FovChanger : public Feature {$/;"	c
Frame	src/Features/Renderer.cpp	/^void Renderer::Frame() {$/;"	f	class:Renderer	typeref:typename:void
Frame	src/Offsets.cpp	/^	int Frame;$/;"	v	namespace:Offsets	typeref:typename:int
FrameStageNotify	src/Modules/Client.hpp	/^	_FrameStageNotify FrameStageNotify = nullptr;$/;"	m	class:Client	typeref:typename:_FrameStageNotify
FreeBuffer	lib/minhook/buffer.c	/^VOID FreeBuffer(LPVOID pBuffer)$/;"	f	typeref:typename:VOID
FreeCondition	src/Features/ConfigPlus.cpp	/^static void FreeCondition(Condition *c) {$/;"	f	typeref:typename:void	file:
Freeze	lib/minhook/hook.c	/^static VOID Freeze(PFROZEN_THREADS pThreads, UINT pos, UINT action)$/;"	f	typeref:typename:VOID	file:
Ftp	lib/SFML/include/SFML/Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
FullGameRetries	src/Features/Stats/StatsCounter.hpp	/^	int FullGameRetries;$/;"	m	struct:MapStats	typeref:typename:int
FullGameTotalTime	src/Features/Stats/StatsCounter.hpp	/^	float FullGameTotalTime;$/;"	m	struct:MapStats	typeref:typename:float
FullTossMove	src/Offsets.cpp	/^	int FullTossMove;$/;"	v	namespace:Offsets	typeref:typename:int
GAME	src/Features/ConfigPlus.cpp	/^		GAME,$/;"	e	enum:Condition::__anon194454350203	file:
GAME	src/Utils.hpp	/^#define GAME(/;"	d
GAMEMOVEMENT_JUMP_HEIGHT	src/Utils/SDK.hpp	/^#define GAMEMOVEMENT_JUMP_HEIGHT /;"	d
GAME_PATH	src/Utils/Platform.hpp	/^#define GAME_PATH(/;"	d
GET_ACTIVE_SPLITSCREEN_SLOT	src/Modules/Engine.hpp	/^#define GET_ACTIVE_SPLITSCREEN_SLOT(/;"	d
GET_SLOT	src/Modules/Engine.hpp	/^#define GET_SLOT(/;"	d
GET_UTF16	lib/ffmpeg/include/libavutil/common.h	/^#define GET_UTF16(/;"	d
GET_UTF8	lib/ffmpeg/include/libavutil/common.h	/^#define GET_UTF8(/;"	d
GHOST_TOAST_TAG	src/Features/Demo/GhostEntity.hpp	/^#define GHOST_TOAST_TAG /;"	d
GO_THE_FUCK_TO_SLEEP	src/Utils.hpp	/^#	define GO_THE_FUCK_TO_SLEEP(/;"	d
GREEN	src/SAR.cpp	/^#define GREEN /;"	d	file:
GREEN	src/Utils/SDK.hpp	/^	GREEN = 4,$/;"	e	enum:TextColor
Game	src/Game.hpp	/^class Game {$/;"	c
Game Support	doc/contributing.md	/^### Game Support$/;"	S	section:SAR: Contributing Guide""Coding
GameDir	src/Games/Linux/ApertureTag.cpp	/^const char *ApertureTag::GameDir() {$/;"	f	class:ApertureTag	typeref:typename:const char *
GameDir	src/Games/Linux/ThinkingWithTimeMachine.cpp	/^const char *ThinkingWithTimeMachine::GameDir() {$/;"	f	class:ThinkingWithTimeMachine	typeref:typename:const char *
GameDir	src/Games/Windows/ApertureTag.cpp	/^const char *ApertureTag::GameDir() {$/;"	f	class:ApertureTag	typeref:typename:const char *
GameDir	src/Games/Windows/ThinkingWithTimeMachine.cpp	/^const char *ThinkingWithTimeMachine::GameDir() {$/;"	f	class:ThinkingWithTimeMachine	typeref:typename:const char *
GameFrame	src/Offsets.cpp	/^	int GameFrame;$/;"	v	namespace:Offsets	typeref:typename:int
GameFrame	src/SAR.cpp	/^void SAR::GameFrame(bool simulating) {$/;"	f	class:SAR	typeref:typename:void
GameOverlayActivated_t	src/Utils/SDK.hpp	/^struct GameOverlayActivated_t {$/;"	s
GatewayTimeout	lib/SFML/include/SFML/Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response fr/;"	e	enum:sf::Http::Response::Status
GatherData	src/Features/Hud/VelocityGraph.cpp	/^void VelocityGraph::GatherData(int slot) {$/;"	f	class:VelocityGraph	typeref:typename:void
General:	README.md	/^### General:$/;"	S	chapter:Features
GeneralTestRules	src/Features/Speedrun/Categories.cpp	/^static bool GeneralTestRules(std::optional<int> slot, Ts... args) {$/;"	f	typeref:typename:bool	file:
Get	lib/SFML/include/SFML/Network/Http.hpp	/^            Get,   \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
Get	src/Features/Stats/Stats.cpp	/^PlayerStats *Stats::Get(int nSlot) {$/;"	f	class:Stats	typeref:typename:PlayerStats *
Get	src/Interface.hpp	/^	static T Get(const char *filename, const char *interfaceSymbol) {$/;"	f	class:Interface	typeref:typename:T
GetAbsoluteTick	src/Features/Tas/TasPlayer.hpp	/^	inline int GetAbsoluteTick() const { return startTick + currentTick; };$/;"	f	class:TasPlayer	typeref:typename:int
GetActiveSplitScreenPlayerSlot	src/Modules/Engine.hpp	/^	_GetActiveSplitScreenPlayerSlot GetActiveSplitScreenPlayerSlot = nullptr;$/;"	m	class:Engine	typeref:typename:_GetActiveSplitScreenPlayerSlot
GetActiveSplitScreenPlayerSlot	src/Offsets.cpp	/^	int GetActiveSplitScreenPlayerSlot;$/;"	v	namespace:Offsets	typeref:typename:int
GetAllClasses	src/Modules/Client.hpp	/^	_GetAllClasses GetAllClasses = nullptr;$/;"	m	class:Client	typeref:typename:_GetAllClasses
GetAllClasses	src/Offsets.cpp	/^	int GetAllClasses;$/;"	v	namespace:Offsets	typeref:typename:int
GetAllGhosts	src/Features/Demo/DemoGhostPlayer.cpp	/^std::vector<DemoGhostEntity>& DemoGhostPlayer::GetAllGhosts() {$/;"	f	class:DemoGhostPlayer	typeref:typename:std::vector<DemoGhostEntity> &
GetAllServerClasses	src/Modules/Server.hpp	/^	_GetAllServerClasses GetAllServerClasses = nullptr;$/;"	m	class:Server	typeref:typename:_GetAllServerClasses
GetAllServerClasses	src/Offsets.cpp	/^	int GetAllServerClasses;$/;"	v	namespace:Offsets	typeref:typename:int
GetAngles	src/Modules/Engine.cpp	/^QAngle Engine::GetAngles(int nSlot) {$/;"	f	class:Engine	typeref:typename:QAngle
GetBool	src/Variable.cpp	/^bool Variable::GetBool() {$/;"	f	class:Variable	typeref:typename:bool
GetButton	src/Modules/InputSystem.cpp	/^int InputSystem::GetButton(const char *pString) {$/;"	f	class:InputSystem	typeref:typename:int
GetButtonBits	src/Features/Hud/InputHud.hpp	/^	int GetButtonBits(int slot) { return inputInfo[slot].buttonBits; }$/;"	f	class:InputHud	typeref:typename:int
GetButtonBits	src/Offsets.cpp	/^	int GetButtonBits;$/;"	v	namespace:Offsets	typeref:typename:int
GetButtonState	src/Features/Tas/TasController.cpp	/^bool TasController::GetButtonState(TasControllerInput i) {$/;"	f	class:TasController	typeref:typename:bool
GetCMTimer	src/Modules/Server.cpp	/^float Server::GetCMTimer() {$/;"	f	class:Server	typeref:typename:float
GetCategoryRules	src/Features/Speedrun/Categories.cpp	/^std::vector<std::string> SpeedrunTimer::GetCategoryRules() {$/;"	f	class:SpeedrunTimer	typeref:typename:std::vector<std::string>
GetChallengeStatus	src/Modules/Client.cpp	/^CMStatus Client::GetChallengeStatus() {$/;"	f	class:Client	typeref:typename:CMStatus
GetClientEntity	src/Modules/Client.hpp	/^	_GetClientEntity GetClientEntity = nullptr;$/;"	m	class:Client	typeref:typename:_GetClientEntity
GetClientEntity	src/Offsets.cpp	/^	int GetClientEntity;$/;"	v	namespace:Offsets	typeref:typename:int
GetClientMode	src/Offsets.cpp	/^	int GetClientMode;$/;"	v	namespace:Offsets	typeref:typename:int
GetClientStateFunction	src/Offsets.cpp	/^	int GetClientStateFunction;$/;"	v	namespace:Offsets	typeref:typename:int
GetClientTime	src/Modules/Engine.cpp	/^float Engine::GetClientTime() {$/;"	f	class:Engine	typeref:typename:float
GetColor	src/Features/Demo/GhostEntity.cpp	/^Color GhostEntity::GetColor() {$/;"	f	class:GhostEntity	typeref:typename:Color
GetColor	src/Utils.cpp	/^std::optional<Color> Utils::GetColor(const char *str, bool to_linear) {$/;"	f	class:Utils	typeref:typename:std::optional<Color>
GetConsoleText	src/Modules/Tier1.cpp	/^	virtual void GetConsoleText(char *text, size_t bufSize) const override {$/;"	f	class:ConsoleDisplayHook	typeref:typename:void	file:
GetCount	src/Modules/Engine.hpp	/^	_GetCount GetCount = nullptr;$/;"	m	class:Engine	typeref:typename:_GetCount
GetCurrentMap	src/Features/Demo/DemoGhostEntity.cpp	/^std::string DemoGhostEntity::GetCurrentMap() {$/;"	f	class:DemoGhostEntity	typeref:typename:std::string
GetCurrentMap	src/Offsets.cpp	/^	int GetCurrentMap;$/;"	v	namespace:Offsets	typeref:typename:int
GetCurrentMapName	src/Modules/Engine.cpp	/^std::string Engine::GetCurrentMapName() {$/;"	f	class:Engine	typeref:typename:std::string
GetCurrentParams	src/Features/Tas/TasTool.cpp	/^std::shared_ptr<TasToolParams> TasTool::GetCurrentParams() {$/;"	f	class:TasTool	typeref:typename:std::shared_ptr<TasToolParams>
GetCurrentSize	src/Features/Demo/NetworkGhostPlayer.cpp	/^	virtual bool GetCurrentSize(int &w, int &h) override {$/;"	f	class:PlayerListUi	typeref:typename:bool	file:
GetCurrentSize	src/Features/Demo/NetworkGhostPlayer.cpp	/^	virtual bool GetCurrentSize(int &w, int &h) override {$/;"	f	class:SyncUi	typeref:typename:bool	file:
GetCurrentSize	src/Features/Hud/Crosshair.cpp	/^bool Crosshair::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:Crosshair	typeref:typename:bool
GetCurrentSize	src/Features/Hud/InputHud.cpp	/^bool InputHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:InputHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/InspectionHud.cpp	/^bool InspectionHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:InspectionHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/LPHud.cpp	/^bool LPHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:LPHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/Minimap.cpp	/^	bool GetCurrentSize(int &w, int &h) { return false; }$/;"	f	class:MinimapHud	typeref:typename:bool	file:
GetCurrentSize	src/Features/Hud/PortalPlacement.cpp	/^bool PortalPlacementHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:PortalPlacementHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/PortalgunHud.cpp	/^bool PortalgunHud::GetCurrentSize(int &w, int &h) {$/;"	f	class:PortalgunHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/ScrollSpeed.hpp	/^	bool GetCurrentSize(int &xSize, int &ySize) override {$/;"	f	class:ScrollSpeedHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/SpeedrunHud.cpp	/^bool SpeedrunHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:SpeedrunHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/StrafeQuality.cpp	/^bool StrafeQualityHud::GetCurrentSize(int &width, int &height) {$/;"	f	class:StrafeQualityHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/StrafeSyncHud.cpp	/^bool StrafeSyncHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:StrafeSyncHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/Toasts.cpp	/^bool ToastHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:ToastHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/VelocityGraph.cpp	/^bool VelocityGraph::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:VelocityGraph	typeref:typename:bool
GetCurrentSize	src/Features/Hud/VphysHud.cpp	/^bool VphysHud::GetCurrentSize(int &xSize, int &ySize) {$/;"	f	class:VphysHud	typeref:typename:bool
GetCurrentSize	src/Features/Hud/Watermark.cpp	/^	bool GetCurrentSize(int &w, int &h) override {$/;"	f	class:WatermarkHud	typeref:typename:bool	file:
GetCursorPos	src/Modules/InputSystem.cpp	/^void InputSystem::GetCursorPos(int &x, int &y) {$/;"	f	class:InputSystem	typeref:typename:void
GetCursorPosition	src/Modules/InputSystem.hpp	/^	_GetCursorPosition GetCursorPosition = nullptr;$/;"	m	class:InputSystem	typeref:typename:_GetCursorPosition
GetCursorPosition	src/Offsets.cpp	/^	int GetCursorPosition;$/;"	v	namespace:Offsets	typeref:typename:int
GetData	src/Features/Routing/EntityInspector.cpp	/^InspectionItem EntityInspector::GetData() {$/;"	f	class:EntityInspector	typeref:typename:InspectionItem
GetDefaultFont	src/Modules/Scheme.cpp	/^unsigned long Scheme::GetDefaultFont() {$/;"	f	class:Scheme	typeref:typename:unsigned long
GetDemoFilename	src/Modules/EngineDemoRecorder.cpp	/^std::string EngineDemoRecorder::GetDemoFilename() {$/;"	f	class:EngineDemoRecorder	typeref:typename:std::string
GetElementByName	src/Features/Hud/InputHud.cpp	/^InputHud::InputHudElement *InputHud::GetElementByName(std::string name) {$/;"	f	class:InputHud	typeref:typename:InputHud::InputHudElement *
GetEntityInfoByClassName	src/Features/EntityList.cpp	/^CEntInfo *EntityList::GetEntityInfoByClassName(const char *name) {$/;"	f	class:EntityList	typeref:typename:CEntInfo *
GetEntityInfoByIndex	src/Features/EntityList.cpp	/^CEntInfo *EntityList::GetEntityInfoByIndex(int index) {$/;"	f	class:EntityList	typeref:typename:CEntInfo *
GetEntityInfoByName	src/Features/EntityList.cpp	/^CEntInfo *EntityList::GetEntityInfoByName(const char *name) {$/;"	f	class:EntityList	typeref:typename:CEntInfo *
GetEntryIndex	src/Utils/SDK.hpp	/^	inline int GetEntryIndex() const {$/;"	f	class:CBaseHandle	typeref:typename:int
GetEventDebugID	src/Features/Listener.cpp	/^int Listener::GetEventDebugID() {$/;"	f	class:Listener	typeref:typename:int
GetFastestStrafeAngle	src/Features/Tas/TasTools/StrafeTool.cpp	/^float AutoStrafeTool::GetFastestStrafeAngle(const TasPlayerInfo &player) {$/;"	f	class:AutoStrafeTool	typeref:typename:float
GetFlags	src/Variable.cpp	/^const int Variable::GetFlags() {$/;"	f	class:Variable	typeref:typename:const int
GetFloat	src/Variable.cpp	/^float Variable::GetFloat() {$/;"	f	class:Variable	typeref:typename:float
GetFollowTarget	src/Features/Demo/GhostEntity.cpp	/^GhostEntity *GhostEntity::GetFollowTarget() {$/;"	f	class:GhostEntity	typeref:typename:GhostEntity *
GetFont	src/Modules/Scheme.hpp	/^	_GetFont GetFont = nullptr;$/;"	m	class:Scheme	typeref:typename:_GetFont
GetFont	src/Offsets.cpp	/^	int GetFont;$/;"	v	namespace:Offsets	typeref:typename:int
GetFontByID	src/Modules/Scheme.cpp	/^unsigned long Scheme::GetFontByID(int id) {$/;"	f	class:Scheme	typeref:typename:unsigned long
GetFontHeight	src/Modules/Surface.cpp	/^int Surface::GetFontHeight(HFont font) {$/;"	f	class:Surface	typeref:typename:int
GetFontLength	src/Modules/Surface.cpp	/^int Surface::GetFontLength(HFont font, const char *fmt, ...) {$/;"	f	class:Surface	typeref:typename:int
GetFontName	src/Modules/Surface.hpp	/^	_GetFontName GetFontName = nullptr;$/;"	m	class:Surface	typeref:typename:_GetFontName
GetFontName	src/Offsets.cpp	/^	int GetFontName;$/;"	v	namespace:Offsets	typeref:typename:int
GetFontTall	src/Modules/Surface.hpp	/^	_GetFontTall GetFontTall = nullptr;$/;"	m	class:Surface	typeref:typename:_GetFontTall
GetFontTall	src/Offsets.cpp	/^	int GetFontTall;$/;"	v	namespace:Offsets	typeref:typename:int
GetForwardVector	src/Features/Camera.cpp	/^Vector Camera::GetForwardVector(int slot) {$/;"	f	class:Camera	typeref:typename:Vector
GetFrameBulkQueue	src/Features/Tas/TasPlayer.cpp	/^std::vector<TasFramebulk> TasPlayer::GetFrameBulkQueue(int slot) {$/;"	f	class:TasPlayer	typeref:typename:std::vector<TasFramebulk>
GetGameDirectory	src/Modules/Engine.hpp	/^	_GetGameDirectory GetGameDirectory = nullptr;$/;"	m	class:Engine	typeref:typename:_GetGameDirectory
GetGameDirectory	src/Offsets.cpp	/^	int GetGameDirectory;$/;"	v	namespace:Offsets	typeref:typename:int
GetGhostByID	src/Features/Demo/DemoGhostPlayer.cpp	/^DemoGhostEntity *DemoGhostPlayer::GetGhostByID(int ID) {$/;"	f	class:DemoGhostPlayer	typeref:typename:DemoGhostEntity *
GetGhostByID	src/Features/Demo/NetworkGhostPlayer.cpp	/^std::shared_ptr<GhostEntity> NetworkManager::GetGhostByID(sf::Uint32 ID) {$/;"	f	class:NetworkManager	typeref:typename:std::shared_ptr<GhostEntity>
GetGroundFrictionVelocity	src/Features/Tas/TasTools/StrafeTool.cpp	/^Vector AutoStrafeTool::GetGroundFrictionVelocity(const TasPlayerInfo &player) {$/;"	f	class:AutoStrafeTool	typeref:typename:Vector
GetHandlers	src/Event.cpp	/^std::vector<SarInitHandler *> &SarInitHandler::GetHandlers() {$/;"	f	class:SarInitHandler	typeref:typename:std::vector<SarInitHandler * > &
GetHeight	src/Features/Demo/GhostRenderer.cpp	/^float GhostRenderer::GetHeight() {$/;"	f	class:GhostRenderer	typeref:typename:float
GetHostFrameTime	src/Modules/Engine.cpp	/^float Engine::GetHostFrameTime() {$/;"	f	class:Engine	typeref:typename:float
GetHud	src/Offsets.cpp	/^	int GetHud;$/;"	v	namespace:Offsets	typeref:typename:int
GetIScheme	src/Offsets.cpp	/^	int GetIScheme;$/;"	v	namespace:Offsets	typeref:typename:int
GetIServerEntity	src/Offsets.cpp	/^	int GetIServerEntity;$/;"	v	namespace:Offsets	typeref:typename:int
GetInt	src/Variable.cpp	/^int Variable::GetInt() {$/;"	f	class:Variable	typeref:typename:int
GetKernedCharWidth	src/Modules/Surface.hpp	/^	_GetKernedCharWidth GetKernedCharWidth = nullptr;$/;"	m	class:Surface	typeref:typename:_GetKernedCharWidth
GetKernedCharWidth	src/Offsets.cpp	/^	int GetKernedCharWidth;$/;"	v	namespace:Offsets	typeref:typename:int
GetLODLevel	src/Features/Demo/GhostRenderer.cpp	/^int GhostRenderer::GetLODLevel() {$/;"	f	class:GhostRenderer	typeref:typename:int
GetLevelName	src/Modules/EngineDemoPlayer.cpp	/^std::string EngineDemoPlayer::GetLevelName() {$/;"	f	class:EngineDemoPlayer	typeref:typename:std::string
GetLevelNameShort	src/Modules/Engine.hpp	/^	_GetLevelNameShort GetLevelNameShort = nullptr;$/;"	m	class:Engine	typeref:typename:_GetLevelNameShort
GetLevelNameShort	src/Offsets.cpp	/^	int GetLevelNameShort;$/;"	v	namespace:Offsets	typeref:typename:int
GetLightForPoint	src/Modules/Engine.hpp	/^	_GetLightForPoint GetLightForPoint = nullptr;$/;"	m	class:Engine	typeref:typename:_GetLightForPoint
GetLightForPoint	src/Offsets.cpp	/^	int GetLightForPoint;$/;"	v	namespace:Offsets	typeref:typename:int
GetLines	src/Modules/Tier1.cpp	/^	std::vector<std::string> GetLines(const char *msg) {$/;"	f	class:ConsoleDisplayHook	typeref:typename:std::vector<std::string>	file:
GetList	src/Command.cpp	/^std::vector<Command *> &Command::GetList() {$/;"	f	class:Command	typeref:typename:std::vector<Command * > &
GetList	src/Features/Hud/Hud.cpp	/^std::vector<Hud *> &Hud::GetList() {$/;"	f	class:Hud	typeref:typename:std::vector<Hud * > &
GetList	src/Features/Hud/Hud.cpp	/^std::vector<HudElement *> &HudElement::GetList() {$/;"	f	class:HudElement	typeref:typename:std::vector<HudElement * > &
GetList	src/Features/Tas/TasTool.cpp	/^std::list<TasTool *> &TasTool::GetList(int slot) {$/;"	f	class:TasTool	typeref:typename:std::list<TasTool * > &
GetList	src/Variable.cpp	/^std::vector<Variable *> &Variable::GetList() {$/;"	f	class:Variable	typeref:typename:std::vector<Variable * > &
GetLocalClient	src/Modules/Engine.hpp	/^	_GetLocalClient GetLocalClient = nullptr;$/;"	m	class:Engine	typeref:typename:_GetLocalClient
GetLocalClient	src/Offsets.cpp	/^	int GetLocalClient;$/;"	v	namespace:Offsets	typeref:typename:int
GetLocalPlayer	src/Modules/Engine.hpp	/^	_GetLocalPlayer GetLocalPlayer = nullptr;$/;"	m	class:Engine	typeref:typename:_GetLocalPlayer
GetLocalPlayer	src/Offsets.cpp	/^	int GetLocalPlayer;$/;"	v	namespace:Offsets	typeref:typename:int
GetLocalPlayerIndex	src/Modules/Engine.cpp	/^int Engine::GetLocalPlayerIndex() {$/;"	f	class:Engine	typeref:typename:int
GetLocation	src/Features/Teleporter.cpp	/^TeleportLocation &Teleporter::GetLocation(int slot) {$/;"	f	class:Teleporter	typeref:typename:TeleportLocation &
GetMapIndex	src/Modules/Engine.cpp	/^int Engine::GetMapIndex(const std::string map) {$/;"	f	class:Engine	typeref:typename:int
GetMaxAccel	src/Features/Tas/TasTools/StrafeTool.cpp	/^float AutoStrafeTool::GetMaxAccel(const TasPlayerInfo &player, Vector wishDir) {$/;"	f	class:AutoStrafeTool	typeref:typename:float
GetMaxClients	src/Modules/Engine.hpp	/^	_GetMaxClients GetMaxClients = nullptr;$/;"	m	class:Engine	typeref:typename:_GetMaxClients
GetMaxClients	src/Offsets.cpp	/^	int GetMaxClients;$/;"	v	namespace:Offsets	typeref:typename:int
GetMaxSpeed	src/Features/Tas/TasTools/StrafeTool.cpp	/^float AutoStrafeTool::GetMaxSpeed(const TasPlayerInfo &player, Vector wishDir, bool notAired) {$/;"	f	class:AutoStrafeTool	typeref:typename:float
GetMemoryBlock	lib/minhook/buffer.c	/^static PMEMORY_BLOCK GetMemoryBlock(LPVOID pOrigin)$/;"	f	typeref:typename:PMEMORY_BLOCK	file:
GetModeHeight	src/Offsets.cpp	/^	int GetModeHeight;$/;"	v	namespace:Offsets	typeref:typename:int
GetModeWidth	src/Offsets.cpp	/^	int GetModeWidth;$/;"	v	namespace:Offsets	typeref:typename:int
GetModuleHandleByName	src/Utils/Memory.cpp	/^void *Memory::GetModuleHandleByName(const char *moduleName) {$/;"	f	class:Memory	typeref:typename:void *
GetModulePath	src/Utils/Memory.cpp	/^const char *Memory::GetModulePath(const char *moduleName) {$/;"	f	class:Memory	typeref:typename:const char *
GetMoveAnalog	src/Features/Tas/TasController.cpp	/^Vector TasController::GetMoveAnalog() {$/;"	f	class:TasController	typeref:typename:Vector
GetName	src/Features/Tas/TasTool.cpp	/^const char *TasTool::GetName() {$/;"	f	class:TasTool	typeref:typename:const char *
GetName	src/Offsets.cpp	/^	int GetName;$/;"	v	namespace:Offsets	typeref:typename:int
GetOpacity	src/Features/Demo/GhostEntity.cpp	/^float GhostEntity::GetOpacity() {$/;"	f	class:GhostEntity	typeref:typename:float
GetPaintPower	src/Offsets.cpp	/^	int GetPaintPower;$/;"	v	namespace:Offsets	typeref:typename:int
GetParameterValue	src/Features/Hud/InputHud.cpp	/^std::string InputHud::GetParameterValue(std::string name, std::string parameter) {$/;"	f	class:InputHud	typeref:typename:std::string
GetPlaybackTick	src/Modules/EngineDemoPlayer.hpp	/^	_GetPlaybackTick GetPlaybackTick = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:_GetPlaybackTick
GetPlaybackTick	src/Offsets.cpp	/^	int GetPlaybackTick;$/;"	v	namespace:Offsets	typeref:typename:int
GetPlayer	src/Modules/Client.cpp	/^void *Client::GetPlayer(int index) {$/;"	f	class:Client	typeref:typename:void *
GetPlayer	src/Modules/Server.cpp	/^void *Server::GetPlayer(int index) {$/;"	f	class:Server	typeref:typename:void *
GetPlayerInfo	src/Features/Tas/TasPlayer.cpp	/^TasPlayerInfo TasPlayer::GetPlayerInfo(void *player, CUserCmd *cmd) {$/;"	f	class:TasPlayer	typeref:typename:TasPlayerInfo
GetPlugin	src/SAR.cpp	/^bool SAR::GetPlugin() {$/;"	f	class:SAR	typeref:typename:bool
GetPluginDescription	src/SAR.cpp	/^const char *SAR::GetPluginDescription() {$/;"	f	class:SAR	typeref:typename:const char *
GetPortalUpgradeState	src/Features/Hud/Crosshair.cpp	/^int Crosshair::GetPortalUpgradeState() {$/;"	f	class:Crosshair	typeref:typename:int
GetPortalsShotByPlayer	src/Features/Hud/Crosshair.cpp	/^std::vector<IHandleEntity *> Crosshair::GetPortalsShotByPlayer() {$/;"	f	class:Crosshair	typeref:typename:std::vector<IHandleEntity * >
GetPortalsStates	src/Features/Hud/Crosshair.cpp	/^void Crosshair::GetPortalsStates(int &portalUpgradeState, bool &isBlueActive, bool &isOrangeActi/;"	f	class:Crosshair	typeref:typename:void
GetPosition	src/Features/Camera.cpp	/^Vector Camera::GetPosition(int slot) {$/;"	f	class:Camera	typeref:typename:Vector
GetPosition	src/Features/Hud/VphysHud.cpp	/^	_GetPosition GetPosition = Memory::VMT<_GetPosition>(m_pShadowStand, Offsets::GetPosition);$/;"	v	typeref:typename:_GetPosition
GetPosition	src/Offsets.cpp	/^	int GetPosition;$/;"	v	namespace:Offsets	typeref:typename:int
GetProcessName	src/Utils/Memory.cpp	/^std::string Memory::GetProcessName() {$/;"	f	class:Memory	typeref:typename:std::string
GetPtr	src/Interface.cpp	/^void *Interface::GetPtr(const char *filename, const char *interfaceSymbol) {$/;"	f	class:Interface	typeref:typename:void *
GetRawFramebulkAt	src/Features/Tas/TasPlayer.cpp	/^TasFramebulk TasPlayer::GetRawFramebulkAt(int slot, int tick) {$/;"	f	class:TasPlayer	typeref:typename:TasFramebulk
GetRecordingTick	src/Modules/EngineDemoRecorder.hpp	/^	_GetRecordingTick GetRecordingTick = nullptr;$/;"	m	class:EngineDemoRecorder	typeref:typename:_GetRecordingTick
GetRecordingTick	src/Offsets.cpp	/^	int GetRecordingTick;$/;"	v	namespace:Offsets	typeref:typename:int
GetRule	src/Features/Speedrun/Categories.cpp	/^SpeedrunRule *SpeedrunTimer::GetRule(std::string name) {$/;"	f	class:SpeedrunTimer	typeref:typename:SpeedrunRule *
GetSARPath	src/Utils.cpp	/^std::string Utils::GetSARPath() {$/;"	f	class:Utils	typeref:typename:std::string
GetSaveDirName	src/Modules/Engine.hpp	/^	_GetSaveDirName GetSaveDirName = nullptr;$/;"	m	class:Engine	typeref:typename:_GetSaveDirName
GetSaveDirName	src/Offsets.cpp	/^	int GetSaveDirName;$/;"	v	namespace:Offsets	typeref:typename:int
GetScreenHeight	src/Features/Renderer.cpp	/^static inline int GetScreenHeight() {$/;"	f	typeref:typename:int	file:
GetScreenSize	src/Modules/Engine.hpp	/^	_GetScreenSize GetScreenSize = nullptr;$/;"	m	class:Engine	typeref:typename:_GetScreenSize
GetScreenSize	src/Offsets.cpp	/^	int GetScreenSize;$/;"	v	namespace:Offsets	typeref:typename:int
GetScreenWidth	src/Features/Renderer.cpp	/^static inline int GetScreenWidth() {$/;"	f	typeref:typename:int	file:
GetSegmentTicks	src/Features/Speedrun/SpeedrunTimer.cpp	/^int SpeedrunTimer::GetSegmentTicks() {$/;"	f	class:SpeedrunTimer	typeref:typename:int
GetSerialNumber	src/Utils/SDK.hpp	/^	inline int GetSerialNumber() const {$/;"	f	class:CBaseHandle	typeref:typename:int
GetSplitScreenPlayerSlot	src/Modules/Client.cpp	/^int Client::GetSplitScreenPlayerSlot(void *entity) {$/;"	f	class:Client	typeref:typename:int
GetSplitScreenPlayerSlot	src/Modules/Server.cpp	/^int Server::GetSplitScreenPlayerSlot(void *entity) {$/;"	f	class:Server	typeref:typename:int
GetSplitTicks	src/Features/Speedrun/SpeedrunTimer.cpp	/^int SpeedrunTimer::GetSplitTicks() {$/;"	f	class:SpeedrunTimer	typeref:typename:int
GetStartTick	src/Features/Tas/TasPlayer.hpp	/^	inline int GetStartTick() const { return startTick; };$/;"	f	class:TasPlayer	typeref:typename:int
GetSteamAPIContext	src/Offsets.cpp	/^	int GetSteamAPIContext;$/;"	v	namespace:Offsets	typeref:typename:int
GetStrafeAngle	src/Features/Tas/TasTools/StrafeTool.cpp	/^float AutoStrafeTool::GetStrafeAngle(const TasPlayerInfo &player, AutoStrafeParams &params) {$/;"	f	class:AutoStrafeTool	typeref:typename:float
GetStrafeSync	src/Features/Stats/Sync.cpp	/^float Sync::GetStrafeSync(int slot) {$/;"	f	class:Sync	typeref:typename:float
GetString	src/Variable.cpp	/^const char *Variable::GetString() {$/;"	f	class:Variable	typeref:typename:const char *
GetSvar	src/Features/ConfigPlus.cpp	/^static std::string GetSvar(std::string name) {$/;"	f	typeref:typename:std::string	file:
GetSymbolAddress	src/Utils/Memory.hpp	/^	T GetSymbolAddress(void *moduleHandle, const char *symbolName) {$/;"	f	namespace:Memory	typeref:typename:T
GetTargetStrafeAngle	src/Features/Tas/TasTools/StrafeTool.cpp	/^float AutoStrafeTool::GetTargetStrafeAngle(const TasPlayerInfo &player, float targetSpeed) {$/;"	f	class:AutoStrafeTool	typeref:typename:float
GetTextColorForClient	src/Offsets.cpp	/^	int GetTextColorForClient;$/;"	v	namespace:Offsets	typeref:typename:int
GetTick	src/Features/Session.cpp	/^int Session::GetTick() {$/;"	f	class:Session	typeref:typename:int
GetTick	src/Features/Tas/TasPlayer.hpp	/^	inline int GetTick() const { return currentTick; };$/;"	f	class:TasPlayer	typeref:typename:int
GetTick	src/Features/Timer/Timer.cpp	/^int Timer::GetTick(int engineTick) {$/;"	f	class:Timer	typeref:typename:int
GetTick	src/Modules/Engine.cpp	/^int Engine::GetTick() {$/;"	f	class:Engine	typeref:typename:int
GetTick	src/Modules/EngineDemoPlayer.cpp	/^int EngineDemoPlayer::GetTick() {$/;"	f	class:EngineDemoPlayer	typeref:typename:int
GetTick	src/Modules/EngineDemoRecorder.cpp	/^int EngineDemoRecorder::GetTick() {$/;"	f	class:EngineDemoRecorder	typeref:typename:int
GetTicks	src/Modules/Engine.cpp	/^void Engine::GetTicks(int &host, int &server, int &client) {$/;"	f	class:Engine	typeref:typename:void
GetTotal	src/Features/Timer/PauseTimer.cpp	/^int PauseTimer::GetTotal() {$/;"	f	class:PauseTimer	typeref:typename:int
GetTotalTicks	src/Features/Speedrun/SpeedrunTimer.cpp	/^int SpeedrunTimer::GetTotalTicks() {$/;"	f	class:SpeedrunTimer	typeref:typename:int
GetTotalTime	src/Features/Demo/DemoGhostEntity.cpp	/^float DemoGhostEntity::GetTotalTime() {$/;"	f	class:DemoGhostEntity	typeref:typename:float
GetTrace	src/Features/PlayerTrace.cpp	/^Trace* PlayerTrace::GetTrace(const size_t trace_idx) {$/;"	f	class:PlayerTrace	typeref:typename:Trace *
GetTraceType	src/Utils/SDK.hpp	/^	virtual TraceType_t GetTraceType() const {$/;"	f	class:CTraceFilter	typeref:typename:TraceType_t
GetTurningDirection	src/Features/Tas/TasTools/StrafeTool.cpp	/^int AutoStrafeTool::GetTurningDirection(const TasPlayerInfo &pInfo, float desAngle) {$/;"	f	class:AutoStrafeTool	typeref:typename:int
GetTurningStrafeAngle	src/Features/Tas/TasTools/StrafeTool.cpp	/^float AutoStrafeTool::GetTurningStrafeAngle(const TasPlayerInfo &player) {$/;"	f	class:AutoStrafeTool	typeref:typename:float
GetVelocity	src/Features/Hud/VphysHud.cpp	/^	_GetVelocity GetVelocity = Memory::VMT<_GetVelocity>(m_pShadowStand, Offsets::GetVelocity);$/;"	v	typeref:typename:_GetVelocity
GetVelocity	src/Offsets.cpp	/^	int GetVelocity;$/;"	v	namespace:Offsets	typeref:typename:int
GetVelocityAfterMove	src/Features/Tas/TasTools/StrafeTool.cpp	/^Vector AutoStrafeTool::GetVelocityAfterMove(const TasPlayerInfo &player, float forwardMove, floa/;"	f	class:AutoStrafeTool	typeref:typename:Vector
GetVelocityAngles	src/Features/Tas/TasTools/TasUtils.cpp	/^Vector TasUtils::GetVelocityAngles(const TasPlayerInfo *pi) {$/;"	f	class:TasUtils	typeref:typename:Vector
GetVersion	src/Game.hpp	/^	inline SourceGameVersion GetVersion() { return this->version; }$/;"	f	class:Game	typeref:typename:SourceGameVersion
GetViewAnalog	src/Features/Tas/TasController.cpp	/^Vector TasController::GetViewAnalog() {$/;"	f	class:TasController	typeref:typename:Vector
GetViewAngles	src/Modules/Engine.hpp	/^	_GetViewAngles GetViewAngles = nullptr;$/;"	m	class:Engine	typeref:typename:_GetViewAngles
GetViewAngles	src/Offsets.cpp	/^	int GetViewAngles;$/;"	v	namespace:Offsets	typeref:typename:int
GhostEntity	src/Features/Demo/GhostEntity.cpp	/^GhostEntity::GhostEntity(unsigned int &ID, std::string &name, DataGhost &data, std::string &curr/;"	f	class:GhostEntity
GhostEntity	src/Features/Demo/GhostEntity.hpp	/^class GhostEntity {$/;"	c
GhostRenderer	src/Features/Demo/GhostRenderer.cpp	/^GhostRenderer::GhostRenderer() {$/;"	f	class:GhostRenderer
GhostRenderer	src/Features/Demo/GhostRenderer.hpp	/^class GhostRenderer {$/;"	c
GhostType	src/Features/Demo/GhostEntity.hpp	/^enum class GhostType {$/;"	g
GlobalEntity_GetIndex	src/Modules/Server.cpp	/^static int (*GlobalEntity_GetIndex)(const char *);$/;"	v	typeref:typename:int (*)(const char *)	file:
GlobalEntity_SetFlags	src/Modules/Server.cpp	/^static void (*GlobalEntity_SetFlags)(int, int);$/;"	v	typeref:typename:void (*)(int,int)	file:
GroundFramesCounter	src/Features/GroundFramesCounter.cpp	/^GroundFramesCounter::GroundFramesCounter() {$/;"	f	class:GroundFramesCounter
GroundFramesCounter	src/Features/GroundFramesCounter.hpp	/^class GroundFramesCounter : public Feature {$/;"	c
HASH_NUM_CHARACTERS	src/Utils/lodepng.cpp	/^static const unsigned HASH_NUM_CHARACTERS = 3;$/;"	v	typeref:typename:const unsigned	file:
HASH_NUM_VALUES	src/Utils/lodepng.cpp	/^static const unsigned HASH_NUM_VALUES = 65536;$/;"	v	typeref:typename:const unsigned	file:
HASH_SHIFT	src/Utils/lodepng.cpp	/^static const unsigned HASH_SHIFT = 2;$/;"	v	typeref:typename:const unsigned	file:
HAS_GAME_FLAG	src/Game.cpp	/^#define HAS_GAME_FLAG(/;"	d	file:
HAS_GAME_FLAGS	src/Game.cpp	/^#define HAS_GAME_FLAGS(/;"	d	file:
HDE	lib/minhook/trampoline.c	/^    typedef hde32s HDE;$/;"	t	typeref:typename:hde32s	file:
HDE	lib/minhook/trampoline.c	/^    typedef hde64s HDE;$/;"	t	typeref:typename:hde64s	file:
HDE_DISASM	lib/minhook/trampoline.c	/^    #define HDE_DISASM(/;"	d	file:
HEAD	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	e	enum:BENDY_GROUP	file:
HEADER	src/Features/Demo/NetworkGhostPlayer.hpp	/^enum class HEADER {$/;"	g
HEART_BEAT	src/Features/Demo/NetworkGhostPlayer.hpp	/^	HEART_BEAT,$/;"	e	enum:HEADER
HFont	src/Modules/Surface.hpp	/^	typedef unsigned long HFont;$/;"	t	class:Surface	typeref:typename:unsigned long
HOOK_ENTRY	lib/minhook/hook.c	/^} HOOK_ENTRY, *PHOOK_ENTRY;$/;"	t	typeref:struct:_HOOK_ENTRY	file:
HOSTSTATES	src/Utils/SDK.hpp	/^} HOSTSTATES;$/;"	t	typeref:enum:__anon21a65a740403
HSVToRGB	src/Utils.cpp	/^Color Utils::HSVToRGB(float H, float S, float V) {$/;"	f	class:Utils	typeref:typename:Color
HS_CHANGE_LEVEL_MP	src/Utils/SDK.hpp	/^	HS_CHANGE_LEVEL_MP = 3,$/;"	e	enum:__anon21a65a740403
HS_CHANGE_LEVEL_SP	src/Utils/SDK.hpp	/^	HS_CHANGE_LEVEL_SP = 2,$/;"	e	enum:__anon21a65a740403
HS_GAME_SHUTDOWN	src/Utils/SDK.hpp	/^	HS_GAME_SHUTDOWN = 5,$/;"	e	enum:__anon21a65a740403
HS_LOAD_GAME	src/Utils/SDK.hpp	/^	HS_LOAD_GAME = 1,$/;"	e	enum:__anon21a65a740403
HS_NEW_GAME	src/Utils/SDK.hpp	/^	HS_NEW_GAME = 0,$/;"	e	enum:__anon21a65a740403
HS_RESTART	src/Utils/SDK.hpp	/^	HS_RESTART = 7,$/;"	e	enum:__anon21a65a740403
HS_RUN	src/Utils/SDK.hpp	/^	HS_RUN = 4,$/;"	e	enum:__anon21a65a740403
HS_SHUTDOWN	src/Utils/SDK.hpp	/^	HS_SHUTDOWN = 6,$/;"	e	enum:__anon21a65a740403
HUD	doc/contributing.md	/^### HUD$/;"	S	section:SAR: Contributing Guide""Coding
HUD_ELEMENT	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT(/;"	d
HUD_ELEMENT2	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT2(/;"	d
HUD_ELEMENT2_NO_DISABLE	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT2_NO_DISABLE(/;"	d
HUD_ELEMENT2_NO_DISABLE	src/Features/PlayerTrace.cpp	/^HUD_ELEMENT2_NO_DISABLE(trace_draw_speed, HudType_InGame) {$/;"	f
HUD_ELEMENT3	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT3(/;"	d
HUD_ELEMENT_MODE	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_MODE(/;"	d
HUD_ELEMENT_MODE2	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_MODE2(/;"	d
HUD_ELEMENT_MODE3	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_MODE3(/;"	d
HUD_ELEMENT_NO_DISABLE	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_NO_DISABLE(/;"	d
HUD_ELEMENT_STRING	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_STRING(/;"	d
HUD_ELEMENT_STRING2	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_STRING2(/;"	d
HUD_ELEMENT_STRING3	src/Features/Hud/Hud.hpp	/^#define HUD_ELEMENT_STRING3(/;"	d
HandleGhostSay	src/Features/Demo/NetworkGhostPlayer.cpp	/^bool NetworkManager::HandleGhostSay(const char *msg) {$/;"	f	class:NetworkManager	typeref:typename:bool
HandleMovementFrame	src/Features/GroundFramesCounter.cpp	/^void GroundFramesCounter::HandleMovementFrame(int slot, bool grounded) {$/;"	f	class:GroundFramesCounter	typeref:typename:void
HandlePlaybackFix	src/Modules/EngineDemoPlayer.cpp	/^void EngineDemoPlayer::HandlePlaybackFix() {$/;"	f	class:EngineDemoPlayer	typeref:typename:void
HasElement	src/Features/Hud/InputHud.cpp	/^bool InputHud::HasElement(const char* elementName) {$/;"	f	class:InputHud	typeref:typename:bool
Hash	src/Utils/lodepng.cpp	/^typedef struct Hash {$/;"	s	file:
Hash	src/Utils/lodepng.cpp	/^} Hash;$/;"	t	typeref:struct:Hash	file:
Head	lib/SFML/include/SFML/Network/Http.hpp	/^            Head,  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
HelpMessage	lib/SFML/include/SFML/Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Hook	src/Command.cpp	/^bool Command::Hook(const char *name, _CommandCallback detour, _CommandCallback &original) {$/;"	f	class:Command	typeref:typename:bool
Hook	src/Hook.hpp	/^	Hook(T hook)$/;"	f	class:Hook
Hook	src/Hook.hpp	/^class Hook {$/;"	c
Hook	src/Interface.hpp	/^	bool Hook(T detour, U &original, int index) {$/;"	f	class:Interface	typeref:typename:bool
HookCompletion	src/Command.cpp	/^bool Command::HookCompletion(const char *name, _CommandCompletionCallback detour, _CommandComple/;"	f	class:Command	typeref:typename:bool
Hooked	src/Interface.hpp	/^	T Hooked(int index) {$/;"	f	class:Interface	typeref:typename:T
Hooking	doc/contributing.md	/^### Hooking$/;"	S	section:SAR: Contributing Guide""Coding
HostFrameTime	src/Modules/Engine.hpp	/^	_HostFrameTime HostFrameTime = nullptr;$/;"	m	class:Engine	typeref:typename:_HostFrameTime
HostFrameTime	src/Offsets.cpp	/^	int HostFrameTime;$/;"	v	namespace:Offsets	typeref:typename:int
HostState_OnClientConnected	src/Offsets.cpp	/^	int HostState_OnClientConnected;$/;"	v	namespace:Offsets	typeref:typename:int
HostTick	src/Offsets.cpp	/^	int HostTick;$/;"	v	namespace:Offsets	typeref:typename:int
Host_AccumulateTime	src/Modules/Engine.cpp	/^void (*Host_AccumulateTime)(float dt);$/;"	v	typeref:typename:void (*)(float dt)
Host_AccumulateTime_Detour	src/Modules/Engine.cpp	/^void Host_AccumulateTime_Detour(float dt) {$/;"	f	typeref:typename:void
Host_AccumulateTime_Hook	src/Modules/Engine.cpp	/^static Hook Host_AccumulateTime_Hook(&Host_AccumulateTime_Detour);$/;"	v	typeref:typename:Hook	file:
Http	lib/SFML/include/SFML/Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
Hud	src/Features/Hud/Hud.cpp	/^Hud::Hud(int type, bool drawSecondSplitScreen, int version)$/;"	f	class:Hud
Hud	src/Features/Hud/Hud.hpp	/^class Hud : public BaseHud {$/;"	c
HudContext	src/Features/Hud/Hud.hpp	/^class HudContext {$/;"	c
HudElement	src/Features/Hud/Hud.cpp	/^HudElement::HudElement(Variable *variable, _PaintCallback callback, int type, bool drawSecondSpl/;"	f	class:HudElement
HudElement	src/Features/Hud/Hud.cpp	/^HudElement::HudElement(Variable *variable, int type, bool drawSecondSplitScreen, int version)$/;"	f	class:HudElement
HudElement	src/Features/Hud/Hud.cpp	/^HudElement::HudElement(const char *name, _PaintCallback callback, int type, bool drawSecondSplit/;"	f	class:HudElement
HudElement	src/Features/Hud/Hud.hpp	/^class HudElement : public BaseHud {$/;"	c
HudModeElement	src/Features/Hud/Hud.cpp	/^HudModeElement::HudModeElement(Variable *variable, _PaintCallbackMode callback, int type, bool d/;"	f	class:HudModeElement
HudModeElement	src/Features/Hud/Hud.hpp	/^class HudModeElement : public HudElement {$/;"	c
HudProcessInput	src/Offsets.cpp	/^	int HudProcessInput;$/;"	v	namespace:Offsets	typeref:typename:int
HudSetPos_CompleteFunc	src/Features/Hud/Hud.cpp	/^int HudSetPos_CompleteFunc(const char *partial, char commands[COMMAND_COMPLETION_MAXITEMS][COMMA/;"	f	typeref:typename:int
HudStringElement	src/Features/Hud/Hud.cpp	/^HudStringElement::HudStringElement(Variable *variable, _PaintCallbackString callback, int type, /;"	f	class:HudStringElement
HudStringElement	src/Features/Hud/Hud.hpp	/^class HudStringElement : public HudElement {$/;"	c
HudType	src/Features/Hud/Hud.hpp	/^enum HudType {$/;"	g
HudType_InGame	src/Features/Hud/Hud.hpp	/^	HudType_InGame = (1 << 0),$/;"	e	enum:HudType
HudType_LoadingScreen	src/Features/Hud/Hud.hpp	/^	HudType_LoadingScreen = (1 << 3)$/;"	e	enum:HudType
HudType_Menu	src/Features/Hud/Hud.hpp	/^	HudType_Menu = (1 << 2),$/;"	e	enum:HudType
HudType_NotSpecified	src/Features/Hud/Hud.hpp	/^	HudType_NotSpecified = 0,$/;"	e	enum:HudType
HudType_Paused	src/Features/Hud/Hud.hpp	/^	HudType_Paused = (1 << 1),$/;"	e	enum:HudType
HuffmanTree	src/Utils/lodepng.cpp	/^typedef struct HuffmanTree {$/;"	s	file:
HuffmanTree	src/Utils/lodepng.cpp	/^} HuffmanTree;$/;"	t	typeref:struct:HuffmanTree	file:
HuffmanTree_cleanup	src/Utils/lodepng.cpp	/^static void HuffmanTree_cleanup(HuffmanTree *tree) {$/;"	f	typeref:typename:void	file:
HuffmanTree_getCode	src/Utils/lodepng.cpp	/^static unsigned HuffmanTree_getCode(const HuffmanTree *tree, unsigned index) {$/;"	f	typeref:typename:unsigned	file:
HuffmanTree_getLength	src/Utils/lodepng.cpp	/^static unsigned HuffmanTree_getLength(const HuffmanTree *tree, unsigned index) {$/;"	f	typeref:typename:unsigned	file:
HuffmanTree_init	src/Utils/lodepng.cpp	/^static void HuffmanTree_init(HuffmanTree *tree) {$/;"	f	typeref:typename:void	file:
HuffmanTree_make2DTree	src/Utils/lodepng.cpp	/^static unsigned HuffmanTree_make2DTree(HuffmanTree *tree) {$/;"	f	typeref:typename:unsigned	file:
HuffmanTree_makeFromFrequencies	src/Utils/lodepng.cpp	/^static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree *tree, const unsigned *frequencies, /;"	f	typeref:typename:unsigned	file:
HuffmanTree_makeFromLengths	src/Utils/lodepng.cpp	/^static unsigned HuffmanTree_makeFromLengths(HuffmanTree *tree, const unsigned *bitlen, size_t nu/;"	f	typeref:typename:unsigned	file:
HuffmanTree_makeFromLengths2	src/Utils/lodepng.cpp	/^static unsigned HuffmanTree_makeFromLengths2(HuffmanTree *tree) {$/;"	f	typeref:typename:unsigned	file:
ICompare	src/Utils.cpp	/^bool Utils::ICompare(const std::string &a, const std::string &b) {$/;"	f	class:Utils	typeref:typename:bool
IConVar	src/Utils/SDK.hpp	/^class IConVar {$/;"	c
IConsoleDisplayFunc	src/Utils/SDK.hpp	/^class IConsoleDisplayFunc {$/;"	c
ID	src/Features/Demo/DemoGhostPlayer.cpp	/^	sf::Uint32 ID = args.ArgC() > 2 ? std::atoi(args[2]) : 0;$/;"	v	typeref:typename:sf::Uint32
ID	src/Features/Demo/DemoGhostPlayer.cpp	/^	sf::Uint32 ID = args.ArgC() > 3 ? std::atoi(args[3]) : 0;$/;"	v	typeref:typename:sf::Uint32
ID	src/Features/Demo/DemoGhostPlayer.cpp	/^	unsigned int ID = args.ArgC() > 2 ? std::atoi(args[2]) : 0;$/;"	v	typeref:typename:unsigned int
ID	src/Features/Demo/GhostEntity.hpp	/^	unsigned int ID;$/;"	m	class:GhostEntity	typeref:typename:unsigned int
ID	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::Uint32 ID;$/;"	m	class:NetworkManager	typeref:typename:sf::Uint32
IDFT_C2R	lib/ffmpeg/include/libavcodec/avfft.h	/^    IDFT_C2R,$/;"	e	enum:RDFTransformType
IDFT_R2C	lib/ffmpeg/include/libavcodec/avfft.h	/^    IDFT_R2C,$/;"	e	enum:RDFTransformType
IGNORE_DEMO_PLAYER	src/Modules/Engine.hpp	/^#define IGNORE_DEMO_PLAYER(/;"	d
IGameEvent	src/Utils/SDK.hpp	/^class IGameEvent {$/;"	c
IGameEventListener2	src/Utils/SDK.hpp	/^class IGameEventListener2 {$/;"	c
IHandleEntity	src/Utils/SDK.hpp	/^class IHandleEntity {$/;"	c
ILoggingListener	src/Utils/SDK.hpp	/^class ILoggingListener {$/;"	c
IMAGE_FORMAT_A8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_A8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_ABGR8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_ABGR8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_ARGB8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_ARGB8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_ATI1N	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_ATI1N,  \/\/ Two-surface ATI1N format$/;"	e	enum:ImageFormat
IMAGE_FORMAT_ATI2N	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_ATI2N,  \/\/ One-surface ATI2N \/ DXN format$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGR565	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGR565,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGR888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGR888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGR888_BLUESCREEN	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGR888_BLUESCREEN,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGRA1010102	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGRA1010102,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGRA4444	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGRA4444,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGRA5551	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGRA5551,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGRA8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGRA8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGRX5551	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGRX5551,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_BGRX8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_BGRX8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D15S1	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D15S1,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D16	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D16,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D16_SHADOW	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D16_SHADOW,    \/\/ Specific formats for shadow mapping$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D24FS8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D24FS8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D24S8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D24S8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D24X4S4	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D24X4S4,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D24X8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D24X8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D24X8_SHADOW	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D24X8_SHADOW,  \/\/ Specific formats for shadow mapping$/;"	e	enum:ImageFormat
IMAGE_FORMAT_D32	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_D32,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_DEFAULT	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DEFAULT = -2,  \/\/ Use this image format if you want to perform tool operations o/;"	e	enum:ImageFormat
IMAGE_FORMAT_DXT1	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DXT1,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_DXT1_ONEBITALPHA	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DXT1_ONEBITALPHA,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_DXT1_RUNTIME	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DXT1_RUNTIME,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_DXT3	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DXT3,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_DXT5	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DXT5,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_DXT5_RUNTIME	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_DXT5_RUNTIME,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_I8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_I8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_IA88	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_IA88,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_INTZ	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_INTZ,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LE_BGRA8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LE_BGRA8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LE_BGRX8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LE_BGRX8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_A8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_A8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_ABGR8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_ABGR8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_ARGB8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_ARGB8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_BGR888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_BGR888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_BGRA8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_BGRA8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_BGRX5551	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_BGRX5551,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_BGRX8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_BGRX8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_D24S8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_D24S8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_DXT1	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_DXT1,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_DXT3	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_DXT3,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_DXT5	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_DXT5,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_I8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_I8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_RGB888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_RGB888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_RGBA16161616	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_RGBA16161616,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_LINEAR_RGBA8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_LINEAR_RGBA8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_NULL	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_NULL,  \/\/ Dummy format which takes no video memory$/;"	e	enum:ImageFormat
IMAGE_FORMAT_P8	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_P8,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_R16F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_R16F,  \/\/ 16 bit FP format$/;"	e	enum:ImageFormat
IMAGE_FORMAT_R32F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_R32F,        \/\/ Single-channel 32-bit floating point$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RG1616F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RG1616F,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RG3232F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RG3232F,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGB323232F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGB323232F,  \/\/ NOTE: D3D9 does not have this format$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGB565	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGB565,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGB888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGB888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGB888_BLUESCREEN	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGB888_BLUESCREEN,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGBA1010102	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGBA1010102,  \/\/ 10 bit-per component render targets$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGBA16161616	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGBA16161616,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGBA16161616F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGBA16161616F,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGBA32323232F	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGBA32323232F,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGBA8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGBA8888 = 0,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_RGBX8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_RGBX8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_UNKNOWN	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_UNKNOWN = -1,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_UV88	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_UV88,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_UVLX8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_UVLX8888,$/;"	e	enum:ImageFormat
IMAGE_FORMAT_UVWQ8888	src/Utils/SDK.hpp	/^	IMAGE_FORMAT_UVWQ8888,$/;"	e	enum:ImageFormat
INDEXENT	src/Utils/SDK.cpp	/^inline edict_t *INDEXENT(int iEdictNum) {$/;"	f	typeref:typename:edict_t *
INFINITY	lib/ffmpeg/include/libavutil/mathematics.h	/^#define INFINITY /;"	d
INITIAL_HOOK_CAPACITY	lib/minhook/hook.c	/^#define INITIAL_HOOK_CAPACITY /;"	d	file:
INITIAL_THREAD_CAPACITY	lib/minhook/hook.c	/^#define INITIAL_THREAD_CAPACITY /;"	d	file:
INRANGE	src/Utils/Memory.cpp	/^#define INRANGE(/;"	d	file:
INTEGER	src/Features/Tas/TasParser.cpp	/^		INTEGER,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
INTERFACEVERSION_ISERVERPLUGINCALLBACKS	src/Utils/SDK.hpp	/^#define INTERFACEVERSION_ISERVERPLUGINCALLBACKS /;"	d
INVALID_EHANDLE_INDEX	src/Offsets.cpp	/^	int INVALID_EHANDLE_INDEX;$/;"	v	namespace:Offsets	typeref:typename:int
INVALID_HOOK_POS	lib/minhook/hook.c	/^#define INVALID_HOOK_POS /;"	d	file:
INVALID_PAINT_POWER	src/Utils/SDK.hpp	/^	INVALID_PAINT_POWER$/;"	e	enum:PaintPowerType
INVALID_SOCKET	src/Features/Bot/BotServer.cpp	/^#	define INVALID_SOCKET /;"	d	file:
INVALID_SOCKET	src/Features/Tas/TasServer.cpp	/^#	define INVALID_SOCKET /;"	d	file:
IN_AIR_BOUNCED	src/Utils/SDK.hpp	/^	IN_AIR_BOUNCED,$/;"	e	enum:InAirState
IN_AIR_FELL	src/Utils/SDK.hpp	/^	IN_AIR_FELL$/;"	e	enum:InAirState
IN_AIR_JUMPED	src/Utils/SDK.hpp	/^	IN_AIR_JUMPED,$/;"	e	enum:InAirState
IN_ATTACK	src/Utils/SDK.hpp	/^#define IN_ATTACK /;"	d
IN_ATTACK2	src/Utils/SDK.hpp	/^#define IN_ATTACK2 /;"	d
IN_ActivateMouse	src/Modules/Client.hpp	/^	_IN_ActivateMouse IN_ActivateMouse = nullptr;$/;"	m	class:Client	typeref:typename:_IN_ActivateMouse
IN_ActivateMouse	src/Offsets.cpp	/^	int IN_ActivateMouse;$/;"	v	namespace:Offsets	typeref:typename:int
IN_BACK	src/Utils/SDK.hpp	/^#define IN_BACK /;"	d
IN_DUCK	src/Utils/SDK.hpp	/^#define IN_DUCK /;"	d
IN_DeactivateMouse	src/Modules/Client.hpp	/^	_IN_DeactivateMouse IN_DeactivateMouse = nullptr;$/;"	m	class:Client	typeref:typename:_IN_DeactivateMouse
IN_DeactivateMouse	src/Offsets.cpp	/^	int IN_DeactivateMouse;$/;"	v	namespace:Offsets	typeref:typename:int
IN_FORWARD	src/Utils/SDK.hpp	/^#define IN_FORWARD /;"	d
IN_JUMP	src/Utils/SDK.hpp	/^#define IN_JUMP /;"	d
IN_MOVELEFT	src/Utils/SDK.hpp	/^#define IN_MOVELEFT /;"	d
IN_MOVERIGHT	src/Utils/SDK.hpp	/^#define IN_MOVERIGHT /;"	d
IN_RELOAD	src/Utils/SDK.hpp	/^#define IN_RELOAD /;"	d
IN_SPEED	src/Utils/SDK.hpp	/^#define IN_SPEED /;"	d
IN_USE	src/Utils/SDK.hpp	/^#define IN_USE /;"	d
IN_ZOOM	src/Utils/SDK.hpp	/^#define IN_ZOOM /;"	d
IServerMessageHandler_VMT_Offset	src/Modules/Engine.hpp	/^#	define IServerMessageHandler_VMT_Offset /;"	d
IServerPluginCallbacks	src/Utils/SDK.hpp	/^class IServerPluginCallbacks {$/;"	c
ITraceFilter	src/Utils/SDK.hpp	/^class ITraceFilter {$/;"	c
ImageFormat	src/Utils/SDK.hpp	/^enum ImageFormat {$/;"	g
InAirState	src/Utils/SDK.hpp	/^enum InAirState {$/;"	g
InHostTicks	src/Scheduler.cpp	/^void Scheduler::InHostTicks(int ticks, std::function<void()> fn) {$/;"	f	class:Scheduler	typeref:typename:void
InServerTicks	src/Scheduler.cpp	/^void Scheduler::InServerTicks(int ticks, std::function<void()> fn) {$/;"	f	class:Scheduler	typeref:typename:void
Increment	src/Features/StepCounter.cpp	/^void StepCounter::Increment(int m_fFlags, int m_MoveType, Vector m_vecVelocity, int m_nWaterLeve/;"	f	class:StepCounter	typeref:typename:void
Increment	src/Features/Timer/PauseTimer.cpp	/^void PauseTimer::Increment() {$/;"	f	class:PauseTimer	typeref:typename:void
IncrementReset	src/Features/Stats/StatsCounter.cpp	/^void StatsCounter::IncrementReset(const float time) {$/;"	f	class:StatsCounter	typeref:typename:void
IncrementRunFinished	src/Features/Stats/StatsCounter.cpp	/^void StatsCounter::IncrementRunFinished(const float time) {$/;"	f	class:StatsCounter	typeref:typename:void
IndexAll	src/Features/Hud/Hud.cpp	/^void HudElement::IndexAll() {$/;"	f	class:HudElement	typeref:typename:void
Init	src/Cheats.cpp	/^void Cheats::Init() {$/;"	f	class:Cheats	typeref:typename:void
Init	src/CrashHandler.cpp	/^void CrashHandler::Init() {$/;"	f	class:CrashHandler	typeref:typename:void
Init	src/Features/Listener.cpp	/^void Listener::Init() {$/;"	f	class:Listener	typeref:typename:void
Init	src/Features/Renderer.cpp	/^void Renderer::Init(void **videomode) {$/;"	f	class:Renderer	typeref:typename:void
Init	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Init() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Init	src/Features/Stats/StatsCounter.cpp	/^void StatsCounter::Init() {$/;"	f	class:StatsCounter	typeref:typename:void
Init	src/Features/Stitcher.cpp	/^void Stitcher::Init(void **videomode) {$/;"	f	class:Stitcher	typeref:typename:void
Init	src/Modules/Client.cpp	/^bool Client::Init() {$/;"	f	class:Client	typeref:typename:bool
Init	src/Modules/Console.cpp	/^bool Console::Init() {$/;"	f	class:Console	typeref:typename:bool
Init	src/Modules/Engine.cpp	/^bool Engine::Init() {$/;"	f	class:Engine	typeref:typename:bool
Init	src/Modules/EngineDemoPlayer.cpp	/^bool EngineDemoPlayer::Init() {$/;"	f	class:EngineDemoPlayer	typeref:typename:bool
Init	src/Modules/EngineDemoRecorder.cpp	/^bool EngineDemoRecorder::Init() {$/;"	f	class:EngineDemoRecorder	typeref:typename:bool
Init	src/Modules/InputSystem.cpp	/^bool InputSystem::Init() {$/;"	f	class:InputSystem	typeref:typename:bool
Init	src/Modules/MaterialSystem.cpp	/^bool MaterialSystem::Init() {$/;"	f	class:MaterialSystem	typeref:typename:bool
Init	src/Modules/Scheme.cpp	/^bool Scheme::Init() {$/;"	f	class:Scheme	typeref:typename:bool
Init	src/Modules/Server.cpp	/^bool Server::Init() {$/;"	f	class:Server	typeref:typename:bool
Init	src/Modules/Surface.cpp	/^bool Surface::Init() {$/;"	f	class:Surface	typeref:typename:bool
Init	src/Modules/Tier1.cpp	/^bool Tier1::Init() {$/;"	f	class:Tier1	typeref:typename:bool
Init	src/Modules/VGui.cpp	/^bool VGui::Init() {$/;"	f	class:VGui	typeref:typename:bool
Init	src/Offsets.cpp	/^	int Init;$/;"	v	namespace:Offsets	typeref:typename:int
InitAcceptInputTrampoline	src/Modules/Server.cpp	/^static void InitAcceptInputTrampoline() {$/;"	f	typeref:typename:void	file:
InitAll	src/Modules/Module.cpp	/^void Modules::InitAll() {$/;"	f	class:Modules	typeref:typename:void
InitCMFlagHook	src/Modules/Server.cpp	/^static void InitCMFlagHook() {$/;"	f	typeref:typename:void	file:
InitCategories	src/Features/Speedrun/Categories.cpp	/^void SpeedrunTimer::InitCategories() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
InitMessageHandler	src/Features/Hud/Toasts.cpp	/^void ToastHud::InitMessageHandler() {$/;"	f	class:ToastHud	typeref:typename:void
InitPlayerRunCommandHook	src/Modules/Server.cpp	/^static void InitPlayerRunCommandHook() {$/;"	f	typeref:typename:void	file:
InitSARChecksum	src/Checksum.cpp	/^void InitSARChecksum() {$/;"	f	typeref:typename:void
InitSpeedrunCategoriesTo	src/Features/Speedrun/CategoriesPreset.cpp	/^void InitSpeedrunCategoriesTo(std::map<std::string, SpeedrunCategory> *cats, std::map<std::strin/;"	f	typeref:typename:void
InitializeBuffer	lib/minhook/buffer.c	/^VOID InitializeBuffer(VOID)$/;"	f	typeref:typename:VOID
InputHud	src/Features/Hud/InputHud.cpp	/^InputHud::InputHud()$/;"	f	class:InputHud
InputHud	src/Features/Hud/InputHud.hpp	/^class InputHud : public Hud {$/;"	c
InputHudElement	src/Features/Hud/InputHud.hpp	/^	struct InputHudElement {$/;"	s	class:InputHud
InputStream	lib/SFML/include/SFML/System/InputStream.hpp	/^class SFML_SYSTEM_API InputStream$/;"	c	namespace:sf
InputSystem	src/Modules/InputSystem.hpp	/^class InputSystem : public Module {$/;"	c
InspectionHud	src/Features/Hud/InspectionHud.cpp	/^InspectionHud::InspectionHud()$/;"	f	class:InspectionHud
InspectionHud	src/Features/Hud/InspectionHud.hpp	/^class InspectionHud : public Hud {$/;"	c
InspectionItem	src/Features/Routing/EntityInspector.hpp	/^struct InspectionItem {$/;"	s
InstallGlobalChangeCallback	src/Modules/Tier1.hpp	/^	_InstallGlobalChangeCallback InstallGlobalChangeCallback = nullptr;$/;"	m	class:Tier1	typeref:typename:_InstallGlobalChangeCallback
InstallGlobalChangeCallback	src/Offsets.cpp	/^	int InstallGlobalChangeCallback;$/;"	v	namespace:Offsets	typeref:typename:int
Installation	README.md	/^# Installation$/;"	c
InstantiateInterfaceFn	src/Utils/SDK.hpp	/^typedef void *(*InstantiateInterfaceFn)();$/;"	t	typeref:typename:void * (*)()
InsufficientStorageSpace	lib/SFML/include/SFML/Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient st/;"	e	enum:sf::Ftp::Response::Status
Int16	lib/SFML/include/SFML/Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf	typeref:typename:signed short
Int32	lib/SFML/include/SFML/Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf	typeref:typename:signed int
Int64	lib/SFML/include/SFML/Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf	typeref:typename:signed __int64
Int64	lib/SFML/include/SFML/Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf	typeref:typename:signed long long
Int8	lib/SFML/include/SFML/Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf	typeref:typename:signed char
Interface	src/Interface.cpp	/^Interface::Interface()$/;"	f	class:Interface
Interface	src/Interface.cpp	/^Interface::Interface(void *baseclass, bool copyVtable, bool autoHook)$/;"	f	class:Interface
Interface	src/Interface.hpp	/^class Interface {$/;"	c
InterfaceReg	src/Utils/SDK.hpp	/^	InterfaceReg(InstantiateInterfaceFn fn, const char *pName)$/;"	f	struct:InterfaceReg
InterfaceReg	src/Utils/SDK.hpp	/^struct InterfaceReg {$/;"	s
Interfaces	doc/contributing.md	/^### Interfaces$/;"	S	section:SAR: Contributing Guide""Coding
InternalServerError	lib/SFML/include/SFML/Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InternalSetFloatValue	src/Offsets.cpp	/^	int InternalSetFloatValue;$/;"	v	namespace:Offsets	typeref:typename:int
InternalSetIntValue	src/Offsets.cpp	/^	int InternalSetIntValue;$/;"	v	namespace:Offsets	typeref:typename:int
InternalSetValue	src/Offsets.cpp	/^	int InternalSetValue;$/;"	v	namespace:Offsets	typeref:typename:int
InterpolateCurve	src/Features/Camera.cpp	/^float InterpolateCurve(std::vector<Vector> points, float x, bool dealingWithAngles = false) {$/;"	f	typeref:typename:float
InterpolateStates	src/Features/Camera.cpp	/^CameraState Camera::InterpolateStates(float time) {$/;"	f	class:Camera	typeref:typename:CameraState
IntervalPerTick	src/Features/Demo/Demo.cpp	/^float Demo::IntervalPerTick() {$/;"	f	class:Demo	typeref:typename:float
InvalidFile	lib/SFML/include/SFML/Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	lib/SFML/include/SFML/System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String	typeref:typename:const std::size_t
InvalidResponse	lib/SFML/include/SFML/Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	lib/SFML/include/SFML/Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	lib/SFML/include/SFML/Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
Is	src/Game.hpp	/^	inline bool Is(int game) { return this->version & game; }$/;"	f	class:Game	typeref:typename:bool
IsAcceptInputTrampolineInitialized	src/Modules/Server.cpp	/^static bool IsAcceptInputTrampolineInitialized = false;$/;"	v	typeref:typename:bool	file:
IsActive	src/Features/Tas/TasPlayer.hpp	/^	inline bool IsActive() const { return active; };$/;"	f	class:TasPlayer	typeref:typename:bool
IsActive	src/Features/Timer/PauseTimer.cpp	/^bool PauseTimer::IsActive() {$/;"	f	class:PauseTimer	typeref:typename:bool
IsAdvancing	src/Modules/Engine.cpp	/^bool Engine::IsAdvancing() {$/;"	f	class:Engine	typeref:typename:bool
IsAsleep	src/Offsets.cpp	/^	int IsAsleep;$/;"	v	namespace:Offsets	typeref:typename:int
IsBeingFollowed	src/Features/Demo/GhostEntity.cpp	/^bool GhostEntity::IsBeingFollowed() {$/;"	f	class:GhostEntity	typeref:typename:bool
IsButtonDown	src/Modules/InputSystem.hpp	/^	_IsButtonDown IsButtonDown = nullptr;$/;"	m	class:InputSystem	typeref:typename:_IsButtonDown
IsButtonDown	src/Offsets.cpp	/^	int IsButtonDown;$/;"	v	namespace:Offsets	typeref:typename:int
IsCodePadding	lib/minhook/trampoline.c	/^static BOOL IsCodePadding(LPBYTE pInst, UINT size)$/;"	f	typeref:typename:BOOL	file:
IsCollisionEnabled	src/Offsets.cpp	/^	int IsCollisionEnabled;$/;"	v	namespace:Offsets	typeref:typename:int
IsCommand	src/Offsets.cpp	/^	int IsCommand;$/;"	v	namespace:Offsets	typeref:typename:int
IsCommand	src/Utils/SDK.hpp	/^	virtual bool IsCommand() const { return false; }; \/\/ will get overwritten anyway lol$/;"	f	struct:ConCommandBase	typeref:typename:bool
IsCoop	src/Modules/Engine.cpp	/^bool Engine::IsCoop() {$/;"	f	class:Engine	typeref:typename:bool
IsCreating	src/Features/Routing/Ruler.cpp	/^bool RulerManager::IsCreating() {$/;"	f	class:RulerManager	typeref:typename:bool
IsDragEnabled	src/Offsets.cpp	/^	int IsDragEnabled;$/;"	v	namespace:Offsets	typeref:typename:int
IsDriving	src/Features/Camera.cpp	/^bool Camera::IsDriving() {$/;"	f	class:Camera	typeref:typename:bool
IsExecutableAddress	lib/minhook/buffer.c	/^BOOL IsExecutableAddress(LPVOID pAddress)$/;"	f	typeref:typename:BOOL
IsFontValid	src/Modules/Surface.cpp	/^bool Surface::IsFontValid(HFont font) {$/;"	f	class:Surface	typeref:typename:bool
IsFree	src/Utils/SDK.hpp	/^	inline bool IsFree() const {$/;"	f	struct:CBaseEdict	typeref:typename:bool
IsFullGame	src/Features/Demo/DemoGhostPlayer.cpp	/^bool DemoGhostPlayer::IsFullGame() {$/;"	f	class:DemoGhostPlayer	typeref:typename:bool
IsGamePaused	src/Modules/Engine.cpp	/^bool Engine::IsGamePaused() {$/;"	f	class:Engine	typeref:typename:bool
IsGameUIVisible	src/Modules/VGui.hpp	/^	_IsGameUIVisible IsGameUIVisible = nullptr;$/;"	m	class:VGui	typeref:typename:_IsGameUIVisible
IsGameUIVisible	src/Offsets.cpp	/^	int IsGameUIVisible;$/;"	v	namespace:Offsets	typeref:typename:int
IsGravityEnabled	src/Offsets.cpp	/^	int IsGravityEnabled;$/;"	v	namespace:Offsets	typeref:typename:int
IsKeyDown	src/Modules/InputSystem.cpp	/^bool InputSystem::IsKeyDown(ButtonCode_t key) {$/;"	f	class:InputSystem	typeref:typename:bool
IsMotionEnabled	src/Offsets.cpp	/^	int IsMotionEnabled;$/;"	v	namespace:Offsets	typeref:typename:int
IsNewline	src/Modules/Tier1.cpp	/^	bool IsNewline(const char *str) {$/;"	f	class:ConsoleDisplayHook	typeref:typename:bool	file:
IsOrange	src/Modules/Engine.cpp	/^bool Engine::IsOrange() {$/;"	f	class:Engine	typeref:typename:bool
IsPaused	src/Modules/Engine.hpp	/^	_IsPaused IsPaused = nullptr;$/;"	m	class:Engine	typeref:typename:_IsPaused
IsPaused	src/Modules/EngineDemoPlayer.cpp	/^bool EngineDemoPlayer::IsPaused() {$/;"	f	class:EngineDemoPlayer	typeref:typename:bool
IsPaused	src/Offsets.cpp	/^	int IsPaused;$/;"	v	namespace:Offsets	typeref:typename:int
IsPlaybackFixReady	src/Modules/EngineDemoPlayer.cpp	/^bool EngineDemoPlayer::IsPlaybackFixReady() {$/;"	f	class:EngineDemoPlayer	typeref:typename:bool
IsPlaybackPaused	src/Modules/EngineDemoPlayer.hpp	/^	_IsPlaybackPaused IsPlaybackPaused = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:_IsPlaybackPaused
IsPlaybackPaused	src/Offsets.cpp	/^	int IsPlaybackPaused;$/;"	v	namespace:Offsets	typeref:typename:int
IsPlayer	src/Modules/Server.cpp	/^bool Server::IsPlayer(void *entity) {$/;"	f	class:Server	typeref:typename:bool
IsPlayer	src/Offsets.cpp	/^	int IsPlayer;$/;"	v	namespace:Offsets	typeref:typename:int
IsPlaying	src/Features/Demo/DemoGhostPlayer.cpp	/^bool DemoGhostPlayer::IsPlaying() {$/;"	f	class:DemoGhostPlayer	typeref:typename:bool
IsPlaying	src/Modules/EngineDemoPlayer.cpp	/^bool EngineDemoPlayer::IsPlaying() {$/;"	f	class:EngineDemoPlayer	typeref:typename:bool
IsPlayingBack	src/Modules/EngineDemoPlayer.hpp	/^	_IsPlayingBack IsPlayingBack = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:_IsPlayingBack
IsPlayingBack	src/Offsets.cpp	/^	int IsPlayingBack;$/;"	v	namespace:Offsets	typeref:typename:int
IsRestoring	src/Modules/Server.hpp	/^	_IsRestoring IsRestoring = nullptr;$/;"	m	class:Server	typeref:typename:_IsRestoring
IsRestoring	src/Offsets.cpp	/^	int IsRestoring;$/;"	v	namespace:Offsets	typeref:typename:int
IsRunning	src/Features/Routing/EntityInspector.cpp	/^bool EntityInspector::IsRunning() {$/;"	f	class:EntityInspector	typeref:typename:bool
IsRunning	src/Features/Speedrun/SpeedrunTimer.cpp	/^bool SpeedrunTimer::IsRunning() {$/;"	f	class:SpeedrunTimer	typeref:typename:bool
IsRunning	src/Features/Tas/TasPlayer.hpp	/^	inline bool IsRunning() const { return active && startTick != -1; }$/;"	f	class:TasPlayer	typeref:typename:bool
IsRunningSimulation	src/Offsets.cpp	/^	int IsRunningSimulation;$/;"	v	namespace:Offsets	typeref:typename:int
IsServerPaused	src/Modules/Engine.hpp	/^	_IsServerPaused IsServerPaused = nullptr;$/;"	m	class:Engine	typeref:typename:_IsServerPaused
IsServerPaused	src/Offsets.cpp	/^	int IsServerPaused;$/;"	v	namespace:Offsets	typeref:typename:int
IsSkipping	src/Modules/Engine.cpp	/^bool Engine::IsSkipping() {$/;"	f	class:Engine	typeref:typename:bool
IsSkipping	src/Modules/EngineDemoPlayer.cpp	/^bool EngineDemoPlayer::IsSkipping() {$/;"	f	class:EngineDemoPlayer	typeref:typename:bool
IsSkipping	src/Offsets.cpp	/^	int IsSkipping;$/;"	v	namespace:Offsets	typeref:typename:int
IsSkipping_	src/Modules/EngineDemoPlayer.hpp	/^	_IsSkipping IsSkipping_ = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:_IsSkipping
IsSurfacePortalable	src/Features/Hud/Crosshair.cpp	/^bool Crosshair::IsSurfacePortalable() {$/;"	f	class:Crosshair	typeref:typename:bool
IsSyncing	src/Features/Demo/NetworkGhostPlayer.cpp	/^bool NetworkManager::IsSyncing() {$/;"	f	class:NetworkManager	typeref:typename:bool
IsTaunting	src/Features/Tas/TasPlayer.cpp	/^static bool IsTaunting(void *player, bool client = false) {$/;"	f	typeref:typename:bool	file:
IsTextureIDValid	src/Modules/Surface.hpp	/^	_IsTextureIDValid IsTextureIDValid = nullptr;$/;"	m	class:Surface	typeref:typename:_IsTextureIDValid
IsTextureIDValid	src/Offsets.cpp	/^	int IsTextureIDValid;$/;"	v	namespace:Offsets	typeref:typename:int
IsUIVisible	src/Modules/VGui.cpp	/^bool VGui::IsUIVisible() {$/;"	f	class:VGui	typeref:typename:bool
IsUsingTools	src/Features/Tas/TasPlayer.hpp	/^	inline bool IsUsingTools(int slot) const {$/;"	f	class:TasPlayer	typeref:typename:bool
IsValidParameter	src/Features/Hud/InputHud.cpp	/^bool InputHud::IsValidParameter(const char* param) {$/;"	f	class:InputHud	typeref:typename:bool
Iterator	lib/SFML/include/SFML/System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::iterator
JCC_ABS	lib/minhook/trampoline.h	/^} JCC_ABS;$/;"	t	typeref:struct:_JCC_ABS
JCC_REL	lib/minhook/trampoline.h	/^} JCC_REL;$/;"	t	typeref:struct:_JCC_REL
JMP_ABS	lib/minhook/trampoline.h	/^} JMP_ABS, *PJMP_ABS;$/;"	t	typeref:struct:_JMP_ABS
JMP_REL	lib/minhook/trampoline.h	/^} JMP_REL, *PJMP_REL, CALL_REL;$/;"	t	typeref:struct:_JMP_REL
JMP_REL_SHORT	lib/minhook/trampoline.h	/^} JMP_REL_SHORT, *PJMP_REL_SHORT;$/;"	t	typeref:struct:_JMP_REL_SHORT
JOYSTICK_AXIS_BUTTON	src/Modules/InputSystem.hpp	/^#define JOYSTICK_AXIS_BUTTON(/;"	d
JOYSTICK_AXIS_BUTTON_COUNT	src/Modules/InputSystem.hpp	/^	JOYSTICK_AXIS_BUTTON_COUNT = MAX_JOYSTICK_AXES * 2,$/;"	e	enum:__anon28d1728f0103
JOYSTICK_AXIS_BUTTON_INTERNAL	src/Modules/InputSystem.hpp	/^#define JOYSTICK_AXIS_BUTTON_INTERNAL(/;"	d
JOYSTICK_BUTTON	src/Modules/InputSystem.hpp	/^#define JOYSTICK_BUTTON(/;"	d
JOYSTICK_BUTTON_INTERNAL	src/Modules/InputSystem.hpp	/^#define JOYSTICK_BUTTON_INTERNAL(/;"	d
JOYSTICK_FIRST	src/Modules/InputSystem.hpp	/^	JOYSTICK_FIRST = MOUSE_LAST + 1,$/;"	e	enum:ButtonCode_t
JOYSTICK_FIRST_AXIS_BUTTON	src/Modules/InputSystem.hpp	/^	JOYSTICK_FIRST_AXIS_BUTTON,$/;"	e	enum:ButtonCode_t
JOYSTICK_FIRST_BUTTON	src/Modules/InputSystem.hpp	/^	JOYSTICK_FIRST_BUTTON = JOYSTICK_FIRST,$/;"	e	enum:ButtonCode_t
JOYSTICK_FIRST_POV_BUTTON	src/Modules/InputSystem.hpp	/^	JOYSTICK_FIRST_POV_BUTTON,$/;"	e	enum:ButtonCode_t
JOYSTICK_LAST	src/Modules/InputSystem.hpp	/^	JOYSTICK_LAST = JOYSTICK_LAST_AXIS_BUTTON,$/;"	e	enum:ButtonCode_t
JOYSTICK_LAST_AXIS_BUTTON	src/Modules/InputSystem.hpp	/^	JOYSTICK_LAST_AXIS_BUTTON = JOYSTICK_AXIS_BUTTON_INTERNAL(MAX_JOYSTICKS - 1, JOYSTICK_AXIS_BUTT/;"	e	enum:ButtonCode_t
JOYSTICK_LAST_BUTTON	src/Modules/InputSystem.hpp	/^	JOYSTICK_LAST_BUTTON = JOYSTICK_BUTTON_INTERNAL(MAX_JOYSTICKS - 1, JOYSTICK_MAX_BUTTON_COUNT - /;"	e	enum:ButtonCode_t
JOYSTICK_LAST_POV_BUTTON	src/Modules/InputSystem.hpp	/^	JOYSTICK_LAST_POV_BUTTON = JOYSTICK_POV_BUTTON_INTERNAL(MAX_JOYSTICKS - 1, JOYSTICK_POV_BUTTON_/;"	e	enum:ButtonCode_t
JOYSTICK_MAX_BUTTON_COUNT	src/Modules/InputSystem.hpp	/^	JOYSTICK_MAX_BUTTON_COUNT = 32,$/;"	e	enum:__anon28d1728f0103
JOYSTICK_POV_BUTTON	src/Modules/InputSystem.hpp	/^#define JOYSTICK_POV_BUTTON(/;"	d
JOYSTICK_POV_BUTTON_COUNT	src/Modules/InputSystem.hpp	/^	JOYSTICK_POV_BUTTON_COUNT = 4,$/;"	e	enum:__anon28d1728f0103
JOYSTICK_POV_BUTTON_INTERNAL	src/Modules/InputSystem.hpp	/^#define JOYSTICK_POV_BUTTON_INTERNAL(/;"	d
JOY_AXIS_R	src/Utils/SDK.hpp	/^	JOY_AXIS_R,$/;"	e	enum:JoystickAxis_t
JOY_AXIS_U	src/Utils/SDK.hpp	/^	JOY_AXIS_U,$/;"	e	enum:JoystickAxis_t
JOY_AXIS_V	src/Utils/SDK.hpp	/^	JOY_AXIS_V,$/;"	e	enum:JoystickAxis_t
JOY_AXIS_X	src/Utils/SDK.hpp	/^	JOY_AXIS_X = 0,$/;"	e	enum:JoystickAxis_t
JOY_AXIS_Y	src/Utils/SDK.hpp	/^	JOY_AXIS_Y,$/;"	e	enum:JoystickAxis_t
JOY_AXIS_Z	src/Utils/SDK.hpp	/^	JOY_AXIS_Z,$/;"	e	enum:JoystickAxis_t
JoyStickApplyMovement	src/Offsets.cpp	/^	int JoyStickApplyMovement;$/;"	v	namespace:Offsets	typeref:typename:int
JoystickAxis_t	src/Utils/SDK.hpp	/^enum JoystickAxis_t {$/;"	g
Json	src/Utils/json11.cpp	/^	Json::Json() noexcept$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(Json::array &&values)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(Json::object &&values)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(bool value)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(const Json::array &values)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(const Json::object &values)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(const char *value)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(const string &value)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(double value)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(int value)$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(std::nullptr_t) noexcept$/;"	f	class:json11::Json
Json	src/Utils/json11.cpp	/^	Json::Json(string &&value)$/;"	f	class:json11::Json
Json	src/Utils/json11.hpp	/^		Json(const M &m)$/;"	f	class:json11::Json
Json	src/Utils/json11.hpp	/^		Json(const T &t)$/;"	f	class:json11::Json
Json	src/Utils/json11.hpp	/^		Json(const V &v)$/;"	f	class:json11::Json
Json	src/Utils/json11.hpp	/^	class Json final {$/;"	c	namespace:json11
JsonArray	src/Utils/json11.cpp	/^		explicit JsonArray(Json::array &&value)$/;"	f	class:json11::JsonArray	file:
JsonArray	src/Utils/json11.cpp	/^		explicit JsonArray(const Json::array &value)$/;"	f	class:json11::JsonArray	file:
JsonArray	src/Utils/json11.cpp	/^	class JsonArray final : public Value<Json::ARRAY, Json::array> {$/;"	c	namespace:json11	file:
JsonBoolean	src/Utils/json11.cpp	/^		explicit JsonBoolean(bool value)$/;"	f	class:json11::JsonBoolean	file:
JsonBoolean	src/Utils/json11.cpp	/^	class JsonBoolean final : public Value<Json::BOOL, bool> {$/;"	c	namespace:json11	file:
JsonDouble	src/Utils/json11.cpp	/^		explicit JsonDouble(double value)$/;"	f	class:json11::JsonDouble	file:
JsonDouble	src/Utils/json11.cpp	/^	class JsonDouble final : public Value<Json::NUMBER, double> {$/;"	c	namespace:json11	file:
JsonInt	src/Utils/json11.cpp	/^		explicit JsonInt(int value)$/;"	f	class:json11::JsonInt	file:
JsonInt	src/Utils/json11.cpp	/^	class JsonInt final : public Value<Json::NUMBER, int> {$/;"	c	namespace:json11	file:
JsonNull	src/Utils/json11.cpp	/^		JsonNull()$/;"	f	class:json11::JsonNull	file:
JsonNull	src/Utils/json11.cpp	/^	class JsonNull final : public Value<Json::NUL, NullStruct> {$/;"	c	namespace:json11	file:
JsonObject	src/Utils/json11.cpp	/^		explicit JsonObject(Json::object &&value)$/;"	f	class:json11::JsonObject	file:
JsonObject	src/Utils/json11.cpp	/^		explicit JsonObject(const Json::object &value)$/;"	f	class:json11::JsonObject	file:
JsonObject	src/Utils/json11.cpp	/^	class JsonObject final : public Value<Json::OBJECT, Json::object> {$/;"	c	namespace:json11	file:
JsonParse	src/Utils/json11.hpp	/^	enum JsonParse {$/;"	g	namespace:json11
JsonParser	src/Utils/json11.cpp	/^		struct JsonParser final {$/;"	s	namespace:json11::__anon6c3a5fa90111	file:
JsonString	src/Utils/json11.cpp	/^		explicit JsonString(const string &value)$/;"	f	class:json11::JsonString	file:
JsonString	src/Utils/json11.cpp	/^		explicit JsonString(string &&value)$/;"	f	class:json11::JsonString	file:
JsonString	src/Utils/json11.cpp	/^	class JsonString final : public Value<Json::STRING, string> {$/;"	c	namespace:json11	file:
JsonValue	src/Utils/json11.hpp	/^	class JsonValue {$/;"	c	namespace:json11
Jump	src/Features/Tas/TasController.hpp	/^	Jump,$/;"	e	enum:TasControllerInput
JumpStats	src/Features/Stats/JumpStats.hpp	/^class JumpStats {$/;"	c
KEY_0	src/Modules/InputSystem.hpp	/^	KEY_0,$/;"	e	enum:ButtonCode_t
KEY_1	src/Modules/InputSystem.hpp	/^	KEY_1,$/;"	e	enum:ButtonCode_t
KEY_2	src/Modules/InputSystem.hpp	/^	KEY_2,$/;"	e	enum:ButtonCode_t
KEY_3	src/Modules/InputSystem.hpp	/^	KEY_3,$/;"	e	enum:ButtonCode_t
KEY_4	src/Modules/InputSystem.hpp	/^	KEY_4,$/;"	e	enum:ButtonCode_t
KEY_5	src/Modules/InputSystem.hpp	/^	KEY_5,$/;"	e	enum:ButtonCode_t
KEY_6	src/Modules/InputSystem.hpp	/^	KEY_6,$/;"	e	enum:ButtonCode_t
KEY_7	src/Modules/InputSystem.hpp	/^	KEY_7,$/;"	e	enum:ButtonCode_t
KEY_8	src/Modules/InputSystem.hpp	/^	KEY_8,$/;"	e	enum:ButtonCode_t
KEY_9	src/Modules/InputSystem.hpp	/^	KEY_9,$/;"	e	enum:ButtonCode_t
KEY_A	src/Modules/InputSystem.hpp	/^	KEY_A,$/;"	e	enum:ButtonCode_t
KEY_APOSTROPHE	src/Modules/InputSystem.hpp	/^	KEY_APOSTROPHE,$/;"	e	enum:ButtonCode_t
KEY_APP	src/Modules/InputSystem.hpp	/^	KEY_APP,$/;"	e	enum:ButtonCode_t
KEY_B	src/Modules/InputSystem.hpp	/^	KEY_B,$/;"	e	enum:ButtonCode_t
KEY_BACKQUOTE	src/Modules/InputSystem.hpp	/^	KEY_BACKQUOTE,$/;"	e	enum:ButtonCode_t
KEY_BACKSLASH	src/Modules/InputSystem.hpp	/^	KEY_BACKSLASH,$/;"	e	enum:ButtonCode_t
KEY_BACKSPACE	src/Modules/InputSystem.hpp	/^	KEY_BACKSPACE,$/;"	e	enum:ButtonCode_t
KEY_BREAK	src/Modules/InputSystem.hpp	/^	KEY_BREAK,$/;"	e	enum:ButtonCode_t
KEY_C	src/Modules/InputSystem.hpp	/^	KEY_C,$/;"	e	enum:ButtonCode_t
KEY_CAPSLOCK	src/Modules/InputSystem.hpp	/^	KEY_CAPSLOCK,$/;"	e	enum:ButtonCode_t
KEY_CAPSLOCKTOGGLE	src/Modules/InputSystem.hpp	/^	KEY_CAPSLOCKTOGGLE,$/;"	e	enum:ButtonCode_t
KEY_COMMA	src/Modules/InputSystem.hpp	/^	KEY_COMMA,$/;"	e	enum:ButtonCode_t
KEY_COUNT	src/Modules/InputSystem.hpp	/^	KEY_COUNT = KEY_LAST - KEY_FIRST + 1,$/;"	e	enum:ButtonCode_t
KEY_D	src/Modules/InputSystem.hpp	/^	KEY_D,$/;"	e	enum:ButtonCode_t
KEY_DELETE	src/Modules/InputSystem.hpp	/^	KEY_DELETE,$/;"	e	enum:ButtonCode_t
KEY_DOWN	src/Modules/InputSystem.hpp	/^	KEY_DOWN,$/;"	e	enum:ButtonCode_t
KEY_E	src/Modules/InputSystem.hpp	/^	KEY_E,$/;"	e	enum:ButtonCode_t
KEY_END	src/Modules/InputSystem.hpp	/^	KEY_END,$/;"	e	enum:ButtonCode_t
KEY_ENTER	src/Modules/InputSystem.hpp	/^	KEY_ENTER,$/;"	e	enum:ButtonCode_t
KEY_EQUAL	src/Modules/InputSystem.hpp	/^	KEY_EQUAL,$/;"	e	enum:ButtonCode_t
KEY_ESCAPE	src/Modules/InputSystem.hpp	/^	KEY_ESCAPE,$/;"	e	enum:ButtonCode_t
KEY_ESCAPE	src/Modules/InputSystem.hpp	/^#define KEY_ESCAPE /;"	d
KEY_F	src/Modules/InputSystem.hpp	/^	KEY_F,$/;"	e	enum:ButtonCode_t
KEY_F1	src/Modules/InputSystem.hpp	/^	KEY_F1,$/;"	e	enum:ButtonCode_t
KEY_F10	src/Modules/InputSystem.hpp	/^	KEY_F10,$/;"	e	enum:ButtonCode_t
KEY_F11	src/Modules/InputSystem.hpp	/^	KEY_F11,$/;"	e	enum:ButtonCode_t
KEY_F12	src/Modules/InputSystem.hpp	/^	KEY_F12,$/;"	e	enum:ButtonCode_t
KEY_F2	src/Modules/InputSystem.hpp	/^	KEY_F2,$/;"	e	enum:ButtonCode_t
KEY_F3	src/Modules/InputSystem.hpp	/^	KEY_F3,$/;"	e	enum:ButtonCode_t
KEY_F4	src/Modules/InputSystem.hpp	/^	KEY_F4,$/;"	e	enum:ButtonCode_t
KEY_F5	src/Modules/InputSystem.hpp	/^	KEY_F5,$/;"	e	enum:ButtonCode_t
KEY_F6	src/Modules/InputSystem.hpp	/^	KEY_F6,$/;"	e	enum:ButtonCode_t
KEY_F7	src/Modules/InputSystem.hpp	/^	KEY_F7,$/;"	e	enum:ButtonCode_t
KEY_F8	src/Modules/InputSystem.hpp	/^	KEY_F8,$/;"	e	enum:ButtonCode_t
KEY_F9	src/Modules/InputSystem.hpp	/^	KEY_F9,$/;"	e	enum:ButtonCode_t
KEY_FIRST	src/Modules/InputSystem.hpp	/^	KEY_FIRST = 0,$/;"	e	enum:ButtonCode_t
KEY_G	src/Modules/InputSystem.hpp	/^	KEY_G,$/;"	e	enum:ButtonCode_t
KEY_H	src/Modules/InputSystem.hpp	/^	KEY_H,$/;"	e	enum:ButtonCode_t
KEY_HOME	src/Modules/InputSystem.hpp	/^	KEY_HOME,$/;"	e	enum:ButtonCode_t
KEY_I	src/Modules/InputSystem.hpp	/^	KEY_I,$/;"	e	enum:ButtonCode_t
KEY_INSERT	src/Modules/InputSystem.hpp	/^	KEY_INSERT,$/;"	e	enum:ButtonCode_t
KEY_J	src/Modules/InputSystem.hpp	/^	KEY_J,$/;"	e	enum:ButtonCode_t
KEY_K	src/Modules/InputSystem.hpp	/^	KEY_K,$/;"	e	enum:ButtonCode_t
KEY_L	src/Modules/InputSystem.hpp	/^	KEY_L,$/;"	e	enum:ButtonCode_t
KEY_LALT	src/Modules/InputSystem.hpp	/^	KEY_LALT,$/;"	e	enum:ButtonCode_t
KEY_LAST	src/Modules/InputSystem.hpp	/^	KEY_LAST = KEY_SCROLLLOCKTOGGLE,$/;"	e	enum:ButtonCode_t
KEY_LBRACKET	src/Modules/InputSystem.hpp	/^	KEY_LBRACKET,$/;"	e	enum:ButtonCode_t
KEY_LCONTROL	src/Modules/InputSystem.hpp	/^	KEY_LCONTROL,$/;"	e	enum:ButtonCode_t
KEY_LEFT	src/Modules/InputSystem.hpp	/^	KEY_LEFT,$/;"	e	enum:ButtonCode_t
KEY_LSHIFT	src/Modules/InputSystem.hpp	/^	KEY_LSHIFT,$/;"	e	enum:ButtonCode_t
KEY_LWIN	src/Modules/InputSystem.hpp	/^	KEY_LWIN,$/;"	e	enum:ButtonCode_t
KEY_M	src/Modules/InputSystem.hpp	/^	KEY_M,$/;"	e	enum:ButtonCode_t
KEY_MINUS	src/Modules/InputSystem.hpp	/^	KEY_MINUS,$/;"	e	enum:ButtonCode_t
KEY_N	src/Modules/InputSystem.hpp	/^	KEY_N,$/;"	e	enum:ButtonCode_t
KEY_NONE	src/Modules/InputSystem.hpp	/^	KEY_NONE = KEY_FIRST,$/;"	e	enum:ButtonCode_t
KEY_NUMLOCK	src/Modules/InputSystem.hpp	/^	KEY_NUMLOCK,$/;"	e	enum:ButtonCode_t
KEY_NUMLOCKTOGGLE	src/Modules/InputSystem.hpp	/^	KEY_NUMLOCKTOGGLE,$/;"	e	enum:ButtonCode_t
KEY_O	src/Modules/InputSystem.hpp	/^	KEY_O,$/;"	e	enum:ButtonCode_t
KEY_P	src/Modules/InputSystem.hpp	/^	KEY_P,$/;"	e	enum:ButtonCode_t
KEY_PAD_0	src/Modules/InputSystem.hpp	/^	KEY_PAD_0,$/;"	e	enum:ButtonCode_t
KEY_PAD_1	src/Modules/InputSystem.hpp	/^	KEY_PAD_1,$/;"	e	enum:ButtonCode_t
KEY_PAD_2	src/Modules/InputSystem.hpp	/^	KEY_PAD_2,$/;"	e	enum:ButtonCode_t
KEY_PAD_3	src/Modules/InputSystem.hpp	/^	KEY_PAD_3,$/;"	e	enum:ButtonCode_t
KEY_PAD_4	src/Modules/InputSystem.hpp	/^	KEY_PAD_4,$/;"	e	enum:ButtonCode_t
KEY_PAD_5	src/Modules/InputSystem.hpp	/^	KEY_PAD_5,$/;"	e	enum:ButtonCode_t
KEY_PAD_6	src/Modules/InputSystem.hpp	/^	KEY_PAD_6,$/;"	e	enum:ButtonCode_t
KEY_PAD_7	src/Modules/InputSystem.hpp	/^	KEY_PAD_7,$/;"	e	enum:ButtonCode_t
KEY_PAD_8	src/Modules/InputSystem.hpp	/^	KEY_PAD_8,$/;"	e	enum:ButtonCode_t
KEY_PAD_9	src/Modules/InputSystem.hpp	/^	KEY_PAD_9,$/;"	e	enum:ButtonCode_t
KEY_PAD_DECIMAL	src/Modules/InputSystem.hpp	/^	KEY_PAD_DECIMAL,$/;"	e	enum:ButtonCode_t
KEY_PAD_DIVIDE	src/Modules/InputSystem.hpp	/^	KEY_PAD_DIVIDE,$/;"	e	enum:ButtonCode_t
KEY_PAD_ENTER	src/Modules/InputSystem.hpp	/^	KEY_PAD_ENTER,$/;"	e	enum:ButtonCode_t
KEY_PAD_MINUS	src/Modules/InputSystem.hpp	/^	KEY_PAD_MINUS,$/;"	e	enum:ButtonCode_t
KEY_PAD_MULTIPLY	src/Modules/InputSystem.hpp	/^	KEY_PAD_MULTIPLY,$/;"	e	enum:ButtonCode_t
KEY_PAD_PLUS	src/Modules/InputSystem.hpp	/^	KEY_PAD_PLUS,$/;"	e	enum:ButtonCode_t
KEY_PAGEDOWN	src/Modules/InputSystem.hpp	/^	KEY_PAGEDOWN,$/;"	e	enum:ButtonCode_t
KEY_PAGEUP	src/Modules/InputSystem.hpp	/^	KEY_PAGEUP,$/;"	e	enum:ButtonCode_t
KEY_PERIOD	src/Modules/InputSystem.hpp	/^	KEY_PERIOD,$/;"	e	enum:ButtonCode_t
KEY_Q	src/Modules/InputSystem.hpp	/^	KEY_Q,$/;"	e	enum:ButtonCode_t
KEY_R	src/Modules/InputSystem.hpp	/^	KEY_R,$/;"	e	enum:ButtonCode_t
KEY_RALT	src/Modules/InputSystem.hpp	/^	KEY_RALT,$/;"	e	enum:ButtonCode_t
KEY_RBRACKET	src/Modules/InputSystem.hpp	/^	KEY_RBRACKET,$/;"	e	enum:ButtonCode_t
KEY_RCONTROL	src/Modules/InputSystem.hpp	/^	KEY_RCONTROL,$/;"	e	enum:ButtonCode_t
KEY_RIGHT	src/Modules/InputSystem.hpp	/^	KEY_RIGHT,$/;"	e	enum:ButtonCode_t
KEY_RSHIFT	src/Modules/InputSystem.hpp	/^	KEY_RSHIFT,$/;"	e	enum:ButtonCode_t
KEY_RWIN	src/Modules/InputSystem.hpp	/^	KEY_RWIN,$/;"	e	enum:ButtonCode_t
KEY_S	src/Modules/InputSystem.hpp	/^	KEY_S,$/;"	e	enum:ButtonCode_t
KEY_SCROLLLOCK	src/Modules/InputSystem.hpp	/^	KEY_SCROLLLOCK,$/;"	e	enum:ButtonCode_t
KEY_SCROLLLOCKTOGGLE	src/Modules/InputSystem.hpp	/^	KEY_SCROLLLOCKTOGGLE,$/;"	e	enum:ButtonCode_t
KEY_SEMICOLON	src/Modules/InputSystem.hpp	/^	KEY_SEMICOLON,$/;"	e	enum:ButtonCode_t
KEY_SLASH	src/Modules/InputSystem.hpp	/^	KEY_SLASH,$/;"	e	enum:ButtonCode_t
KEY_SPACE	src/Modules/InputSystem.hpp	/^	KEY_SPACE,$/;"	e	enum:ButtonCode_t
KEY_T	src/Modules/InputSystem.hpp	/^	KEY_T,$/;"	e	enum:ButtonCode_t
KEY_TAB	src/Modules/InputSystem.hpp	/^	KEY_TAB,$/;"	e	enum:ButtonCode_t
KEY_U	src/Modules/InputSystem.hpp	/^	KEY_U,$/;"	e	enum:ButtonCode_t
KEY_UP	src/Modules/InputSystem.hpp	/^	KEY_UP,$/;"	e	enum:ButtonCode_t
KEY_V	src/Modules/InputSystem.hpp	/^	KEY_V,$/;"	e	enum:ButtonCode_t
KEY_W	src/Modules/InputSystem.hpp	/^	KEY_W,$/;"	e	enum:ButtonCode_t
KEY_X	src/Modules/InputSystem.hpp	/^	KEY_X,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_A	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_A = JOYSTICK_FIRST_BUTTON,  \/\/ Buttons$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_B	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_B,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_BACK	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_BACK,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_DOWN	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_DOWN,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_LEFT	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_LEFT,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_LEFT_SHOULDER	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_LEFT_SHOULDER,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_LTRIGGER	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_LTRIGGER,                            \/\/ ZAXIS POSITIVE$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_RIGHT	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_RIGHT,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_RIGHT_SHOULDER	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_RIGHT_SHOULDER,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_RTRIGGER	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_RTRIGGER,                            \/\/ ZAXIS NEGATIVE$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_START	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_START,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_STICK1	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_STICK1,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_STICK2	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_STICK2,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_UP	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_UP = JOYSTICK_FIRST_POV_BUTTON,  \/\/ POV buttons$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_X	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_X,$/;"	e	enum:ButtonCode_t
KEY_XBUTTON_Y	src/Modules/InputSystem.hpp	/^	KEY_XBUTTON_Y,$/;"	e	enum:ButtonCode_t
KEY_XSTICK1_DOWN	src/Modules/InputSystem.hpp	/^	KEY_XSTICK1_DOWN,                                \/\/ YAXIS POSITIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK1_LEFT	src/Modules/InputSystem.hpp	/^	KEY_XSTICK1_LEFT,                                \/\/ XAXIS NEGATIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK1_RIGHT	src/Modules/InputSystem.hpp	/^	KEY_XSTICK1_RIGHT = JOYSTICK_FIRST_AXIS_BUTTON,  \/\/ XAXIS POSITIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK1_UP	src/Modules/InputSystem.hpp	/^	KEY_XSTICK1_UP,                                  \/\/ YAXIS NEGATIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK2_DOWN	src/Modules/InputSystem.hpp	/^	KEY_XSTICK2_DOWN,                                \/\/ VAXIS POSITIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK2_LEFT	src/Modules/InputSystem.hpp	/^	KEY_XSTICK2_LEFT,                                \/\/ UAXIS NEGATIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK2_RIGHT	src/Modules/InputSystem.hpp	/^	KEY_XSTICK2_RIGHT,                               \/\/ UAXIS POSITIVE$/;"	e	enum:ButtonCode_t
KEY_XSTICK2_UP	src/Modules/InputSystem.hpp	/^	KEY_XSTICK2_UP,                                  \/\/ VAXIS NEGATIVE$/;"	e	enum:ButtonCode_t
KEY_Y	src/Modules/InputSystem.hpp	/^	KEY_Y,$/;"	e	enum:ButtonCode_t
KEY_Z	src/Modules/InputSystem.hpp	/^	KEY_Z,$/;"	e	enum:ButtonCode_t
KeyDown	src/Modules/Client.hpp	/^	_KeyDown KeyDown = nullptr;$/;"	m	class:Client	typeref:typename:_KeyDown
KeyDown	src/Offsets.cpp	/^	int KeyDown;$/;"	v	namespace:Offsets	typeref:typename:int
KeySetBinding	src/Modules/InputSystem.hpp	/^	_KeySetBinding KeySetBinding = nullptr;$/;"	m	class:InputSystem	typeref:typename:_KeySetBinding
KeyUp	src/Modules/Client.hpp	/^	_KeyUp KeyUp = nullptr;$/;"	m	class:Client	typeref:typename:_KeyUp
KeyUp	src/Offsets.cpp	/^	int KeyUp;$/;"	v	namespace:Offsets	typeref:typename:int
Key_SetBinding	src/Offsets.cpp	/^	int Key_SetBinding;$/;"	v	namespace:Offsets	typeref:typename:int
KillAllGhosts	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::KillAllGhosts() {$/;"	f	class:GhostEntity	typeref:typename:void
KillEntity	src/Modules/Server.cpp	/^void Server::KillEntity(void *entity) {$/;"	f	class:Server	typeref:typename:void
LAC_ALPHA	src/Utils/lodepng.hpp	/^	LAC_ALPHA, \/*use color type user requested, but if only opaque pixels and RGBA or grey+alpha, /;"	e	enum:LodePNGAutoConvert
LAC_AUTO	src/Utils/lodepng.hpp	/^	LAC_AUTO,  \/*use PNG color type that can losslessly represent the uncompressed image the small/;"	e	enum:LodePNGAutoConvert
LAC_AUTO_NO_NIBBLES	src/Utils/lodepng.hpp	/^	LAC_AUTO_NO_NIBBLES$/;"	e	enum:LodePNGAutoConvert
LAC_NO	src/Utils/lodepng.hpp	/^	LAC_NO,    \/*use color type user requested*\/$/;"	e	enum:LodePNGAutoConvert
LAST	src/Features/Camera.cpp	/^		      LAST };$/;"	e	enum:Camera::InterpolateStates::__anon821173e40203	file:
LAST	src/Features/Camera.cpp	/^		      LAST };$/;"	e	enum:InterpolateCurve::__anon821173e40103	file:
LAST_LENGTH_CODE_INDEX	src/Utils/lodepng.cpp	/^#	define LAST_LENGTH_CODE_INDEX /;"	d	file:
LAST_VISIBLE_CONTENTS	src/Utils/SDK.hpp	/^#define LAST_VISIBLE_CONTENTS /;"	d
LAZY_MATCHING	src/Utils/lodepng.cpp	/^#		define LAZY_MATCHING$/;"	d	file:
LCF_CONSOLE_ONLY	src/Utils/SDK.hpp	/^	LCF_CONSOLE_ONLY = 0x1,$/;"	e	enum:__anon21a65a740c03
LCF_DO_NOT_ECHO	src/Utils/SDK.hpp	/^	LCF_DO_NOT_ECHO = 0x2,$/;"	e	enum:__anon21a65a740c03
LCT_GREY	src/Utils/lodepng.hpp	/^	LCT_GREY = 0,       \/*greyscale: 1,2,4,8,16 bit*\/$/;"	e	enum:LodePNGColorType
LCT_GREY_ALPHA	src/Utils/lodepng.hpp	/^	LCT_GREY_ALPHA = 4, \/*greyscale with alpha: 8,16 bit*\/$/;"	e	enum:LodePNGColorType
LCT_PALETTE	src/Utils/lodepng.hpp	/^	LCT_PALETTE = 3,    \/*palette: 1,2,4,8 bit*\/$/;"	e	enum:LodePNGColorType
LCT_RGB	src/Utils/lodepng.hpp	/^	LCT_RGB = 2,        \/*RGB: 8,16 bit*\/$/;"	e	enum:LodePNGColorType
LCT_RGBA	src/Utils/lodepng.hpp	/^	LCT_RGBA = 6        \/*RGB with alpha: 8,16 bit*\/$/;"	e	enum:LodePNGColorType
LDFLAGS	Makefile	/^LDFLAGS=-m32 -shared -lstdc++fs -Llib\/ffmpeg\/lib\/linux -lavformat -lavcodec -lavutil -lswscal/;"	m
LEFT	src/Features/Hud/StrafeQuality.cpp	/^	LEFT,$/;"	e	enum:StrafeDir	file:
LEFT	src/Features/Hud/Toasts.cpp	/^	LEFT,$/;"	e	enum:Alignment	file:
LEG_LEFT	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	e	enum:BENDY_GROUP	file:
LEG_RIGHT	src/Features/Demo/GhostRenderer.cpp	/^enum BENDY_GROUP {BODY, HEAD, LEG_LEFT, LEG_RIGHT, ARM_LEFT, ARM_RIGHT};$/;"	e	enum:BENDY_GROUP	file:
LENGTHBASE	src/Utils/lodepng.cpp	/^static const unsigned LENGTHBASE[29] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,/;"	v	typeref:typename:const unsigned[29]	file:
LENGTHEXTRA	src/Utils/lodepng.cpp	/^static const unsigned LENGTHEXTRA[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3/;"	v	typeref:typename:const unsigned[29]	file:
LFS_BRUTE_FORCE	src/Utils/lodepng.hpp	/^	LFS_BRUTE_FORCE,$/;"	e	enum:LodePNGFilterStrategy
LFS_HEURISTIC	src/Utils/lodepng.hpp	/^	LFS_HEURISTIC, \/*official PNG heuristic*\/$/;"	e	enum:LodePNGFilterStrategy
LFS_MINSUM	src/Utils/lodepng.hpp	/^	LFS_MINSUM,    \/*like the official PNG heuristic, but use minimal sum always, including palett/;"	e	enum:LodePNGFilterStrategy
LFS_PREDEFINED	src/Utils/lodepng.hpp	/^	LFS_PREDEFINED \/*use predefined_filters buffer: you specify the filter type for each scanline*/;"	e	enum:LodePNGFilterStrategy
LFS_ZERO	src/Utils/lodepng.hpp	/^	LFS_ZERO,      \/*every filter at zero*\/$/;"	e	enum:LodePNGFilterStrategy
LIBAVCODEC_BUILD	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_BUILD /;"	d
LIBAVCODEC_IDENT	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_IDENT /;"	d
LIBAVCODEC_VERSION	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_VERSION /;"	d
LIBAVCODEC_VERSION_INT	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_VERSION_INT /;"	d
LIBAVCODEC_VERSION_MAJOR	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_VERSION_MAJOR /;"	d
LIBAVCODEC_VERSION_MICRO	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_VERSION_MICRO /;"	d
LIBAVCODEC_VERSION_MINOR	lib/ffmpeg/include/libavcodec/version.h	/^#define LIBAVCODEC_VERSION_MINOR /;"	d
LIBAVDEVICE_BUILD	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_BUILD /;"	d
LIBAVDEVICE_IDENT	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_IDENT /;"	d
LIBAVDEVICE_VERSION	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_VERSION /;"	d
LIBAVDEVICE_VERSION_INT	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_VERSION_INT /;"	d
LIBAVDEVICE_VERSION_MAJOR	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_VERSION_MAJOR /;"	d
LIBAVDEVICE_VERSION_MICRO	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_VERSION_MICRO /;"	d
LIBAVDEVICE_VERSION_MINOR	lib/ffmpeg/include/libavdevice/version.h	/^#define LIBAVDEVICE_VERSION_MINOR /;"	d
LIBAVFILTER_BUILD	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_BUILD /;"	d
LIBAVFILTER_IDENT	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_IDENT /;"	d
LIBAVFILTER_VERSION	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_VERSION /;"	d
LIBAVFILTER_VERSION_INT	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_VERSION_INT /;"	d
LIBAVFILTER_VERSION_MAJOR	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_VERSION_MAJOR /;"	d
LIBAVFILTER_VERSION_MICRO	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_VERSION_MICRO /;"	d
LIBAVFILTER_VERSION_MINOR	lib/ffmpeg/include/libavfilter/version.h	/^#define LIBAVFILTER_VERSION_MINOR /;"	d
LIBAVFORMAT_BUILD	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_BUILD /;"	d
LIBAVFORMAT_IDENT	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_IDENT /;"	d
LIBAVFORMAT_VERSION	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_VERSION /;"	d
LIBAVFORMAT_VERSION_INT	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_VERSION_INT /;"	d
LIBAVFORMAT_VERSION_MAJOR	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_VERSION_MAJOR /;"	d
LIBAVFORMAT_VERSION_MICRO	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_VERSION_MICRO /;"	d
LIBAVFORMAT_VERSION_MINOR	lib/ffmpeg/include/libavformat/version.h	/^#define LIBAVFORMAT_VERSION_MINOR /;"	d
LIBAVRESAMPLE_BUILD	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_BUILD /;"	d
LIBAVRESAMPLE_IDENT	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_IDENT /;"	d
LIBAVRESAMPLE_VERSION	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_VERSION /;"	d
LIBAVRESAMPLE_VERSION_INT	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_VERSION_INT /;"	d
LIBAVRESAMPLE_VERSION_MAJOR	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_VERSION_MAJOR /;"	d
LIBAVRESAMPLE_VERSION_MICRO	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_VERSION_MICRO /;"	d
LIBAVRESAMPLE_VERSION_MINOR	lib/ffmpeg/include/libavresample/version.h	/^#define LIBAVRESAMPLE_VERSION_MINOR /;"	d
LIBAVUTIL_BUILD	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_BUILD /;"	d
LIBAVUTIL_IDENT	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_IDENT /;"	d
LIBAVUTIL_VERSION	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_VERSION /;"	d
LIBAVUTIL_VERSION_INT	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_VERSION_INT /;"	d
LIBAVUTIL_VERSION_MAJOR	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_VERSION_MAJOR /;"	d
LIBAVUTIL_VERSION_MICRO	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_VERSION_MICRO /;"	d
LIBAVUTIL_VERSION_MINOR	lib/ffmpeg/include/libavutil/version.h	/^#define LIBAVUTIL_VERSION_MINOR /;"	d
LIBCURL_COPYRIGHT	lib/curl/include/curl/curlver.h	/^#define LIBCURL_COPYRIGHT /;"	d
LIBCURL_TIMESTAMP	lib/curl/include/curl/curlver.h	/^#define LIBCURL_TIMESTAMP /;"	d
LIBCURL_VERSION	lib/curl/include/curl/curlver.h	/^#define LIBCURL_VERSION /;"	d
LIBCURL_VERSION_MAJOR	lib/curl/include/curl/curlver.h	/^#define LIBCURL_VERSION_MAJOR /;"	d
LIBCURL_VERSION_MINOR	lib/curl/include/curl/curlver.h	/^#define LIBCURL_VERSION_MINOR /;"	d
LIBCURL_VERSION_NUM	lib/curl/include/curl/curlver.h	/^#define LIBCURL_VERSION_NUM /;"	d
LIBCURL_VERSION_PATCH	lib/curl/include/curl/curlver.h	/^#define LIBCURL_VERSION_PATCH /;"	d
LIBSWRESAMPLE_BUILD	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_BUILD /;"	d
LIBSWRESAMPLE_IDENT	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_IDENT /;"	d
LIBSWRESAMPLE_VERSION	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_VERSION /;"	d
LIBSWRESAMPLE_VERSION_INT	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_VERSION_INT /;"	d
LIBSWRESAMPLE_VERSION_MAJOR	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_VERSION_MAJOR /;"	d
LIBSWRESAMPLE_VERSION_MICRO	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_VERSION_MICRO /;"	d
LIBSWRESAMPLE_VERSION_MINOR	lib/ffmpeg/include/libswresample/version.h	/^#define LIBSWRESAMPLE_VERSION_MINOR /;"	d
LIBSWSCALE_BUILD	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_BUILD /;"	d
LIBSWSCALE_IDENT	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_IDENT /;"	d
LIBSWSCALE_VERSION	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_VERSION /;"	d
LIBSWSCALE_VERSION_INT	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_VERSION_INT /;"	d
LIBSWSCALE_VERSION_MAJOR	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_VERSION_MAJOR /;"	d
LIBSWSCALE_VERSION_MICRO	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_VERSION_MICRO /;"	d
LIBSWSCALE_VERSION_MINOR	lib/ffmpeg/include/libswscale/version.h	/^#define LIBSWSCALE_VERSION_MINOR /;"	d
LIGHT_GREEN	src/Utils/SDK.hpp	/^	LIGHT_GREEN = 5,$/;"	e	enum:TextColor
LINE_PAD	src/Features/Hud/Toasts.cpp	/^#define LINE_PAD /;"	d	file:
LODEPNG_COMPILE_ANCILLARY_CHUNKS	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_ANCILLARY_CHUNKS$/;"	d
LODEPNG_COMPILE_CPP	src/Utils/lodepng.hpp	/^#			define LODEPNG_COMPILE_CPP$/;"	d
LODEPNG_COMPILE_DECODER	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_DECODER$/;"	d
LODEPNG_COMPILE_DISK	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_DISK$/;"	d
LODEPNG_COMPILE_ENCODER	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_ENCODER$/;"	d
LODEPNG_COMPILE_ERROR_TEXT	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_ERROR_TEXT$/;"	d
LODEPNG_COMPILE_PNG	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_PNG$/;"	d
LODEPNG_COMPILE_ZLIB	src/Utils/lodepng.hpp	/^#		define LODEPNG_COMPILE_ZLIB$/;"	d
LODEPNG_CUSTOM_ZLIB_DECODER	src/Utils/lodepng.hpp	/^#		define LODEPNG_CUSTOM_ZLIB_DECODER /;"	d
LODEPNG_CUSTOM_ZLIB_ENCODER	src/Utils/lodepng.hpp	/^#		define LODEPNG_CUSTOM_ZLIB_ENCODER /;"	d
LODEPNG_H	src/Utils/lodepng.hpp	/^#	define LODEPNG_H$/;"	d
LPHud	src/Features/Hud/LPHud.cpp	/^LPHud::LPHud()$/;"	f	class:LPHud
LPHud	src/Features/Hud/LPHud.hpp	/^class LPHud : public Hud {$/;"	c
LPHudCountHistoryInfo	src/Features/Hud/LPHud.cpp	/^struct LPHudCountHistoryInfo {$/;"	s	file:
LSEV_ASSERT	src/Utils/SDK.hpp	/^	LSEV_ASSERT,$/;"	e	enum:__anon21a65a740b03
LSEV_ERROR	src/Utils/SDK.hpp	/^	LSEV_ERROR,$/;"	e	enum:__anon21a65a740b03
LSEV_MESSAGE	src/Utils/SDK.hpp	/^	LSEV_MESSAGE,$/;"	e	enum:__anon21a65a740b03
LSEV_WARNING	src/Utils/SDK.hpp	/^	LSEV_WARNING,$/;"	e	enum:__anon21a65a740b03
LastTick	src/Features/Demo/Demo.cpp	/^int32_t Demo::LastTick() {$/;"	f	class:Demo	typeref:typename:int32_t
LeaveSpinLock	lib/minhook/hook.c	/^static VOID LeaveSpinLock(VOID)$/;"	f	typeref:typename:VOID	file:
Length	src/Utils/SDK.hpp	/^	inline float Length() const {$/;"	f	struct:Vector	typeref:typename:float
Length2D	src/Utils/SDK.hpp	/^	inline float Length2D() const {$/;"	f	struct:Vector	typeref:typename:float
Lerp	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::Lerp(float time) {$/;"	f	class:GhostEntity	typeref:typename:void
Lerp	src/Utils/Math.hpp	/^inline void Math::Lerp(const Vector &oldPos, const Vector &newPos, float time, Vector &outPut) {$/;"	f	class:Math	typeref:typename:void
LevelInit	src/SAR.cpp	/^void SAR::LevelInit(char const *pMapName) {$/;"	f	class:SAR	typeref:typename:void
LevelInitPreEntity	src/Offsets.cpp	/^	int LevelInitPreEntity;$/;"	v	namespace:Offsets	typeref:typename:int
LevelReset	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::LevelReset() {$/;"	f	class:DemoGhostEntity	typeref:typename:void
LevelShutdown	src/SAR.cpp	/^void SAR::LevelShutdown() {$/;"	f	class:SAR	typeref:typename:void
LexCondition	src/Features/ConfigPlus.cpp	/^static std::queue<Token> LexCondition(const char *str, size_t len) {$/;"	f	typeref:typename:std::queue<Token>	file:
Line	src/Features/Tas/TasParser.cpp	/^struct Line {$/;"	s	file:
Linux	doc/contributing.md	/^### Linux$/;"	S	section:SAR: Contributing Guide""Building
ListAll	src/Features/Cvars.cpp	/^void Cvars::ListAll() {$/;"	f	class:Cvars	typeref:typename:void
Listener	src/Features/Listener.cpp	/^Listener::Listener()$/;"	f	class:Listener
Listener	src/Features/Listener.hpp	/^class Listener : public IGameEventListener2$/;"	c
ListingResponse	lib/SFML/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
Load	src/SAR.cpp	/^bool SAR::Load(CreateInterfaceFn interfaceFactory, CreateInterfaceFn gameServerFactory) {$/;"	f	class:SAR	typeref:typename:bool
LoadFromFile	src/Features/Stats/StatsCounter.cpp	/^bool StatsCounter::LoadFromFile(const std::string &path) {$/;"	f	class:StatsCounter	typeref:typename:bool
LoadOffsets	src/Games/Linux/ApertureTag.cpp	/^void ApertureTag::LoadOffsets() {$/;"	f	class:ApertureTag	typeref:typename:void
LoadOffsets	src/Games/Linux/Portal2.cpp	/^void Portal2::LoadOffsets() {$/;"	f	class:Portal2	typeref:typename:void
LoadOffsets	src/Games/Linux/PortalReloaded.cpp	/^void PortalReloaded::LoadOffsets() {$/;"	f	class:PortalReloaded	typeref:typename:void
LoadOffsets	src/Games/Linux/PortalStoriesMel.cpp	/^void PortalStoriesMel::LoadOffsets() {$/;"	f	class:PortalStoriesMel	typeref:typename:void
LoadOffsets	src/Games/Linux/ThinkingWithTimeMachine.cpp	/^void ThinkingWithTimeMachine::LoadOffsets() {$/;"	f	class:ThinkingWithTimeMachine	typeref:typename:void
LoadOffsets	src/Games/Windows/ApertureTag.cpp	/^void ApertureTag::LoadOffsets() {$/;"	f	class:ApertureTag	typeref:typename:void
LoadOffsets	src/Games/Windows/Portal2.cpp	/^void Portal2::LoadOffsets() {$/;"	f	class:Portal2	typeref:typename:void
LoadOffsets	src/Games/Windows/PortalReloaded.cpp	/^void PortalReloaded::LoadOffsets() {$/;"	f	class:PortalReloaded	typeref:typename:void
LoadOffsets	src/Games/Windows/PortalStoriesMel.cpp	/^void PortalStoriesMel::LoadOffsets() {$/;"	f	class:PortalStoriesMel	typeref:typename:void
LoadOffsets	src/Games/Windows/ThinkingWithTimeMachine.cpp	/^void ThinkingWithTimeMachine::LoadOffsets() {$/;"	f	class:ThinkingWithTimeMachine	typeref:typename:void
LoadQuicksave	src/Features/Tas/TasPlayer.hpp	/^	LoadQuicksave,$/;"	e	enum:TasStartType
LocalError	lib/SFML/include/SFML/Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in pr/;"	e	enum:sf::Ftp::Response::Status
LocalHost	lib/SFML/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
Lock	lib/SFML/include/SFML/System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
Lock	src/Features/Cvars.cpp	/^void Cvars::Lock() {$/;"	f	class:Cvars	typeref:typename:void
Lock	src/Variable.cpp	/^void Variable::Lock() {$/;"	f	class:Variable	typeref:typename:void
LodePNGAutoConvert	src/Utils/lodepng.hpp	/^typedef enum LodePNGAutoConvert {$/;"	g
LodePNGAutoConvert	src/Utils/lodepng.hpp	/^} LodePNGAutoConvert;$/;"	t	typeref:enum:LodePNGAutoConvert
LodePNGColorMode	src/Utils/lodepng.hpp	/^typedef struct LodePNGColorMode {$/;"	s
LodePNGColorMode	src/Utils/lodepng.hpp	/^} LodePNGColorMode;$/;"	t	typeref:struct:LodePNGColorMode
LodePNGColorType	src/Utils/lodepng.hpp	/^typedef enum LodePNGColorType {$/;"	g
LodePNGColorType	src/Utils/lodepng.hpp	/^} LodePNGColorType;$/;"	t	typeref:enum:LodePNGColorType
LodePNGCompressSettings	src/Utils/lodepng.hpp	/^typedef struct LodePNGCompressSettings \/*deflate = compress*\/$/;"	s
LodePNGCompressSettings	src/Utils/lodepng.hpp	/^} LodePNGCompressSettings;$/;"	t	typeref:struct:LodePNGCompressSettings
LodePNGDecoderSettings	src/Utils/lodepng.hpp	/^typedef struct LodePNGDecoderSettings {$/;"	s
LodePNGDecoderSettings	src/Utils/lodepng.hpp	/^} LodePNGDecoderSettings;$/;"	t	typeref:struct:LodePNGDecoderSettings
LodePNGDecompressSettings	src/Utils/lodepng.hpp	/^typedef struct LodePNGDecompressSettings {$/;"	s
LodePNGDecompressSettings	src/Utils/lodepng.hpp	/^} LodePNGDecompressSettings;$/;"	t	typeref:struct:LodePNGDecompressSettings
LodePNGEncoderSettings	src/Utils/lodepng.hpp	/^typedef struct LodePNGEncoderSettings {$/;"	s
LodePNGEncoderSettings	src/Utils/lodepng.hpp	/^} LodePNGEncoderSettings;$/;"	t	typeref:struct:LodePNGEncoderSettings
LodePNGFilterStrategy	src/Utils/lodepng.hpp	/^typedef enum LodePNGFilterStrategy {$/;"	g
LodePNGFilterStrategy	src/Utils/lodepng.hpp	/^} LodePNGFilterStrategy;$/;"	t	typeref:enum:LodePNGFilterStrategy
LodePNGIText_cleanup	src/Utils/lodepng.cpp	/^static void LodePNGIText_cleanup(LodePNGInfo *info) {$/;"	f	typeref:typename:void	file:
LodePNGIText_copy	src/Utils/lodepng.cpp	/^static unsigned LodePNGIText_copy(LodePNGInfo *dest, const LodePNGInfo *source) {$/;"	f	typeref:typename:unsigned	file:
LodePNGIText_init	src/Utils/lodepng.cpp	/^static void LodePNGIText_init(LodePNGInfo *info) {$/;"	f	typeref:typename:void	file:
LodePNGInfo	src/Utils/lodepng.hpp	/^typedef struct LodePNGInfo {$/;"	s
LodePNGInfo	src/Utils/lodepng.hpp	/^} LodePNGInfo;$/;"	t	typeref:struct:LodePNGInfo
LodePNGState	src/Utils/lodepng.hpp	/^typedef struct LodePNGState {$/;"	s
LodePNGState	src/Utils/lodepng.hpp	/^} LodePNGState;$/;"	t	typeref:struct:LodePNGState
LodePNGText_cleanup	src/Utils/lodepng.cpp	/^static void LodePNGText_cleanup(LodePNGInfo *info) {$/;"	f	typeref:typename:void	file:
LodePNGText_copy	src/Utils/lodepng.cpp	/^static unsigned LodePNGText_copy(LodePNGInfo *dest, const LodePNGInfo *source) {$/;"	f	typeref:typename:unsigned	file:
LodePNGText_init	src/Utils/lodepng.cpp	/^static void LodePNGText_init(LodePNGInfo *info) {$/;"	f	typeref:typename:void	file:
LodePNGTime	src/Utils/lodepng.hpp	/^typedef struct LodePNGTime {$/;"	s
LodePNGTime	src/Utils/lodepng.hpp	/^} LodePNGTime;$/;"	t	typeref:struct:LodePNGTime
LodePNGUnknownChunks_cleanup	src/Utils/lodepng.cpp	/^static void LodePNGUnknownChunks_cleanup(LodePNGInfo *info) {$/;"	f	typeref:typename:void	file:
LodePNGUnknownChunks_copy	src/Utils/lodepng.cpp	/^static unsigned LodePNGUnknownChunks_copy(LodePNGInfo *dest, const LodePNGInfo *src) {$/;"	f	typeref:typename:unsigned	file:
LodePNGUnknownChunks_init	src/Utils/lodepng.cpp	/^static void LodePNGUnknownChunks_init(LodePNGInfo *info) {$/;"	f	typeref:typename:void	file:
Log	src/Modules/Console.cpp	/^void ConsoleListener::Log(const LoggingContext *ctx, const char *msg) {$/;"	f	class:ConsoleListener	typeref:typename:void
LoggedIn	lib/SFML/include/SFML/Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropri/;"	e	enum:sf::Ftp::Response::Status
LoggingChannelFlags	src/Utils/SDK.hpp	/^} LoggingChannelFlags;$/;"	t	typeref:enum:__anon21a65a740c03
LoggingContext	src/Utils/SDK.hpp	/^struct LoggingContext {$/;"	s
LoggingSeverity	src/Utils/SDK.hpp	/^} LoggingSeverity;$/;"	t	typeref:enum:__anon21a65a740b03
LoggingSystem_HasTag	src/Modules/Console.hpp	/^	_LoggingSystem_HasTag LoggingSystem_HasTag = nullptr;$/;"	m	class:Console	typeref:typename:_LoggingSystem_HasTag
LoggingSystem_PopLoggingState	src/Modules/Console.hpp	/^	_LoggingSystem_PopLoggingState LoggingSystem_PopLoggingState = nullptr;$/;"	m	class:Console	typeref:typename:_LoggingSystem_PopLoggingState
LoggingSystem_PushLoggingState	src/Modules/Console.hpp	/^	_LoggingSystem_PushLoggingState LoggingSystem_PushLoggingState = nullptr;$/;"	m	class:Console	typeref:typename:_LoggingSystem_PushLoggingState
LoggingSystem_RegisterLoggingListener	src/Modules/Console.hpp	/^	_LoggingSystem_RegisterLoggingListener LoggingSystem_RegisterLoggingListener = nullptr;$/;"	m	class:Console	typeref:typename:_LoggingSystem_RegisterLoggingListener
LoggingSystem_SetChannelSpewLevelByTag	src/Modules/Console.hpp	/^	_LoggingSystem_SetChannelSpewLevelByTag LoggingSystem_SetChannelSpewLevelByTag = nullptr;$/;"	m	class:Console	typeref:typename:_LoggingSystem_SetChannelSpewLevelByTag
LookupEntity	src/Features/EntityList.cpp	/^IHandleEntity *EntityList::LookupEntity(const CBaseHandle &handle) {$/;"	f	class:EntityList	typeref:typename:IHandleEntity *
LoopInfo	src/Features/Tas/TasParser.cpp	/^	LoopInfo(std::vector<Line> before, std::shared_ptr<LoopInfo> parent, unsigned line_num, unsigne/;"	f	struct:LoopInfo	file:
LoopInfo	src/Features/Tas/TasParser.cpp	/^struct LoopInfo {$/;"	s	file:
MAP	src/Features/ConfigPlus.cpp	/^		MAP,$/;"	e	enum:Condition::__anon194454350203	file:
MAP_CHANGE	src/Features/Demo/NetworkGhostPlayer.hpp	/^	MAP_CHANGE,$/;"	e	enum:HEADER
MAP_PAD	src/Features/Hud/Minimap.cpp	/^#define MAP_PAD /;"	d	file:
MASK_ALL	src/Utils/SDK.hpp	/^#define MASK_ALL /;"	d
MASK_BLOCKLOS	src/Utils/SDK.hpp	/^#define MASK_BLOCKLOS /;"	d
MASK_BLOCKLOS_AND_NPCS	src/Utils/SDK.hpp	/^#define MASK_BLOCKLOS_AND_NPCS /;"	d
MASK_CURRENT	src/Utils/SDK.hpp	/^#define MASK_CURRENT /;"	d
MASK_NPCSOLID	src/Utils/SDK.hpp	/^#define MASK_NPCSOLID /;"	d
MASK_NPCSOLID_BRUSHONLY	src/Utils/SDK.hpp	/^#define MASK_NPCSOLID_BRUSHONLY /;"	d
MASK_NPCWORLDSTATIC	src/Utils/SDK.hpp	/^#define MASK_NPCWORLDSTATIC /;"	d
MASK_OPAQUE	src/Utils/SDK.hpp	/^#define MASK_OPAQUE /;"	d
MASK_OPAQUE_AND_NPCS	src/Utils/SDK.hpp	/^#define MASK_OPAQUE_AND_NPCS /;"	d
MASK_PLAYERSOLID	src/Utils/SDK.hpp	/^#define MASK_PLAYERSOLID /;"	d
MASK_PLAYERSOLID_BRUSHONLY	src/Utils/SDK.hpp	/^#define MASK_PLAYERSOLID_BRUSHONLY /;"	d
MASK_SHOT	src/Utils/SDK.hpp	/^#define MASK_SHOT /;"	d
MASK_SHOT_HULL	src/Utils/SDK.hpp	/^#define MASK_SHOT_HULL /;"	d
MASK_SHOT_PORTAL	src/Utils/SDK.hpp	/^#define MASK_SHOT_PORTAL /;"	d
MASK_SOLID	src/Utils/SDK.hpp	/^#define MASK_SOLID /;"	d
MASK_SOLID_BRUSHONLY	src/Utils/SDK.hpp	/^#define MASK_SOLID_BRUSHONLY /;"	d
MASK_SPLITAREAPORTAL	src/Utils/SDK.hpp	/^#define MASK_SPLITAREAPORTAL /;"	d
MASK_VISIBLE	src/Utils/SDK.hpp	/^#define MASK_VISIBLE /;"	d
MASK_VISIBLE_AND_NPCS	src/Utils/SDK.hpp	/^#define MASK_VISIBLE_AND_NPCS /;"	d
MASK_WATER	src/Utils/SDK.hpp	/^#define MASK_WATER /;"	d
MAX_DWT_LEVELS	lib/ffmpeg/include/libavcodec/dirac.h	/^#define MAX_DWT_LEVELS /;"	d
MAX_JOYSTICKS	src/Modules/InputSystem.hpp	/^#define MAX_JOYSTICKS /;"	d
MAX_JOYSTICK_AXES	src/Utils/SDK.hpp	/^	MAX_JOYSTICK_AXES,$/;"	e	enum:JoystickAxis_t
MAX_MEMORY_RANGE	lib/minhook/buffer.c	/^#define MAX_MEMORY_RANGE /;"	d	file:
MAX_PATH	src/Utils/Memory.hpp	/^#	define MAX_PATH /;"	d
MAX_REORDER_DELAY	lib/ffmpeg/include/libavformat/avformat.h	/^#define MAX_REORDER_DELAY /;"	d
MAX_SPLITSCREEN_PLAYERS	src/Offsets.cpp	/^	int MAX_SPLITSCREEN_PLAYERS;$/;"	v	namespace:Offsets	typeref:typename:int
MAX_STD_TIMEBASES	lib/ffmpeg/include/libavformat/avformat.h	/^#define MAX_STD_TIMEBASES /;"	d
MAX_SUPPORTED_DEFLATE_LENGTH	src/Utils/lodepng.cpp	/^static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;$/;"	v	typeref:typename:const size_t	file:
MAX_TRACE	src/Features/Speedrun/CategoryCreator.cpp	/^#define MAX_TRACE /;"	d	file:
MAX_VERSION_COMPONENTS	src/Features/Updater.cpp	/^#define MAX_VERSION_COMPONENTS /;"	d	file:
MDECL	src/Modules/Module.hpp	/^#define MDECL(/;"	d
MEMORY_BLOCK	lib/minhook/buffer.c	/^} MEMORY_BLOCK, *PMEMORY_BLOCK;$/;"	t	typeref:struct:_MEMORY_BLOCK	file:
MEMORY_BLOCK_SIZE	lib/minhook/buffer.c	/^#define MEMORY_BLOCK_SIZE /;"	d	file:
MEMORY_SLOT	lib/minhook/buffer.c	/^} MEMORY_SLOT, *PMEMORY_SLOT;$/;"	t	typeref:struct:_MEMORY_SLOT	file:
MEMORY_SLOT_SIZE	lib/minhook/buffer.h	/^    #define MEMORY_SLOT_SIZE /;"	d
MENU	src/Features/ConfigPlus.cpp	/^		MENU,$/;"	e	enum:Condition::__anon194454350203	file:
MESSAGE	src/Features/Demo/NetworkGhostPlayer.hpp	/^	MESSAGE,$/;"	e	enum:HEADER
MH_ALL_HOOKS	lib/minhook/MinHook.h	/^#define MH_ALL_HOOKS /;"	d
MH_ApplyQueued	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_ApplyQueued(VOID)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_CreateHook	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_CreateHook(LPVOID pTarget, LPVOID pDetour, LPVOID *ppOriginal)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_CreateHookApi	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_CreateHookApi($/;"	f	typeref:typename:MH_STATUS WINAPI
MH_CreateHookApiEx	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_CreateHookApiEx($/;"	f	typeref:typename:MH_STATUS WINAPI
MH_DisableHook	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_DisableHook(LPVOID pTarget)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_ERROR_ALREADY_CREATED	lib/minhook/MinHook.h	/^	MH_ERROR_ALREADY_CREATED,$/;"	e	enum:MH_STATUS
MH_ERROR_ALREADY_INITIALIZED	lib/minhook/MinHook.h	/^	MH_ERROR_ALREADY_INITIALIZED,$/;"	e	enum:MH_STATUS
MH_ERROR_DISABLED	lib/minhook/MinHook.h	/^	MH_ERROR_DISABLED,$/;"	e	enum:MH_STATUS
MH_ERROR_ENABLED	lib/minhook/MinHook.h	/^	MH_ERROR_ENABLED,$/;"	e	enum:MH_STATUS
MH_ERROR_FUNCTION_NOT_FOUND	lib/minhook/MinHook.h	/^	MH_ERROR_FUNCTION_NOT_FOUND$/;"	e	enum:MH_STATUS
MH_ERROR_MEMORY_ALLOC	lib/minhook/MinHook.h	/^	MH_ERROR_MEMORY_ALLOC,$/;"	e	enum:MH_STATUS
MH_ERROR_MEMORY_PROTECT	lib/minhook/MinHook.h	/^	MH_ERROR_MEMORY_PROTECT,$/;"	e	enum:MH_STATUS
MH_ERROR_MODULE_NOT_FOUND	lib/minhook/MinHook.h	/^	MH_ERROR_MODULE_NOT_FOUND,$/;"	e	enum:MH_STATUS
MH_ERROR_NOT_CREATED	lib/minhook/MinHook.h	/^	MH_ERROR_NOT_CREATED,$/;"	e	enum:MH_STATUS
MH_ERROR_NOT_EXECUTABLE	lib/minhook/MinHook.h	/^	MH_ERROR_NOT_EXECUTABLE,$/;"	e	enum:MH_STATUS
MH_ERROR_NOT_INITIALIZED	lib/minhook/MinHook.h	/^	MH_ERROR_NOT_INITIALIZED,$/;"	e	enum:MH_STATUS
MH_ERROR_UNSUPPORTED_FUNCTION	lib/minhook/MinHook.h	/^	MH_ERROR_UNSUPPORTED_FUNCTION,$/;"	e	enum:MH_STATUS
MH_EnableHook	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_EnableHook(LPVOID pTarget)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_HOOK	src/Utils/Platform.hpp	/^#	define MH_HOOK(/;"	d
MH_HOOK_MID	src/Utils/Platform.hpp	/^#	define MH_HOOK_MID(/;"	d
MH_Initialize	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_Initialize(VOID)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_OK	lib/minhook/MinHook.h	/^	MH_OK = 0,$/;"	e	enum:MH_STATUS
MH_QueueDisableHook	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_QueueDisableHook(LPVOID pTarget)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_QueueEnableHook	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_QueueEnableHook(LPVOID pTarget)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_RemoveHook	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_RemoveHook(LPVOID pTarget)$/;"	f	typeref:typename:MH_STATUS WINAPI
MH_ST2STR	lib/minhook/hook.c	/^#define MH_ST2STR(/;"	d	file:
MH_STATUS	lib/minhook/MinHook.h	/^MH_STATUS;$/;"	t	typeref:enum:MH_STATUS
MH_STATUS	lib/minhook/MinHook.h	/^typedef enum MH_STATUS$/;"	g
MH_StatusToString	lib/minhook/hook.c	/^const char * WINAPI MH_StatusToString(MH_STATUS status)$/;"	f	typeref:typename:const char * WINAPI
MH_UNHOOK	src/Utils/Platform.hpp	/^#	define MH_UNHOOK(/;"	d
MH_UNKNOWN	lib/minhook/MinHook.h	/^	MH_UNKNOWN = -1,$/;"	e	enum:MH_STATUS
MH_Uninitialize	lib/minhook/hook.c	/^MH_STATUS WINAPI MH_Uninitialize(VOID)$/;"	f	typeref:typename:MH_STATUS WINAPI
MICROSOFT_PLEASE_FIX_YOUR_SOFTWARE_SMHMYHEAD	src/Utils.hpp	/^#define MICROSOFT_PLEASE_FIX_YOUR_SOFTWARE_SMHMYHEAD /;"	d
MKBETAG	lib/ffmpeg/include/libavutil/common.h	/^#define MKBETAG(/;"	d
MKTAG	lib/ffmpeg/include/libavutil/common.h	/^#define MKTAG(/;"	d
MK_SAR_ON	src/Features/ConfigPlus.cpp	/^#define MK_SAR_ON(/;"	d	file:
MODEL	src/Features/Demo/GhostEntity.hpp	/^	MODEL = 3,$/;"	e	enum:GhostType
MODEL_CHANGE	src/Features/Demo/NetworkGhostPlayer.hpp	/^	MODEL_CHANGE,$/;"	e	enum:HEADER
MODULE	src/Utils.hpp	/^#define MODULE(/;"	d
MODULE_EXTENSION	src/Utils/Platform.hpp	/^#	define MODULE_EXTENSION /;"	d
MOUSE_4	src/Modules/InputSystem.hpp	/^	MOUSE_4,$/;"	e	enum:ButtonCode_t
MOUSE_5	src/Modules/InputSystem.hpp	/^	MOUSE_5,$/;"	e	enum:ButtonCode_t
MOUSE_COUNT	src/Modules/InputSystem.hpp	/^	MOUSE_COUNT = MOUSE_LAST - MOUSE_FIRST + 1,$/;"	e	enum:ButtonCode_t
MOUSE_FIRST	src/Modules/InputSystem.hpp	/^	MOUSE_FIRST = KEY_LAST + 1,$/;"	e	enum:ButtonCode_t
MOUSE_LAST	src/Modules/InputSystem.hpp	/^	MOUSE_LAST = MOUSE_WHEEL_DOWN,$/;"	e	enum:ButtonCode_t
MOUSE_LEFT	src/Modules/InputSystem.hpp	/^	MOUSE_LEFT = MOUSE_FIRST,$/;"	e	enum:ButtonCode_t
MOUSE_MIDDLE	src/Modules/InputSystem.hpp	/^	MOUSE_MIDDLE,$/;"	e	enum:ButtonCode_t
MOUSE_RIGHT	src/Modules/InputSystem.hpp	/^	MOUSE_RIGHT,$/;"	e	enum:ButtonCode_t
MOUSE_WHEEL_DOWN	src/Modules/InputSystem.hpp	/^	MOUSE_WHEEL_DOWN,  \/\/ A fake button which is 'pressed' and 'released' when the wheel is moved/;"	e	enum:ButtonCode_t
MOUSE_WHEEL_UP	src/Modules/InputSystem.hpp	/^	MOUSE_WHEEL_UP,    \/\/ A fake button which is 'pressed' and 'released' when the wheel is moved/;"	e	enum:ButtonCode_t
MOVETYPE_LADDER	src/Utils/SDK.hpp	/^#define MOVETYPE_LADDER /;"	d
MOVETYPE_NOCLIP	src/Utils/SDK.hpp	/^#define MOVETYPE_NOCLIP /;"	d
MSG_SYMBOL	src/Modules/Console.hpp	/^#define MSG_SYMBOL /;"	d
MULTIPLAYER_BACKUP	src/Offsets.cpp	/^	int MULTIPLAYER_BACKUP;$/;"	v	namespace:Offsets	typeref:typename:int
M_E	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_E /;"	d
M_LN10	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_LN10 /;"	d
M_LN2	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_LN2 /;"	d
M_LOG2_10	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_LOG2_10 /;"	d
M_PHI	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_PHI /;"	d
M_PI	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_PI /;"	d
M_PI	src/Utils/Math.hpp	/^#define M_PI /;"	d
M_PI_2	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_PI_2 /;"	d
M_PI_2	src/Utils/Math.hpp	/^#define M_PI_2 /;"	d
M_PI_F	src/Utils/Math.hpp	/^#define M_PI_F /;"	d
M_SQRT1_2	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_SQRT1_2 /;"	d
M_SQRT2	lib/ffmpeg/include/libavutil/mathematics.h	/^#define M_SQRT2 /;"	d
MapEndRule	src/Features/Speedrun/Rules.hpp	/^struct MapEndRule {$/;"	s
MapLoadRule	src/Features/Speedrun/Rules.hpp	/^struct MapLoadRule {$/;"	s
MapLoadType_t	src/Utils/SDK.hpp	/^enum MapLoadType_t {$/;"	g
MapLoad_Background	src/Utils/SDK.hpp	/^	MapLoad_Background = 3$/;"	e	enum:MapLoadType_t
MapLoad_LoadGame	src/Utils/SDK.hpp	/^	MapLoad_LoadGame = 1,$/;"	e	enum:MapLoadType_t
MapLoad_NewGame	src/Utils/SDK.hpp	/^	MapLoad_NewGame = 0,$/;"	e	enum:MapLoadType_t
MapLoad_Transition	src/Utils/SDK.hpp	/^	MapLoad_Transition = 2,$/;"	e	enum:MapLoadType_t
MapStats	src/Features/Stats/StatsCounter.hpp	/^struct MapStats {$/;"	s
MatchesFilters	src/Modules/Tier1.cpp	/^	bool MatchesFilters(const char *msg) {$/;"	f	class:ConsoleDisplayHook	typeref:typename:bool	file:
MatchesPattern	src/Modules/Tier1.cpp	/^	bool MatchesPattern(const char *str, const std::string &pat) {$/;"	f	class:ConsoleDisplayHook	typeref:typename:bool	file:
MaterialSystem	src/Modules/MaterialSystem.hpp	/^class MaterialSystem : public Module {$/;"	c
Math	src/Utils/Math.hpp	/^namespace Math {$/;"	n
Matrix	src/Utils/Math.cpp	/^Matrix::Matrix(int rows, int cols, const double init)$/;"	f	class:Matrix
Matrix	src/Utils/Math.hpp	/^class Matrix {$/;"	c
MaxCLL	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    unsigned MaxCLL;$/;"	m	struct:AVContentLightMetadata	typeref:typename:unsigned
MaxDatagramSize	lib/SFML/include/SFML/Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single/;"	e	enum:sf::UdpSocket::__anonb929c7a10103
MaxFALL	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    unsigned MaxFALL;$/;"	m	struct:AVContentLightMetadata	typeref:typename:unsigned
Memory	src/Utils/Memory.hpp	/^namespace Memory {$/;"	n
Memory Utils	doc/contributing.md	/^### Memory Utils$/;"	S	section:SAR: Contributing Guide""Coding
MemoryInputStream	lib/SFML/include/SFML/System/MemoryInputStream.hpp	/^class SFML_SYSTEM_API MemoryInputStream : public InputStream$/;"	c	namespace:sf
Merge existing branch (optionally)	doc/contributing.md	/^### Merge existing branch (optionally)$/;"	S	section:SAR: Contributing Guide""Pull Requests
Method	lib/SFML/include/SFML/Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
Minimap	src/Features/Hud/Minimap.cpp	/^struct Minimap {$/;"	s	file:
MinimapHud	src/Features/Hud/Minimap.cpp	/^	MinimapHud() : Hud(HudType_InGame, true) {}$/;"	f	class:MinimapHud	file:
MinimapHud	src/Features/Hud/Minimap.cpp	/^class MinimapHud : public Hud {$/;"	c	file:
MinimapSettings	src/Features/Hud/Minimap.cpp	/^struct MinimapSettings {$/;"	s	file:
MiscFlags	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    UINT MiscFlags;$/;"	m	struct:AVD3D11VAFramesContext	typeref:typename:UINT
Miscellaneous:	README.md	/^### Miscellaneous:$/;"	S	chapter:Features
ModDir	src/Games/Linux/Portal2.cpp	/^const char *Portal2::ModDir() {$/;"	f	class:Portal2	typeref:typename:const char *
ModDir	src/Games/Linux/PortalReloaded.cpp	/^const char *PortalReloaded::ModDir() {$/;"	f	class:PortalReloaded	typeref:typename:const char *
ModDir	src/Games/Linux/PortalStoriesMel.cpp	/^const char *PortalStoriesMel::ModDir() {$/;"	f	class:PortalStoriesMel	typeref:typename:const char *
ModDir	src/Games/Windows/Portal2.cpp	/^const char *Portal2::ModDir() {$/;"	f	class:Portal2	typeref:typename:const char *
ModDir	src/Games/Windows/PortalReloaded.cpp	/^const char *PortalReloaded::ModDir() {$/;"	f	class:PortalReloaded	typeref:typename:const char *
ModDir	src/Games/Windows/PortalStoriesMel.cpp	/^const char *PortalStoriesMel::ModDir() {$/;"	f	class:PortalStoriesMel	typeref:typename:const char *
ModifyElementParam	src/Features/Hud/InputHud.cpp	/^void InputHud::ModifyElementParam(std::string name, std::string parameter, std::string value) {$/;"	f	class:InputHud	typeref:typename:void
Module	src/Modules/Module.hpp	/^class Module {$/;"	c
ModuleInfo	src/Utils/Memory.hpp	/^	struct ModuleInfo {$/;"	s	namespace:Memory
Modules	src/Modules/Module.cpp	/^Modules::Modules()$/;"	f	class:Modules
Modules	src/Modules/Module.hpp	/^class Modules {$/;"	c
MovedPermanently	lib/SFML/include/SFML/Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new lo/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	lib/SFML/include/SFML/Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new lo/;"	e	enum:sf::Http::Response::Status
MovieInfo_t	src/Utils/SDK.hpp	/^struct MovieInfo_t {$/;"	s
Msg	src/Modules/Console.hpp	/^	_Msg Msg = nullptr;$/;"	m	class:Console	typeref:typename:_Msg
MsgFunc_SayText2	src/Offsets.cpp	/^	int MsgFunc_SayText2;$/;"	v	namespace:Offsets	typeref:typename:int
MultiScan	src/Utils/Memory.cpp	/^std::vector<std::vector<uintptr_t>> Memory::MultiScan(const char *moduleName, const Memory::Patt/;"	f	class:Memory	typeref:typename:std::vector<std::vector<uintptr_t>>
MultiScan	src/Utils/Memory.cpp	/^std::vector<uintptr_t> Memory::MultiScan(const char *moduleName, const char *pattern, int offset/;"	f	class:Memory	typeref:typename:std::vector<uintptr_t>
MultipleChoices	lib/SFML/include/SFML/Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several loca/;"	e	enum:sf::Http::Response::Status
Mutex	lib/SFML/include/SFML/System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
NAN	lib/ffmpeg/include/libavutil/mathematics.h	/^#define NAN /;"	d
NEXT	src/Features/Camera.cpp	/^		      NEXT,$/;"	e	enum:Camera::InterpolateStates::__anon821173e40203	file:
NEXT	src/Features/Camera.cpp	/^		      NEXT,$/;"	e	enum:InterpolateCurve::__anon821173e40103	file:
NL	src/SAR.cpp	/^#define NL /;"	d	file:
NOMINMAX	lib/SFML/include/SFML/Config.hpp	/^        #define NOMINMAX$/;"	d
NONE	src/Features/Demo/NetworkGhostPlayer.hpp	/^	NONE,$/;"	e	enum:HEADER
NONE	src/Features/Hud/StrafeQuality.cpp	/^	NONE,$/;"	e	enum:StrafeDir	file:
NONE	src/Features/Hud/Toasts.cpp	/^	NONE,$/;"	e	enum:Background	file:
NONE	src/Features/Renderer.cpp	/^	NONE,$/;"	e	enum:WorkerMsg	file:
NONE	src/Features/Speedrun/SpeedrunTimer.cpp	/^	NONE,$/;"	e	enum:TimerAction	file:
NONE	src/Modules/Client.hpp	/^	NONE,$/;"	e	enum:CMStatus
NOT	src/Features/ConfigPlus.cpp	/^		NOT,$/;"	e	enum:Condition::__anon194454350203	file:
NOVINT_BOLT_0	src/Modules/InputSystem.hpp	/^	NOVINT_BOLT_0,$/;"	e	enum:ButtonCode_t
NOVINT_BOLT_1	src/Modules/InputSystem.hpp	/^	NOVINT_BOLT_1,$/;"	e	enum:ButtonCode_t
NOVINT_FIRST	src/Modules/InputSystem.hpp	/^	NOVINT_FIRST = JOYSTICK_LAST + 2,  \/\/ plus 1 missing key. +1 seems to cause issues on the fir/;"	e	enum:ButtonCode_t
NOVINT_LAST	src/Modules/InputSystem.hpp	/^	NOVINT_LAST = NOVINT_PLUS_1,$/;"	e	enum:ButtonCode_t
NOVINT_LOGO_0	src/Modules/InputSystem.hpp	/^	NOVINT_LOGO_0 = NOVINT_FIRST,$/;"	e	enum:ButtonCode_t
NOVINT_LOGO_1	src/Modules/InputSystem.hpp	/^	NOVINT_LOGO_1,$/;"	e	enum:ButtonCode_t
NOVINT_PLUS_0	src/Modules/InputSystem.hpp	/^	NOVINT_PLUS_0,$/;"	e	enum:ButtonCode_t
NOVINT_PLUS_1	src/Modules/InputSystem.hpp	/^	NOVINT_PLUS_1,$/;"	e	enum:ButtonCode_t
NOVINT_TRIANGLE_0	src/Modules/InputSystem.hpp	/^	NOVINT_TRIANGLE_0,$/;"	e	enum:ButtonCode_t
NOVINT_TRIANGLE_1	src/Modules/InputSystem.hpp	/^	NOVINT_TRIANGLE_1,$/;"	e	enum:ButtonCode_t
NOW	src/Modules/Engine.hpp	/^#define NOW(/;"	d
NOW_STEADY	src/Modules/Engine.hpp	/^#define NOW_STEADY(/;"	d
NO_POWER	src/Utils/SDK.hpp	/^	NO_POWER,$/;"	e	enum:PaintPowerType
NUL	src/Utils/json11.hpp	/^			NUL,$/;"	e	enum:json11::Json::Type
NUMBER	src/Utils/json11.hpp	/^			NUMBER,$/;"	e	enum:json11::Json::Type
NUM_CODE_LENGTH_CODES	src/Utils/lodepng.cpp	/^#	define NUM_CODE_LENGTH_CODES /;"	d	file:
NUM_DEFLATE_CODE_SYMBOLS	src/Utils/lodepng.cpp	/^#	define NUM_DEFLATE_CODE_SYMBOLS /;"	d	file:
NUM_DISTANCE_SYMBOLS	src/Utils/lodepng.cpp	/^#	define NUM_DISTANCE_SYMBOLS /;"	d	file:
NUM_ENT_ENTRIES	src/Offsets.cpp	/^	int NUM_ENT_ENTRIES;$/;"	v	namespace:Offsets	typeref:typename:int
NUM_FILE_SUM_THREADS	src/Checksum.cpp	/^#define NUM_FILE_SUM_THREADS /;"	d	file:
NUM_IMAGE_FORMATS	src/Utils/SDK.hpp	/^	NUM_IMAGE_FORMATS$/;"	e	enum:ImageFormat
NUM_SERIAL_NUM_SHIFT_BITS	src/Offsets.cpp	/^	int NUM_SERIAL_NUM_SHIFT_BITS;$/;"	v	namespace:Offsets	typeref:typename:int
Name	src/Modules/Client.hpp	/^	const char *Name() override { return MODULE("client"); }$/;"	f	class:Client	typeref:typename:const char *
Name	src/Modules/Console.hpp	/^	const char *Name() override { return MODULE(TIER0); }$/;"	f	class:Console	typeref:typename:const char *
Name	src/Modules/Engine.hpp	/^	const char *Name() override { return MODULE("engine"); }$/;"	f	class:Engine	typeref:typename:const char *
Name	src/Modules/EngineDemoPlayer.hpp	/^	const char *Name() override { return MODULE("engine"); }$/;"	f	class:EngineDemoPlayer	typeref:typename:const char *
Name	src/Modules/EngineDemoRecorder.hpp	/^	const char *Name() override { return MODULE("engine"); }$/;"	f	class:EngineDemoRecorder	typeref:typename:const char *
Name	src/Modules/InputSystem.hpp	/^	const char *Name() override { return MODULE("inputsystem"); }$/;"	f	class:InputSystem	typeref:typename:const char *
Name	src/Modules/MaterialSystem.hpp	/^	const char *Name() override { return MODULE("materialsystem"); }$/;"	f	class:MaterialSystem	typeref:typename:const char *
Name	src/Modules/Scheme.hpp	/^	const char *Name() override { return MODULE("vgui2"); }$/;"	f	class:Scheme	typeref:typename:const char *
Name	src/Modules/Server.hpp	/^	const char *Name() override { return MODULE("server"); }$/;"	f	class:Server	typeref:typename:const char *
Name	src/Modules/Surface.hpp	/^	const char *Name() override { return MODULE("vguimatsurface"); }$/;"	f	class:Surface	typeref:typename:const char *
Name	src/Modules/Tier1.hpp	/^	const char *Name() override { return MODULE(TIER1); }$/;"	f	class:Tier1	typeref:typename:const char *
Name	src/Modules/VGui.hpp	/^	const char *Name() override { return MODULE("engine"); }$/;"	f	class:VGui	typeref:typename:const char *
NameChat	src/Modules/Client.cpp	/^void Client::NameChat(Color name_col, const char *name, Color col, const char *str) {$/;"	f	class:Client	typeref:typename:void
NeedAccountToLogIn	lib/SFML/include/SFML/Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	lib/SFML/include/SFML/Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	lib/SFML/include/SFML/Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	lib/SFML/include/SFML/Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NetMessage	src/Features/NetMessage.hpp	/^namespace NetMessage {$/;"	n
NetworkIDValidated	src/SAR.cpp	/^int SAR::NetworkIDValidated(const char *pszUserName, const char *pszNetworkID) {$/;"	f	class:SAR	typeref:typename:int
NetworkManager	src/Features/Demo/NetworkGhostPlayer.cpp	/^NetworkManager::NetworkManager()$/;"	f	class:NetworkManager
NetworkManager	src/Features/Demo/NetworkGhostPlayer.hpp	/^class NetworkManager {$/;"	c
NextDemo	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::NextDemo() {$/;"	f	class:DemoGhostEntity	typeref:typename:void
NoContent	lib/SFML/include/SFML/Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NonCopyable	lib/SFML/include/SFML/System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	lib/SFML/include/SFML/System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
None	lib/SFML/include/SFML/Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
Normalize	src/Utils/SDK.hpp	/^	inline Vector Normalize() {$/;"	f	struct:Vector	typeref:typename:Vector
NotEnoughMemory	lib/SFML/include/SFML/Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded stora/;"	e	enum:sf::Ftp::Response::Status
NotFound	lib/SFML/include/SFML/Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	lib/SFML/include/SFML/Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotLoggedIn	lib/SFML/include/SFML/Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	lib/SFML/include/SFML/Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditional requests, means the requested page h/;"	e	enum:sf::Http::Response::Status
NotReady	lib/SFML/include/SFML/Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
NotifyMapChange	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::NotifyMapChange() {$/;"	f	class:NetworkManager	typeref:typename:void
NotifySpeedrunFinished	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::NotifySpeedrunFinished(const bool CM) {$/;"	f	class:NetworkManager	typeref:typename:void
NullStruct	src/Utils/json11.cpp	/^	struct NullStruct {$/;"	s	namespace:json11	file:
OBJECT	src/Utils/json11.hpp	/^			OBJECT$/;"	e	enum:json11::Json::Type
OBJS	Makefile	/^OBJS=$(patsubst $(SDIR)\/%.cpp, $(ODIR)\/%.o, $(SRCS))$/;"	m
ODIR	Makefile	/^ODIR=obj$/;"	m
ON_EVENT	src/Cheats.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Checksum.cpp	/^ON_EVENT(SAR_UNLOAD) {$/;"	f
ON_EVENT	src/Event.hpp	/^#define ON_EVENT(/;"	d
ON_EVENT	src/Features/AutoSubmit.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/AutoSubmit.cpp	/^ON_EVENT(SAR_UNLOAD) {$/;"	f
ON_EVENT	src/Features/AutoSubmit.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Bot/BotServer.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(CM_FLAGS) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(CONFIG_EXEC) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(COOP_RESET_DONE) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(COOP_RESET_REMOTE) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(DEMO_START) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(DEMO_STOP) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(ORANGE_READY) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(SAR_UNLOAD) {$/;"	f
ON_EVENT	src/Features/ConfigPlus.cpp	/^ON_EVENT(SESSION_END) {$/;"	f
ON_EVENT	src/Features/Demo/DemoGhostPlayer.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Demo/DemoGhostPlayer.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Demo/GhostEntity.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Demo/NetworkGhostPlayer.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Features/Demo/NetworkGhostPlayer.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Demo/NetworkGhostPlayer.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Demo/NetworkGhostPlayer.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/FovChanger.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/FovChanger.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Hud/AimPointHud.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Hud/AimPointHud.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Hud/Hud.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Features/Hud/LPHud.cpp	/^ON_EVENT(POST_TICK) {$/;"	f
ON_EVENT	src/Features/Hud/LPHud.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Hud/PortalPlacement.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Hud/PortalPlacement.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Hud/ScrollSpeed.cpp	/^ON_EVENT(POST_TICK) {$/;"	f
ON_EVENT	src/Features/Hud/ScrollSpeed.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Hud/VelocityGraph.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Hud/VelocityGraph.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/OverlayRender.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Features/PlayerTrace.cpp	/^ON_EVENT(PROCESS_MOVEMENT) {$/;"	f
ON_EVENT	src/Features/PlayerTrace.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/PlayerTrace.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Renderer.cpp	/^ON_EVENT(DEMO_STOP) {$/;"	f
ON_EVENT	src/Features/Renderer.cpp	/^ON_EVENT(SAR_UNLOAD) {$/;"	f
ON_EVENT	src/Features/Routing/Ruler.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Routing/Ruler.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Routing/SeamshotFind.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/SegmentedTools.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/SegmentedTools.cpp	/^ON_EVENT(SESSION_END) {$/;"	f
ON_EVENT	src/Features/Speedrun/Categories.cpp	/^ON_EVENT(CM_FLAGS) {$/;"	f
ON_EVENT	src/Features/Speedrun/Categories.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Speedrun/Categories.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Speedrun/Categories.cpp	/^ON_EVENT(SESSION_END) {$/;"	f
ON_EVENT	src/Features/Speedrun/CategoryCreator.cpp	/^ON_EVENT(RENDER) {$/;"	f
ON_EVENT	src/Features/Speedrun/SpeedrunTimer.cpp	/^ON_EVENT(POST_TICK) {$/;"	f
ON_EVENT	src/Features/Speedrun/SpeedrunTimer.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Speedrun/SpeedrunTimer.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/StepCounter.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Stitcher.cpp	/^ON_EVENT(SAR_UNLOAD) { initStitch(false); }$/;"	f
ON_EVENT	src/Features/Stitcher.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Features/Tas/TasPlayer.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Features/Tas/TasServer.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Features/Timer/PauseTimer.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Timer/Timer.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/TimescaleDetect.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Features/Updater.cpp	/^ON_EVENT(SAR_UNLOAD) {$/;"	f
ON_EVENT	src/Modules/Engine.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Modules/EngineDemoPlayer.cpp	/^ON_EVENT(SESSION_START) { g_waitingForSession = false; }$/;"	f
ON_EVENT	src/Modules/EngineDemoRecorder.cpp	/^ON_EVENT(CM_FLAGS) {$/;"	f
ON_EVENT	src/Modules/EngineDemoRecorder.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Modules/EngineDemoRecorder.cpp	/^ON_EVENT(SESSION_END) {$/;"	f
ON_EVENT	src/Modules/Server.cpp	/^ON_EVENT(POST_TICK) {$/;"	f
ON_EVENT	src/Modules/Server.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Modules/Server.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT	src/Modules/Tier1.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Scheduler.cpp	/^ON_EVENT(FRAME) {$/;"	f
ON_EVENT	src/Scheduler.cpp	/^ON_EVENT(PRE_TICK) {$/;"	f
ON_EVENT	src/Scheduler.cpp	/^ON_EVENT(SESSION_START) {$/;"	f
ON_EVENT_P	src/Event.hpp	/^#define ON_EVENT_P(/;"	d
ON_GROUND	src/Utils/SDK.hpp	/^	ON_GROUND,$/;"	e	enum:InAirState
ON_INIT	src/Event.hpp	/^#define ON_INIT /;"	d
OR	src/Features/ConfigPlus.cpp	/^		OR,$/;"	e	enum:Condition::__anon194454350203	file:
ORANGE	src/Features/ConfigPlus.cpp	/^		ORANGE,$/;"	e	enum:Condition::__anon194454350203	file:
ORANGE	src/Features/Speedrun/Rules.hpp	/^	ORANGE,$/;"	e	enum:PortalColor
ORANGE	src/SAR.cpp	/^#define ORANGE /;"	d	file:
ORANGE	src/Utils/SDK.hpp	/^	ORANGE = 6,$/;"	e	enum:TextColor
ORANGE_READY	src/Event.hpp	/^		ORANGE_READY,$/;"	e	enum:Event::EventType
ORIGIN_X	src/Features/Camera.hpp	/^	ORIGIN_X,$/;"	e	enum:CameraStateParameter
ORIGIN_Y	src/Features/Camera.hpp	/^	ORIGIN_Y,$/;"	e	enum:CameraStateParameter
ORIGIN_Z	src/Features/Camera.hpp	/^	ORIGIN_Z,$/;"	e	enum:CameraStateParameter
Offset	src/Utils/Memory.hpp	/^	typedef std::vector<int> Offset;$/;"	t	namespace:Memory	typeref:typename:std::vector<int>
OffsetFinder	src/Features/OffsetFinder.cpp	/^OffsetFinder::OffsetFinder() {$/;"	f	class:OffsetFinder
OffsetFinder	src/Features/OffsetFinder.hpp	/^class OffsetFinder : public Feature {$/;"	c
Offsets	doc/contributing.md	/^### Offsets$/;"	S	section:SAR: Contributing Guide""Coding
Offsets	src/Offsets.cpp	/^namespace Offsets {$/;"	n	file:
Offsets	src/Offsets.hpp	/^namespace Offsets {$/;"	n
Ok	lib/SFML/include/SFML/Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	lib/SFML/include/SFML/Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successfu/;"	e	enum:sf::Http::Response::Status
OnCheatsChanged	src/Features/Listener.cpp	/^void Listener::OnCheatsChanged(IConVar *pVar, const char *pOldString, float flOldValue) {$/;"	f	class:Listener	typeref:typename:void
OnEdictAllocated	src/SAR.cpp	/^void SAR::OnEdictAllocated(void *edict) {$/;"	f	class:SAR	typeref:typename:void
OnEdictFreed	src/SAR.cpp	/^void SAR::OnEdictFreed(const void *edict) {$/;"	f	class:SAR	typeref:typename:void
OnGameOverlayActivated	src/Offsets.cpp	/^	int OnGameOverlayActivated;$/;"	v	namespace:Offsets	typeref:typename:int
OnJump	src/Features/Hud/ScrollSpeed.cpp	/^void ScrollSpeedHud::OnJump(int slot) {$/;"	f	class:ScrollSpeedHud	typeref:typename:void
OnLoad	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::OnLoad() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
OnMainThread	src/Scheduler.cpp	/^void Scheduler::OnMainThread(std::function<void()> fn) {$/;"	f	class:Scheduler	typeref:typename:void
OnMovement	src/Features/Hud/StrafeQuality.cpp	/^void StrafeQualityHud::OnMovement(int slot, bool grounded) {$/;"	f	class:StrafeQualityHud	typeref:typename:void
OnQueryCvarValueFinished	src/SAR.cpp	/^void SAR::OnQueryCvarValueFinished(int iCookie, void *pPlayerEntity, int eStatus, const char *pC/;"	f	class:SAR	typeref:typename:void
OnUserCmd	src/Features/Hud/StrafeQuality.cpp	/^void StrafeQualityHud::OnUserCmd(int slot, const CUserCmd &cmd) {$/;"	f	class:StrafeQualityHud	typeref:typename:void
OpenChat	src/Modules/Client.cpp	/^void Client::OpenChat() {$/;"	f	class:Client	typeref:typename:void
OpeningDataConnection	lib/SFML/include/SFML/Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connec/;"	e	enum:sf::Ftp::Response::Status
Original	src/Interface.hpp	/^	T Original(int index, bool readJmp = false) {$/;"	f	class:Interface	typeref:typename:T
OverlayGroup	src/Features/OverlayRender.cpp	/^struct OverlayGroup {$/;"	s	file:
OverlayInfo	src/Features/Speedrun/Rules.cpp	/^void PortalPlacementRule::OverlayInfo(SpeedrunRule *rule) {$/;"	f	class:PortalPlacementRule	typeref:typename:void
OverlayInfo	src/Features/Speedrun/Rules.cpp	/^void ZoneTriggerRule::OverlayInfo(SpeedrunRule *rule) {$/;"	f	class:ZoneTriggerRule	typeref:typename:void
OverlayRender	src/Features/OverlayRender.hpp	/^namespace OverlayRender {$/;"	n
OverlayText	src/Features/OverlayRender.cpp	/^struct OverlayText {$/;"	s	file:
OverrideInput	src/Features/ReloadedFix.cpp	/^void ReloadedFix::OverrideInput(const char *className, const char *inputName, variant_t *paramet/;"	f	class:ReloadedFix	typeref:typename:void
OverrideMovement	src/Features/Camera.cpp	/^void Camera::OverrideMovement(CUserCmd *cmd) {$/;"	f	class:Camera	typeref:typename:void
OverrideMovement	src/Features/Stitcher.cpp	/^void Stitcher::OverrideMovement(CUserCmd *cmd) {$/;"	f	class:Stitcher	typeref:typename:void
OverrideView	src/Features/Camera.cpp	/^void Camera::OverrideView(CViewSetup *m_View) {$/;"	f	class:Camera	typeref:typename:void
OverrideView	src/Features/Stitcher.cpp	/^void Stitcher::OverrideView(CViewSetup *view) {$/;"	f	class:Stitcher	typeref:typename:void
OverrideView	src/Offsets.cpp	/^	int OverrideView;$/;"	v	namespace:Offsets	typeref:typename:int
Overview	README.md	/^# Overview$/;"	c
Overview	doc/contributing.md	/^## Overview$/;"	s	chapter:SAR: Contributing Guide
PAGE_EXECUTE_FLAGS	lib/minhook/buffer.c	/^#define PAGE_EXECUTE_FLAGS /;"	d	file:
PAINT_INGAMEPANELS	src/Utils/SDK.hpp	/^	PAINT_INGAMEPANELS = (1 << 1),$/;"	e	enum:PaintMode_t
PAINT_POWER_TYPE_COUNT	src/Utils/SDK.hpp	/^	PAINT_POWER_TYPE_COUNT = NO_POWER,$/;"	e	enum:PaintPowerType
PAINT_POWER_TYPE_COUNT_PLUS_NO_POWER	src/Utils/SDK.hpp	/^	PAINT_POWER_TYPE_COUNT_PLUS_NO_POWER,$/;"	e	enum:PaintPowerType
PAINT_UIPANELS	src/Utils/SDK.hpp	/^	PAINT_UIPANELS = (1 << 0),$/;"	e	enum:PaintMode_t
PARAM	src/Features/Hud/InputHud.cpp	/^#define PARAM(/;"	d	file:
PARSER_FLAG_COMPLETE_FRAMES	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define PARSER_FLAG_COMPLETE_FRAMES /;"	d
PARSER_FLAG_FETCHED_OFFSET	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define PARSER_FLAG_FETCHED_OFFSET /;"	d
PARSER_FLAG_ONCE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define PARSER_FLAG_ONCE /;"	d
PARSER_FLAG_USE_CODEC_TS	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define PARSER_FLAG_USE_CODEC_TS /;"	d
PATH_SEP	src/Modules/EngineDemoRecorder.cpp	/^#	define PATH_SEP /;"	d	file:
PATTERN	src/Utils/Memory.hpp	/^#define PATTERN(/;"	d
PATTERNS	src/Utils/Memory.hpp	/^#define PATTERNS(/;"	d
PAUSE	src/Features/Speedrun/Rules.hpp	/^	PAUSE,$/;"	e	enum:RuleAction
PAUSE	src/Features/Speedrun/SpeedrunTimer.cpp	/^	PAUSE,$/;"	e	enum:PacketType	file:
PAUSED	src/Features/Bot/BotServer.hpp	/^	PAUSED,$/;"	e	enum:PlaybackState
PAUSED	src/Features/Tas/TasServer.hpp	/^	PAUSED,$/;"	e	enum:PlaybackState
PDB_ASSET_NAME	src/Features/Updater.cpp	/^#	define PDB_ASSET_NAME /;"	d	file:
PDB_PATH	src/Features/Updater.cpp	/^#	define PDB_PATH /;"	d	file:
PERSISTENT_SVAR_FILENAME	src/Features/ConfigPlus.cpp	/^#define PERSISTENT_SVAR_FILENAME /;"	d	file:
PEntityOfEntIndex	src/Modules/Engine.cpp	/^edict_t *Engine::PEntityOfEntIndex(int iEntIndex) {$/;"	f	class:Engine	typeref:typename:edict_t *
PFROZEN_THREADS	lib/minhook/hook.c	/^} FROZEN_THREADS, *PFROZEN_THREADS;$/;"	t	typeref:struct:_FROZEN_THREADS *	file:
PHOOK_ENTRY	lib/minhook/hook.c	/^} HOOK_ENTRY, *PHOOK_ENTRY;$/;"	t	typeref:struct:_HOOK_ENTRY *	file:
PING	src/Features/Demo/NetworkGhostPlayer.hpp	/^	PING,$/;"	e	enum:HEADER
PIPE	src/Features/Tas/TasParser.cpp	/^		PIPE,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
PJMP_ABS	lib/minhook/trampoline.h	/^} JMP_ABS, *PJMP_ABS;$/;"	t	typeref:struct:_JMP_ABS *
PJMP_REL	lib/minhook/trampoline.h	/^} JMP_REL, *PJMP_REL, CALL_REL;$/;"	t	typeref:struct:_JMP_REL *
PJMP_REL_SHORT	lib/minhook/trampoline.h	/^} JMP_REL_SHORT, *PJMP_REL_SHORT;$/;"	t	typeref:struct:_JMP_REL_SHORT *
PLAYERNAME	src/Utils/SDK.hpp	/^	PLAYERNAME = 3,$/;"	e	enum:TextColor
PLAYER_SIZE	src/Features/Hud/Minimap.cpp	/^#define PLAYER_SIZE /;"	d	file:
PLAYING	src/Features/Bot/BotServer.hpp	/^	PLAYING,$/;"	e	enum:PlaybackState
PLAYING	src/Features/Tas/TasServer.hpp	/^	PLAYING,$/;"	e	enum:PlaybackState
PLUS	src/Features/Tas/TasParser.cpp	/^		PLUS,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
PMEMORY_BLOCK	lib/minhook/buffer.c	/^} MEMORY_BLOCK, *PMEMORY_BLOCK;$/;"	t	typeref:struct:_MEMORY_BLOCK *	file:
PMEMORY_SLOT	lib/minhook/buffer.c	/^} MEMORY_SLOT, *PMEMORY_SLOT;$/;"	t	typeref:struct:_MEMORY_SLOT *	file:
POP_OP_TO_OUTPUT	src/Features/ConfigPlus.cpp	/^#define POP_OP_TO_OUTPUT /;"	d	file:
PORTAL_COND_DEATH_CRUSH	src/Utils/SDK.hpp	/^	PORTAL_COND_DEATH_CRUSH,$/;"	e	enum:__anon21a65a740d03
PORTAL_COND_DEATH_GIB	src/Utils/SDK.hpp	/^	PORTAL_COND_DEATH_GIB,$/;"	e	enum:__anon21a65a740d03
PORTAL_COND_DROWNING	src/Utils/SDK.hpp	/^	PORTAL_COND_DROWNING,$/;"	e	enum:__anon21a65a740d03
PORTAL_COND_LAST	src/Utils/SDK.hpp	/^	PORTAL_COND_LAST$/;"	e	enum:__anon21a65a740d03
PORTAL_COND_POINTING	src/Utils/SDK.hpp	/^	PORTAL_COND_POINTING,$/;"	e	enum:__anon21a65a740d03
PORTAL_COND_TAUNTING	src/Utils/SDK.hpp	/^	PORTAL_COND_TAUNTING = 0,$/;"	e	enum:__anon21a65a740d03
PORTAL_PLACEMENT_BUMPED	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_BUMPED,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_CANT_FIT	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_CANT_FIT,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_CLEANSER	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_CLEANSER,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_INVALID_SURFACE	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_INVALID_SURFACE,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_INVALID_VOLUME	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_INVALID_VOLUME,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_OVERLAP_LINKED	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_OVERLAP_LINKED,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_OVERLAP_PARTNER_PORTAL	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_OVERLAP_PARTNER_PORTAL,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_PASSTHROUGH_SURFACE	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_PASSTHROUGH_SURFACE,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_SUCCESS	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_SUCCESS,$/;"	e	enum:PortalPlacementResult_t
PORTAL_PLACEMENT_USED_HELPER	src/Utils/SDK.hpp	/^	PORTAL_PLACEMENT_USED_HELPER,$/;"	e	enum:PortalPlacementResult_t
PORTAL_POWER	src/Utils/SDK.hpp	/^	PORTAL_POWER,$/;"	e	enum:PaintPowerType
POST_TICK	src/Event.hpp	/^		POST_TICK,$/;"	e	enum:Event::EventType
PREFIX_ADDRESS_SIZE	lib/minhook/hde/hde32.h	/^#define PREFIX_ADDRESS_SIZE /;"	d
PREFIX_ADDRESS_SIZE	lib/minhook/hde/hde64.h	/^#define PREFIX_ADDRESS_SIZE /;"	d
PREFIX_LOCK	lib/minhook/hde/hde32.h	/^#define PREFIX_LOCK /;"	d
PREFIX_LOCK	lib/minhook/hde/hde64.h	/^#define PREFIX_LOCK /;"	d
PREFIX_OPERAND_SIZE	lib/minhook/hde/hde32.h	/^#define PREFIX_OPERAND_SIZE /;"	d
PREFIX_OPERAND_SIZE	lib/minhook/hde/hde64.h	/^#define PREFIX_OPERAND_SIZE /;"	d
PREFIX_REPNZ	lib/minhook/hde/hde32.h	/^#define PREFIX_REPNZ /;"	d
PREFIX_REPNZ	lib/minhook/hde/hde64.h	/^#define PREFIX_REPNZ /;"	d
PREFIX_REPX	lib/minhook/hde/hde32.h	/^#define PREFIX_REPX /;"	d
PREFIX_REPX	lib/minhook/hde/hde64.h	/^#define PREFIX_REPX /;"	d
PREFIX_SEGMENT_CS	lib/minhook/hde/hde32.h	/^#define PREFIX_SEGMENT_CS /;"	d
PREFIX_SEGMENT_CS	lib/minhook/hde/hde64.h	/^#define PREFIX_SEGMENT_CS /;"	d
PREFIX_SEGMENT_DS	lib/minhook/hde/hde32.h	/^#define PREFIX_SEGMENT_DS /;"	d
PREFIX_SEGMENT_DS	lib/minhook/hde/hde64.h	/^#define PREFIX_SEGMENT_DS /;"	d
PREFIX_SEGMENT_ES	lib/minhook/hde/hde32.h	/^#define PREFIX_SEGMENT_ES /;"	d
PREFIX_SEGMENT_ES	lib/minhook/hde/hde64.h	/^#define PREFIX_SEGMENT_ES /;"	d
PREFIX_SEGMENT_FS	lib/minhook/hde/hde32.h	/^#define PREFIX_SEGMENT_FS /;"	d
PREFIX_SEGMENT_FS	lib/minhook/hde/hde64.h	/^#define PREFIX_SEGMENT_FS /;"	d
PREFIX_SEGMENT_GS	lib/minhook/hde/hde32.h	/^#define PREFIX_SEGMENT_GS /;"	d
PREFIX_SEGMENT_GS	lib/minhook/hde/hde64.h	/^#define PREFIX_SEGMENT_GS /;"	d
PREFIX_SEGMENT_SS	lib/minhook/hde/hde32.h	/^#define PREFIX_SEGMENT_SS /;"	d
PREFIX_SEGMENT_SS	lib/minhook/hde/hde64.h	/^#define PREFIX_SEGMENT_SS /;"	d
PREV	src/Features/Camera.cpp	/^		      PREV,$/;"	e	enum:Camera::InterpolateStates::__anon821173e40203	file:
PREV	src/Features/Camera.cpp	/^		      PREV,$/;"	e	enum:InterpolateCurve::__anon821173e40103	file:
PREV_MAP	src/Features/ConfigPlus.cpp	/^		PREV_MAP,$/;"	e	enum:Condition::__anon194454350203	file:
PRE_66	lib/minhook/hde/table32.h	/^#define PRE_66 /;"	d
PRE_66	lib/minhook/hde/table64.h	/^#define PRE_66 /;"	d
PRE_67	lib/minhook/hde/table32.h	/^#define PRE_67 /;"	d
PRE_67	lib/minhook/hde/table64.h	/^#define PRE_67 /;"	d
PRE_ALL	lib/minhook/hde/table32.h	/^#define PRE_ALL /;"	d
PRE_ALL	lib/minhook/hde/table64.h	/^#define PRE_ALL /;"	d
PRE_ANY	lib/minhook/hde/table32.h	/^#define PRE_ANY /;"	d
PRE_ANY	lib/minhook/hde/table64.h	/^#define PRE_ANY /;"	d
PRE_F2	lib/minhook/hde/table32.h	/^#define PRE_F2 /;"	d
PRE_F2	lib/minhook/hde/table64.h	/^#define PRE_F2 /;"	d
PRE_F3	lib/minhook/hde/table32.h	/^#define PRE_F3 /;"	d
PRE_F3	lib/minhook/hde/table64.h	/^#define PRE_F3 /;"	d
PRE_LOCK	lib/minhook/hde/table32.h	/^#define PRE_LOCK /;"	d
PRE_LOCK	lib/minhook/hde/table64.h	/^#define PRE_LOCK /;"	d
PRE_NONE	lib/minhook/hde/table32.h	/^#define PRE_NONE /;"	d
PRE_NONE	lib/minhook/hde/table64.h	/^#define PRE_NONE /;"	d
PRE_SEG	lib/minhook/hde/table32.h	/^#define PRE_SEG /;"	d
PRE_SEG	lib/minhook/hde/table64.h	/^#define PRE_SEG /;"	d
PRE_TICK	src/Event.hpp	/^		PRE_TICK,$/;"	e	enum:Event::EventType
PRINT	src/Modules/Tier1.cpp	/^		PRINT,$/;"	e	enum:BufferedPart::Type	file:
PROCESS_MOVEMENT	src/Event.hpp	/^		PROCESS_MOVEMENT,$/;"	e	enum:Event::EventType
PTRAMPOLINE	lib/minhook/trampoline.h	/^} TRAMPOLINE, *PTRAMPOLINE;$/;"	t	typeref:struct:_TRAMPOLINE *
PURPLE	src/SAR.cpp	/^#define PURPLE /;"	d	file:
PUT_UTF16	lib/ffmpeg/include/libavutil/common.h	/^#define PUT_UTF16(/;"	d
PUT_UTF8	lib/ffmpeg/include/libavutil/common.h	/^#define PUT_UTF8(/;"	d
PYRAMID	src/Features/Demo/GhostEntity.hpp	/^	PYRAMID = 1,$/;"	e	enum:GhostType
PYRAMID_PGUN	src/Features/Demo/GhostEntity.hpp	/^	PYRAMID_PGUN = 2,$/;"	e	enum:GhostType
Packet	lib/SFML/include/SFML/Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
PacketType	src/Features/Speedrun/SpeedrunTimer.cpp	/^enum PacketType {$/;"	g	file:
PageTypeUnknown	lib/SFML/include/SFML/Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
Paint	src/Features/Demo/NetworkGhostPlayer.cpp	/^	virtual void Paint(int slot) override {$/;"	f	class:PlayerListUi	typeref:typename:void	file:
Paint	src/Features/Demo/NetworkGhostPlayer.cpp	/^	virtual void Paint(int slot) override {$/;"	f	class:SyncUi	typeref:typename:void	file:
Paint	src/Features/Hud/Crosshair.cpp	/^void Crosshair::Paint(int slot) {$/;"	f	class:Crosshair	typeref:typename:void
Paint	src/Features/Hud/Hud.hpp	/^	virtual void Paint(HudContext *ctx) { this->callbackDefault(ctx); }$/;"	f	class:HudElement	typeref:typename:void
Paint	src/Features/Hud/Hud.hpp	/^	void Paint(HudContext *ctx) { this->callbackMode(ctx, this->variable->GetInt()); }$/;"	f	class:HudModeElement	typeref:typename:void
Paint	src/Features/Hud/Hud.hpp	/^	void Paint(HudContext *ctx) { this->callbackString(ctx, this->variable->GetString()); }$/;"	f	class:HudStringElement	typeref:typename:void
Paint	src/Features/Hud/InputHud.cpp	/^void InputHud::Paint(int slot) {$/;"	f	class:InputHud	typeref:typename:void
Paint	src/Features/Hud/InspectionHud.cpp	/^void InspectionHud::Paint(int slot) {$/;"	f	class:InspectionHud	typeref:typename:void
Paint	src/Features/Hud/LPHud.cpp	/^void LPHud::Paint(int slot) {$/;"	f	class:LPHud	typeref:typename:void
Paint	src/Features/Hud/Minimap.cpp	/^	void Paint(int slot) override {$/;"	f	class:MinimapHud	typeref:typename:void	file:
Paint	src/Features/Hud/PortalPlacement.cpp	/^void PortalPlacementHud::Paint(int slot) {$/;"	f	class:PortalPlacementHud	typeref:typename:void
Paint	src/Features/Hud/PortalgunHud.cpp	/^void PortalgunHud::Paint(int slot) {$/;"	f	class:PortalgunHud	typeref:typename:void
Paint	src/Features/Hud/ScrollSpeed.cpp	/^void ScrollSpeedHud::Paint(int slot) {$/;"	f	class:ScrollSpeedHud	typeref:typename:void
Paint	src/Features/Hud/SpeedrunHud.cpp	/^void SpeedrunHud::Paint(int slot) {$/;"	f	class:SpeedrunHud	typeref:typename:void
Paint	src/Features/Hud/StrafeQuality.cpp	/^void StrafeQualityHud::Paint(int slot) {$/;"	f	class:StrafeQualityHud	typeref:typename:void
Paint	src/Features/Hud/StrafeSyncHud.cpp	/^void StrafeSyncHud::Paint(int slot) {$/;"	f	class:StrafeSyncHud	typeref:typename:void
Paint	src/Features/Hud/Toasts.cpp	/^void ToastHud::Paint(int slot) {$/;"	f	class:ToastHud	typeref:typename:void
Paint	src/Features/Hud/VelocityGraph.cpp	/^void VelocityGraph::Paint(int slot) {$/;"	f	class:VelocityGraph	typeref:typename:void
Paint	src/Features/Hud/VphysHud.cpp	/^void VphysHud::Paint(int slot) {$/;"	f	class:VphysHud	typeref:typename:void
Paint	src/Features/Hud/Watermark.cpp	/^	void Paint(int slot) override {$/;"	f	class:WatermarkHud	typeref:typename:void	file:
Paint	src/Features/Stitcher.cpp	/^bool Stitcher::Paint() {$/;"	f	class:Stitcher	typeref:typename:bool
Paint	src/Offsets.cpp	/^	int Paint;$/;"	v	namespace:Offsets	typeref:typename:int
PaintMode_t	src/Utils/SDK.hpp	/^enum PaintMode_t {$/;"	g
PaintPowerInfo_t	src/Utils/SDK.hpp	/^struct PaintPowerInfo_t {$/;"	s
PaintPowerType	src/Utils/SDK.hpp	/^enum PaintPowerType {$/;"	g
PaintTraverseEx	src/Offsets.cpp	/^	int PaintTraverseEx;$/;"	v	namespace:Offsets	typeref:typename:int
ParameterNotImplemented	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
Parse	src/Features/Demo/DemoParser.cpp	/^bool DemoParser::Parse(std::string filePath, Demo *demo, bool ghostRequest, std::map<int, DataGh/;"	f	class:DemoParser	typeref:typename:bool
ParseCondition	src/Features/ConfigPlus.cpp	/^static Condition *ParseCondition(std::queue<Token> toks) {$/;"	f	typeref:typename:Condition *	file:
ParseFile	src/Features/Tas/TasParser.cpp	/^std::vector<TasFramebulk> TasParser::ParseFile(int slot, std::string filePath) {$/;"	f	class:TasParser	typeref:typename:std::vector<TasFramebulk>
ParseParams	src/Features/Tas/TasTools/AbsoluteMoveTool.cpp	/^std::shared_ptr<TasToolParams> AbsoluteMoveTool::ParseParams(std::vector<std::string> vp) {$/;"	f	class:AbsoluteMoveTool	typeref:typename:std::shared_ptr<TasToolParams>
ParseParams	src/Features/Tas/TasTools/AutoAimTool.cpp	/^std::shared_ptr<TasToolParams> AutoAimTool::ParseParams(std::vector<std::string> args) {$/;"	f	class:AutoAimTool	typeref:typename:std::shared_ptr<TasToolParams>
ParseParams	src/Features/Tas/TasTools/AutoJumpTool.cpp	/^std::shared_ptr<TasToolParams> AutoJumpTool::ParseParams(std::vector<std::string> vp) {$/;"	f	class:AutoJumpTool	typeref:typename:std::shared_ptr<TasToolParams>
ParseParams	src/Features/Tas/TasTools/DecelTool.cpp	/^std::shared_ptr<TasToolParams> DecelTool::ParseParams(std::vector<std::string> args) {$/;"	f	class:DecelTool	typeref:typename:std::shared_ptr<TasToolParams>
ParseParams	src/Features/Tas/TasTools/SetAngleTool.cpp	/^std::shared_ptr<TasToolParams> SetAngleTool::ParseParams(std::vector<std::string> vp) {$/;"	f	class:SetAngleTool	typeref:typename:std::shared_ptr<TasToolParams>
ParseParams	src/Features/Tas/TasTools/StrafeTool.cpp	/^std::shared_ptr<TasToolParams> AutoStrafeTool::ParseParams(std::vector<std::string> vp) {$/;"	f	class:AutoStrafeTool	typeref:typename:std::shared_ptr<TasToolParams>
ParsePartialArgs	src/Command.cpp	/^std::vector<std::string> ParsePartialArgs(const char *partial) {$/;"	f	typeref:typename:std::vector<std::string>
ParseSmoothingInfo_Continue	src/Modules/Engine.hpp	/^	static uintptr_t ParseSmoothingInfo_Continue;$/;"	m	class:Engine	typeref:typename:uintptr_t
ParseSmoothingInfo_Default	src/Modules/Engine.hpp	/^	static uintptr_t ParseSmoothingInfo_Default;$/;"	m	class:Engine	typeref:typename:uintptr_t
ParseSmoothingInfo_Skip	src/Modules/Engine.hpp	/^	static uintptr_t ParseSmoothingInfo_Skip;$/;"	m	class:Engine	typeref:typename:uintptr_t
Partial	lib/SFML/include/SFML/Network/Socket.hpp	/^        Partial,      \/\/\/< The socket sent a part of the data$/;"	e	enum:sf::Socket::Status
PartialContent	lib/SFML/include/SFML/Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a respo/;"	e	enum:sf::Http::Response::Status
Patch	src/Utils/Memory.hpp	/^	class Patch {$/;"	c	namespace:Memory
Pattern	src/Utils/Memory.hpp	/^	struct Pattern {$/;"	s	namespace:Memory
Patterns	src/Utils/Memory.hpp	/^	typedef std::vector<const Pattern *> Patterns;$/;"	t	namespace:Memory	typeref:typename:std::vector<const Pattern * >
Pause	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Pause() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Pause	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::Pause() {$/;"	f	class:TasPlayer	typeref:typename:void
Pause	src/SAR.cpp	/^void SAR::Pause() {$/;"	f	class:SAR	typeref:typename:void
PauseAllGhosts	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::PauseAllGhosts() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
PauseNetwork	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::PauseNetwork() {$/;"	f	class:NetworkManager	typeref:typename:void
PauseSyncSession	src/Features/Stats/Sync.cpp	/^void Sync::PauseSyncSession() {$/;"	f	class:Sync	typeref:typename:void
PauseTimer	src/Features/Timer/PauseTimer.cpp	/^PauseTimer::PauseTimer()$/;"	f	class:PauseTimer
PauseTimer	src/Features/Timer/PauseTimer.hpp	/^class PauseTimer : public Feature {$/;"	c
PendingPacket	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
PerUserInput_t	src/Utils/SDK.hpp	/^struct PerUserInput_t {$/;"	s
PerUserInput_tSize	src/Offsets.cpp	/^	int PerUserInput_tSize;$/;"	v	namespace:Offsets	typeref:typename:int
Picture	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^#define Picture /;"	d
PlayFile	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::PlayFile(std::string slot0, std::string slot1) {$/;"	f	class:TasPlayer	typeref:typename:void
PlaySingleCoop	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::PlaySingleCoop(std::string file, int slot) {$/;"	f	class:TasPlayer	typeref:typename:void
PlaybackState	src/Features/Bot/BotServer.hpp	/^enum class PlaybackState {$/;"	g
PlaybackState	src/Features/Tas/TasServer.hpp	/^enum class PlaybackState {$/;"	g
PlayerListUi	src/Features/Demo/NetworkGhostPlayer.cpp	/^	PlayerListUi()$/;"	f	class:PlayerListUi	file:
PlayerListUi	src/Features/Demo/NetworkGhostPlayer.cpp	/^class PlayerListUi : public Hud {$/;"	c	file:
PlayerMove	src/Offsets.cpp	/^	int PlayerMove;$/;"	v	namespace:Offsets	typeref:typename:int
PlayerRunCommand	src/Offsets.cpp	/^	int PlayerRunCommand;$/;"	v	namespace:Offsets	typeref:typename:int
PlayerStats	src/Features/Stats/Stats.hpp	/^	PlayerStats()$/;"	f	struct:PlayerStats
PlayerStats	src/Features/Stats/Stats.hpp	/^struct PlayerStats {$/;"	s
PlayerTrace	src/Features/PlayerTrace.cpp	/^PlayerTrace::PlayerTrace() {$/;"	f	class:PlayerTrace
PlayerTrace	src/Features/PlayerTrace.hpp	/^class PlayerTrace : public Feature {$/;"	c
Plugin	src/Plugin.cpp	/^Plugin::Plugin()$/;"	f	class:Plugin
Plugin	src/Plugin.hpp	/^class Plugin {$/;"	c
PointToScreen	src/Modules/Engine.cpp	/^int Engine::PointToScreen(const Vector &point, Vector &screen) {$/;"	f	class:Engine	typeref:typename:int
PointTransform	src/Utils/SDK.hpp	/^	inline Vector PointTransform(Vector vVec) const {$/;"	f	struct:VMatrix	typeref:typename:Vector
PointlessCommand	lib/SFML/include/SFML/Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Portal2	src/Games/Linux/Portal2.cpp	/^Portal2::Portal2() {$/;"	f	class:Portal2
Portal2	src/Games/Linux/Portal2.hpp	/^class Portal2 : public Game {$/;"	c
Portal2	src/Games/Windows/Portal2.cpp	/^Portal2::Portal2() {$/;"	f	class:Portal2
Portal2	src/Games/Windows/Portal2.hpp	/^class Portal2 : public Game {$/;"	c
PortalColor	src/Features/Speedrun/Rules.hpp	/^enum PortalColor {$/;"	g
PortalPlacementHud	src/Features/Hud/PortalPlacement.cpp	/^PortalPlacementHud::PortalPlacementHud()$/;"	f	class:PortalPlacementHud
PortalPlacementHud	src/Features/Hud/PortalPlacement.hpp	/^class PortalPlacementHud : public Hud {$/;"	c
PortalPlacementResult_t	src/Utils/SDK.hpp	/^enum PortalPlacementResult_t$/;"	g
PortalPlacementRule	src/Features/Speedrun/Rules.hpp	/^struct PortalPlacementRule {$/;"	s
PortalReloaded	src/Games/Linux/PortalReloaded.cpp	/^PortalReloaded::PortalReloaded() {$/;"	f	class:PortalReloaded
PortalReloaded	src/Games/Linux/PortalReloaded.hpp	/^class PortalReloaded : public Portal2 {$/;"	c
PortalReloaded	src/Games/Windows/PortalReloaded.cpp	/^PortalReloaded::PortalReloaded() {$/;"	f	class:PortalReloaded
PortalReloaded	src/Games/Windows/PortalReloaded.hpp	/^class PortalReloaded : public Portal2 {$/;"	c
PortalStoriesMel	src/Games/Linux/PortalStoriesMel.cpp	/^PortalStoriesMel::PortalStoriesMel() {$/;"	f	class:PortalStoriesMel
PortalStoriesMel	src/Games/Linux/PortalStoriesMel.hpp	/^class PortalStoriesMel : public Portal2 {$/;"	c
PortalStoriesMel	src/Games/Windows/PortalStoriesMel.cpp	/^PortalStoriesMel::PortalStoriesMel() {$/;"	f	class:PortalStoriesMel
PortalStoriesMel	src/Games/Windows/PortalStoriesMel.hpp	/^class PortalStoriesMel : public Portal2 {$/;"	c
PortalgunHud	src/Features/Hud/PortalgunHud.cpp	/^PortalgunHud::PortalgunHud()$/;"	f	class:PortalgunHud
PortalgunHud	src/Features/Hud/PortalgunHud.hpp	/^class PortalgunHud : public Hud {$/;"	c
PositionFromString	src/Features/Hud/Hud.cpp	/^float Hud::PositionFromString(const char *str, bool isX) {$/;"	f	class:Hud	typeref:typename:float
Post	lib/SFML/include/SFML/Network/Http.hpp	/^            Post,  \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PostProcess	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::PostProcess(int slot, void *player, CUserCmd *cmd) {$/;"	f	class:TasPlayer	typeref:typename:void
PostStart	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::PostStart() {$/;"	f	class:TasPlayer	typeref:typename:void
PrecacheModel	src/Modules/Engine.hpp	/^	_PrecacheModel PrecacheModel = nullptr;$/;"	m	class:Engine	typeref:typename:_PrecacheModel
PrecacheModel	src/Offsets.cpp	/^	int PrecacheModel;$/;"	v	namespace:Offsets	typeref:typename:int
Print	src/Features/Stats/StatsCounter.cpp	/^void StatsCounter::Print() {$/;"	f	class:StatsCounter	typeref:typename:void
Print	src/Modules/Console.hpp	/^	void Print(const char *fmt, T... args) {$/;"	f	class:Console	typeref:typename:void
Print	src/Modules/Tier1.cpp	/^	virtual void Print(const char *msg) override {$/;"	f	class:ConsoleDisplayHook	typeref:typename:void	file:
Print	src/Utils/Math.cpp	/^void Matrix::Print() {$/;"	f	class:Matrix	typeref:typename:void
PrintActive	src/Modules/Console.hpp	/^	void PrintActive(const char *fmt, T... args) {$/;"	f	class:Console	typeref:typename:void
PrintData	src/Features/Routing/EntityInspector.cpp	/^void EntityInspector::PrintData() {$/;"	f	class:EntityInspector	typeref:typename:void
PrintHelp	src/Features/Cvars.cpp	/^void Cvars::PrintHelp(const CCommand &args) {$/;"	f	class:Cvars	typeref:typename:void
PrintRecap	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::PrintRecap() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
ProcessMovement	src/Offsets.cpp	/^	int ProcessMovement;$/;"	v	namespace:Offsets	typeref:typename:int
ProcessThreadIPs	lib/minhook/hook.c	/^static void ProcessThreadIPs(HANDLE hThread, UINT pos, UINT action)$/;"	f	typeref:typename:void	file:
ProcessTick	src/Offsets.cpp	/^	int ProcessTick;$/;"	v	namespace:Offsets	typeref:typename:int
ProcessTick_Detour	src/Modules/Engine.cpp	/^bool __fastcall ProcessTick_Detour(void *thisptr, void *unused, void *pack)$/;"	f	typeref:typename:bool __fastcall
ProcessTick_Hook	src/Modules/Engine.cpp	/^static Hook ProcessTick_Hook(&ProcessTick_Detour);$/;"	v	typeref:typename:Hook	file:
ProgressCreationStage	src/Features/Routing/Ruler.cpp	/^void RulerManager::ProgressCreationStage() {$/;"	f	class:RulerManager	typeref:typename:void
Pull Requests	doc/contributing.md	/^## Pull Requests$/;"	s	chapter:SAR: Contributing Guide
Put	lib/SFML/include/SFML/Network/Http.hpp	/^            Put,   \/\/\/< Request in put mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
QAngle	src/Utils/SDK.hpp	/^struct QAngle {$/;"	s
QAngleToVector	src/Utils/SDK.hpp	/^inline Vector QAngleToVector(const QAngle &a) {$/;"	f	typeref:typename:Vector
QueueHook	lib/minhook/hook.c	/^static MH_STATUS QueueHook(LPVOID pTarget, BOOL queueEnable)$/;"	f	typeref:typename:MH_STATUS	file:
Quick Tutorial with git	doc/contributing.md	/^### Quick Tutorial with git$/;"	S	section:SAR: Contributing Guide""Pull Requests
RAD2DEG	src/Utils/Math.hpp	/^#define RAD2DEG(/;"	d
RDFTContext	lib/ffmpeg/include/libavcodec/avfft.h	/^typedef struct RDFTContext RDFTContext;$/;"	t	typeref:struct:RDFTContext
RDFTransformType	lib/ffmpeg/include/libavcodec/avfft.h	/^enum RDFTransformType {$/;"	g
READBIT	src/Utils/lodepng.cpp	/^#		define READBIT(/;"	d	file:
READ_LE32	src/Checksum.cpp	/^#define READ_LE32(/;"	d	file:
RED	src/SAR.cpp	/^#define RED /;"	d	file:
REDECL	src/Utils.hpp	/^#define REDECL(/;"	d
REFLECT_POWER	src/Utils/SDK.hpp	/^	REFLECT_POWER,$/;"	e	enum:PaintPowerType
RENDER	src/Event.hpp	/^		RENDER,$/;"	e	enum:Event::EventType
RESET	src/Features/Speedrun/SpeedrunTimer.cpp	/^	RESET,$/;"	e	enum:PacketType	file:
RESET	src/Features/Speedrun/SpeedrunTimer.cpp	/^	RESET,$/;"	e	enum:TimerAction	file:
RESET_COOP_PROGRESS_MESSAGE_TYPE	src/Modules/Server.cpp	/^#define RESET_COOP_PROGRESS_MESSAGE_TYPE /;"	d	file:
RESTART	src/Features/Speedrun/SpeedrunTimer.cpp	/^	RESTART,$/;"	e	enum:TimerAction	file:
RESUME	src/Features/Speedrun/Rules.hpp	/^	RESUME,$/;"	e	enum:RuleAction
RESUME	src/Features/Speedrun/SpeedrunTimer.cpp	/^	RESUME,$/;"	e	enum:PacketType	file:
RET	src/Utils.cpp	/^#define RET(/;"	d	file:
RIGHT	src/Features/Hud/StrafeQuality.cpp	/^	RIGHT,$/;"	e	enum:StrafeDir	file:
RIGHT	src/Features/Hud/Toasts.cpp	/^	RIGHT,$/;"	e	enum:Alignment	file:
RIGHT_ANGLE	src/Features/Tas/TasParser.cpp	/^		RIGHT_ANGLE,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
ROUNDED_DIV	lib/ffmpeg/include/libavutil/common.h	/^#define ROUNDED_DIV(/;"	d
RSHIFT	lib/ffmpeg/include/libavutil/common.h	/^#define RSHIFT(/;"	d
RUN_EXECS	src/Features/ConfigPlus.cpp	/^#define RUN_EXECS(/;"	d	file:
RandomNumber	src/Utils/Math.cpp	/^float Math::RandomNumber(const float &min, const float &max) {$/;"	f	class:Math	typeref:typename:float
RandomNumber	src/Utils/Math.cpp	/^int Math::RandomNumber(const int &min, const int &max) {$/;"	f	class:Math	typeref:typename:int
RangeNotSatisfiable	lib/SFML/include/SFML/Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request /;"	e	enum:sf::Http::Response::Status
Ray_t	src/Utils/SDK.hpp	/^struct Ray_t {$/;"	s
RcOverride	lib/ffmpeg/include/libavcodec/avcodec.h	/^typedef struct RcOverride{$/;"	s
RcOverride	lib/ffmpeg/include/libavcodec/avcodec.h	/^} RcOverride;$/;"	t	typeref:struct:RcOverride
Read	src/Utils/Memory.hpp	/^	inline T Read(uintptr_t source) {$/;"	f	namespace:Memory	typeref:typename:T
Read	src/Utils/Memory.hpp	/^	void Read(uintptr_t source, T *destination) {$/;"	f	namespace:Memory	typeref:typename:void
ReadCustomData_Wrapper	src/Modules/Engine.cpp	/^void __fastcall ReadCustomData_Wrapper(int demoFile, int edx, int unk1, int unk2) {$/;"	f	typeref:typename:void __fastcall
ReadScreenPixels	src/Features/Renderer.cpp	/^static inline void ReadScreenPixels(int x, int y, int w, int h, void *buf, ImageFormat fmt) {$/;"	f	typeref:typename:void	file:
ReadScreenPixels	src/Offsets.cpp	/^	int ReadScreenPixels;$/;"	v	namespace:Offsets	typeref:typename:int
ReadUnsigned	src/Utils/SDK.hpp	/^	uint32_t ReadUnsigned(int nbits) {$/;"	f	class:bf_read	typeref:typename:uint32_t
Reading Function Addresses	doc/contributing.md	/^#### Reading Function Addresses$/;"	t	subsection:SAR: Contributing Guide""Coding""Memory Utils
Reading Pointer Paths	doc/contributing.md	/^#### Reading Pointer Paths$/;"	t	subsection:SAR: Contributing Guide""Coding""Memory Utils
Realloc	src/Variable.cpp	/^void Variable::Realloc() {$/;"	f	class:Variable	typeref:typename:void
Rebase	src/Features/Session.cpp	/^void Session::Rebase(const int from) {$/;"	f	class:Session	typeref:typename:void
Rebase	src/Features/Timer/Timer.cpp	/^void Timer::Rebase(int engineTick) {$/;"	f	class:Timer	typeref:typename:void
ReceiveUDPUpdates	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::ReceiveUDPUpdates(std::vector<sf::Packet> &buffer) {$/;"	f	class:NetworkManager	typeref:typename:void
Record	src/Features/Routing/EntityInspector.cpp	/^void EntityInspector::Record() {$/;"	f	class:EntityInspector	typeref:typename:void
RecordCommand	src/Offsets.cpp	/^	int RecordCommand;$/;"	v	namespace:Offsets	typeref:typename:int
RecordCustomData	src/Offsets.cpp	/^	int RecordCustomData;$/;"	v	namespace:Offsets	typeref:typename:int
RecordData	src/Modules/EngineDemoRecorder.cpp	/^void EngineDemoRecorder::RecordData(const void *data, unsigned long length) {$/;"	f	class:EngineDemoRecorder	typeref:typename:void
RecordDatas	src/Features/Stats/StatsCounter.cpp	/^void StatsCounter::RecordDatas(const int tick) {$/;"	f	class:StatsCounter	typeref:typename:void
RecordInitialVal	src/Modules/EngineDemoRecorder.cpp	/^static void RecordInitialVal(const char *name, const char *val) {$/;"	f	typeref:typename:void	file:
RecordTimestamp	src/Modules/EngineDemoRecorder.cpp	/^static void RecordTimestamp() {$/;"	f	typeref:typename:void	file:
RecvProp	src/Utils/SDK.hpp	/^struct RecvProp {$/;"	s
RecvTable	src/Utils/SDK.hpp	/^struct RecvTable {$/;"	s
RecvVarProxyFn	src/Utils/SDK.hpp	/^typedef void (*RecvVarProxyFn)(const void *pData, void *pStruct, void *pOut);$/;"	t	typeref:typename:void (*)(const void * pData,void * pStruct,void * pOut)
ReduceTimer	src/Features/StepCounter.cpp	/^void StepCounter::ReduceTimer(float frametime) {$/;"	f	class:StepCounter	typeref:typename:void
Register	src/Command.cpp	/^void Command::Register() {$/;"	f	class:Command	typeref:typename:void
Register	src/Variable.cpp	/^void Variable::Register() {$/;"	f	class:Variable	typeref:typename:void
RegisterAll	src/Command.cpp	/^int Command::RegisterAll() {$/;"	f	class:Command	typeref:typename:int
RegisterAll	src/Variable.cpp	/^int Variable::RegisterAll() {$/;"	f	class:Variable	typeref:typename:int
RegisterCallback	src/Event.hpp	/^	void RegisterCallback(std::function<void(EventData<E>)> cb, int32_t priority = 0) {$/;"	f	namespace:Event	typeref:typename:void
RegisterConCommand	src/Modules/Tier1.hpp	/^	_RegisterConCommand RegisterConCommand = nullptr;$/;"	m	class:Tier1	typeref:typename:_RegisterConCommand
RegisterConCommand	src/Offsets.cpp	/^	int RegisterConCommand;$/;"	v	namespace:Offsets	typeref:typename:int
RegisterHandler	src/Features/NetMessage.cpp	/^void NetMessage::RegisterHandler(const char *type, void (*handler)(const void *, size_t)) {$/;"	f	class:NetMessage	typeref:typename:void
Relative to Absolute Address	doc/contributing.md	/^#### Relative to Absolute Address$/;"	t	subsection:SAR: Contributing Guide""Coding""Memory Utils
ReloadedFix	src/Features/ReloadedFix.cpp	/^ReloadedFix::ReloadedFix() {$/;"	f	class:ReloadedFix
ReloadedFix	src/Features/ReloadedFix.hpp	/^class ReloadedFix : public Feature {$/;"	c
RemoveAllRulers	src/Features/Routing/Ruler.cpp	/^void RulerManager::RemoveAllRulers() {$/;"	f	class:RulerManager	typeref:typename:void
RemoveFeature	src/Features/Feature.hpp	/^	void RemoveFeature(T **featurePtr) {$/;"	f	class:Features	typeref:typename:void
RemoveFlag	src/Variable.cpp	/^void Variable::RemoveFlag(int value) {$/;"	f	class:Variable	typeref:typename:void
RemoveGlobalChangeCallback	src/Modules/Tier1.hpp	/^	_RemoveGlobalChangeCallback RemoveGlobalChangeCallback = nullptr;$/;"	m	class:Tier1	typeref:typename:_RemoveGlobalChangeCallback
RemoveGlobalChangeCallback	src/Offsets.cpp	/^	int RemoveGlobalChangeCallback;$/;"	v	namespace:Offsets	typeref:typename:int
RemoveListener	src/Modules/Engine.hpp	/^	_RemoveListener RemoveListener = nullptr;$/;"	m	class:Engine	typeref:typename:_RemoveListener
RemoveListener	src/Offsets.cpp	/^	int RemoveListener;$/;"	v	namespace:Offsets	typeref:typename:int
RemoveModule	src/Modules/Module.hpp	/^	void RemoveModule(T **modulePtr) {$/;"	f	class:Modules	typeref:typename:void
RemoveRuler	src/Features/Routing/Ruler.cpp	/^void RulerManager::RemoveRuler(int id) {$/;"	f	class:RulerManager	typeref:typename:void
Renderer	src/Features/Renderer.hpp	/^namespace Renderer {$/;"	n
Request	lib/SFML/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
RequestCameraRefresh	src/Features/Camera.cpp	/^void Camera::RequestCameraRefresh() {$/;"	f	class:Camera	typeref:typename:void
RequestTimeOffsetRefresh	src/Features/Camera.cpp	/^void Camera::RequestTimeOffsetRefresh() {$/;"	f	class:Camera	typeref:typename:void
Reset	src/Features/Hud/Hud.cpp	/^void HudContext::Reset(int slot) {$/;"	f	class:HudContext	typeref:typename:void
Reset	src/Features/Listener.cpp	/^void Listener::Reset() {$/;"	f	class:Listener	typeref:typename:void
Reset	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Reset(bool requested) {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Reset	src/Features/Stats/JumpStats.cpp	/^void JumpStats::Reset() {$/;"	f	class:JumpStats	typeref:typename:void
Reset	src/Features/Stats/Stats.hpp	/^	void Reset() {$/;"	f	struct:PlayerStats	typeref:typename:void
Reset	src/Features/Stats/StatsCounter.cpp	/^void StatsCounter::Reset() {$/;"	f	class:StatsCounter	typeref:typename:void
Reset	src/Features/Stats/StepStats.cpp	/^void StepStats::Reset() {$/;"	f	class:StepStats	typeref:typename:void
Reset	src/Features/Stats/VelocityStats.cpp	/^void VelocityStats::Reset() {$/;"	f	class:VelocityStats	typeref:typename:void
Reset	src/Features/Tas/TasTool.cpp	/^void TasTool::Reset() {$/;"	f	class:TasTool	typeref:typename:void
Reset	src/Features/Tas/TasTools/AbsoluteMoveTool.cpp	/^void AbsoluteMoveTool::Reset() {$/;"	f	class:AbsoluteMoveTool	typeref:typename:void
Reset	src/Features/Tas/TasTools/AutoAimTool.cpp	/^void AutoAimTool::Reset() {$/;"	f	class:AutoAimTool	typeref:typename:void
Reset	src/Features/Tas/TasTools/AutoJumpTool.cpp	/^void AutoJumpTool::Reset() {$/;"	f	class:AutoJumpTool	typeref:typename:void
Reset	src/Features/Tas/TasTools/DecelTool.cpp	/^void DecelTool::Reset() {$/;"	f	class:DecelTool	typeref:typename:void
Reset	src/Features/Tas/TasTools/SetAngleTool.cpp	/^void SetAngleTool::Reset() {$/;"	f	class:SetAngleTool	typeref:typename:void
Reset	src/Features/Tas/TasTools/StrafeTool.cpp	/^void AutoStrafeTool::Reset() {$/;"	f	class:AutoStrafeTool	typeref:typename:void
Reset	src/Features/Timer/TimerCheckPoints.cpp	/^void TimerCheckPoints::Reset() {$/;"	f	class:TimerCheckPoints	typeref:typename:void
ResetAll	src/Features/Stats/Stats.cpp	/^void Stats::ResetAll() {$/;"	f	class:Stats	typeref:typename:void
ResetAllGhosts	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::ResetAllGhosts() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
ResetCameraRelatedCvars	src/Features/Camera.cpp	/^void ResetCameraRelatedCvars() {$/;"	f	typeref:typename:void
ResetCategory	src/Features/Speedrun/Categories.cpp	/^void SpeedrunTimer::ResetCategory() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
ResetContent	lib/SFML/include/SFML/Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the/;"	e	enum:sf::Http::Response::Status
ResetDigitalInputs	src/Features/Tas/TasController.cpp	/^void TasController::ResetDigitalInputs() {$/;"	f	class:TasController	typeref:typename:void
ResetLoads	src/Features/Session.cpp	/^void Session::ResetLoads() {$/;"	f	class:Session	typeref:typename:void
ResetSyncSession	src/Features/Stats/Sync.cpp	/^void Sync::ResetSyncSession() {$/;"	f	class:Sync	typeref:typename:void
ResetTimer	src/Features/StepCounter.cpp	/^void StepCounter::ResetTimer() {$/;"	f	class:StepCounter	typeref:typename:void
ResourceStream	lib/SFML/include/SFML/System/FileInputStream.hpp	/^class SFML_SYSTEM_API ResourceStream;$/;"	v	namespace:sf::priv	typeref:class:SFML_SYSTEM_API
Response	lib/SFML/include/SFML/Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	lib/SFML/include/SFML/Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	lib/SFML/include/SFML/Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
Restore	src/Utils/Memory.cpp	/^bool Memory::Patch::Restore() {$/;"	f	class:Memory::Patch	typeref:typename:bool
Resume	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Resume() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Resume	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::Resume() {$/;"	f	class:TasPlayer	typeref:typename:void
ResumeAllGhosts	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::ResumeAllGhosts() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
ResumeNetwork	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::ResumeNetwork() {$/;"	f	class:NetworkManager	typeref:typename:void
ResumeSyncSession	src/Features/Stats/Sync.cpp	/^void Sync::ResumeSyncSession() {$/;"	f	class:Sync	typeref:typename:void
RuleAction	src/Features/Speedrun/Rules.hpp	/^enum class RuleAction {$/;"	g
Ruler	src/Features/Routing/Ruler.hpp	/^struct Ruler {$/;"	s
RulerManager	src/Features/Routing/Ruler.cpp	/^RulerManager::RulerManager()$/;"	f	class:RulerManager
RulerManager	src/Features/Routing/Ruler.hpp	/^class RulerManager {$/;"	c
Rules	doc/contributing.md	/^#### Rules$/;"	t	subsection:SAR: Contributing Guide""Coding""Speedrun Timer
RunAll	src/Event.cpp	/^void SarInitHandler::RunAll() {$/;"	f	class:SarInitHandler	typeref:typename:void
RunNetwork	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::RunNetwork() {$/;"	f	class:NetworkManager	typeref:typename:void
SAFE_DELETE	src/Utils.hpp	/^#define SAFE_DELETE(/;"	d
SAFE_UNLOAD_TICK_DELAY	src/SAR.hpp	/^#define SAFE_UNLOAD_TICK_DELAY /;"	d
SAME_MAP	src/Features/ConfigPlus.cpp	/^		SAME_MAP,$/;"	e	enum:Condition::__anon194454350203	file:
SAR	src/SAR.cpp	/^SAR::SAR()$/;"	f	class:SAR
SAR	src/SAR.hpp	/^class SAR : public IServerPluginCallbacks {$/;"	c
SAR: Contributing Guide	doc/contributing.md	/^# SAR: Contributing Guide$/;"	c
SAR: Cvars	doc/cvars.md	/^# SAR: Cvars$/;"	c
SAR_BUILT	src/SAR.hpp	/^#define SAR_BUILT /;"	d
SAR_CM_COUNTER_EXPORT_HEADER	src/Features/Stats/StatsCounter.hpp	/^#define SAR_CM_COUNTER_EXPORT_HEADER /;"	d
SAR_FULLGAME_COUNTER_EXPORT_HEADER	src/Features/Stats/StatsCounter.hpp	/^#define SAR_FULLGAME_COUNTER_EXPORT_HEADER /;"	d
SAR_INSPECTION_EXPORT_HEADER	src/Features/Routing/EntityInspector.hpp	/^#define SAR_INSPECTION_EXPORT_HEADER /;"	d
SAR_MAP_COUNTER_EXPORT_HEADER	src/Features/Stats/StatsCounter.hpp	/^#define SAR_MAP_COUNTER_EXPORT_HEADER /;"	d
SAR_PLUGIN_SIGNATURE	src/Plugin.hpp	/^#define SAR_PLUGIN_SIGNATURE /;"	d
SAR_PRINT_ACTIVE_COLOR	src/Modules/Console.hpp	/^#define SAR_PRINT_ACTIVE_COLOR /;"	d
SAR_PRINT_COLOR	src/Modules/Console.hpp	/^#define SAR_PRINT_COLOR /;"	d
SAR_TOTAL_COUNTER_EXPORT_HEADER	src/Features/Stats/StatsCounter.hpp	/^#define SAR_TOTAL_COUNTER_EXPORT_HEADER /;"	d
SAR_UNLOAD	src/Event.hpp	/^		SAR_UNLOAD,$/;"	e	enum:Event::EventType
SAR_VERSION	src/Version.hpp	/^#define SAR_VERSION /;"	d
SDK	doc/contributing.md	/^### SDK$/;"	S	section:SAR: Contributing Guide""Coding
SEEK_DIR_CUR	src/Utils/Platform.hpp	/^#	define SEEK_DIR_CUR /;"	d
SEMICOLON	src/Features/Tas/TasParser.cpp	/^		SEMICOLON,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
SESSION_END	src/Event.hpp	/^		SESSION_END,$/;"	e	enum:Event::EventType
SESSION_START	src/Event.hpp	/^		SESSION_START,$/;"	e	enum:Event::EventType
SFML_API_EXPORT	lib/SFML/include/SFML/Config.hpp	/^            #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	lib/SFML/include/SFML/Config.hpp	/^            #define SFML_API_EXPORT$/;"	d
SFML_API_EXPORT	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	lib/SFML/include/SFML/Config.hpp	/^    #define SFML_API_EXPORT$/;"	d
SFML_API_IMPORT	lib/SFML/include/SFML/Config.hpp	/^            #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	lib/SFML/include/SFML/Config.hpp	/^            #define SFML_API_IMPORT$/;"	d
SFML_API_IMPORT	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	lib/SFML/include/SFML/Config.hpp	/^    #define SFML_API_IMPORT$/;"	d
SFML_CLOCK_HPP	lib/SFML/include/SFML/System/Clock.hpp	/^#define SFML_CLOCK_HPP$/;"	d
SFML_CONFIG_HPP	lib/SFML/include/SFML/Config.hpp	/^#define SFML_CONFIG_HPP$/;"	d
SFML_DEBUG	lib/SFML/include/SFML/Config.hpp	/^    #define SFML_DEBUG$/;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	lib/SFML/include/SFML/GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE /;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	lib/SFML/include/SFML/GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE$/;"	d
SFML_DEPRECATED	lib/SFML/include/SFML/Config.hpp	/^    #define SFML_DEPRECATED /;"	d
SFML_DEPRECATED	lib/SFML/include/SFML/Config.hpp	/^    #define SFML_DEPRECATED$/;"	d
SFML_ERR_HPP	lib/SFML/include/SFML/System/Err.hpp	/^#define SFML_ERR_HPP$/;"	d
SFML_FILEINPUTSTREAM_HPP	lib/SFML/include/SFML/System/FileInputStream.hpp	/^#define SFML_FILEINPUTSTREAM_HPP$/;"	d
SFML_FTP_HPP	lib/SFML/include/SFML/Network/Ftp.hpp	/^#define SFML_FTP_HPP$/;"	d
SFML_GPUPREFERENCE_HPP	lib/SFML/include/SFML/GpuPreference.hpp	/^#define SFML_GPUPREFERENCE_HPP$/;"	d
SFML_GRAPHICS_HPP	lib/SFML/include/SFML/Graphics.hpp	/^#define SFML_GRAPHICS_HPP$/;"	d
SFML_HTTP_HPP	lib/SFML/include/SFML/Network/Http.hpp	/^#define SFML_HTTP_HPP$/;"	d
SFML_INPUTSTREAM_HPP	lib/SFML/include/SFML/System/InputStream.hpp	/^#define SFML_INPUTSTREAM_HPP$/;"	d
SFML_IPADDRESS_HPP	lib/SFML/include/SFML/Network/IpAddress.hpp	/^#define SFML_IPADDRESS_HPP$/;"	d
SFML_LOCK_HPP	lib/SFML/include/SFML/System/Lock.hpp	/^#define SFML_LOCK_HPP$/;"	d
SFML_MAIN_HPP	lib/SFML/include/SFML/Main.hpp	/^#define SFML_MAIN_HPP$/;"	d
SFML_MEMORYINPUTSTREAM_HPP	lib/SFML/include/SFML/System/MemoryInputStream.hpp	/^#define SFML_MEMORYINPUTSTREAM_HPP$/;"	d
SFML_MUTEX_HPP	lib/SFML/include/SFML/System/Mutex.hpp	/^#define SFML_MUTEX_HPP$/;"	d
SFML_NATIVEACTIVITY_HPP	lib/SFML/include/SFML/System/NativeActivity.hpp	/^#define SFML_NATIVEACTIVITY_HPP$/;"	d
SFML_NETWORK_API	lib/SFML/include/SFML/Network/Export.hpp	/^    #define SFML_NETWORK_API /;"	d
SFML_NETWORK_EXPORT_HPP	lib/SFML/include/SFML/Network/Export.hpp	/^#define SFML_NETWORK_EXPORT_HPP$/;"	d
SFML_NETWORK_HPP	lib/SFML/include/SFML/Network.hpp	/^#define SFML_NETWORK_HPP$/;"	d
SFML_NONCOPYABLE_HPP	lib/SFML/include/SFML/System/NonCopyable.hpp	/^#define SFML_NONCOPYABLE_HPP$/;"	d
SFML_PACKET_HPP	lib/SFML/include/SFML/Network/Packet.hpp	/^#define SFML_PACKET_HPP$/;"	d
SFML_SLEEP_HPP	lib/SFML/include/SFML/System/Sleep.hpp	/^#define SFML_SLEEP_HPP$/;"	d
SFML_SOCKETHANDLE_HPP	lib/SFML/include/SFML/Network/SocketHandle.hpp	/^#define SFML_SOCKETHANDLE_HPP$/;"	d
SFML_SOCKETSELECTOR_HPP	lib/SFML/include/SFML/Network/SocketSelector.hpp	/^#define SFML_SOCKETSELECTOR_HPP$/;"	d
SFML_SOCKET_HPP	lib/SFML/include/SFML/Network/Socket.hpp	/^#define SFML_SOCKET_HPP$/;"	d
SFML_STRING_HPP	lib/SFML/include/SFML/System/String.hpp	/^#define SFML_STRING_HPP$/;"	d
SFML_SYSTEM_ANDROID	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_ANDROID$/;"	d
SFML_SYSTEM_API	lib/SFML/include/SFML/System/Export.hpp	/^    #define SFML_SYSTEM_API /;"	d
SFML_SYSTEM_EXPORT_HPP	lib/SFML/include/SFML/System/Export.hpp	/^#define SFML_SYSTEM_EXPORT_HPP$/;"	d
SFML_SYSTEM_FREEBSD	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_FREEBSD$/;"	d
SFML_SYSTEM_HPP	lib/SFML/include/SFML/System.hpp	/^#define SFML_SYSTEM_HPP$/;"	d
SFML_SYSTEM_IOS	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_IOS$/;"	d
SFML_SYSTEM_LINUX	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_LINUX$/;"	d
SFML_SYSTEM_MACOS	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_MACOS$/;"	d
SFML_SYSTEM_OPENBSD	lib/SFML/include/SFML/Config.hpp	/^        #define SFML_SYSTEM_OPENBSD$/;"	d
SFML_SYSTEM_WINDOWS	lib/SFML/include/SFML/Config.hpp	/^    #define SFML_SYSTEM_WINDOWS$/;"	d
SFML_TCPLISTENER_HPP	lib/SFML/include/SFML/Network/TcpListener.hpp	/^#define SFML_TCPLISTENER_HPP$/;"	d
SFML_TCPSOCKET_HPP	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^#define SFML_TCPSOCKET_HPP$/;"	d
SFML_THREADLOCALPTR_HPP	lib/SFML/include/SFML/System/ThreadLocalPtr.hpp	/^#define SFML_THREADLOCALPTR_HPP$/;"	d
SFML_THREADLOCAL_HPP	lib/SFML/include/SFML/System/ThreadLocal.hpp	/^#define SFML_THREADLOCAL_HPP$/;"	d
SFML_THREAD_HPP	lib/SFML/include/SFML/System/Thread.hpp	/^#define SFML_THREAD_HPP$/;"	d
SFML_TIME_HPP	lib/SFML/include/SFML/System/Time.hpp	/^#define SFML_TIME_HPP$/;"	d
SFML_UDPSOCKET_HPP	lib/SFML/include/SFML/Network/UdpSocket.hpp	/^#define SFML_UDPSOCKET_HPP$/;"	d
SFML_UTF_HPP	lib/SFML/include/SFML/System/Utf.hpp	/^#define SFML_UTF_HPP$/;"	d
SFML_VECTOR2_HPP	lib/SFML/include/SFML/System/Vector2.hpp	/^#define SFML_VECTOR2_HPP$/;"	d
SFML_VECTOR3_HPP	lib/SFML/include/SFML/System/Vector3.hpp	/^#define SFML_VECTOR3_HPP$/;"	d
SFML_VERSION_MAJOR	lib/SFML/include/SFML/Config.hpp	/^#define SFML_VERSION_MAJOR /;"	d
SFML_VERSION_MINOR	lib/SFML/include/SFML/Config.hpp	/^#define SFML_VERSION_MINOR /;"	d
SFML_VERSION_PATCH	lib/SFML/include/SFML/Config.hpp	/^#define SFML_VERSION_PATCH /;"	d
SIDE_PAD	src/Features/Hud/Toasts.cpp	/^#define SIDE_PAD /;"	d	file:
SIGNONSTATE_CHALLENGE	src/Utils/SDK.hpp	/^#define SIGNONSTATE_CHALLENGE /;"	d
SIGNONSTATE_CHANGELEVEL	src/Utils/SDK.hpp	/^#define SIGNONSTATE_CHANGELEVEL /;"	d
SIGNONSTATE_CONNECTED	src/Utils/SDK.hpp	/^#define SIGNONSTATE_CONNECTED /;"	d
SIGNONSTATE_FULL	src/Utils/SDK.hpp	/^#define SIGNONSTATE_FULL /;"	d
SIGNONSTATE_NEW	src/Utils/SDK.hpp	/^#define SIGNONSTATE_NEW /;"	d
SIGNONSTATE_NONE	src/Utils/SDK.hpp	/^#define SIGNONSTATE_NONE /;"	d
SIGNONSTATE_PRESPAWN	src/Utils/SDK.hpp	/^#define SIGNONSTATE_PRESPAWN /;"	d
SIGNONSTATE_SPAWN	src/Utils/SDK.hpp	/^#define SIGNONSTATE_SPAWN /;"	d
SKIPPING	src/Features/Bot/BotServer.hpp	/^	SKIPPING,$/;"	e	enum:PlaybackState
SKIPPING	src/Features/Tas/TasServer.hpp	/^	SKIPPING,$/;"	e	enum:PlaybackState
SLICE_FLAG_ALLOW_FIELD	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define SLICE_FLAG_ALLOW_FIELD /;"	d
SLICE_FLAG_ALLOW_PLANE	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define SLICE_FLAG_ALLOW_PLANE /;"	d
SLICE_FLAG_CODED_ORDER	lib/ffmpeg/include/libavcodec/avcodec.h	/^#define SLICE_FLAG_CODED_ORDER /;"	d
SLIDE_RATE	src/Features/Hud/Toasts.cpp	/^#define SLIDE_RATE /;"	d	file:
SND_RecordBuffer	src/Features/Renderer.cpp	/^static void (*SND_RecordBuffer)();$/;"	v	typeref:typename:void (*)()	file:
SND_RecordBuffer_Hook	src/Features/Renderer.cpp	/^static void SND_RecordBuffer_Hook() {$/;"	f	typeref:typename:void	file:
SOCKET	src/Features/Bot/BotServer.cpp	/^#	define SOCKET /;"	d	file:
SOCKET	src/Features/Tas/TasServer.cpp	/^#	define SOCKET /;"	d	file:
SOCKET_ERROR	src/Features/Bot/BotServer.cpp	/^#	define SOCKET_ERROR /;"	d	file:
SOCKET_ERROR	src/Features/Tas/TasServer.cpp	/^#	define SOCKET_ERROR /;"	d	file:
SPECIFIED	src/Features/Tas/TasTools/StrafeTool.hpp	/^	SPECIFIED,$/;"	e	enum:AutoStrafeParamType
SPEEDRUN_FINISH	src/Features/Demo/NetworkGhostPlayer.hpp	/^	SPEEDRUN_FINISH,$/;"	e	enum:HEADER
SPEEDRUN_PACKET_TYPE	src/Features/Speedrun/SpeedrunTimer.cpp	/^#define SPEEDRUN_PACKET_TYPE /;"	d	file:
SPEEDRUN_TOAST_TAG	src/Features/Speedrun/SpeedrunTimer.hpp	/^#define SPEEDRUN_TOAST_TAG /;"	d
SPEED_POWER	src/Utils/SDK.hpp	/^	SPEED_POWER,$/;"	e	enum:PaintPowerType
SPLIT	src/Features/Speedrun/Rules.hpp	/^	SPLIT,$/;"	e	enum:RuleAction
SPLIT	src/Features/Speedrun/SpeedrunTimer.cpp	/^	SPLIT,$/;"	e	enum:PacketType	file:
SPLIT	src/Features/Speedrun/SpeedrunTimer.cpp	/^	SPLIT,$/;"	e	enum:TimerAction	file:
SRCS	Makefile	/^SRCS=$(wildcard $(SDIR)\/*.cpp)$/;"	m
STANDARD	src/Utils/json11.hpp	/^		STANDARD,$/;"	e	enum:json11::JsonParse
START	src/Features/Speedrun/Rules.hpp	/^	START,        \/\/ Only start if not already running$/;"	e	enum:RuleAction
START	src/Features/Speedrun/SpeedrunTimer.cpp	/^	START,$/;"	e	enum:PacketType	file:
START	src/Features/Speedrun/SpeedrunTimer.cpp	/^	START,$/;"	e	enum:TimerAction	file:
STICK_CAMERA_ABS_UP_MODE	src/Utils/SDK.hpp	/^	STICK_CAMERA_ABS_UP_MODE,$/;"	e	enum:StickCameraState
STICK_CAMERA_LOCAL_UP_LOOKING_UP	src/Utils/SDK.hpp	/^	STICK_CAMERA_LOCAL_UP_LOOKING_UP,$/;"	e	enum:StickCameraState
STICK_CAMERA_PORTAL	src/Utils/SDK.hpp	/^	STICK_CAMERA_PORTAL,$/;"	e	enum:StickCameraState
STICK_CAMERA_ROLL_CORRECT	src/Utils/SDK.hpp	/^	STICK_CAMERA_ROLL_CORRECT,$/;"	e	enum:StickCameraState
STICK_CAMERA_SURFACE_TRANSITION	src/Utils/SDK.hpp	/^	STICK_CAMERA_SURFACE_TRANSITION = 0,$/;"	e	enum:StickCameraState
STICK_CAMERA_SWITCH_TO_ABS_UP_MODE	src/Utils/SDK.hpp	/^	STICK_CAMERA_SWITCH_TO_ABS_UP_MODE,$/;"	e	enum:StickCameraState
STICK_CAMERA_SWITCH_TO_LOCAL_UP	src/Utils/SDK.hpp	/^	STICK_CAMERA_SWITCH_TO_LOCAL_UP,$/;"	e	enum:StickCameraState
STICK_CAMERA_SWITCH_TO_LOCAL_UP_LOOKING_UP	src/Utils/SDK.hpp	/^	STICK_CAMERA_SWITCH_TO_LOCAL_UP_LOOKING_UP,$/;"	e	enum:StickCameraState
STICK_CAMERA_UPRIGHT	src/Utils/SDK.hpp	/^	STICK_CAMERA_UPRIGHT$/;"	e	enum:StickCameraState
STICK_CAMERA_WALL_STICK_DEACTIVATE_TRANSITION	src/Utils/SDK.hpp	/^	STICK_CAMERA_WALL_STICK_DEACTIVATE_TRANSITION,$/;"	e	enum:StickCameraState
STOP	src/Features/Speedrun/Rules.hpp	/^	STOP,$/;"	e	enum:RuleAction
STOP	src/Features/Speedrun/SpeedrunTimer.cpp	/^	STOP,$/;"	e	enum:PacketType	file:
STOP_RENDERING_ERROR	src/Features/Renderer.cpp	/^	STOP_RENDERING_ERROR,$/;"	e	enum:WorkerMsg	file:
STOP_RENDERING_REQUESTED	src/Features/Renderer.cpp	/^	STOP_RENDERING_REQUESTED,$/;"	e	enum:WorkerMsg	file:
STOP_SERVER	src/Features/Demo/NetworkGhostPlayer.hpp	/^	STOP_SERVER,$/;"	e	enum:HEADER
STR	src/Features/Hud/Toasts.cpp	/^#define STR(/;"	d	file:
STRING	src/Features/Tas/TasParser.cpp	/^		STRING,$/;"	e	enum:TasToken::__anon5c4243c70103	file:
STRING	src/Utils/json11.hpp	/^			STRING,$/;"	e	enum:json11::Json::Type
SUBTITLE_ASS	lib/ffmpeg/include/libavcodec/avcodec.h	/^    SUBTITLE_ASS,$/;"	e	enum:AVSubtitleType
SUBTITLE_BITMAP	lib/ffmpeg/include/libavcodec/avcodec.h	/^    SUBTITLE_BITMAP,                \/\/\/< A bitmap, pict will be set$/;"	e	enum:AVSubtitleType
SUBTITLE_NONE	lib/ffmpeg/include/libavcodec/avcodec.h	/^    SUBTITLE_NONE,$/;"	e	enum:AVSubtitleType
SUBTITLE_TEXT	lib/ffmpeg/include/libavcodec/avcodec.h	/^    SUBTITLE_TEXT,$/;"	e	enum:AVSubtitleType
SURF_BUMPLIGHT	src/Utils/SDK.hpp	/^#define SURF_BUMPLIGHT /;"	d
SURF_HINT	src/Utils/SDK.hpp	/^#define SURF_HINT /;"	d
SURF_HITBOX	src/Utils/SDK.hpp	/^#define SURF_HITBOX /;"	d
SURF_LIGHT	src/Utils/SDK.hpp	/^#define SURF_LIGHT /;"	d
SURF_NOCHOP	src/Utils/SDK.hpp	/^#define SURF_NOCHOP /;"	d
SURF_NODECALS	src/Utils/SDK.hpp	/^#define SURF_NODECALS /;"	d
SURF_NODRAW	src/Utils/SDK.hpp	/^#define SURF_NODRAW /;"	d
SURF_NOLIGHT	src/Utils/SDK.hpp	/^#define SURF_NOLIGHT /;"	d
SURF_NOPORTAL	src/Utils/SDK.hpp	/^#define SURF_NOPORTAL /;"	d
SURF_NOSHADOWS	src/Utils/SDK.hpp	/^#define SURF_NOSHADOWS /;"	d
SURF_SKIP	src/Utils/SDK.hpp	/^#define SURF_SKIP /;"	d
SURF_SKY	src/Utils/SDK.hpp	/^#define SURF_SKY /;"	d
SURF_SKY2D	src/Utils/SDK.hpp	/^#define SURF_SKY2D /;"	d
SURF_TRANS	src/Utils/SDK.hpp	/^#define SURF_TRANS /;"	d
SURF_TRIGGER	src/Utils/SDK.hpp	/^#define SURF_TRIGGER /;"	d
SURF_WARP	src/Utils/SDK.hpp	/^#define SURF_WARP /;"	d
SVAR	src/Features/ConfigPlus.cpp	/^		SVAR,$/;"	e	enum:Condition::__anon194454350203	file:
SVAR_OP	src/Features/ConfigPlus.cpp	/^#define SVAR_OP(/;"	d	file:
SWRESAMPLE_SWRESAMPLE_H	lib/ffmpeg/include/libswresample/swresample.h	/^#define SWRESAMPLE_SWRESAMPLE_H$/;"	d
SWRESAMPLE_VERSION_H	lib/ffmpeg/include/libswresample/version.h	/^#define SWRESAMPLE_VERSION_H$/;"	d
SWR_DITHER_NB	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NB,              \/\/\/< not part of API\/ABI$/;"	e	enum:SwrDitherType
SWR_DITHER_NONE	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NONE = 0,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS = 64,         \/\/\/< not part of API\/ABI$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_F_WEIGHTED	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_F_WEIGHTED,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_HIGH_SHIBATA	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_HIGH_SHIBATA,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_IMPROVED_E_WEIGHTED	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_IMPROVED_E_WEIGHTED,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_LIPSHITZ	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_LIPSHITZ,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_LOW_SHIBATA	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_LOW_SHIBATA,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_MODIFIED_E_WEIGHTED	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_MODIFIED_E_WEIGHTED,$/;"	e	enum:SwrDitherType
SWR_DITHER_NS_SHIBATA	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_NS_SHIBATA,$/;"	e	enum:SwrDitherType
SWR_DITHER_RECTANGULAR	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_RECTANGULAR,$/;"	e	enum:SwrDitherType
SWR_DITHER_TRIANGULAR	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_TRIANGULAR,$/;"	e	enum:SwrDitherType
SWR_DITHER_TRIANGULAR_HIGHPASS	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_DITHER_TRIANGULAR_HIGHPASS,$/;"	e	enum:SwrDitherType
SWR_ENGINE_NB	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_ENGINE_NB,              \/\/\/< not part of API\/ABI$/;"	e	enum:SwrEngine
SWR_ENGINE_SOXR	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_ENGINE_SOXR,            \/**< SoX Resampler *\/$/;"	e	enum:SwrEngine
SWR_ENGINE_SWR	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_ENGINE_SWR,             \/**< SW Resampler *\/$/;"	e	enum:SwrEngine
SWR_FILTER_TYPE_BLACKMAN_NUTTALL	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_FILTER_TYPE_BLACKMAN_NUTTALL,   \/**< Blackman Nuttall windowed sinc *\/$/;"	e	enum:SwrFilterType
SWR_FILTER_TYPE_CUBIC	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_FILTER_TYPE_CUBIC,              \/**< Cubic *\/$/;"	e	enum:SwrFilterType
SWR_FILTER_TYPE_KAISER	lib/ffmpeg/include/libswresample/swresample.h	/^    SWR_FILTER_TYPE_KAISER,             \/**< Kaiser windowed sinc *\/$/;"	e	enum:SwrFilterType
SWR_FLAG_RESAMPLE	lib/ffmpeg/include/libswresample/swresample.h	/^#define SWR_FLAG_RESAMPLE /;"	d
SWSCALE_SWSCALE_H	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWSCALE_SWSCALE_H$/;"	d
SWSCALE_VERSION_H	lib/ffmpeg/include/libswscale/version.h	/^#define SWSCALE_VERSION_H$/;"	d
SWS_ACCURATE_RND	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_ACCURATE_RND /;"	d
SWS_AREA	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_AREA /;"	d
SWS_BICUBIC	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_BICUBIC /;"	d
SWS_BICUBLIN	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_BICUBLIN /;"	d
SWS_BILINEAR	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_BILINEAR /;"	d
SWS_BITEXACT	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_BITEXACT /;"	d
SWS_CS_BT2020	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_BT2020 /;"	d
SWS_CS_DEFAULT	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_DEFAULT /;"	d
SWS_CS_FCC	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_FCC /;"	d
SWS_CS_ITU601	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_ITU601 /;"	d
SWS_CS_ITU624	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_ITU624 /;"	d
SWS_CS_ITU709	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_ITU709 /;"	d
SWS_CS_SMPTE170M	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_SMPTE170M /;"	d
SWS_CS_SMPTE240M	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_CS_SMPTE240M /;"	d
SWS_DIRECT_BGR	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_DIRECT_BGR /;"	d
SWS_ERROR_DIFFUSION	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_ERROR_DIFFUSION /;"	d
SWS_FAST_BILINEAR	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_FAST_BILINEAR /;"	d
SWS_FULL_CHR_H_INP	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_FULL_CHR_H_INP /;"	d
SWS_FULL_CHR_H_INT	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_FULL_CHR_H_INT /;"	d
SWS_GAUSS	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_GAUSS /;"	d
SWS_LANCZOS	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_LANCZOS /;"	d
SWS_MAX_REDUCE_CUTOFF	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_MAX_REDUCE_CUTOFF /;"	d
SWS_PARAM_DEFAULT	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_PARAM_DEFAULT /;"	d
SWS_POINT	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_POINT /;"	d
SWS_PRINT_INFO	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_PRINT_INFO /;"	d
SWS_SINC	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_SINC /;"	d
SWS_SPLINE	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_SPLINE /;"	d
SWS_SRC_V_CHR_DROP_MASK	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_SRC_V_CHR_DROP_MASK /;"	d
SWS_SRC_V_CHR_DROP_SHIFT	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_SRC_V_CHR_DROP_SHIFT /;"	d
SWS_X	lib/ffmpeg/include/libswscale/swscale.h	/^#define SWS_X /;"	d
SYNC	src/Features/Speedrun/SpeedrunTimer.cpp	/^	SYNC,$/;"	e	enum:PacketType	file:
SYNC_INTERVAL	src/Features/Speedrun/SpeedrunTimer.cpp	/^#define SYNC_INTERVAL /;"	d	file:
S_m_PortalLocal	src/Offsets.cpp	/^	int S_m_PortalLocal;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_StatsThisLevel	src/Offsets.cpp	/^	int S_m_StatsThisLevel;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_angAbsRotation	src/Offsets.cpp	/^	int S_m_angAbsRotation;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_bDucked	src/Offsets.cpp	/^	int S_m_bDucked;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_hGroundEntity	src/Offsets.cpp	/^	int S_m_hGroundEntity;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_nJumpTimeMsecs	src/Offsets.cpp	/^	int S_m_nJumpTimeMsecs;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_nPlayerCond	src/Offsets.cpp	/^	int S_m_nPlayerCond;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_vecAbsOrigin	src/Offsets.cpp	/^	int S_m_vecAbsOrigin;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_vecAbsVelocity	src/Offsets.cpp	/^	int S_m_vecAbsVelocity;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_vecVelocity	src/Offsets.cpp	/^	int S_m_vecVelocity;$/;"	v	namespace:Offsets	typeref:typename:int
S_m_vecViewOffset	src/Offsets.cpp	/^	int S_m_vecViewOffset;$/;"	v	namespace:Offsets	typeref:typename:int
SafeUnload	src/Modules/Engine.cpp	/^void Engine::SafeUnload(const char *postCommand) {$/;"	f	class:Engine	typeref:typename:void
SarInitHandler	src/Event.cpp	/^SarInitHandler::SarInitHandler(std::function<void()> cb)$/;"	f	class:SarInitHandler
SarInitHandler	src/Event.hpp	/^class SarInitHandler {$/;"	c
SarVersion	src/Features/Updater.cpp	/^struct SarVersion {$/;"	s	file:
Save	src/Features/Stats/VelocityStats.cpp	/^void VelocityStats::Save(Vector velocity, bool xyOnly) {$/;"	f	class:VelocityStats	typeref:typename:void
Save	src/Features/Teleporter.cpp	/^void Teleporter::Save(int slot) {$/;"	f	class:Teleporter	typeref:typename:void
Save	src/Features/Timer/Timer.cpp	/^void Timer::Save(int engineTick) {$/;"	f	class:Timer	typeref:typename:void
SaveFramebulksToFile	src/Features/Tas/TasParser.cpp	/^void TasParser::SaveFramebulksToFile(std::string name, TasStartInfo startInfo, std::vector<TasFr/;"	f	class:TasParser	typeref:typename:void
SaveLocal	src/Features/Teleporter.cpp	/^void Teleporter::SaveLocal(int slot, QAngle ang) {$/;"	f	class:Teleporter	typeref:typename:void
SaveProcessedFramebulks	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::SaveProcessedFramebulks() {$/;"	f	class:TasPlayer	typeref:typename:void
SaveUsercmdDebugs	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::SaveUsercmdDebugs(int slot) {$/;"	f	class:TasPlayer	typeref:typename:void
Scan	src/Utils/Memory.cpp	/^std::vector<uintptr_t> Memory::Scan(const char *moduleName, const Memory::Pattern *pattern) {$/;"	f	class:Memory	typeref:typename:std::vector<uintptr_t>
Scan	src/Utils/Memory.cpp	/^uintptr_t Memory::Scan(const char *moduleName, const char *pattern, int offset) {$/;"	f	class:Memory	typeref:typename:uintptr_t
Scan	src/Utils/Memory.hpp	/^	T Scan(const char *moduleName, const char *pattern, int offset = 0) {$/;"	f	namespace:Memory	typeref:typename:T
ScheduledRule	src/Features/Speedrun/Categories.cpp	/^struct ScheduledRule {$/;"	s	file:
Scheduler	src/Scheduler.hpp	/^namespace Scheduler {$/;"	n
Scheme	src/Modules/Scheme.hpp	/^class Scheme : public Module {$/;"	c
ScreenPosition	src/Modules/Engine.hpp	/^	_ScreenPosition ScreenPosition = nullptr;$/;"	m	class:Engine	typeref:typename:_ScreenPosition
ScreenPosition	src/Offsets.cpp	/^	int ScreenPosition;$/;"	v	namespace:Offsets	typeref:typename:int
ScrollSpeedHud	src/Features/Hud/ScrollSpeed.hpp	/^	ScrollSpeedHud()$/;"	f	class:ScrollSpeedHud
ScrollSpeedHud	src/Features/Hud/ScrollSpeed.hpp	/^class ScrollSpeedHud : public Hud {$/;"	c
SeamshotFind	src/Features/Routing/SeamshotFind.cpp	/^SeamshotFind::SeamshotFind() {$/;"	f	class:SeamshotFind
SeamshotFind	src/Features/Routing/SeamshotFind.hpp	/^class SeamshotFind : public Feature {$/;"	c
SearchPlugin	src/SAR.cpp	/^void SAR::SearchPlugin() {$/;"	f	class:SAR	typeref:typename:void
Segment	src/Features/Speedrun/SpeedrunTimer.cpp	/^struct Segment {$/;"	s	file:
SendMessageToAll	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::SendMessageToAll(std::string msg) {$/;"	f	class:NetworkManager	typeref:typename:void
SendMsg	src/Features/NetMessage.cpp	/^void NetMessage::SendMsg(const char *type, const void *data, size_t size) {$/;"	f	class:NetMessage	typeref:typename:void
SendPing	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::SendPing() {$/;"	f	class:NetworkManager	typeref:typename:void
SendPlayerData	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::SendPlayerData() {$/;"	f	class:NetworkManager	typeref:typename:void
SendProp	src/Utils/SDK.hpp	/^struct SendProp {$/;"	s
SendPropType	src/Utils/SDK.hpp	/^} SendPropType;$/;"	t	typeref:enum:__anon21a65a740503
SendTable	src/Utils/SDK.hpp	/^struct SendTable {$/;"	s
SendTableProxyFn	src/Utils/SDK.hpp	/^typedef void *(*SendTableProxyFn)(const SendProp *pProp, const void *pStructBase, const void *pD/;"	t	typeref:typename:void * (*)(const SendProp * pProp,const void * pStructBase,const void * pData,void * pRecipients,int objectID)
SendToCommandBuffer	src/Modules/Engine.cpp	/^void Engine::SendToCommandBuffer(const char *text, int delay) {$/;"	f	class:Engine	typeref:typename:void
SendVarProxyFn	src/Utils/SDK.hpp	/^typedef void (*SendVarProxyFn)(const SendProp *pProp, const void *pStructBase, const void *pData/;"	t	typeref:typename:void (*)(const SendProp * pProp,const void * pStructBase,const void * pData,void * pOut,int iElement,int objectID)
Separate	doc/contributing.md	/^### Separate$/;"	S	section:SAR: Contributing Guide""Coding
Seq	src/Features/ConfigPlus.cpp	/^struct Seq {$/;"	s	file:
Server	src/Modules/Server.hpp	/^class Server : public Module {$/;"	c
ServerActivate	src/SAR.cpp	/^void SAR::ServerActivate(void *pEdictList, int edictCount, int clientMax) {$/;"	f	class:SAR	typeref:typename:void
ServerClass	src/Utils/SDK.hpp	/^struct ServerClass {$/;"	s
ServerCmdKeyValues	src/Offsets.cpp	/^	int ServerCmdKeyValues;$/;"	v	namespace:Offsets	typeref:typename:int
ServerPause	src/Modules/Engine.hpp	/^	_ServerPause ServerPause = nullptr;$/;"	m	class:Engine	typeref:typename:_ServerPause
ServerPause	src/Offsets.cpp	/^	int ServerPause;$/;"	v	namespace:Offsets	typeref:typename:int
ServerSide	src/Features/OffsetFinder.cpp	/^void OffsetFinder::ServerSide(const char *className, const char *propName, int *offset) {$/;"	f	class:OffsetFinder	typeref:typename:void
ServerTick	src/Offsets.cpp	/^	int ServerTick;$/;"	v	namespace:Offsets	typeref:typename:int
ServiceNotAvailable	lib/SFML/include/SFML/Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded/;"	e	enum:sf::Http::Response::Status
ServiceReady	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	lib/SFML/include/SFML/Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control conn/;"	e	enum:sf::Ftp::Response::Status
Session	src/Features/Session.cpp	/^Session::Session()$/;"	f	class:Session
Session	src/Features/Session.hpp	/^class Session : public Feature {$/;"	c
SessionEnded	src/Features/NetMessage.cpp	/^void NetMessage::SessionEnded() {$/;"	f	class:NetMessage	typeref:typename:void
Set	src/Features/Hud/LPHud.cpp	/^void LPHud::Set(int count) {$/;"	f	class:LPHud	typeref:typename:void
SetAdvancing	src/Modules/Engine.cpp	/^void Engine::SetAdvancing(bool advancing) {$/;"	f	class:Engine	typeref:typename:void
SetAngleParams	src/Features/Tas/TasTools/SetAngleTool.cpp	/^	SetAngleParams()$/;"	f	struct:SetAngleParams	file:
SetAngleParams	src/Features/Tas/TasTools/SetAngleTool.cpp	/^	SetAngleParams(int ticks, float pitch, float yaw)$/;"	f	struct:SetAngleParams	file:
SetAngleParams	src/Features/Tas/TasTools/SetAngleTool.cpp	/^struct SetAngleParams : public TasToolParams {$/;"	s	file:
SetAngleTool	src/Features/Tas/TasTools/SetAngleTool.hpp	/^	SetAngleTool(int slot)$/;"	f	class:SetAngleTool
SetAngleTool	src/Features/Tas/TasTools/SetAngleTool.hpp	/^class SetAngleTool : public TasTool {$/;"	c
SetAngles	src/Modules/Engine.cpp	/^void Engine::SetAngles(int nSlot, QAngle va) {$/;"	f	class:Engine	typeref:typename:void
SetButtonState	src/Features/Tas/TasController.cpp	/^void TasController::SetButtonState(TasControllerInput i, bool state) {$/;"	f	class:TasController	typeref:typename:void
SetCollisionGroup	src/Utils/SDK.hpp	/^	virtual void SetCollisionGroup(int iCollisionGroup) { m_collisionGroup = iCollisionGroup; }$/;"	f	class:CTraceFilterSimple	typeref:typename:void
SetColor	src/Utils/SDK.hpp	/^	void SetColor(int _r, int _g, int _b, int _a = 255) {$/;"	f	struct:Color	typeref:typename:void
SetCommandClient	src/SAR.cpp	/^void SAR::SetCommandClient(int index) {$/;"	f	class:SAR	typeref:typename:void
SetCrosshairTexture	src/Features/Hud/Crosshair.cpp	/^int Crosshair::SetCrosshairTexture(const std::string filename) {$/;"	f	class:Crosshair	typeref:typename:int
SetCursorPos	src/Modules/InputSystem.cpp	/^void InputSystem::SetCursorPos(int x, int y) {$/;"	f	class:InputSystem	typeref:typename:void
SetCursorPosition	src/Modules/InputSystem.hpp	/^	_SetCursorPosition SetCursorPosition = nullptr;$/;"	m	class:InputSystem	typeref:typename:_SetCursorPosition
SetCursorPosition	src/Offsets.cpp	/^	int SetCursorPosition;$/;"	v	namespace:Offsets	typeref:typename:int
SetData	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::SetData(DataGhost data, bool network) {$/;"	f	class:GhostEntity	typeref:typename:void
SetFirstLevelDatas	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::SetFirstLevelDatas(DemoDatas &datas) {$/;"	f	class:DemoGhostEntity	typeref:typename:void
SetFlags	src/Variable.cpp	/^void Variable::SetFlags(int value) {$/;"	f	class:Variable	typeref:typename:void
SetFov	src/Features/FovChanger.cpp	/^void FovChanger::SetFov(const int fov) {$/;"	f	class:FovChanger	typeref:typename:void
SetFrameBulkQueue	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::SetFrameBulkQueue(int slot, std::vector<TasFramebulk> fbQueue) {$/;"	f	class:TasPlayer	typeref:typename:void
SetFunc	src/Hook.hpp	/^	void SetFunc(T func, bool enable = true) {$/;"	f	class:Hook	typeref:typename:void
SetGhost	src/Features/Demo/GhostRenderer.cpp	/^void GhostRenderer::SetGhost(GhostEntity* ghost) {$/;"	f	class:GhostRenderer	typeref:typename:void
SetGhostOnFirstMap	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::SetGhostOnFirstMap() {$/;"	f	class:DemoGhostEntity	typeref:typename:void
SetInputInfo	src/Features/Hud/InputHud.cpp	/^void InputHud::SetInputInfo(int slot, int buttonBits, Vector movement) {$/;"	f	class:InputHud	typeref:typename:void
SetIpt	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::SetIpt(float ipt) {$/;"	f	class:SpeedrunTimer	typeref:typename:void
SetKeyValueChar	src/Modules/Server.hpp	/^	_SetKeyValueChar SetKeyValueChar = nullptr;$/;"	m	class:Server	typeref:typename:_SetKeyValueChar
SetKeyValueChar	src/Offsets.cpp	/^	int SetKeyValueChar;$/;"	v	namespace:Offsets	typeref:typename:int
SetKeyValueFloat	src/Modules/Server.hpp	/^	_SetKeyValueFloat SetKeyValueFloat = nullptr;$/;"	m	class:Server	typeref:typename:_SetKeyValueFloat
SetKeyValueFloat	src/Offsets.cpp	/^	int SetKeyValueFloat;$/;"	v	namespace:Offsets	typeref:typename:int
SetKeyValueVector	src/Modules/Server.hpp	/^	_SetKeyValueVector SetKeyValueVector = nullptr;$/;"	m	class:Server	typeref:typename:_SetKeyValueVector
SetKeyValueVector	src/Offsets.cpp	/^	int SetKeyValueVector;$/;"	v	namespace:Offsets	typeref:typename:int
SetLoadedFileName	src/Features/Tas/TasPlayer.hpp	/^	inline void SetLoadedFileName(int slot, std::string name) { tasFileName[slot] = name; };$/;"	f	class:TasPlayer	typeref:typename:void
SetMouseActivated	src/Modules/Client.cpp	/^void Client::SetMouseActivated(bool state) {$/;"	f	class:Client	typeref:typename:void
SetMoveAnalog	src/Features/Tas/TasController.cpp	/^void TasController::SetMoveAnalog(float x, float y) {$/;"	f	class:TasController	typeref:typename:void
SetParams	src/Features/Tas/TasTool.cpp	/^void TasTool::SetParams(std::shared_ptr<TasToolParams> params) {$/;"	f	class:TasTool	typeref:typename:void
SetPassEntity	src/Utils/SDK.hpp	/^	virtual void SetPassEntity(const void *pPassEntity) { m_pPassEnt = pPassEntity; }$/;"	f	class:CTraceFilterSimple	typeref:typename:void
SetPlaybackVars	src/Features/Tas/TasPlayer.cpp	/^void SetPlaybackVars(bool active) {$/;"	f	typeref:typename:void
SetPosition	src/Features/Hud/VphysHud.cpp	/^	_SetPosition SetPosition = Memory::VMT<_SetPosition>(m_pShadowStand, Offsets::SetPosition);$/;"	v	typeref:typename:_SetPosition
SetPosition	src/Offsets.cpp	/^	int SetPosition;$/;"	v	namespace:Offsets	typeref:typename:int
SetQuickHudTexture	src/Features/Hud/Crosshair.cpp	/^bool Crosshair::SetQuickHudTexture(const std::string basefile) {$/;"	f	class:Crosshair	typeref:typename:bool
SetSignonState	src/Offsets.cpp	/^	int SetSignonState;$/;"	v	namespace:Offsets	typeref:typename:int
SetSkipping	src/Modules/Engine.cpp	/^void Engine::SetSkipping(bool skipping) {$/;"	f	class:Engine	typeref:typename:void
SetStartInfo	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::SetStartInfo(TasStartType type, std::string param) {$/;"	f	class:TasPlayer	typeref:typename:void
SetStatus	src/Features/Bot/BotServer.cpp	/^void TasServer::SetStatus(TasStatus s) {$/;"	f	class:TasServer	typeref:typename:void
SetStatus	src/Features/Tas/TasServer.cpp	/^void TasServer::SetStatus(TasStatus s) {$/;"	f	class:TasServer	typeref:typename:void
SetSvar	src/Features/ConfigPlus.cpp	/^static void SetSvar(std::string name, std::string val) {$/;"	f	typeref:typename:void	file:
SetValue	src/Variable.cpp	/^void Variable::SetValue(const char *value) {$/;"	f	class:Variable	typeref:typename:void
SetValue	src/Variable.cpp	/^void Variable::SetValue(float value) {$/;"	f	class:Variable	typeref:typename:void
SetValue	src/Variable.cpp	/^void Variable::SetValue(int value) {$/;"	f	class:Variable	typeref:typename:void
SetVelocity	src/Features/Hud/VphysHud.cpp	/^	_SetVelocity SetVelocity = Memory::VMT<_SetVelocity>(m_pShadowStand, Offsets::SetVelocity);$/;"	v	typeref:typename:_SetVelocity
SetVelocity	src/Offsets.cpp	/^	int SetVelocity;$/;"	v	namespace:Offsets	typeref:typename:int
SetViewAnalog	src/Features/Tas/TasController.cpp	/^void TasController::SetViewAnalog(float x, float y) {$/;"	f	class:TasController	typeref:typename:void
SetViewAngles	src/Modules/Engine.hpp	/^	_SetViewAngles SetViewAngles = nullptr;$/;"	m	class:Engine	typeref:typename:_SetViewAngles
SetViewAngles	src/Offsets.cpp	/^	int SetViewAngles;$/;"	v	namespace:Offsets	typeref:typename:int
SetupCountdown	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::SetupCountdown(std::string preCommands, std::string postCommands, sf::Uint3/;"	f	class:NetworkManager	typeref:typename:void
SetupGhost	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::SetupGhost(unsigned int &ID, std::string &name, DataGhost &data, std::string &/;"	f	class:GhostEntity	typeref:typename:void
SetupGhostFromDemo	src/Features/Demo/DemoGhostPlayer.cpp	/^bool DemoGhostPlayer::SetupGhostFromDemo(const std::string &demo_path, const unsigned int ghost_/;"	f	class:DemoGhostPlayer	typeref:typename:bool
ShouldBlacklistCommand	src/Modules/EngineDemoPlayer.cpp	/^bool EngineDemoPlayer::ShouldBlacklistCommand(const char *cmd) {$/;"	f	class:EngineDemoPlayer	typeref:typename:bool
ShouldDraw	src/Features/Demo/NetworkGhostPlayer.cpp	/^	virtual bool ShouldDraw() override {$/;"	f	class:PlayerListUi	typeref:typename:bool	file:
ShouldDraw	src/Features/Hud/Crosshair.cpp	/^bool Crosshair::ShouldDraw() {$/;"	f	class:Crosshair	typeref:typename:bool
ShouldDraw	src/Features/Hud/Hud.cpp	/^bool BaseHud::ShouldDraw() {$/;"	f	class:BaseHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/Hud.hpp	/^	bool ShouldDraw() override { return (!this->variable || this->variable->GetBool()) && BaseHud::/;"	f	class:HudElement	typeref:typename:bool
ShouldDraw	src/Features/Hud/Hud.hpp	/^	bool ShouldDraw() override { return this->variable->GetBool() && BaseHud::ShouldDraw(); }$/;"	f	class:HudModeElement	typeref:typename:bool
ShouldDraw	src/Features/Hud/Hud.hpp	/^	bool ShouldDraw() override { return this->variable->GetString()[0] != '\\0' && BaseHud::ShouldD/;"	f	class:HudStringElement	typeref:typename:bool
ShouldDraw	src/Features/Hud/InputHud.cpp	/^bool InputHud::ShouldDraw() {$/;"	f	class:InputHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/InspectionHud.cpp	/^bool InspectionHud::ShouldDraw() {$/;"	f	class:InspectionHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/LPHud.cpp	/^bool LPHud::ShouldDraw() {$/;"	f	class:LPHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/PortalPlacement.cpp	/^bool PortalPlacementHud::ShouldDraw() {$/;"	f	class:PortalPlacementHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/PortalgunHud.cpp	/^bool PortalgunHud::ShouldDraw() {$/;"	f	class:PortalgunHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/ScrollSpeed.cpp	/^bool ScrollSpeedHud::ShouldDraw() {$/;"	f	class:ScrollSpeedHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/SpeedrunHud.cpp	/^bool SpeedrunHud::ShouldDraw() {$/;"	f	class:SpeedrunHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/StrafeQuality.cpp	/^bool StrafeQualityHud::ShouldDraw() {$/;"	f	class:StrafeQualityHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/StrafeSyncHud.cpp	/^bool StrafeSyncHud::ShouldDraw() {$/;"	f	class:StrafeSyncHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/Toasts.cpp	/^bool ToastHud::ShouldDraw() {$/;"	f	class:ToastHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/VelocityGraph.cpp	/^bool VelocityGraph::ShouldDraw() {$/;"	f	class:VelocityGraph	typeref:typename:bool
ShouldDraw	src/Features/Hud/VphysHud.cpp	/^bool VphysHud::ShouldDraw() {$/;"	f	class:VphysHud	typeref:typename:bool
ShouldDraw	src/Features/Hud/Watermark.cpp	/^	bool ShouldDraw() override {$/;"	f	class:WatermarkHud	typeref:typename:bool	file:
ShouldDraw	src/Modules/Client.hpp	/^	_ShouldDraw ShouldDraw = nullptr;$/;"	m	class:Client	typeref:typename:_ShouldDraw
ShouldDraw	src/Offsets.cpp	/^	int ShouldDraw;$/;"	v	namespace:Offsets	typeref:typename:int
ShouldDrawCrosshair	src/Modules/Client.cpp	/^bool Client::ShouldDrawCrosshair() {$/;"	f	class:Client	typeref:typename:bool
ShouldHitEntity	src/Utils/SDK.hpp	/^	virtual bool ShouldHitEntity(void *pHandleEntity, int contentsMask) {$/;"	f	class:CTraceFilterSimple	typeref:typename:bool
Shutdown	src/Cheats.cpp	/^void Cheats::Shutdown() {$/;"	f	class:Cheats	typeref:typename:void
Shutdown	src/Features/Listener.cpp	/^void Listener::Shutdown() {$/;"	f	class:Listener	typeref:typename:void
Shutdown	src/Modules/Client.cpp	/^void Client::Shutdown() {$/;"	f	class:Client	typeref:typename:void
Shutdown	src/Modules/Console.cpp	/^void Console::Shutdown() {$/;"	f	class:Console	typeref:typename:void
Shutdown	src/Modules/Engine.cpp	/^void Engine::Shutdown() {$/;"	f	class:Engine	typeref:typename:void
Shutdown	src/Modules/EngineDemoPlayer.cpp	/^void EngineDemoPlayer::Shutdown() {$/;"	f	class:EngineDemoPlayer	typeref:typename:void
Shutdown	src/Modules/EngineDemoRecorder.cpp	/^void EngineDemoRecorder::Shutdown() {$/;"	f	class:EngineDemoRecorder	typeref:typename:void
Shutdown	src/Modules/InputSystem.cpp	/^void InputSystem::Shutdown() {$/;"	f	class:InputSystem	typeref:typename:void
Shutdown	src/Modules/MaterialSystem.cpp	/^void MaterialSystem::Shutdown() {$/;"	f	class:MaterialSystem	typeref:typename:void
Shutdown	src/Modules/Scheme.cpp	/^void Scheme::Shutdown() {$/;"	f	class:Scheme	typeref:typename:void
Shutdown	src/Modules/Server.cpp	/^void Server::Shutdown() {$/;"	f	class:Server	typeref:typename:void
Shutdown	src/Modules/Surface.cpp	/^void Surface::Shutdown() {$/;"	f	class:Surface	typeref:typename:void
Shutdown	src/Modules/Tier1.cpp	/^void Tier1::Shutdown() {$/;"	f	class:Tier1	typeref:typename:void
Shutdown	src/Modules/VGui.cpp	/^void VGui::Shutdown() {$/;"	f	class:VGui	typeref:typename:void
ShutdownAll	src/Modules/Module.cpp	/^void Modules::ShutdownAll() {$/;"	f	class:Modules	typeref:typename:void
Signature-Scanning aka AOB-Scan	doc/contributing.md	/^#### Signature-Scanning aka AOB-Scan$/;"	t	subsection:SAR: Contributing Guide""Coding""Memory Utils
SimpleFormat	src/Features/Speedrun/SpeedrunTimer.cpp	/^std::string SpeedrunTimer::SimpleFormat(float raw) {$/;"	f	class:SpeedrunTimer	typeref:typename:std::string
SinCos	src/Utils/Math.hpp	/^inline void Math::SinCos(float radians, float *sine, float *cosine) {$/;"	f	class:Math	typeref:typename:void
Size	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:Uint32
SizeReceived	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::size_t
SkipTo	src/Modules/EngineDemoPlayer.cpp	/^void EngineDemoPlayer::SkipTo(int tick, bool relative, bool pause) {$/;"	f	class:EngineDemoPlayer	typeref:typename:void
SkipToTick	src/Modules/EngineDemoPlayer.hpp	/^	_SkipToTick SkipToTick = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:_SkipToTick
SkipToTick	src/Offsets.cpp	/^	int SkipToTick;$/;"	v	namespace:Offsets	typeref:typename:int
SleepUntilInput	src/Offsets.cpp	/^	int SleepUntilInput;$/;"	v	namespace:Offsets	typeref:typename:int
Socket	lib/SFML/include/SFML/Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	lib/SFML/include/SFML/Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf	typeref:typename:UINT_PTR
SocketSelector	lib/SFML/include/SFML/Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
SourceAutoRecord	README.md	/^# SourceAutoRecord$/;"	c
SourceGameVersion	src/Game.hpp	/^enum SourceGameVersion {$/;"	g
SourceGame_ApertureTag	src/Game.hpp	/^	SourceGame_ApertureTag = (1 << 5),$/;"	e	enum:SourceGameVersion
SourceGame_EIPRelPIC	src/Game.hpp	/^	SourceGame_EIPRelPIC = SourceGame_Portal2,$/;"	e	enum:SourceGameVersion
SourceGame_Portal2	src/Game.hpp	/^	SourceGame_Portal2 = (1 << 0),$/;"	e	enum:SourceGameVersion
SourceGame_PortalReloaded	src/Game.hpp	/^	SourceGame_PortalReloaded = (1 << 11),$/;"	e	enum:SourceGameVersion
SourceGame_PortalStoriesMel	src/Game.hpp	/^	SourceGame_PortalStoriesMel = (1 << 6),$/;"	e	enum:SourceGameVersion
SourceGame_ThinkingWithTimeMachine	src/Game.hpp	/^	SourceGame_ThinkingWithTimeMachine = (1 << 7),$/;"	e	enum:SourceGameVersion
SourceGame_Unknown	src/Game.hpp	/^	SourceGame_Unknown = 0,$/;"	e	enum:SourceGameVersion
Spawn	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::Spawn() {$/;"	f	class:GhostEntity	typeref:typename:void
Spawn	src/Features/TimescaleDetect.cpp	/^void TimescaleDetect::Spawn() {$/;"	f	class:TimescaleDetect	typeref:typename:void
SpawnAllGhosts	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::SpawnAllGhosts() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
SpawnAllGhosts	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::SpawnAllGhosts() {$/;"	f	class:NetworkManager	typeref:typename:void
Speedrun Timer	doc/contributing.md	/^### Speedrun Timer$/;"	S	section:SAR: Contributing Guide""Coding
SpeedrunCategory	src/Features/Speedrun/Categories.hpp	/^struct SpeedrunCategory {$/;"	s
SpeedrunHud	src/Features/Hud/SpeedrunHud.cpp	/^SpeedrunHud::SpeedrunHud()$/;"	f	class:SpeedrunHud
SpeedrunHud	src/Features/Hud/SpeedrunHud.hpp	/^class SpeedrunHud : public Hud {$/;"	c
SpeedrunRule	src/Features/Speedrun/Rules.hpp	/^	SpeedrunRule(RuleAction action, std::string map, _RuleTypes rule)$/;"	f	struct:SpeedrunRule
SpeedrunRule	src/Features/Speedrun/Rules.hpp	/^struct SpeedrunRule {$/;"	s
SpeedrunTimer	src/Features/Speedrun/Categories.hpp	/^namespace SpeedrunTimer {$/;"	n
SpeedrunTimer	src/Features/Speedrun/Rules.hpp	/^namespace SpeedrunTimer {$/;"	n
SpeedrunTimer	src/Features/Speedrun/SpeedrunTimer.hpp	/^namespace SpeedrunTimer {$/;"	n
Speedrunning:	README.md	/^### Speedrunning:$/;"	S	chapter:Features
Split	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Split(bool newSplit, std::string segName, bool requested) {$/;"	f	class:SpeedrunTimer	typeref:typename:void
SplitInfo	src/Features/Speedrun/SpeedrunTimer.cpp	/^struct SplitInfo {$/;"	s	file:
SplitSyncSession	src/Features/Stats/Sync.cpp	/^void Sync::SplitSyncSession() {$/;"	f	class:Sync	typeref:typename:void
Split_t	src/Utils/SDK.hpp	/^	struct Split_t {$/;"	s	struct:kbutton_t
SquaredLength	src/Utils/SDK.hpp	/^	inline float SquaredLength() const {$/;"	f	struct:Vector	typeref:typename:float
Start	src/Features/Routing/EntityInspector.cpp	/^void EntityInspector::Start() {$/;"	f	class:EntityInspector	typeref:typename:void
Start	src/Features/Session.cpp	/^void Session::Start() {$/;"	f	class:Session	typeref:typename:void
Start	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Start() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Start	src/Features/Summary.cpp	/^void Summary::Start() {$/;"	f	class:Summary	typeref:typename:void
Start	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::Start() {$/;"	f	class:TasPlayer	typeref:typename:void
Start	src/Features/Timer/PauseTimer.cpp	/^void PauseTimer::Start() {$/;"	f	class:PauseTimer	typeref:typename:void
Start	src/Features/Timer/Timer.cpp	/^void Timer::Start(int engineTick) {$/;"	f	class:Timer	typeref:typename:void
Start	src/Features/Timer/TimerAverage.cpp	/^void TimerAverage::Start() {$/;"	f	class:TimerAverage	typeref:typename:void
StartAllGhost	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::StartAllGhost() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
StartCountdown	src/Features/Demo/NetworkGhostPlayer.cpp	/^	void StartCountdown() {$/;"	f	class:SyncUi	typeref:typename:void	file:
StartCountdown	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::StartCountdown() {$/;"	f	class:NetworkManager	typeref:typename:void
StartDrawing	src/Modules/Surface.hpp	/^	_StartDrawing StartDrawing = nullptr;$/;"	m	class:Surface	typeref:typename:_StartDrawing
StartDrawing	src/Offsets.cpp	/^	int StartDrawing;$/;"	v	namespace:Offsets	typeref:typename:int
StartFollowing	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::StartFollowing(GhostEntity *ghost) {$/;"	f	class:GhostEntity	typeref:typename:void
StartGesture	src/Features/Demo/GhostRenderer.cpp	/^void GhostRenderer::StartGesture(int id) {$/;"	f	class:GhostRenderer	typeref:typename:void
StartImmediately	src/Features/Tas/TasPlayer.hpp	/^	StartImmediately,$/;"	e	enum:TasStartType
StartMessageMode	src/Modules/Client.hpp	/^	_StartMessageMode StartMessageMode = nullptr;$/;"	m	class:Client	typeref:typename:_StartMessageMode
StartPlayback	src/Offsets.cpp	/^	int StartPlayback;$/;"	v	namespace:Offsets	typeref:typename:int
StartRecording	src/Offsets.cpp	/^	int StartRecording;$/;"	v	namespace:Offsets	typeref:typename:int
StartTouch	src/Offsets.cpp	/^	int StartTouch;$/;"	v	namespace:Offsets	typeref:typename:int
StartTrace	src/Features/Stats/JumpStats.cpp	/^void JumpStats::StartTrace(Vector source) {$/;"	f	class:JumpStats	typeref:typename:void
Started	src/Features/Session.cpp	/^void Session::Started(bool menu) {$/;"	f	class:Session	typeref:typename:void
StartsWith	src/Utils.cpp	/^bool Utils::StartsWith(const char *str, const char *subStr) {$/;"	f	class:Utils	typeref:typename:bool
State	src/Utils/lodepng.cpp	/^	State::State() {$/;"	f	class:lodepng::State
State	src/Utils/lodepng.cpp	/^	State::State(const State &other) {$/;"	f	class:lodepng::State
State	src/Utils/lodepng.hpp	/^	class State : public LodePNGState {$/;"	c	namespace:lodepng
State_Shutdown	src/Offsets.cpp	/^	int State_Shutdown;$/;"	v	namespace:Offsets	typeref:typename:int
Statics	src/Utils/json11.cpp	/^		Statics() {}$/;"	f	struct:json11::Statics	file:
Statics	src/Utils/json11.cpp	/^	struct Statics {$/;"	s	namespace:json11	file:
Stats	src/Features/Stats/Stats.cpp	/^Stats::Stats() {$/;"	f	class:Stats
Stats	src/Features/Stats/Stats.hpp	/^class Stats : public Feature {$/;"	c
StatsCounter	src/Features/Stats/StatsCounter.hpp	/^class StatsCounter : public Feature {$/;"	c
StatsResultType	src/Features/Stats/StatsResultType.hpp	/^enum class StatsResultType {$/;"	g
Status	lib/SFML/include/SFML/Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	lib/SFML/include/SFML/Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	lib/SFML/include/SFML/Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
SteamControllerMove	src/Offsets.cpp	/^	int SteamControllerMove;$/;"	v	namespace:Offsets	typeref:typename:int
StepCounter	src/Features/StepCounter.cpp	/^StepCounter::StepCounter()$/;"	f	class:StepCounter
StepCounter	src/Features/StepCounter.hpp	/^class StepCounter : public Feature {$/;"	c
StepStats	src/Features/Stats/StepStats.hpp	/^class StepStats {$/;"	c
StickCameraState	src/Utils/SDK.hpp	/^enum StickCameraState {$/;"	g
StitchRegion	src/Features/Stitcher.cpp	/^struct StitchRegion {$/;"	s	file:
Stitcher	src/Features/Stitcher.hpp	/^namespace Stitcher {$/;"	n
Stop	src/Features/Routing/EntityInspector.cpp	/^void EntityInspector::Stop() {$/;"	f	class:EntityInspector	typeref:typename:void
Stop	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Stop(std::string segName) {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Stop	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::Stop(bool interrupted) {$/;"	f	class:TasPlayer	typeref:typename:void
Stop	src/Features/Timer/PauseTimer.cpp	/^void PauseTimer::Stop() {$/;"	f	class:PauseTimer	typeref:typename:void
Stop	src/Features/Timer/Timer.cpp	/^void Timer::Stop(int engineTick) {$/;"	f	class:Timer	typeref:typename:void
Stop	src/Modules/EngineDemoRecorder.cpp	/^void EngineDemoRecorder::Stop() {$/;"	f	class:EngineDemoRecorder	typeref:typename:void
StopFollowing	src/Features/Demo/GhostEntity.cpp	/^void GhostEntity::StopFollowing() {$/;"	f	class:GhostEntity	typeref:typename:void
StopPlayback	src/Offsets.cpp	/^	int StopPlayback;$/;"	v	namespace:Offsets	typeref:typename:int
StopRecording	src/Offsets.cpp	/^	int StopRecording;$/;"	v	namespace:Offsets	typeref:typename:int
StopServer	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::StopServer() {$/;"	f	class:NetworkManager	typeref:typename:void
StrafeDir	src/Features/Hud/StrafeQuality.cpp	/^enum class StrafeDir {$/;"	g	file:
StrafeQualityHud	src/Features/Hud/StrafeQuality.cpp	/^StrafeQualityHud::StrafeQualityHud()$/;"	f	class:StrafeQualityHud
StrafeQualityHud	src/Features/Hud/StrafeQuality.hpp	/^class StrafeQualityHud : public Hud {$/;"	c
StrafeSyncHud	src/Features/Hud/StrafeSyncHud.cpp	/^StrafeSyncHud::StrafeSyncHud()$/;"	f	class:StrafeSyncHud
StrafeSyncHud	src/Features/Hud/StrafeSyncHud.hpp	/^class StrafeSyncHud : public Hud {$/;"	c
Stream	src/Features/Renderer.cpp	/^struct Stream {$/;"	s	file:
String	lib/SFML/include/SFML/System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
StringToButtonCode	src/Modules/InputSystem.hpp	/^	_StringToButtonCode StringToButtonCode = nullptr;$/;"	m	class:InputSystem	typeref:typename:_StringToButtonCode
StringToButtonCode	src/Offsets.cpp	/^	int StringToButtonCode;$/;"	v	namespace:Offsets	typeref:typename:int
Summary	src/Features/Summary.cpp	/^Summary::Summary()$/;"	f	class:Summary
Summary	src/Features/Summary.hpp	/^class Summary : public Feature {$/;"	c
SummaryItem	src/Features/Summary.hpp	/^struct SummaryItem {$/;"	s
Support	README.md	/^# Support$/;"	c
Surface	src/Modules/Surface.hpp	/^class Surface : public Module {$/;"	c
SwrContext	lib/ffmpeg/include/libswresample/swresample.h	/^typedef struct SwrContext SwrContext;$/;"	t	typeref:struct:SwrContext
SwrDitherType	lib/ffmpeg/include/libswresample/swresample.h	/^enum SwrDitherType {$/;"	g
SwrEngine	lib/ffmpeg/include/libswresample/swresample.h	/^enum SwrEngine {$/;"	g
SwrFilterType	lib/ffmpeg/include/libswresample/swresample.h	/^enum SwrFilterType {$/;"	g
SwsFilter	lib/ffmpeg/include/libswscale/swscale.h	/^typedef struct SwsFilter {$/;"	s
SwsFilter	lib/ffmpeg/include/libswscale/swscale.h	/^} SwsFilter;$/;"	t	typeref:struct:SwsFilter
SwsVector	lib/ffmpeg/include/libswscale/swscale.h	/^typedef struct SwsVector {$/;"	s
SwsVector	lib/ffmpeg/include/libswscale/swscale.h	/^} SwsVector;$/;"	t	typeref:struct:SwsVector
Sync	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::Sync() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
Sync	src/Features/Stats/Sync.cpp	/^Sync::Sync()$/;"	f	class:Sync
Sync	src/Features/Stats/Sync.hpp	/^class Sync : public Feature {$/;"	c
SyncUi	src/Features/Demo/NetworkGhostPlayer.cpp	/^	SyncUi()$/;"	f	class:SyncUi	file:
SyncUi	src/Features/Demo/NetworkGhostPlayer.cpp	/^class SyncUi : public Hud {$/;"	c	file:
SystemStatus	lib/SFML/include/SFML/Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	lib/SFML/include/SFML/Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official sys/;"	e	enum:sf::Ftp::Response::Status
TARGET_MOD	src/Game.cpp	/^#define TARGET_MOD /;"	d	file:
TARGET_MOD2	src/Game.cpp	/^#define TARGET_MOD2 /;"	d	file:
TAS_CLIENT_SOCKET	src/Features/Bot/BotServer.cpp	/^#define TAS_CLIENT_SOCKET /;"	d	file:
TAS_CLIENT_SOCKET	src/Features/Tas/TasServer.cpp	/^#define TAS_CLIENT_SOCKET /;"	d	file:
TAS_CONTROLLER_INPUT_COUNT	src/Features/Tas/TasController.hpp	/^#define TAS_CONTROLLER_INPUT_COUNT /;"	d
TAS_SCRIPTS_DIR	src/Features/Tas/TasPlayer.hpp	/^#define TAS_SCRIPTS_DIR /;"	d
TAS_SCRIPT_EXT	src/Features/Tas/TasPlayer.hpp	/^#define TAS_SCRIPT_EXT /;"	d
TASing:	README.md	/^### TASing:$/;"	S	chapter:Features
TAU	src/Features/Speedrun/Rules.cpp	/^#define TAU /;"	d	file:
TD_OFFSET_COUNT	src/Utils/SDK.hpp	/^	TD_OFFSET_COUNT$/;"	e	enum:__anon21a65a740603
TD_OFFSET_NORMAL	src/Utils/SDK.hpp	/^	TD_OFFSET_NORMAL = 0,$/;"	e	enum:__anon21a65a740603
TD_OFFSET_PACKED	src/Utils/SDK.hpp	/^	TD_OFFSET_PACKED,$/;"	e	enum:__anon21a65a740603
TELEPORT_MESSAGE_TYPE	src/Features/Teleporter.cpp	/^#define TELEPORT_MESSAGE_TYPE /;"	d	file:
TEXT_ONLY	src/Features/Hud/Toasts.cpp	/^	TEXT_ONLY,$/;"	e	enum:Background	file:
TFontRange	src/Utils/SDK.hpp	/^	struct TFontRange {$/;"	s	struct:CFontAmalgam
THREAD_ACCESS	lib/minhook/hook.c	/^#define THREAD_ACCESS /;"	d	file:
THREAD_PRINT	src/Modules/Console.hpp	/^#define THREAD_PRINT(/;"	d
THREAD_PRINTCOLOR	src/Modules/Console.hpp	/^#define THREAD_PRINTCOLOR(/;"	d
THRESHOLD	src/Features/TimescaleDetect.cpp	/^#define THRESHOLD /;"	d	file:
TICKS_AVG	src/Features/Hud/StrafeQuality.cpp	/^#define TICKS_AVG /;"	d	file:
TICKS_IGNORE	src/Features/TimescaleDetect.cpp	/^#define TICKS_IGNORE /;"	d	file:
TICKS_MEASURE	src/Features/TimescaleDetect.cpp	/^#define TICKS_MEASURE /;"	d	file:
TIER0	src/Modules/Console.hpp	/^#	define TIER0 /;"	d
TIER1	src/Modules/Tier1.hpp	/^#	define TIER1 /;"	d
TIME_TO_TICKS	src/Modules/Engine.hpp	/^#define TIME_TO_TICKS(/;"	d
TOAST_BACKGROUND	src/Features/Hud/Toasts.cpp	/^#define TOAST_BACKGROUND(/;"	d	file:
TOAST_GAP	src/Features/Hud/Toasts.cpp	/^#define TOAST_GAP /;"	d	file:
TOAST_PACKET_TYPE	src/Features/Hud/Toasts.cpp	/^#define TOAST_PACKET_TYPE /;"	d	file:
TOGGLE_STATE	src/Utils/SDK.hpp	/^enum TOGGLE_STATE {$/;"	g
TOK_AND	src/Features/ConfigPlus.cpp	/^	TOK_AND,$/;"	e	enum:TokenType	file:
TOK_EQUALS	src/Features/ConfigPlus.cpp	/^	TOK_EQUALS,$/;"	e	enum:TokenType	file:
TOK_LPAREN	src/Features/ConfigPlus.cpp	/^	TOK_LPAREN,$/;"	e	enum:TokenType	file:
TOK_NOT	src/Features/ConfigPlus.cpp	/^	TOK_NOT,$/;"	e	enum:TokenType	file:
TOK_OR	src/Features/ConfigPlus.cpp	/^	TOK_OR,$/;"	e	enum:TokenType	file:
TOK_RPAREN	src/Features/ConfigPlus.cpp	/^	TOK_RPAREN,$/;"	e	enum:TokenType	file:
TOK_STR	src/Features/ConfigPlus.cpp	/^	TOK_STR,$/;"	e	enum:TokenType	file:
TOTAL_THRESHOLD	src/Features/Hud/ScrollSpeed.cpp	/^#define TOTAL_THRESHOLD /;"	d	file:
TP_OP_MSG	src/Features/Teleporter.cpp	/^#define TP_OP_MSG /;"	d	file:
TP_OP_RESTORE	src/Features/Teleporter.cpp	/^#define TP_OP_RESTORE /;"	d	file:
TP_OP_SAVE	src/Features/Teleporter.cpp	/^#define TP_OP_SAVE /;"	d	file:
TP_OP_SETANG	src/Features/Teleporter.cpp	/^#define TP_OP_SETANG /;"	d	file:
TRACE_ENTITIES_ONLY	src/Utils/SDK.hpp	/^	TRACE_ENTITIES_ONLY,$/;"	e	enum:TraceType_t
TRACE_EVERYTHING	src/Utils/SDK.hpp	/^	TRACE_EVERYTHING = 0,$/;"	e	enum:TraceType_t
TRACE_EVERYTHING_FILTER_PROPS	src/Utils/SDK.hpp	/^	TRACE_EVERYTHING_FILTER_PROPS,$/;"	e	enum:TraceType_t
TRACE_LENGTH	src/Features/Hud/AimPointHud.cpp	/^#define TRACE_LENGTH /;"	d	file:
TRACE_SHUTDOWN_OFFSET1	src/Cheats.cpp	/^#	define TRACE_SHUTDOWN_OFFSET1 /;"	d	file:
TRACE_SHUTDOWN_OFFSET2	src/Cheats.cpp	/^#	define TRACE_SHUTDOWN_OFFSET2 /;"	d	file:
TRACE_SHUTDOWN_PATTERN	src/Cheats.cpp	/^#	define TRACE_SHUTDOWN_PATTERN /;"	d	file:
TRACE_WORLD_ONLY	src/Utils/SDK.hpp	/^	TRACE_WORLD_ONLY,$/;"	e	enum:TraceType_t
TRAMPOLINE	lib/minhook/trampoline.h	/^} TRAMPOLINE, *PTRAMPOLINE;$/;"	t	typeref:struct:_TRAMPOLINE
TRAMPOLINE_MAX_SIZE	lib/minhook/trampoline.c	/^    #define TRAMPOLINE_MAX_SIZE /;"	d	file:
TRANS_BLUE	src/SAR.cpp	/^#define TRANS_BLUE /;"	d	file:
TRANS_PINK	src/SAR.cpp	/^#define TRANS_PINK /;"	d	file:
TRIANGLE	src/Features/Demo/GhostEntity.cpp	/^#define TRIANGLE(/;"	d	file:
TRIANGLE	src/Features/Demo/GhostRenderer.cpp	/^#define TRIANGLE(/;"	d	file:
TRIANGLE	src/Features/Hud/PortalPlacement.cpp	/^		#define TRIANGLE(/;"	d	file:
TS_AT_BOTTOM	src/Utils/SDK.hpp	/^	TS_AT_BOTTOM,$/;"	e	enum:TOGGLE_STATE
TS_AT_TOP	src/Utils/SDK.hpp	/^	TS_AT_TOP,$/;"	e	enum:TOGGLE_STATE
TS_GOING_DOWN	src/Utils/SDK.hpp	/^	TS_GOING_DOWN$/;"	e	enum:TOGGLE_STATE
TS_GOING_UP	src/Utils/SDK.hpp	/^	TS_GOING_UP,$/;"	e	enum:TOGGLE_STATE
TagInfo	src/Features/Hud/Toasts.cpp	/^struct TagInfo {$/;"	s	file:
TasController	src/Features/Tas/TasController.cpp	/^TasController::TasController() {$/;"	f	class:TasController
TasController	src/Features/Tas/TasController.hpp	/^class TasController : public Feature {$/;"	c
TasControllerButton	src/Features/Tas/TasController.hpp	/^struct TasControllerButton {$/;"	s
TasControllerInput	src/Features/Tas/TasController.hpp	/^enum TasControllerInput {$/;"	g
TasFramebulk	src/Features/Tas/TasPlayer.hpp	/^struct TasFramebulk {$/;"	s
TasParser	src/Features/Tas/TasParser.hpp	/^namespace TasParser {$/;"	n
TasParserException	src/Features/Tas/TasParser.hpp	/^	TasParserException(std::string msg)$/;"	f	struct:TasParserException
TasParserException	src/Features/Tas/TasParser.hpp	/^struct TasParserException : public std::exception {$/;"	s
TasPlayer	src/Features/Tas/TasPlayer.cpp	/^TasPlayer::TasPlayer()$/;"	f	class:TasPlayer
TasPlayer	src/Features/Tas/TasPlayer.hpp	/^class TasPlayer : public Feature {$/;"	c
TasPlayerInfo	src/Features/Tas/TasPlayer.hpp	/^struct TasPlayerInfo {$/;"	s
TasServer	src/Features/Bot/BotServer.hpp	/^namespace TasServer {$/;"	n
TasServer	src/Features/Tas/TasServer.hpp	/^namespace TasServer {$/;"	n
TasStartInfo	src/Features/Tas/TasPlayer.hpp	/^struct TasStartInfo {$/;"	s
TasStartType	src/Features/Tas/TasPlayer.hpp	/^enum TasStartType {$/;"	g
TasStatus	src/Features/Bot/BotServer.hpp	/^struct TasStatus {$/;"	s
TasStatus	src/Features/Tas/TasServer.hpp	/^struct TasStatus {$/;"	s
TasToken	src/Features/Tas/TasParser.cpp	/^struct TasToken {$/;"	s	file:
TasTool	src/Features/Tas/TasTool.cpp	/^TasTool::TasTool(const char *name, int slot)$/;"	f	class:TasTool
TasTool	src/Features/Tas/TasTool.hpp	/^class TasTool {$/;"	c
TasToolCommand	src/Features/Tas/TasTool.hpp	/^	TasToolCommand(TasTool *tool, std::shared_ptr<TasToolParams> params)$/;"	f	class:TasToolCommand
TasToolCommand	src/Features/Tas/TasTool.hpp	/^class TasToolCommand {$/;"	c
TasToolParams	src/Features/Tas/TasTool.hpp	/^	TasToolParams() {}$/;"	f	struct:TasToolParams
TasToolParams	src/Features/Tas/TasTool.hpp	/^	TasToolParams(bool enabled)$/;"	f	struct:TasToolParams
TasToolParams	src/Features/Tas/TasTool.hpp	/^struct TasToolParams {$/;"	s
TasUtils	src/Features/Tas/TasTools/TasUtils.hpp	/^namespace TasUtils {$/;"	n
Tcp	lib/SFML/include/SFML/Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	lib/SFML/include/SFML/Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
Teleport	src/Features/Teleporter.cpp	/^void Teleporter::Teleport(int slot, bool portals) {$/;"	f	class:Teleporter	typeref:typename:void
TeleportAt	src/Features/PlayerTrace.cpp	/^void PlayerTrace::TeleportAt(size_t trace_idx, int slot, int tick) {$/;"	f	class:PlayerTrace	typeref:typename:void
TeleportLocal	src/Features/Teleporter.cpp	/^void Teleporter::TeleportLocal(int slot, bool portals) {$/;"	f	class:Teleporter	typeref:typename:void
TeleportLocation	src/Features/Teleporter.hpp	/^struct TeleportLocation {$/;"	s
Teleporter	src/Features/Teleporter.cpp	/^Teleporter::Teleporter()$/;"	f	class:Teleporter
Teleporter	src/Features/Teleporter.hpp	/^class Teleporter : public Feature {$/;"	c
Test	src/Features/Speedrun/Rules.cpp	/^bool ChallengeFlagsRule::Test() {$/;"	f	class:ChallengeFlagsRule	typeref:typename:bool
Test	src/Features/Speedrun/Rules.cpp	/^bool CrouchFlyRule::Test() {$/;"	f	class:CrouchFlyRule	typeref:typename:bool
Test	src/Features/Speedrun/Rules.cpp	/^bool EntityInputRule::Test(std::string targetname, std::string classname, std::string inputname,/;"	f	class:EntityInputRule	typeref:typename:bool
Test	src/Features/Speedrun/Rules.cpp	/^bool MapEndRule::Test() {$/;"	f	class:MapEndRule	typeref:typename:bool
Test	src/Features/Speedrun/Rules.cpp	/^bool MapLoadRule::Test() {$/;"	f	class:MapLoadRule	typeref:typename:bool
Test	src/Features/Speedrun/Rules.cpp	/^bool PortalPlacementRule::Test(Vector pos, PortalColor portal) {$/;"	f	class:PortalPlacementRule	typeref:typename:bool
Test	src/Features/Speedrun/Rules.cpp	/^bool ZoneTriggerRule::Test(Vector pos) {$/;"	f	class:ZoneTriggerRule	typeref:typename:bool
TestFlagRules	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::TestFlagRules(int slot) {$/;"	f	class:SpeedrunTimer	typeref:typename:bool
TestFlyRules	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::TestFlyRules(int slot) {$/;"	f	class:SpeedrunTimer	typeref:typename:bool
TestGeneral	src/Features/Speedrun/Rules.cpp	/^bool SpeedrunRule::TestGeneral(std::optional<int> slot) {$/;"	f	class:SpeedrunRule	typeref:typename:bool
TestInputRule	src/Features/Demo/DemoGhostPlayer.hpp	/^void DemoGhostPlayer::TestInputRule(Ts... args) {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
TestInputRules	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::TestInputRules(std::string targetname, std::string classname, std::string in/;"	f	class:SpeedrunTimer	typeref:typename:bool
TestLoadRules	src/Features/Speedrun/Categories.cpp	/^void SpeedrunTimer::TestLoadRules() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
TestPortalRules	src/Features/Speedrun/Categories.cpp	/^bool SpeedrunTimer::TestPortalRules(Vector pos, int slot, PortalColor portal) {$/;"	f	class:SpeedrunTimer	typeref:typename:bool
TestZoneRules	src/Features/Speedrun/Categories.cpp	/^void SpeedrunTimer::TestZoneRules(Vector pos, int slot) {$/;"	f	class:SpeedrunTimer	typeref:typename:void
TextColor	src/Utils/SDK.hpp	/^enum class TextColor {$/;"	g
TextComponent	src/Features/Hud/Hud.cpp	/^struct TextComponent {$/;"	s	file:
TextLine	src/Features/Hud/Hud.cpp	/^struct TextLine {$/;"	s	file:
Think	src/Offsets.cpp	/^	int Think;$/;"	v	namespace:Offsets	typeref:typename:int
ThinkingWithTimeMachine	src/Games/Linux/ThinkingWithTimeMachine.cpp	/^ThinkingWithTimeMachine::ThinkingWithTimeMachine() {$/;"	f	class:ThinkingWithTimeMachine
ThinkingWithTimeMachine	src/Games/Linux/ThinkingWithTimeMachine.hpp	/^class ThinkingWithTimeMachine : public Portal2 {$/;"	c
ThinkingWithTimeMachine	src/Games/Windows/ThinkingWithTimeMachine.cpp	/^ThinkingWithTimeMachine::ThinkingWithTimeMachine() {$/;"	f	class:ThinkingWithTimeMachine
ThinkingWithTimeMachine	src/Games/Windows/ThinkingWithTimeMachine.hpp	/^class ThinkingWithTimeMachine : public Portal2 {$/;"	c
ThisPtr	src/Command.cpp	/^ConCommand *Command::ThisPtr() {$/;"	f	class:Command	typeref:typename:ConCommand *
ThisPtr	src/Interface.hpp	/^	inline void *ThisPtr() {$/;"	f	class:Interface	typeref:typename:void *
ThisPtr	src/Variable.cpp	/^ConVar *Variable::ThisPtr() {$/;"	f	class:Variable	typeref:typename:ConVar *
Thread	lib/SFML/include/SFML/System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
Thread	lib/SFML/include/SFML/System/Thread.inl	/^Thread::Thread(F function, A argument) :$/;"	f	class:Thread
Thread	lib/SFML/include/SFML/System/Thread.inl	/^Thread::Thread(F functor) :$/;"	f	class:Thread
Thread	lib/SFML/include/SFML/System/Thread.inl	/^Thread::Thread(void(C::*function)(), C* object) :$/;"	f	class:Thread
ThreadFunc	lib/SFML/include/SFML/System/Thread.inl	/^struct ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctor	lib/SFML/include/SFML/System/Thread.inl	/^    ThreadFunctor(T functor) : m_functor(functor) {}$/;"	f	struct:priv::ThreadFunctor	file:
ThreadFunctor	lib/SFML/include/SFML/System/Thread.inl	/^struct ThreadFunctor : ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctorWithArg	lib/SFML/include/SFML/System/Thread.inl	/^    ThreadFunctorWithArg(F function, A arg) : m_function(function), m_arg(arg) {}$/;"	f	struct:priv::ThreadFunctorWithArg	file:
ThreadFunctorWithArg	lib/SFML/include/SFML/System/Thread.inl	/^struct ThreadFunctorWithArg : ThreadFunc$/;"	s	namespace:priv	file:
ThreadLocal	lib/SFML/include/SFML/System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalPtr	lib/SFML/include/SFML/System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
ThreadLocalPtr	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>::ThreadLocalPtr(T* value) :$/;"	f	class:sf::ThreadLocalPtr
ThreadMemberFunc	lib/SFML/include/SFML/System/Thread.inl	/^    ThreadMemberFunc(void(C::*function)(), C* object) : m_function(function), m_object(object) {/;"	f	struct:priv::ThreadMemberFunc	file:
ThreadMemberFunc	lib/SFML/include/SFML/System/Thread.inl	/^struct ThreadMemberFunc : ThreadFunc$/;"	s	namespace:priv	file:
TickInfo	src/Features/Hud/StrafeQuality.cpp	/^struct TickInfo {$/;"	s	file:
TickRules	src/Features/Speedrun/Rules.cpp	/^void SpeedrunTimer::TickRules() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Tickrate	src/Features/Demo/Demo.cpp	/^float Demo::Tickrate() {$/;"	f	class:Demo	typeref:typename:float
Tickrate	src/Games/Linux/Portal2.cpp	/^const float Portal2::Tickrate() {$/;"	f	class:Portal2	typeref:typename:const float
Tickrate	src/Games/Windows/Portal2.cpp	/^const float Portal2::Tickrate() {$/;"	f	class:Portal2	typeref:typename:const float
Tier1	src/Modules/Tier1.hpp	/^class Tier1 : public Module {$/;"	c
Time	lib/SFML/include/SFML/System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
Timer	src/Features/Timer/Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	src/Features/Timer/Timer.hpp	/^class Timer : public Feature {$/;"	c
TimerAction	src/Features/Speedrun/SpeedrunTimer.cpp	/^enum class TimerAction {$/;"	g	file:
TimerAverage	src/Features/Timer/TimerAverage.cpp	/^TimerAverage::TimerAverage()$/;"	f	class:TimerAverage
TimerAverage	src/Features/Timer/TimerAverage.hpp	/^class TimerAverage {$/;"	c
TimerAverageItem	src/Features/Timer/TimerAverage.hpp	/^struct TimerAverageItem {$/;"	s
TimerCheckPointItem	src/Features/Timer/TimerCheckPoints.hpp	/^struct TimerCheckPointItem {$/;"	s
TimerCheckPoints	src/Features/Timer/TimerCheckPoints.cpp	/^TimerCheckPoints::TimerCheckPoints()$/;"	f	class:TimerCheckPoints
TimerCheckPoints	src/Features/Timer/TimerCheckPoints.hpp	/^class TimerCheckPoints {$/;"	c
TimerInterface	src/Features/Speedrun/SpeedrunTimer.cpp	/^TimerInterface::TimerInterface()$/;"	f	class:TimerInterface
TimerInterface	src/Features/Speedrun/SpeedrunTimer.cpp	/^struct TimerInterface {$/;"	s	file:
TimescaleDetect	src/Features/TimescaleDetect.cpp	/^TimescaleDetect::TimescaleDetect() {$/;"	f	class:TimescaleDetect
TimescaleDetect	src/Features/TimescaleDetect.hpp	/^class TimescaleDetect : public Feature {$/;"	c
ToString	src/Features/Tas/TasPlayer.cpp	/^std::string TasFramebulk::ToString() {$/;"	f	class:TasFramebulk	typeref:typename:std::string
ToString	src/Utils/SDK.cpp	/^const char *variant_t::ToString() const {$/;"	f	class:variant_t	typeref:typename:const char *
ToTime	src/Modules/Engine.cpp	/^float Engine::ToTime(int tick) {$/;"	f	class:Engine	typeref:typename:float
Toast	src/Features/Hud/Toasts.cpp	/^struct Toast {$/;"	s	file:
ToastHud	src/Features/Hud/Toasts.cpp	/^ToastHud::ToastHud()$/;"	f	class:ToastHud
ToastHud	src/Features/Hud/Toasts.hpp	/^class ToastHud : public Hud {$/;"	c
Token	src/Features/ConfigPlus.cpp	/^struct Token {$/;"	s	file:
TokenType	src/Features/ConfigPlus.cpp	/^enum TokenType {$/;"	g	file:
Trace	src/Features/PlayerTrace.hpp	/^struct Trace {$/;"	s
Trace	src/Modules/Engine.cpp	/^bool Engine::Trace(Vector &pos, QAngle &angle, float distMax, CTraceFilterSimple &filter, CGameT/;"	f	class:Engine	typeref:typename:bool
TraceFirePortal	src/Modules/Server.hpp	/^	_TraceFirePortal TraceFirePortal = nullptr;$/;"	m	class:Server	typeref:typename:_TraceFirePortal
TraceFromCamera	src/Modules/Engine.cpp	/^bool Engine::TraceFromCamera(float distMax, CGameTrace &tr) {$/;"	f	class:Engine	typeref:typename:bool
TraceHoverInfo	src/Features/PlayerTrace.cpp	/^struct TraceHoverInfo {$/;"	s	file:
TracePortalPlacementInfo_t	src/Utils/SDK.hpp	/^struct TracePortalPlacementInfo_t$/;"	s
TracePortalShot	src/Features/Routing/SeamshotFind.cpp	/^CGameTrace TracePortalShot(const Vector &start, const Vector &dir, float length) {$/;"	f	typeref:typename:CGameTrace
TraceRay	src/Modules/Engine.hpp	/^	_TraceRay TraceRay = nullptr;$/;"	m	class:Engine	typeref:typename:_TraceRay
TraceRay	src/Offsets.cpp	/^	int TraceRay;$/;"	v	namespace:Offsets	typeref:typename:int
TraceType_t	src/Utils/SDK.hpp	/^enum TraceType_t {$/;"	g
TransferAborted	lib/SFML/include/SFML/Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	lib/SFML/include/SFML/Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
Treat	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::Treat(sf::Packet &packet, bool udp) {$/;"	f	class:NetworkManager	typeref:typename:void
Trigger	src/Event.hpp	/^	void Trigger(EventData<E> data) {$/;"	f	namespace:Event	typeref:typename:void
TriggerCMFlag	src/Modules/Server.cpp	/^static void TriggerCMFlag(int slot, float time, bool end) {$/;"	f	typeref:typename:void	file:
TryGetModule	src/Utils/Memory.cpp	/^bool Memory::TryGetModule(const char *moduleName, Memory::ModuleInfo *info) {$/;"	f	class:Memory	typeref:typename:bool
Type	lib/SFML/include/SFML/Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Type	src/Modules/Tier1.cpp	/^	enum class Type {$/;"	g	struct:BufferedPart	file:
Type	src/Utils/json11.hpp	/^		enum Type {$/;"	g	class:json11::Json
UNKNOWN	src/Features/Stats/StatsResultType.hpp	/^	UNKNOWN,$/;"	e	enum:StatsResultType
UPDATE	src/Features/Demo/NetworkGhostPlayer.hpp	/^	UPDATE,$/;"	e	enum:HEADER
USE_OFF	src/Utils/SDK.hpp	/^	USE_OFF = 0,$/;"	e	enum:__anon21a65a740803
USE_ON	src/Utils/SDK.hpp	/^	USE_ON = 1,$/;"	e	enum:__anon21a65a740803
USE_SET	src/Utils/SDK.hpp	/^	USE_SET = 2,$/;"	e	enum:__anon21a65a740803
USE_TOGGLE	src/Utils/SDK.hpp	/^	USE_TOGGLE = 3$/;"	e	enum:__anon21a65a740803
USE_TYPE	src/Utils/SDK.hpp	/^} USE_TYPE;$/;"	t	typeref:enum:__anon21a65a740803
UTIL_PlayerByIndex	src/Modules/Server.hpp	/^	_UTIL_PlayerByIndex UTIL_PlayerByIndex = nullptr;$/;"	m	class:Server	typeref:typename:_UTIL_PlayerByIndex
UTIL_PlayerByIndex	src/Offsets.cpp	/^	int UTIL_PlayerByIndex;$/;"	v	namespace:Offsets	typeref:typename:int
Udp	lib/SFML/include/SFML/Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	lib/SFML/include/SFML/Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	lib/SFML/include/SFML/Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf	typeref:typename:unsigned short
Uint32	lib/SFML/include/SFML/Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf	typeref:typename:unsigned int
Uint64	lib/SFML/include/SFML/Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned __int64
Uint64	lib/SFML/include/SFML/Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned long long
Uint8	lib/SFML/include/SFML/Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf	typeref:typename:unsigned char
UnFormat	src/Features/Speedrun/SpeedrunTimer.cpp	/^float SpeedrunTimer::UnFormat(const std::string &formated_time) {$/;"	f	class:SpeedrunTimer	typeref:typename:float
UnPause	src/SAR.cpp	/^void SAR::UnPause() {$/;"	f	class:SAR	typeref:typename:void
UnProtect	src/Utils/Memory.hpp	/^	inline void UnProtect(void *addr, size_t len) {$/;"	f	namespace:Memory	typeref:typename:void
Unauthorized	lib/SFML/include/SFML/Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentication to be /;"	e	enum:sf::Http::Response::Status
Unfreeze	lib/minhook/hook.c	/^static VOID Unfreeze(PFROZEN_THREADS pThreads)$/;"	f	typeref:typename:VOID	file:
Unhook	src/Command.cpp	/^bool Command::Unhook(const char *name, _CommandCallback original) {$/;"	f	class:Command	typeref:typename:bool
Unhook	src/Interface.cpp	/^bool Interface::Unhook(int index) {$/;"	f	class:Interface	typeref:typename:bool
UnhookCompletion	src/Command.cpp	/^bool Command::UnhookCompletion(const char *name, _CommandCompletionCallback original) {$/;"	f	class:Command	typeref:typename:bool
UninitializeBuffer	lib/minhook/buffer.c	/^VOID UninitializeBuffer(VOID)$/;"	f	typeref:typename:VOID
Unique Console Commands	doc/contributing.md	/^#### Unique Console Commands$/;"	t	subsection:SAR: Contributing Guide""Coding""Game Support
UniqueFor	src/Command.cpp	/^void Command::UniqueFor(int version) {$/;"	f	class:Command	typeref:typename:void
UniqueFor	src/Variable.cpp	/^void Variable::UniqueFor(int version) {$/;"	f	class:Variable	typeref:typename:void
Unload	src/SAR.cpp	/^void SAR::Unload() {$/;"	f	class:SAR	typeref:typename:void
Unlock	src/Features/Cvars.cpp	/^void Cvars::Unlock() {$/;"	f	class:Cvars	typeref:typename:void
Unlock	src/Variable.cpp	/^void Variable::Unlock(bool asCheat) {$/;"	f	class:Variable	typeref:typename:void
Unregister	src/Command.cpp	/^void Command::Unregister() {$/;"	f	class:Command	typeref:typename:void
Unregister	src/Variable.cpp	/^void Variable::Unregister() {$/;"	f	class:Variable	typeref:typename:void
UnregisterAll	src/Command.cpp	/^void Command::UnregisterAll() {$/;"	f	class:Command	typeref:typename:void
UnregisterAll	src/Variable.cpp	/^void Variable::UnregisterAll() {$/;"	f	class:Variable	typeref:typename:void
UnregisterConCommand	src/Modules/Tier1.hpp	/^	_UnregisterConCommand UnregisterConCommand = nullptr;$/;"	m	class:Tier1	typeref:typename:_UnregisterConCommand
UnregisterConCommand	src/Offsets.cpp	/^	int UnregisterConCommand;$/;"	v	namespace:Offsets	typeref:typename:int
Update	src/Features/Hud/Toasts.cpp	/^void ToastHud::Update() {$/;"	f	class:ToastHud	typeref:typename:void
Update	src/Features/NetMessage.cpp	/^void NetMessage::Update() {$/;"	f	class:NetMessage	typeref:typename:void
Update	src/Features/Speedrun/SpeedrunTimer.cpp	/^void SpeedrunTimer::Update() {$/;"	f	class:SpeedrunTimer	typeref:typename:void
Update	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::Update() {$/;"	f	class:TasPlayer	typeref:typename:void
Update	src/Features/WorkshopList.cpp	/^int WorkshopList::Update() {$/;"	f	class:WorkshopList	typeref:typename:int
UpdateAnimatedVerts	src/Features/Demo/GhostRenderer.cpp	/^void GhostRenderer::UpdateAnimatedVerts() {$/;"	f	class:GhostRenderer	typeref:typename:void
UpdateColor	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::UpdateColor() {$/;"	f	class:NetworkManager	typeref:typename:void
UpdateCountdown	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::UpdateCountdown() {$/;"	f	class:NetworkManager	typeref:typename:void
UpdateCreator	src/Features/Routing/Ruler.cpp	/^void RulerManager::UpdateCreator() {$/;"	f	class:RulerManager	typeref:typename:void
UpdateDemoGhost	src/Features/Demo/DemoGhostEntity.cpp	/^void DemoGhostEntity::UpdateDemoGhost() {$/;"	f	class:DemoGhostEntity	typeref:typename:void
UpdateGhostsModel	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::UpdateGhostsModel(const std::string model) {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
UpdateGhostsPosition	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::UpdateGhostsPosition() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
UpdateGhostsPosition	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::UpdateGhostsPosition() {$/;"	f	class:NetworkManager	typeref:typename:void
UpdateGhostsSameMap	src/Features/Demo/DemoGhostPlayer.cpp	/^void DemoGhostPlayer::UpdateGhostsSameMap() {$/;"	f	class:DemoGhostPlayer	typeref:typename:void
UpdateGhostsSameMap	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::UpdateGhostsSameMap() {$/;"	f	class:NetworkManager	typeref:typename:void
UpdateImages	src/Features/Hud/Crosshair.cpp	/^void Crosshair::UpdateImages() {$/;"	f	class:Crosshair	typeref:typename:void
UpdateLastTick	src/Features/Tas/TasPlayer.hpp	/^    inline void UpdateLastTick(int tick) {this->lastTick = tick;}$/;"	f	class:TasPlayer	typeref:typename:void
UpdateModel	src/Features/Demo/NetworkGhostPlayer.cpp	/^void NetworkManager::UpdateModel(const std::string modelName) {$/;"	f	class:NetworkManager	typeref:typename:void
UpdateServer	src/Features/Tas/TasPlayer.cpp	/^void TasPlayer::UpdateServer() {$/;"	f	class:TasPlayer	typeref:typename:void
UpdateSync	src/Features/Stats/Sync.cpp	/^void Sync::UpdateSync(int slot, const CUserCmd *cmd) {$/;"	f	class:Sync	typeref:typename:void
Use	src/Features/Tas/TasController.hpp	/^	Use,$/;"	e	enum:TasControllerInput
UseSpeedPower	src/Offsets.cpp	/^	int UseSpeedPower;$/;"	v	namespace:Offsets	typeref:typename:int
Utf	lib/SFML/include/SFML/System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	lib/SFML/include/SFML/System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	lib/SFML/include/SFML/System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	lib/SFML/include/SFML/System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf	typeref:typename:Utf<16>
Utf32	lib/SFML/include/SFML/System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf	typeref:typename:Utf<32>
Utf8	lib/SFML/include/SFML/System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf	typeref:typename:Utf<8>
Utils	src/Utils.hpp	/^namespace Utils {$/;"	n
VEC2	src/Features/Stats/StatsResultType.hpp	/^	VEC2,$/;"	e	enum:StatsResultType
VEC3	src/Features/Stats/StatsResultType.hpp	/^	VEC3$/;"	e	enum:StatsResultType
VECTORIAL	src/Features/Tas/TasTools/StrafeTool.hpp	/^	VECTORIAL,$/;"	e	enum:AutoStrafeType
VECTORIAL_CAM	src/Features/Tas/TasTools/StrafeTool.hpp	/^	VECTORIAL_CAM$/;"	e	enum:AutoStrafeType
VERIFY_BAD_DEMO	src/Checksum.hpp	/^	VERIFY_BAD_DEMO,$/;"	e	enum:VerifyResult
VERIFY_INVALID_CHECKSUM	src/Checksum.hpp	/^	VERIFY_INVALID_CHECKSUM,$/;"	e	enum:VerifyResult
VERIFY_NO_CHECKSUM	src/Checksum.hpp	/^	VERIFY_NO_CHECKSUM,$/;"	e	enum:VerifyResult
VERIFY_VALID_CHECKSUM	src/Checksum.hpp	/^	VERIFY_VALID_CHECKSUM,$/;"	e	enum:VerifyResult
VERSION	Makefile	/^VERSION=$(shell git describe --tags)$/;"	m
VERSION_STRING	src/Utils/lodepng.cpp	/^#define VERSION_STRING /;"	d	file:
VGui	src/Modules/VGui.hpp	/^class VGui : public Module {$/;"	c
VIDEO_FRAME_READY	src/Features/Renderer.cpp	/^	VIDEO_FRAME_READY,$/;"	e	enum:WorkerMsg	file:
VMT	src/Utils/Memory.hpp	/^	inline T VMT(void *ptr, int index) {$/;"	f	namespace:Memory	typeref:typename:T
VMT	src/Utils/SDK.hpp	/^	void *VMT;                                  \/\/ 0$/;"	m	struct:SendProp	typeref:typename:void *
VMT	src/Utils/SDK.hpp	/^	void *VMT;              \/\/ 0$/;"	m	struct:CUserCmd	typeref:typename:void *
VMatrix	src/Utils/SDK.hpp	/^struct VMatrix {$/;"	s
VORBIS_FLAG_COMMENT	lib/ffmpeg/include/libavcodec/vorbis_parser.h	/^#define VORBIS_FLAG_COMMENT /;"	d
VORBIS_FLAG_HEADER	lib/ffmpeg/include/libavcodec/vorbis_parser.h	/^#define VORBIS_FLAG_HEADER /;"	d
VORBIS_FLAG_SETUP	lib/ffmpeg/include/libavcodec/vorbis_parser.h	/^#define VORBIS_FLAG_SETUP /;"	d
Value	src/Utils/json11.cpp	/^		explicit Value(T &&value)$/;"	f	class:json11::Value	file:
Value	src/Utils/json11.cpp	/^		explicit Value(const T &value)$/;"	f	class:json11::Value	file:
Value	src/Utils/json11.cpp	/^	class Value : public JsonValue {$/;"	c	namespace:json11	file:
Variable	src/Variable.cpp	/^Variable::Variable()$/;"	f	class:Variable
Variable	src/Variable.cpp	/^Variable::Variable(const char *name)$/;"	f	class:Variable
Variable	src/Variable.cpp	/^Variable::Variable(const char *name, const char *value, const char *helpstr, int flags, FnChange/;"	f	class:Variable
Variable	src/Variable.cpp	/^Variable::Variable(const char *name, const char *value, float min, const char *helpstr, int flag/;"	f	class:Variable
Variable	src/Variable.cpp	/^Variable::Variable(const char *name, const char *value, float min, float max, const char *helpst/;"	f	class:Variable
Variable	src/Variable.hpp	/^class Variable {$/;"	c
Variables	doc/contributing.md	/^#### Variables$/;"	t	subsection:SAR: Contributing Guide""Coding""Console Commands
Vector	src/Utils/SDK.hpp	/^	inline Vector()$/;"	f	struct:Vector
Vector	src/Utils/SDK.hpp	/^	inline Vector(float x, float y, float z = 0)$/;"	f	struct:Vector
Vector	src/Utils/SDK.hpp	/^struct Vector {$/;"	s
Vector2	lib/SFML/include/SFML/System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2() :$/;"	f	class:Vector2
Vector2	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2(T X, T Y) :$/;"	f	class:Vector2
Vector2	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>::Vector2(const Vector2<U>& vector) :$/;"	f	class:Vector2
Vector2f	lib/SFML/include/SFML/System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf	typeref:typename:Vector2<float>
Vector2i	lib/SFML/include/SFML/System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf	typeref:typename:Vector2<int>
Vector2u	lib/SFML/include/SFML/System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf	typeref:typename:Vector2<unsigned int>
Vector3	lib/SFML/include/SFML/System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3() :$/;"	f	class:Vector3
Vector3	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3(T X, T Y, T Z) :$/;"	f	class:Vector3
Vector3	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>::Vector3(const Vector3<U>& vector) :$/;"	f	class:Vector3
Vector3f	lib/SFML/include/SFML/System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf	typeref:typename:Vector3<float>
Vector3i	lib/SFML/include/SFML/System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf	typeref:typename:Vector3<int>
VectorAdd	src/Utils/Math.hpp	/^inline void Math::VectorAdd(const Vector &a, const Vector &b, Vector &c) {$/;"	f	class:Math	typeref:typename:void
VectorAligned	src/Utils/SDK.hpp	/^	VectorAligned()$/;"	f	struct:VectorAligned
VectorAligned	src/Utils/SDK.hpp	/^	VectorAligned(float x, float y, float z)$/;"	f	struct:VectorAligned
VectorAligned	src/Utils/SDK.hpp	/^struct VectorAligned : public Vector {$/;"	s
VectorAngles	src/Utils/Math.cpp	/^void Math::VectorAngles(Vector& forward, Vector& pseudoup, QAngle* angles) {$/;"	f	class:Math	typeref:typename:void
VectorCopy	src/Utils/Math.hpp	/^inline void Math::VectorCopy(const Vector &src, Vector &dst) {$/;"	f	class:Math	typeref:typename:void
VectorNormalize	src/Utils/Math.cpp	/^float Math::VectorNormalize(Vector &vec) {$/;"	f	class:Math	typeref:typename:float
VectorScale	src/Utils/Math.hpp	/^inline void Math::VectorScale(Vector const &src, float b, Vector &dst) {$/;"	f	class:Math	typeref:typename:void
VectorToQAngle	src/Utils/SDK.hpp	/^inline QAngle VectorToQAngle(const Vector &v) {$/;"	f	typeref:typename:QAngle
VectorTransform	src/Utils/SDK.hpp	/^	inline Vector VectorTransform(Vector vVec) const {$/;"	f	struct:VMatrix	typeref:typename:Vector
VelocityData	src/Features/Hud/VelocityGraph.cpp	/^struct VelocityData {$/;"	s	file:
VelocityGraph	src/Features/Hud/VelocityGraph.cpp	/^VelocityGraph::VelocityGraph()$/;"	f	class:VelocityGraph
VelocityGraph	src/Features/Hud/VelocityGraph.hpp	/^class VelocityGraph : public Hud {$/;"	c
VelocityStats	src/Features/Stats/VelocityStats.hpp	/^class VelocityStats {$/;"	c
VerifyDemoChecksum	src/Checksum.cpp	/^std::pair<VerifyResult, uint32_t> VerifyDemoChecksum(const char *filename) {$/;"	f	typeref:typename:std::pair<VerifyResult,uint32_t>
VerifyResult	src/Checksum.hpp	/^enum VerifyResult {$/;"	g
Version	src/Game.cpp	/^const char *Game::Version() {$/;"	f	class:Game	typeref:typename:const char *
Version	src/Games/Linux/ApertureTag.cpp	/^const char *ApertureTag::Version() {$/;"	f	class:ApertureTag	typeref:typename:const char *
Version	src/Games/Linux/Portal2.cpp	/^const char *Portal2::Version() {$/;"	f	class:Portal2	typeref:typename:const char *
Version	src/Games/Linux/PortalReloaded.cpp	/^const char *PortalReloaded::Version() {$/;"	f	class:PortalReloaded	typeref:typename:const char *
Version	src/Games/Linux/PortalStoriesMel.cpp	/^const char *PortalStoriesMel::Version() {$/;"	f	class:PortalStoriesMel	typeref:typename:const char *
Version	src/Games/Linux/ThinkingWithTimeMachine.cpp	/^const char *ThinkingWithTimeMachine::Version() {$/;"	f	class:ThinkingWithTimeMachine	typeref:typename:const char *
Version	src/Games/Windows/ApertureTag.cpp	/^const char *ApertureTag::Version() {$/;"	f	class:ApertureTag	typeref:typename:const char *
Version	src/Games/Windows/Portal2.cpp	/^const char *Portal2::Version() {$/;"	f	class:Portal2	typeref:typename:const char *
Version	src/Games/Windows/PortalReloaded.cpp	/^const char *PortalReloaded::Version() {$/;"	f	class:PortalReloaded	typeref:typename:const char *
Version	src/Games/Windows/PortalStoriesMel.cpp	/^const char *PortalStoriesMel::Version() {$/;"	f	class:PortalStoriesMel	typeref:typename:const char *
Version	src/Games/Windows/ThinkingWithTimeMachine.cpp	/^const char *ThinkingWithTimeMachine::Version() {$/;"	f	class:ThinkingWithTimeMachine	typeref:typename:const char *
VersionNotSupported	lib/SFML/include/SFML/Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP ver/;"	e	enum:sf::Http::Response::Status
VersionToString	src/Game.cpp	/^std::string Game::VersionToString(int version) {$/;"	f	class:Game	typeref:typename:std::string
Versions	doc/contributing.md	/^#### Versions$/;"	t	subsection:SAR: Contributing Guide""Coding""Game Support
VideoMode_Create	src/Offsets.cpp	/^	int VideoMode_Create;$/;"	v	namespace:Offsets	typeref:typename:int
VphysHud	src/Features/Hud/VphysHud.cpp	/^VphysHud::VphysHud()$/;"	f	class:VphysHud
VphysHud	src/Features/Hud/VphysHud.hpp	/^class VphysHud : public Hud {$/;"	c
WARNINGS	Makefile	/^WARNINGS=-Wall -Wno-unused-function -Wno-unused-variable -Wno-parentheses -Wno-unknown-pragmas -/;"	m
WARNING_SYMBOL	src/Modules/Console.hpp	/^#define WARNING_SYMBOL /;"	d
WATERMARK_MSG	src/Features/Hud/Watermark.cpp	/^#	define WATERMARK_MSG /;"	d	file:
WHITE	src/SAR.cpp	/^#define WHITE /;"	d	file:
WL_Feet	src/Utils/SDK.hpp	/^#define WL_Feet /;"	d
WL_Waist	src/Utils/SDK.hpp	/^#define WL_Waist /;"	d
WORKSHOP	src/Features/ConfigPlus.cpp	/^		WORKSHOP,$/;"	e	enum:Condition::__anon194454350203	file:
WRITE_LE32	src/Checksum.cpp	/^#define WRITE_LE32(/;"	d	file:
WRONG_WARP	src/Modules/Client.hpp	/^	WRONG_WARP,$/;"	e	enum:CMStatus
WSACleanup	src/Features/Bot/BotServer.cpp	/^#	define WSACleanup(/;"	d	file:
WSACleanup	src/Features/Tas/TasServer.cpp	/^#	define WSACleanup(/;"	d	file:
WaitEntry	src/Features/SegmentedTools.cpp	/^struct WaitEntry {$/;"	s	file:
WaitForNewSession	src/Features/Tas/TasPlayer.hpp	/^	WaitForNewSession,$/;"	e	enum:TasStartType
Warning	src/Modules/Console.hpp	/^	_Warning Warning = nullptr;$/;"	m	class:Console	typeref:typename:_Warning
WatermarkHud	src/Features/Hud/Watermark.cpp	/^	WatermarkHud()$/;"	f	class:WatermarkHud	file:
WatermarkHud	src/Features/Hud/Watermark.cpp	/^class WatermarkHud : public Hud {$/;"	c	file:
Windows	doc/contributing.md	/^### Windows$/;"	S	section:SAR: Contributing Guide""Building
WorkerMsg	src/Features/Renderer.cpp	/^enum class WorkerMsg {$/;"	g	file:
WorkshopList	src/Features/WorkshopList.cpp	/^WorkshopList::WorkshopList()$/;"	f	class:WorkshopList
WorkshopList	src/Features/WorkshopList.hpp	/^class WorkshopList : public Feature {$/;"	c
YELLOW	src/SAR.cpp	/^#define YELLOW /;"	d	file:
Zero	lib/SFML/include/SFML/System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value$/;"	m	class:sf::Time	typeref:typename:const Time
ZoneTriggerRule	src/Features/Speedrun/Rules.hpp	/^struct ZoneTriggerRule {$/;"	s
Zoom	src/Features/Tas/TasController.hpp	/^	Zoom,$/;"	e	enum:TasControllerInput
[Overview](#overview) | [Features](#features) | [Installation](#installation) | [Support](#support) | [Documentation](#documentation)	README.md	/^### [Overview](#overview) | [Features](#features) | [Installation](#installation) | [Support](#s/;"	S	chapter:SourceAutoRecord
_AcceptInput	src/Modules/Server.hpp	/^	using _AcceptInput = bool(__rescall *)(void *thisptr, const char *inputName, void *activator, v/;"	t	class:Server
_AddListener	src/Modules/Engine.hpp	/^	using _AddListener = bool(__rescall *)(void *thisptr, IGameEventListener2 *listener, const char/;"	t	class:Engine
_AddText	src/Modules/Engine.hpp	/^	using _AddText = void(__rescall *)(void *thisptr, const char *pText, int nTickDelay);$/;"	t	class:Engine
_AutoCompletionFunc	src/Utils/SDK.hpp	/^using _AutoCompletionFunc = int(__rescalll *)(void *thisptr, char const *partial, char commands[/;"	t
_CALL_ABS	lib/minhook/trampoline.h	/^typedef struct _CALL_ABS$/;"	s
_Cbuf_AddText	src/Modules/Engine.hpp	/^	using _Cbuf_AddText = void(__cdecl *)(int slot, const char *pText, int nTickDelay);$/;"	t	class:Engine
_ChatPrintf	src/Modules/Client.hpp	/^	using _ChatPrintf = void (*)(void *thisptr, int iPlayerIndex, int iFilter, const char *fmt, .../;"	t	class:Client
_ClientCmd	src/Modules/Engine.hpp	/^	using _ClientCmd = int(__rescall *)(void *thisptr, const char *szCmdString);$/;"	t	class:Engine
_ClientCommand	src/Modules/Engine.hpp	/^	using _ClientCommand = int (*)(void *thisptr, void *pEdict, const char *szFmt, ...);$/;"	t	class:Engine
_ClientTime	src/Modules/Engine.hpp	/^	using _ClientTime = float (*)(void *thisptr);$/;"	t	class:Engine
_Cmd_Shutdown	src/Cheats.cpp	/^	using _Cmd_Shutdown = int (*)();$/;"	t	file:
_ColorMsg	src/Modules/Console.hpp	/^	using _ColorMsg = void(__cdecl *)(const Color &clr, const char *pMsgFormat, ...);$/;"	t	class:Console
_CommandCallback	src/Utils/SDK.hpp	/^using _CommandCallback = void (*)(const CCommand &args);$/;"	t
_CommandCompletionCallback	src/Utils/SDK.hpp	/^using _CommandCompletionCallback = int (*)(const char *partial, char commands[COMMAND_COMPLETION/;"	t
_ConPrintEvent	src/Modules/Engine.hpp	/^	using _ConPrintEvent = int(__rescall *)(void *thisptr, IGameEvent *ev);$/;"	t	class:Engine
_Con_IsVisible	src/Modules/Engine.hpp	/^	using _Con_IsVisible = bool(__rescall *)(void *thisptr);$/;"	t	class:Engine
_Create	src/Modules/Tier1.hpp	/^	using _Create = int(__rescall *)(ConVar *thisptr, const char *pName, const char *pDefaultValue,/;"	t	class:Tier1
_CreateEntityByName	src/Modules/Server.hpp	/^	using _CreateEntityByName = void *(__rescall *)(void *, const char *);$/;"	t	class:Server
_CreateNewTextureID	src/Modules/Surface.hpp	/^	using _CreateNewTextureID = int(__rescall *)(void *thisptr, bool procedural);$/;"	t	class:Surface
_DebugDrawPhysCollide	src/Modules/Engine.hpp	/^	using _DebugDrawPhysCollide = bool (__rescall *)(void *thisptr, const void *collide, IMaterial /;"	t	class:Engine
_DevMsg	src/Modules/Console.hpp	/^	using _DevMsg = void(__cdecl *)(const char *pMsgFormat, ...);$/;"	t	class:Console
_DevWarning	src/Modules/Console.hpp	/^	using _DevWarning = void(__cdecl *)(const char *pMsgFormat, ...);$/;"	t	class:Console
_DispatchSpawn	src/Modules/Server.hpp	/^	using _DispatchSpawn = void(__rescall *)(void *, void *);$/;"	t	class:Server
_DrawColoredCircle	src/Modules/Surface.hpp	/^	using _DrawColoredCircle = int(__rescall *)(void *thisptr, int centerx, int centery, float radi/;"	t	class:Surface
_DrawColoredText	src/Modules/Surface.hpp	/^	using _DrawColoredText = int(__cdecl *)(void *thisptr, HFont font, int x, int y, int r, int g, /;"	t	class:Surface
_DrawFilledRect	src/Modules/Surface.hpp	/^	using _DrawFilledRect = int(__rescall *)(void *thisptr, int x0, int y0, int x1, int y1);$/;"	t	class:Surface
_DrawGetTextureFile	src/Modules/Surface.hpp	/^	using _DrawGetTextureFile = int(__rescall *)(void *thisptr, int id, char *filename, int maxlen)/;"	t	class:Surface
_DrawGetTextureId	src/Modules/Surface.hpp	/^	using _DrawGetTextureId = int(__rescall *)(void *thisptr, char const *filename);$/;"	t	class:Surface
_DrawGetTextureSize	src/Modules/Surface.hpp	/^	using _DrawGetTextureSize = int(__rescall *)(void *thisptr, int id, int &wide, int &tall);$/;"	t	class:Surface
_DrawLine	src/Modules/Surface.hpp	/^	using _DrawLine = int(__rescall *)(void *thisptr, int x0, int y0, int x1, int y1);$/;"	t	class:Surface
_DrawSetColor	src/Modules/Surface.hpp	/^	using _DrawSetColor = int(__rescall *)(void *thisptr, int r, int g, int b, int a);$/;"	t	class:Surface
_DrawSetTextColor	src/Modules/Surface.hpp	/^	using _DrawSetTextColor = int(__rescall *)(void *thisptr, Color color);$/;"	t	class:Surface
_DrawSetTextFont	src/Modules/Surface.hpp	/^	using _DrawSetTextFont = int(__rescall *)(void *thisptr, HFont font);$/;"	t	class:Surface
_DrawSetTexture	src/Modules/Surface.hpp	/^	using _DrawSetTexture = int(__rescall *)(void *thisptr, int id);$/;"	t	class:Surface
_DrawSetTextureFile	src/Modules/Surface.hpp	/^	using _DrawSetTextureFile = int(__rescall *)(void *thisptr, int id, const char *filename, int h/;"	t	class:Surface
_DrawSetTextureRGBA	src/Modules/Surface.hpp	/^	using _DrawSetTextureRGBA = int(__rescall *)(void *thisptr, int id, const unsigned char *rgba, /;"	t	class:Surface
_DrawTextLen	src/Modules/Surface.hpp	/^	using _DrawTextLen = int(__cdecl *)(void *thisptr, HFont font, char *fmt, ...);$/;"	t	class:Surface
_DrawTexturedRect	src/Modules/Surface.hpp	/^	using _DrawTexturedRect = int(__rescall *)(void *thisptr, int x0, int y0, int x1, int y1);$/;"	t	class:Surface
_Dtor	src/Modules/Tier1.hpp	/^	using _Dtor = int(__rescall *)(ConVar *thisptr);$/;"	t	class:Tier1
_Dtor	src/Modules/Tier1.hpp	/^	using _Dtor = int(__rescall *)(ConVar *thisptr, char a2);$/;"	t	class:Tier1
_EnableGravity	src/Features/Hud/VphysHud.cpp	/^	using _EnableGravity = bool(__rescall *)(void *thisptr, bool enabled);$/;"	t	file:
_EventReg	src/Event.hpp	/^	struct _EventReg {$/;"	s	namespace:Event
_ExecuteClientCmd	src/Modules/Engine.hpp	/^	using _ExecuteClientCmd = int(__rescall *)(void *thisptr, const char *szCmdString);$/;"	t	class:Engine
_FROZEN_THREADS	lib/minhook/hook.c	/^typedef struct _FROZEN_THREADS$/;"	s	file:
_FileCompletionFunc	src/Command.cpp	/^int _FileCompletionFunc(std::string extension, std::string rootdir, int exp_args, const char *pa/;"	f	typeref:typename:int
_FindCommandBase	src/Utils/SDK.hpp	/^using _FindCommandBase = void *(__rescalll *)(void *thisptr, const char *name);$/;"	t
_FindElement	src/Modules/Client.cpp	/^			using _FindElement = void *(__rescall *)(void *thisptr, const char *pName);$/;"	t	function:Client::Init	file:
_FindPortal	src/Modules/Server.hpp	/^	using _FindPortal = int(*)(char linkage, bool secondaryPortal, bool createIfNotFound);$/;"	t	class:Server
_FinishDrawing	src/Modules/Surface.hpp	/^	using _FinishDrawing = int(__cdecl *)();$/;"	t	class:Surface
_Fn	src/Modules/Engine.cpp	/^	using _Fn = int(__rescall *)(void *thisptr);$/;"	t	function:Engine::GetTicks	file:
_FontManager	src/Modules/Surface.cpp	/^		using _FontManager = void*(*)();$/;"	t	function:Surface::Init	file:
_FrameStageNotify	src/Modules/Client.hpp	/^	using _FrameStageNotify = void (__rescall *)(void *thisptr, int stage);$/;"	t	class:Client
_GAME_PATH	src/Utils/Platform.hpp	/^#define _GAME_PATH(/;"	d
_GetActiveSplitScreenPlayerSlot	src/Modules/Engine.hpp	/^	using _GetActiveSplitScreenPlayerSlot = int (__rescall *)(void *thisptr);$/;"	t	class:Engine
_GetAllClasses	src/Modules/Client.hpp	/^	using _GetAllClasses = ClientClass *(*)();$/;"	t	class:Client
_GetAllServerClasses	src/Modules/Server.hpp	/^	using _GetAllServerClasses = ServerClass *(*)();$/;"	t	class:Server
_GetClientEntity	src/Modules/Client.hpp	/^	using _GetClientEntity = void *(__rescall *)(void *thisptr, int entnum);$/;"	t	class:Client
_GetClientState	src/Modules/Engine.cpp	/^		typedef void *(*_GetClientState)();$/;"	t	function:Engine::Init	typeref:typename:void * (*)()	file:
_GetCount	src/Modules/Engine.hpp	/^	using _GetCount = int(__rescall *)(void *thisptr);$/;"	t	class:Engine
_GetCursorPosition	src/Modules/InputSystem.hpp	/^	using _GetCursorPosition = void(__rescall *)(void *thisptr, int &x, int &y);$/;"	t	class:InputSystem
_GetFont	src/Modules/Scheme.hpp	/^	using _GetFont = unsigned long(__rescall *)(void *thisptr, const char *fontName, bool proportio/;"	t	class:Scheme
_GetFontName	src/Modules/Surface.hpp	/^	using _GetFontName = const char *(__rescall *)(void *thisptr, HFont font);$/;"	t	class:Surface
_GetFontTall	src/Modules/Surface.hpp	/^	using _GetFontTall = int(__rescall *)(void *thisptr, HFont font);$/;"	t	class:Surface
_GetGameDirectory	src/Modules/Engine.hpp	/^	using _GetGameDirectory = char *(__cdecl *)();$/;"	t	class:Engine
_GetHud	src/Modules/Client.cpp	/^			using _GetHud = void *(__cdecl *)(int unk);$/;"	t	function:Client::Init	file:
_GetIScheme	src/Modules/Scheme.cpp	/^		using _GetIScheme = void *(__rescall *)(void *thisptr, unsigned long scheme);$/;"	t	function:Scheme::Init	file:
_GetKernedCharWidth	src/Modules/Surface.hpp	/^	using _GetKernedCharWidth = void(__rescall *)(void *thisptr, HFont font, wchar_t ch, wchar_t pr/;"	t	class:Surface
_GetLevelNameShort	src/Modules/Engine.hpp	/^	using _GetLevelNameShort = const char *(__rescall *)(void *thisptr);$/;"	t	class:Engine
_GetLightForPoint	src/Modules/Engine.hpp	/^	using _GetLightForPoint = Vector (__rescall *)(void *thisptr, const Vector &pos, bool clamp);$/;"	t	class:Engine
_GetLightForPoint	src/Modules/Engine.hpp	/^	using _GetLightForPoint = void (__rescall *)(void *thisptr, Vector &out, const Vector &pos, boo/;"	t	class:Engine
_GetLocalClient	src/Modules/Engine.hpp	/^	using _GetLocalClient = int (*)(int index);$/;"	t	class:Engine
_GetLocalPlayer	src/Modules/Engine.hpp	/^	using _GetLocalPlayer = int(__rescall *)(void *thisptr);$/;"	t	class:Engine
_GetMaxClients	src/Modules/Engine.hpp	/^	using _GetMaxClients = int (*)();$/;"	t	class:Engine
_GetPaintPower	src/Features/Tas/TasPlayer.cpp	/^	using _GetPaintPower = const PaintPowerInfo_t&(__rescall*)(void* thisptr, unsigned paintId);$/;"	t	function:TasPlayer::GetPlayerInfo	file:
_GetPlaybackTick	src/Modules/EngineDemoPlayer.hpp	/^	using _GetPlaybackTick = int(__rescall *)(void *thisptr);$/;"	t	class:EngineDemoPlayer
_GetPosition	src/Features/Hud/VphysHud.cpp	/^	using _GetPosition = void(__rescall *)(void *thisptr, Vector *worldPosition, QAngle *angles);$/;"	t	file:
_GetPosition	src/Features/Hud/VphysHud.cpp	/^	using _GetPosition = void(__rescall *)(void *thisptr, Vector *worldPosition, QAngle *angles);$/;"	t	function:VphysHud::Paint	file:
_GetRecordingTick	src/Modules/EngineDemoRecorder.hpp	/^	using _GetRecordingTick = int(__rescall *)(void *thisptr);$/;"	t	class:EngineDemoRecorder
_GetSaveDirName	src/Modules/Engine.hpp	/^	using _GetSaveDirName = char *(__cdecl *)();$/;"	t	class:Engine
_GetScreenSize	src/Modules/Engine.hpp	/^	using _GetScreenSize = int(__rescall *)(void *thisptr, int &width, int &height);$/;"	t	class:Engine
_GetVelocity	src/Features/Hud/VphysHud.cpp	/^	using _GetVelocity = void(__rescall *)(void *thisptr, Vector *velocity, Vector *angularVelocity/;"	t	file:
_GetVelocity	src/Features/Hud/VphysHud.cpp	/^	using _GetVelocity = void(__rescall *)(void *thisptr, Vector *velocity, Vector *angularVelocity/;"	t	function:VphysHud::Paint	file:
_GetViewAngles	src/Modules/Engine.hpp	/^	using _GetViewAngles = int(__rescall *)(void *thisptr, QAngle &va);$/;"	t	class:Engine
_HDE32_H_	lib/minhook/hde/hde32.h	/^#define _HDE32_H_$/;"	d
_HDE64_H_	lib/minhook/hde/hde64.h	/^#define _HDE64_H_$/;"	d
_HOOK_ENTRY	lib/minhook/hook.c	/^typedef struct _HOOK_ENTRY$/;"	s	file:
_HostFrameTime	src/Modules/Engine.hpp	/^	using _HostFrameTime = float (*)(void *thisptr);$/;"	t	class:Engine
_Host_RunFrame_Render	src/Modules/Engine.cpp	/^void (*_Host_RunFrame_Render)();$/;"	v	typeref:typename:void (*)()
_Host_RunFrame_Render_Detour	src/Modules/Engine.cpp	/^void _Host_RunFrame_Render_Detour() {$/;"	f	typeref:typename:void
_Host_RunFrame_Render_Hook	src/Modules/Engine.cpp	/^static Hook _Host_RunFrame_Render_Hook(&_Host_RunFrame_Render_Detour);$/;"	v	typeref:typename:Hook	file:
_IN_ActivateMouse	src/Modules/Client.hpp	/^	using _IN_ActivateMouse = void (*)(void *thisptr);$/;"	t	class:Client
_IN_DeactivateMouse	src/Modules/Client.hpp	/^	using _IN_DeactivateMouse = void (*)(void *thisptr);$/;"	t	class:Client
_InstallGlobalChangeCallback	src/Utils/SDK.hpp	/^using _InstallGlobalChangeCallback = void(__rescalll *)(void *thisptr, FnChangeCallback_t callba/;"	t
_InternalSetFloatValue	src/Utils/SDK.hpp	/^using _InternalSetFloatValue = void(__rescalll *)(void *thisptr, float value);$/;"	t
_InternalSetIntValue	src/Utils/SDK.hpp	/^using _InternalSetIntValue = void(__rescalll *)(void *thisptr, int value);$/;"	t
_InternalSetValue	src/Utils/SDK.hpp	/^using _InternalSetValue = void(__rescalll *)(void *thisptr, const char *value);$/;"	t
_IsAsleep	src/Features/Hud/VphysHud.cpp	/^	using _IsAsleep = bool(__rescall *)(void *thisptr);$/;"	t	function:VphysHud::Paint	file:
_IsButtonDown	src/Modules/InputSystem.hpp	/^	using _IsButtonDown = bool(__rescall *)(void *thisptr, ButtonCode_t key);$/;"	t	class:InputSystem
_IsEnabled	src/Features/Hud/VphysHud.cpp	/^	using _IsEnabled = bool(__rescall *)(void *thisptr);$/;"	t	function:VphysHud::Paint	file:
_IsGameUIVisible	src/Modules/VGui.hpp	/^	using _IsGameUIVisible = bool(__rescall *)(void *thisptr);$/;"	t	class:VGui
_IsPaused	src/Modules/Engine.hpp	/^	using _IsPaused = bool (*)(void *thisptr);$/;"	t	class:Engine
_IsPlaybackPaused	src/Modules/EngineDemoPlayer.hpp	/^	using _IsPlaybackPaused = bool(__rescall *)(void *thisptr);$/;"	t	class:EngineDemoPlayer
_IsPlayingBack	src/Modules/EngineDemoPlayer.hpp	/^	using _IsPlayingBack = bool(__rescall *)(void *thisptr);$/;"	t	class:EngineDemoPlayer
_IsRestoring	src/Modules/Server.hpp	/^	using _IsRestoring = bool (*)();$/;"	t	class:Server
_IsServerPaused	src/Modules/Engine.hpp	/^	using _IsServerPaused = bool (*)(void *thisptr);$/;"	t	class:Engine
_IsSkipping	src/Modules/EngineDemoPlayer.hpp	/^	using _IsSkipping = bool(__rescall *)(void *thisptr);$/;"	t	class:EngineDemoPlayer
_IsTextureIDValid	src/Modules/Surface.hpp	/^	using _IsTextureIDValid = int(__rescall *)(void *thisptr, int id);$/;"	t	class:Surface
_JCC_ABS	lib/minhook/trampoline.h	/^typedef struct _JCC_ABS$/;"	s
_JCC_REL	lib/minhook/trampoline.h	/^typedef struct _JCC_REL$/;"	s
_JMP_ABS	lib/minhook/trampoline.h	/^typedef struct _JMP_ABS$/;"	s
_JMP_REL	lib/minhook/trampoline.h	/^typedef struct _JMP_REL$/;"	s
_JMP_REL_SHORT	lib/minhook/trampoline.h	/^typedef struct _JMP_REL_SHORT$/;"	s
_KeyDown	src/Modules/Client.hpp	/^	using _KeyDown = int(__cdecl *)(void *b, const char *c);$/;"	t	class:Client
_KeySetBinding	src/Modules/InputSystem.hpp	/^	using _KeySetBinding = void(__cdecl *)(int keynum, const char *pBinding);$/;"	t	class:InputSystem
_KeyUp	src/Modules/Client.hpp	/^	using _KeyUp = int(__cdecl *)(void *b, const char *c);$/;"	t	class:Client
_LoggingSystem_HasTag	src/Modules/Console.hpp	/^	using _LoggingSystem_HasTag = bool(__cdecl *)(int channelID, const char *tag);$/;"	t	class:Console
_LoggingSystem_PopLoggingState	src/Modules/Console.hpp	/^	using _LoggingSystem_PopLoggingState = void(__cdecl *)(bool threadLocal);$/;"	t	class:Console
_LoggingSystem_PushLoggingState	src/Modules/Console.hpp	/^	using _LoggingSystem_PushLoggingState = void(__cdecl *)(bool threadLocal, bool clearState);$/;"	t	class:Console
_LoggingSystem_RegisterLoggingListener	src/Modules/Console.hpp	/^	using _LoggingSystem_RegisterLoggingListener = void(__cdecl *)(ILoggingListener *listener);$/;"	t	class:Console
_LoggingSystem_SetChannelSpewLevelByTag	src/Modules/Console.hpp	/^	using _LoggingSystem_SetChannelSpewLevelByTag = void(__cdecl *)(const char *tag, LoggingSeverit/;"	t	class:Console
_MEMORY_BLOCK	lib/minhook/buffer.c	/^typedef struct _MEMORY_BLOCK$/;"	s	file:
_MEMORY_SLOT	lib/minhook/buffer.c	/^typedef struct _MEMORY_SLOT$/;"	s	file:
_Msg	src/Modules/Console.hpp	/^	using _Msg = void(__cdecl *)(const char *pMsgFormat, ...);$/;"	t	class:Console
_ON_EVENT	src/Event.hpp	/^#define _ON_EVENT(/;"	d
_ON_EVENT1	src/Event.hpp	/^#define _ON_EVENT1(/;"	d
_ON_INIT	src/Event.hpp	/^#define _ON_INIT(/;"	d
_ON_INIT1	src/Event.hpp	/^#define _ON_INIT1(/;"	d
_PaintCallback	src/Features/Hud/Hud.hpp	/^using _PaintCallback = void (*)(HudContext *ctx);$/;"	t
_PaintCallbackMode	src/Features/Hud/Hud.hpp	/^using _PaintCallbackMode = void (*)(HudContext *ctx, int mode);$/;"	t
_PaintCallbackString	src/Features/Hud/Hud.hpp	/^using _PaintCallbackString = void (*)(HudContext *ctx, const char *text);$/;"	t
_PrecacheModel	src/Modules/Engine.hpp	/^	using _PrecacheModel = int(__rescall *)(void *thisptr, const char *, bool);$/;"	t	class:Engine
_RegisterConCommand	src/Utils/SDK.hpp	/^using _RegisterConCommand = void(__rescalll *)(void *thisptr, ConCommandBase *pCommandBase);$/;"	t
_RemoveGlobalChangeCallback	src/Utils/SDK.hpp	/^using _RemoveGlobalChangeCallback = void(__rescalll *)(void *thisptr, FnChangeCallback_t callbac/;"	t
_RemoveListener	src/Modules/Engine.hpp	/^	using _RemoveListener = bool(__rescall *)(void *thisptr, IGameEventListener2 *listener);$/;"	t	class:Engine
_RuleTypes	src/Features/Speedrun/Rules.hpp	/^	using _RuleTypes = std::variant<$/;"	t	struct:SpeedrunRule	typeref:typename:std::variant<EntityInputRule,ZoneTriggerRule,PortalPlacementRule,ChallengeFlagsRule,MapLoadRule,MapEndRule,CrouchFlyRule>
_ScreenPosition	src/Modules/Engine.hpp	/^	using _ScreenPosition = int(__rescall *)(void *thisptr, const Vector &point, Vector &screen);$/;"	t	class:Engine
_ServerPause	src/Modules/Engine.hpp	/^	using _ServerPause = bool (*)(void *thisptr, bool bPause, bool bForce);$/;"	t	class:Engine
_SetCursorPosition	src/Modules/InputSystem.hpp	/^	using _SetCursorPosition = void(__rescall *)(void *thisptr, int x, int y);$/;"	t	class:InputSystem
_SetKeyValueChar	src/Modules/Server.hpp	/^	using _SetKeyValueChar = bool(__rescall *)(void *, void *, const char *, const char *);$/;"	t	class:Server
_SetKeyValueFloat	src/Modules/Server.hpp	/^	using _SetKeyValueFloat = bool(__rescall *)(void *, void *, const char *, float);$/;"	t	class:Server
_SetKeyValueVector	src/Modules/Server.hpp	/^	using _SetKeyValueVector = bool(__rescall *)(void *, void *, const char *, const Vector &);$/;"	t	class:Server
_SetPosition	src/Features/Hud/VphysHud.cpp	/^	using _SetPosition = void(__rescall *)(void *thisptr, const Vector &worldPosition, const QAngle/;"	t	file:
_SetVelocity	src/Features/Hud/VphysHud.cpp	/^	using _SetVelocity = void(__rescall *)(void *thisptr, const Vector *velocity, const Vector *ang/;"	t	file:
_SetViewAngles	src/Modules/Engine.hpp	/^	using _SetViewAngles = int(__rescall *)(void *thisptr, QAngle &va);$/;"	t	class:Engine
_ShouldDraw	src/Modules/Client.hpp	/^	using _ShouldDraw = bool(__rescall *)(void *thisptr);$/;"	t	class:Client
_SkipToTick	src/Modules/EngineDemoPlayer.hpp	/^	using _SkipToTick = int(__rescall *)(void *thisptr, int tick, bool relative, bool pause);$/;"	t	class:EngineDemoPlayer
_StartDrawing	src/Modules/Surface.hpp	/^	using _StartDrawing = int(__rescall *)(void *thisptr);$/;"	t	class:Surface
_StartMessageMode	src/Modules/Client.hpp	/^	using _StartMessageMode = void (__rescall *)(void *thisptr, int type);$/;"	t	class:Client
_StringToButtonCode	src/Modules/InputSystem.hpp	/^	using _StringToButtonCode = int(__rescall *)(void *thisptr, const char *pString);$/;"	t	class:InputSystem
_TRAMPOLINE	lib/minhook/trampoline.h	/^typedef struct _TRAMPOLINE$/;"	s
_TraceFirePortal	src/Modules/Server.hpp	/^	using _TraceFirePortal = int(__rescall *)(uintptr_t pgunptr, Vector &vOrigin, Vector &Direction/;"	t	class:Server
_TraceRay	src/Modules/Engine.hpp	/^	using _TraceRay = void(__rescall *)(void *thisptr, const Ray_t &ray, unsigned int fMask, ITrace/;"	t	class:Engine
_UTIL_PlayerByIndex	src/Modules/Server.hpp	/^	using _UTIL_PlayerByIndex = void *(__cdecl *)(int index);$/;"	t	class:Server
_UnregisterConCommand	src/Utils/SDK.hpp	/^using _UnregisterConCommand = void(__rescalll *)(void *thisptr, ConCommandBase *pCommandBase);$/;"	t
_UseSpeedPower	src/Features/Tas/TasPlayer.cpp	/^		using _UseSpeedPower = void(__rescall*)(void* thisptr, PaintPowerInfo_t& info);$/;"	t	function:TasPlayer::GetPlayerInfo	file:
_WIN32_WINNT	lib/ffmpeg/include/libavcodec/d3d11va.h	/^#define _WIN32_WINNT /;"	d
_WIN32_WINNT	lib/ffmpeg/include/libavcodec/dxva2.h	/^#define _WIN32_WINNT /;"	d
_Warning	src/Modules/Console.hpp	/^	using _Warning = void(__cdecl *)(const char *pMsgFormat, ...);$/;"	t	class:Console
__anon005e5d080102	src/Features/SegmentedTools.cpp	/^	Scheduler::InHostTicks(ticks, [=]() {$/;"	f	file:
__anon06d434180103	lib/SFML/include/SFML/Network/Socket.hpp	/^    {$/;"	g	class:sf::Socket
__anon0dc998800102	src/Features/DataMapDumper.cpp	/^	DumpMap = [&DumpMap, &file](datamap_t *map) {$/;"	f	function:DataMapDumper::Dump	file:
__anon0ecf41770103	lib/ffmpeg/include/libavutil/hwcontext.h	/^enum {$/;"	g
__anon194454350102	src/Features/ConfigPlus.cpp	/^	g_svarListener = new ConsoleListener([&](const char *msg) {$/;"	f	file:
__anon194454350203	src/Features/ConfigPlus.cpp	/^	enum {$/;"	g	struct:Condition	file:
__anon19445435030a	src/Features/ConfigPlus.cpp	/^	union {$/;"	u	struct:Condition	file:
__anon194454350408	src/Features/ConfigPlus.cpp	/^		struct {$/;"	s	union:Condition::__anon19445435030a	file:
__anon194454350508	src/Features/ConfigPlus.cpp	/^		struct {$/;"	s	union:Condition::__anon19445435030a	file:
__anon1a849a9c0102	src/Features/Hud/InputHud.cpp	/^	auto colorToString = [](Color color) -> std::string {$/;"	f	function:InputHud::GetParameterValue	typeref:typename:std::string	file:
__anon1a849a9c0202	src/Features/Hud/InputHud.cpp	/^	auto addToParameterOutput = [&](std::string elementName, std::string parameter) {$/;"	f	file:
__anon1a84afe10108	src/Features/Hud/InputHud.hpp	/^	struct {$/;"	s	class:InputHud
__anon21427171010a	src/Features/Tas/TasServer.cpp	/^	union { float f; int i; } rate = { g_last_status.playback_rate };$/;"	u	function:fullUpdate	file:
__anon21427171020a	src/Features/Tas/TasServer.cpp	/^		union { float f; int i; } rate = { status.playback_rate };$/;"	u	function:update	file:
__anon214271710302	src/Features/Tas/TasServer.cpp	/^        Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710402	src/Features/Tas/TasServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710502	src/Features/Tas/TasServer.cpp	/^			Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon21427171060a	src/Features/Tas/TasServer.cpp	/^				union { uint32_t i; float f; } rate = { popRaw32(cl.cmdbuf) };$/;"	u	function:processCommands	file:
__anon214271710702	src/Features/Tas/TasServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710802	src/Features/Tas/TasServer.cpp	/^			Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710902	src/Features/Tas/TasServer.cpp	/^			Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710a02	src/Features/Tas/TasServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710b02	src/Features/Tas/TasServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anon214271710c02	src/Features/Tas/TasServer.cpp	/^			Scheduler::OnMainThread([](){$/;"	f	function:processCommands	file:
__anon21a65a740103	src/Utils/SDK.hpp	/^	enum {$/;"	g	struct:CCommand
__anon21a65a74020a	src/Utils/SDK.hpp	/^	union {$/;"	u	struct:ConCommand
__anon21a65a74030a	src/Utils/SDK.hpp	/^	union {$/;"	u	struct:ConCommand
__anon21a65a740403	src/Utils/SDK.hpp	/^typedef enum {$/;"	g
__anon21a65a740503	src/Utils/SDK.hpp	/^typedef enum {$/;"	g
__anon21a65a740603	src/Utils/SDK.hpp	/^enum {$/;"	g
__anon21a65a740708	src/Utils/SDK.hpp	/^typedef struct {$/;"	s
__anon21a65a740803	src/Utils/SDK.hpp	/^typedef enum {$/;"	g
__anon21a65a74090a	src/Utils/SDK.hpp	/^	union {$/;"	u	struct:variant_t
__anon21a65a740a03	src/Utils/SDK.hpp	/^	enum {$/;"	g	struct:MovieInfo_t
__anon21a65a740b03	src/Utils/SDK.hpp	/^typedef enum {$/;"	g
__anon21a65a740c03	src/Utils/SDK.hpp	/^typedef enum {$/;"	g
__anon21a65a740d03	src/Utils/SDK.hpp	/^{$/;"	g
__anon2889c4480102	src/Features/AutoSubmit.cpp	/^	NetMessage::RegisterHandler(COOP_NAME_MESSAGE_TYPE, +[](const void *data, size_t size) {$/;"	f	file:
__anon2889c4480202	src/Features/AutoSubmit.cpp	/^		+[](void *ptr, size_t sz, size_t nmemb, std::string *data) -> size_t {$/;"	f	function:request	typeref:typename:size_t	file:
__anon28d1728f0103	src/Modules/InputSystem.hpp	/^enum {$/;"	g
__anon296988db0108	lib/minhook/hde/hde32.h	/^typedef struct {$/;"	s
__anon296988db020a	lib/minhook/hde/hde32.h	/^    union {$/;"	u	struct:__anon296988db0108
__anon296988db030a	lib/minhook/hde/hde32.h	/^    union {$/;"	u	struct:__anon296988db0108
__anon296b36800108	lib/minhook/hde/hde64.h	/^typedef struct {$/;"	s
__anon296b3680020a	lib/minhook/hde/hde64.h	/^    union {$/;"	u	struct:__anon296b36800108
__anon296b3680030a	lib/minhook/hde/hde64.h	/^    union {$/;"	u	struct:__anon296b36800108
__anon30edeffe0103	lib/ffmpeg/include/libavutil/frame.h	/^enum {$/;"	g
__anon322f2785010a	lib/ffmpeg/include/libavutil/intreadwrite.h	/^typedef union {$/;"	u
__anon322f2785020a	lib/ffmpeg/include/libavutil/intreadwrite.h	/^typedef union {$/;"	u
__anon322f2785030a	lib/ffmpeg/include/libavutil/intreadwrite.h	/^typedef union {$/;"	u
__anon3784a0f80103	lib/ffmpeg/include/libavfilter/avfilter.h	/^    enum {$/;"	g	struct:AVFilterLink
__anon3784a0f80203	lib/ffmpeg/include/libavfilter/avfilter.h	/^enum {$/;"	g
__anon3f8e24290103	lib/curl/include/curl/multi.h	/^typedef enum {$/;"	g
__anon3f8e24290203	lib/curl/include/curl/multi.h	/^typedef enum {$/;"	g
__anon3f8e2429030a	lib/curl/include/curl/multi.h	/^  union {$/;"	u	struct:CURLMsg
__anon3f8e24290403	lib/curl/include/curl/multi.h	/^typedef enum {$/;"	g
__anon3ff63ab00102	src/Features/Updater.cpp	/^		g_curl, CURLOPT_WRITEFUNCTION, +[](void *ptr, size_t sz, size_t nmemb, std::string *data) -> s/;"	f	function:request	typeref:typename:size_t	file:
__anon508120d00102	src/Modules/VGui.cpp	/^		std::sort(this->elements.begin(), this->elements.end(), [](const HudElement *a, const HudEleme/;"	f	function:VGui::Init	file:
__anon52ed09ec0102	src/Features/Hud/Hud.cpp	/^		auto element = std::find_if(elements.begin(), elements.end(), [name](HudElement *element) {$/;"	f	function:HudElement::IndexAll	file:
__anon52ed09ec0202	src/Features/Hud/Hud.cpp	/^	auto result = std::find_if(elements->begin(), elements->end(), [name](const HudElement *a) {$/;"	f	file:
__anon52ed09ec0302	src/Features/Hud/Hud.cpp	/^	auto result = std::find_if(elements->begin(), elements->end(), [name](const HudElement *a) {$/;"	f	file:
__anon52ed09ec0402	src/Features/Hud/Hud.cpp	/^	std::sort(vgui->elements.begin(), vgui->elements.end(), [](const HudElement *a, const HudElemen/;"	f	file:
__anon52ed1f31010a	src/Features/Hud/Hud.hpp	/^	union {$/;"	u	class:HudElement
__anon5737ba340103	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340203	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340308	lib/curl/include/curl/curl.h	/^  struct {$/;"	s	struct:curl_fileinfo
__anon5737ba340403	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340503	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340603	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340703	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340803	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340903	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340a03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340b03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340c03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340d03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340e03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba340f03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341003	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341103	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341203	lib/curl/include/curl/curl.h	/^enum {$/;"	g
__anon5737ba341303	lib/curl/include/curl/curl.h	/^enum {$/;"	g
__anon5737ba341403	lib/curl/include/curl/curl.h	/^enum {$/;"	g
__anon5737ba341503	lib/curl/include/curl/curl.h	/^enum {$/;"	g
__anon5737ba341603	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341703	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341803	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341903	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341a03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341b03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341c03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341d03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341e03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba341f03	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon5737ba342003	lib/curl/include/curl/curl.h	/^typedef enum {$/;"	g
__anon57762da70103	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^enum {$/;"	g
__anon5a53d7880102	src/Features/Stats/StatsCounter.cpp	/^	auto CMRetries = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0, [](in/;"	f	function:StatsCounter::ExportToFile	file:
__anon5a53d7880202	src/Features/Stats/StatsCounter.cpp	/^	auto CMTime = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0.f, [](flo/;"	f	function:StatsCounter::ExportToFile	file:
__anon5a53d7880302	src/Features/Stats/StatsCounter.cpp	/^	auto totalTimeSP = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0.f, [/;"	f	function:StatsCounter::ExportToFile	file:
__anon5a53d7880402	src/Features/Stats/StatsCounter.cpp	/^	auto totalTimeCoop = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0.f,/;"	f	function:StatsCounter::ExportToFile	file:
__anon5a53d7880502	src/Features/Stats/StatsCounter.cpp	/^	auto CMRetries = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0, [](in/;"	f	function:StatsCounter::Print	file:
__anon5a53d7880602	src/Features/Stats/StatsCounter.cpp	/^	auto CMTime = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0.f, [](flo/;"	f	function:StatsCounter::Print	file:
__anon5a53d7880702	src/Features/Stats/StatsCounter.cpp	/^	auto totalTimeSP = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0.f, [/;"	f	function:StatsCounter::Print	file:
__anon5a53d7880802	src/Features/Stats/StatsCounter.cpp	/^	auto totalTimeCoop = std::accumulate(std::begin(this->mapStats), std::end(this->mapStats), 0.f,/;"	f	function:StatsCounter::Print	file:
__anon5c4243c70103	src/Features/Tas/TasParser.cpp	/^	enum {$/;"	g	struct:TasToken	file:
__anon5c4243c7020a	src/Features/Tas/TasParser.cpp	/^	union {$/;"	u	struct:TasToken	file:
__anon5c4243c70302	src/Features/Tas/TasParser.cpp	/^	std::sort(framebulks.begin(), framebulks.end(), [](const TasFramebulk &a, const TasFramebulk &b/;"	f	function:TasParser::SaveFramebulksToFile	file:
__anon62c141670102	src/Game.cpp	/^	auto GetModDir = [](const char *targetMod) {$/;"	f	function:Game::CreateNew	file:
__anon66f529260102	src/Features/Hud/VphysHud.cpp	/^	auto drawPhysicsInfo = [=](int y, void *shadow, const char *name) {$/;"	f	function:VphysHud::Paint	file:
__anon6ae777660108	src/Features/Teleporter.hpp	/^	struct {$/;"	s	struct:TeleportLocation
__anon6c3a5fa90111	src/Utils/json11.cpp	/^	namespace {$/;"	n	namespace:json11	file:
__anon6d61168b0103	lib/ffmpeg/include/libavutil/crc.h	/^typedef enum {$/;"	g
__anon6dfe74d20108	src/Features/Renderer.cpp	/^{$/;"	s	file:
__anon6e025ef50103	lib/ffmpeg/include/libavutil/log.h	/^typedef enum {$/;"	g
__anon6e396c26010a	lib/ffmpeg/include/libavutil/opt.h	/^    union {$/;"	u	struct:AVOption
__anon6e396c260203	lib/ffmpeg/include/libavutil/opt.h	/^enum {$/;"	g
__anon74cc4c7d0108	lib/ffmpeg/include/libavutil/timecode.h	/^typedef struct {$/;"	s
__anon75d278770111	src/Utils/Platform.hpp	/^namespace {$/;"	n
__anon77a6dab70108	src/Features/Speedrun/SpeedrunTimer.cpp	/^{$/;"	s	file:
__anon77a6dab70202	src/Features/Speedrun/SpeedrunTimer.cpp	/^	Scheduler::InHostTicks(DEMO_AUTOSTOP_DELAY, [=]() {$/;"	f	function:SpeedrunTimer::Stop	file:
__anon821173e40103	src/Features/Camera.cpp	/^	enum { FIRST,$/;"	g	function:InterpolateCurve	file:
__anon821173e40203	src/Features/Camera.cpp	/^	enum { FIRST,$/;"	g	function:Camera::InterpolateStates	file:
__anon83c8e63e0102	src/Utils.cpp	/^	return std::equal(a.begin(), a.end(), b.begin(), b.end(), [](char a, char b) {$/;"	f	function:Utils::ICompare	file:
__anon865157560102	src/Features/Hud/PortalPlacement.cpp	/^	auto drawPlacementInfo = [&](Color portalColor, TracePortalPlacementInfo_t info, const char *na/;"	f	function:PortalPlacementHud::Paint	file:
__anon865157560202	src/Features/Hud/PortalPlacement.cpp	/^		auto drawPortal = [&](Color portalColor, TracePortalPlacementInfo_t info) {$/;"	f	function:ON_EVENT	file:
__anon9262a4260102	src/Modules/EngineDemoRecorder.cpp	/^		Scheduler::InHostTicks(DEMO_AUTOSTOP_DELAY, [=]() {$/;"	f	function:ON_EVENT	file:
__anon92a1ced10103	lib/ffmpeg/include/libavcodec/codec.h	/^enum {$/;"	g
__anon9fa167b30102	src/SAR.cpp	/^		g_prideThread = std::thread([]() {$/;"	f	function:initPride	file:
__anon9fa167b30202	src/SAR.cpp	/^	this->findPluginThread = std::thread([this]() {$/;"	f	function:SAR::SearchPlugin	file:
__anona53a5a890102	src/Features/Hud/Toasts.cpp	/^			[=](Toast toast) {$/;"	f	file:
__anona53a5a890202	src/Features/Hud/Toasts.cpp	/^		Scheduler::OnMainThread([=]() {$/;"	f	file:
__anona53a5a890302	src/Features/Hud/Toasts.cpp	/^			[=](Toast toast) {$/;"	f	function:ToastHud::Update	file:
__anonab1f930b0103	lib/curl/include/curl/urlapi.h	/^typedef enum {$/;"	g
__anonab1f930b0203	lib/curl/include/curl/urlapi.h	/^typedef enum {$/;"	g
__anonb4e8876c0102	src/Modules/Server.cpp	/^		CM_FLAGS_MESSAGE_TYPE, +[](const void *data, size_t size) {$/;"	f	file:
__anonb574a3de0108	lib/ffmpeg/include/libavformat/avformat.h	/^    struct {$/;"	s	struct:AVStream
__anonb929c7a10103	lib/SFML/include/SFML/Network/UdpSocket.hpp	/^    {$/;"	g	class:sf::UdpSocket
__anonba1d32eb010a	src/Features/Bot/BotServer.cpp	/^	union { float f; int i; } rate = { g_last_status.playback_rate };$/;"	u	function:fullUpdate	file:
__anonba1d32eb020a	src/Features/Bot/BotServer.cpp	/^		union { float f; int i; } rate = { status.playback_rate };$/;"	u	function:update	file:
__anonba1d32eb0302	src/Features/Bot/BotServer.cpp	/^        Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0402	src/Features/Bot/BotServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0502	src/Features/Bot/BotServer.cpp	/^			Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb060a	src/Features/Bot/BotServer.cpp	/^				union { uint32_t i; float f; } rate = { popRaw32(cl.cmdbuf) };$/;"	u	function:processCommands	file:
__anonba1d32eb0702	src/Features/Bot/BotServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0802	src/Features/Bot/BotServer.cpp	/^			Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0902	src/Features/Bot/BotServer.cpp	/^			Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0a02	src/Features/Bot/BotServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0b02	src/Features/Bot/BotServer.cpp	/^				Scheduler::OnMainThread([=](){$/;"	f	function:processCommands	file:
__anonba1d32eb0c02	src/Features/Bot/BotServer.cpp	/^			Scheduler::OnMainThread([](){$/;"	f	function:processCommands	file:
__anonc6219c5d0103	lib/ffmpeg/include/libavfilter/buffersrc.h	/^enum {$/;"	g
__anonc8a8a2210108	src/Features/Stitcher.cpp	/^static struct {$/;"	s	file:
__anonc8a8a2210208	src/Features/Stitcher.cpp	/^static struct {$/;"	s	file:
__anoncf0f1fd10108	lib/minhook/hook.c	/^{$/;"	s	file:
__anond227aa1e0102	src/Features/ClassDumper.cpp	/^	DumpTable = [&DumpTable](SendTable *table, int &level) {$/;"	f	file:
__anond227aa1e0202	src/Features/ClassDumper.cpp	/^	DumpTable = [&DumpTable](RecvTable *table, int &level) {$/;"	f	file:
__anond24a064b0102	src/Features/Demo/NetworkGhostPlayer.cpp	/^Command ghost_list_on("+ghost_list", +[](const CCommand &args){ playerListUi.active = true; }, "/;"	f	file:
__anond24a064b0202	src/Features/Demo/NetworkGhostPlayer.cpp	/^Command ghost_list_off("-ghost_list", +[](const CCommand &args){ playerListUi.active = false; },/;"	f	file:
__anond24a064b0302	src/Features/Demo/NetworkGhostPlayer.cpp	/^		Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Disconnect	file:
__anond24a064b0402	src/Features/Demo/NetworkGhostPlayer.cpp	/^			this->waitForRunning.wait(lck, [this] { return this->runThread.load(); });$/;"	f	function:NetworkManager::RunNetwork	file:
__anond24a064b0502	src/Features/Demo/NetworkGhostPlayer.cpp	/^		Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0602	src/Features/Demo/NetworkGhostPlayer.cpp	/^		Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0702	src/Features/Demo/NetworkGhostPlayer.cpp	/^				Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0802	src/Features/Demo/NetworkGhostPlayer.cpp	/^		Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0902	src/Features/Demo/NetworkGhostPlayer.cpp	/^			Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0a02	src/Features/Demo/NetworkGhostPlayer.cpp	/^				Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0b02	src/Features/Demo/NetworkGhostPlayer.cpp	/^				Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0c02	src/Features/Demo/NetworkGhostPlayer.cpp	/^			Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::Treat	file:
__anond24a064b0d02	src/Features/Demo/NetworkGhostPlayer.cpp	/^	Scheduler::OnMainThread([=]() {$/;"	f	function:NetworkManager::SetupCountdown	file:
__anond24a064b0e02	src/Features/Demo/NetworkGhostPlayer.cpp	/^		Scheduler::InHostTicks(10, []() {$/;"	f	function:ON_EVENT	file:
__anonf135e2f90103	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^enum {$/;"	g
__anonf610938a0103	lib/curl/include/curl/options.h	/^typedef enum {$/;"	g
__anonf94d2df8010a	src/Variable.hpp	/^	union {$/;"	u	class:Variable
__anonfe6e4e1a010a	lib/minhook/buffer.c	/^    {$/;"	u	struct:_MEMORY_SLOT	file:
__anonff2c86da0102	src/Features/Cvars.cpp	/^	auto InternalDump = [&file](ConCommandBase *cmd, std::string games, bool isCommand) {$/;"	f	function:Cvars::DumpDoc	file:
__cdecl	src/Utils/Platform.hpp	/^#	define __cdecl /;"	d
__fastcall	src/Utils/Platform.hpp	/^#	define __fastcall /;"	d
__has_declspec_attribute	lib/curl/include/curl/curl.h	/^#  define __has_declspec_attribute(/;"	d
__rescall	src/Modules/Engine.cpp	/^static bool(__rescall *g_ProcessTick)(void *thisptr, void *pack);$/;"	v	typeref:typename:bool (* g_ProcessTick)(void * thisptr,void * pack)	file:
__rescall	src/Utils/Platform.hpp	/^#	define __rescall /;"	d
__rescalll	src/Utils/SDK.hpp	/^#	define __rescalll /;"	d
_aliasCallback	src/Features/ConfigPlus.cpp	/^static void _aliasCallback(const CCommand &args) {$/;"	f	typeref:typename:void	file:
_color	src/Utils/SDK.hpp	/^	unsigned char _color[4] = {0, 0, 0, 0};$/;"	m	struct:Color	typeref:typename:unsigned char[4]
_curl_conv_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_conv_callback1)(char *, size_t length);$/;"	t	typeref:typename:CURLcode (*)(char *,size_t length)
_curl_conv_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_conv_callback2)(const char *, size_t length);$/;"	t	typeref:typename:CURLcode (*)(const char *,size_t length)
_curl_conv_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_conv_callback3)(void *, size_t length);$/;"	t	typeref:typename:CURLcode (*)(void *,size_t length)
_curl_conv_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_conv_callback4)(const void *, size_t length);$/;"	t	typeref:typename:CURLcode (*)(const void *,size_t length)
_curl_debug_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback1) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,char *,size_t,void *)
_curl_debug_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback2) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,char *,size_t,const void *)
_curl_debug_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback3) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,const char *,size_t,void *)
_curl_debug_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback4) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,const char *,size_t,const void *)
_curl_debug_callback5	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback5) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,unsigned char *,size_t,void *)
_curl_debug_callback6	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback6) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,unsigned char *,size_t,const void *)
_curl_debug_callback7	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback7) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,const unsigned char *,size_t,void *)
_curl_debug_callback8	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_debug_callback8) (CURL *,$/;"	t	typeref:typename:int (*)(CURL *,curl_infotype,const unsigned char *,size_t,const void *)
_curl_ioctl_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef curlioerr (*_curl_ioctl_callback1)(CURL *, int, void *);$/;"	t	typeref:typename:curlioerr (*)(CURL *,int,void *)
_curl_ioctl_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef curlioerr (*_curl_ioctl_callback2)(CURL *, int, const void *);$/;"	t	typeref:typename:curlioerr (*)(CURL *,int,const void *)
_curl_ioctl_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef curlioerr (*_curl_ioctl_callback3)(CURL *, curliocmd, void *);$/;"	t	typeref:typename:curlioerr (*)(CURL *,curliocmd,void *)
_curl_ioctl_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef curlioerr (*_curl_ioctl_callback4)(CURL *, curliocmd, const void *);$/;"	t	typeref:typename:curlioerr (*)(CURL *,curliocmd,const void *)
_curl_opensocket_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef curl_socket_t (*_curl_opensocket_callback1)$/;"	t	typeref:typename:curl_socket_t (*)(void *,curlsocktype,struct curl_sockaddr *)
_curl_opensocket_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef curl_socket_t (*_curl_opensocket_callback2)$/;"	t	typeref:typename:curl_socket_t (*)(void *,curlsocktype,const struct curl_sockaddr *)
_curl_opensocket_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef curl_socket_t (*_curl_opensocket_callback3)$/;"	t	typeref:typename:curl_socket_t (*)(const void *,curlsocktype,struct curl_sockaddr *)
_curl_opensocket_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef curl_socket_t (*_curl_opensocket_callback4)$/;"	t	typeref:typename:curl_socket_t (*)(const void *,curlsocktype,const struct curl_sockaddr *)
_curl_progress_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_progress_callback1)(void *,$/;"	t	typeref:typename:int (*)(void *,double,double,double,double)
_curl_progress_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_progress_callback2)(const void *,$/;"	t	typeref:typename:int (*)(const void *,double,double,double,double)
_curl_read_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_read_callback1)(char *, size_t, size_t, void *);$/;"	t	typeref:typename:size_t (*)(char *,size_t,size_t,void *)
_curl_read_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_read_callback2)(char *, size_t, size_t, const void *);$/;"	t	typeref:typename:size_t (*)(char *,size_t,size_t,const void *)
_curl_read_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_read_callback3)(char *, size_t, size_t, FILE *);$/;"	t	typeref:typename:size_t (*)(char *,size_t,size_t,FILE *)
_curl_read_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_read_callback4)(void *, size_t, size_t, void *);$/;"	t	typeref:typename:size_t (*)(void *,size_t,size_t,void *)
_curl_read_callback5	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_read_callback5)(void *, size_t, size_t, const void *);$/;"	t	typeref:typename:size_t (*)(void *,size_t,size_t,const void *)
_curl_read_callback6	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_read_callback6)(void *, size_t, size_t, FILE *);$/;"	t	typeref:typename:size_t (*)(void *,size_t,size_t,FILE *)
_curl_seek_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_seek_callback1)(void *, curl_off_t, int);$/;"	t	typeref:typename:CURLcode (*)(void *,curl_off_t,int)
_curl_seek_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_seek_callback2)(const void *, curl_off_t, int);$/;"	t	typeref:typename:CURLcode (*)(const void *,curl_off_t,int)
_curl_sockopt_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_sockopt_callback1)(void *, curl_socket_t, curlsocktype);$/;"	t	typeref:typename:int (*)(void *,curl_socket_t,curlsocktype)
_curl_sockopt_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef int (*_curl_sockopt_callback2)(const void *, curl_socket_t,$/;"	t	typeref:typename:int (*)(const void *,curl_socket_t,curlsocktype)
_curl_ssl_ctx_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback1)(CURL *, void *, void *);$/;"	t	typeref:typename:CURLcode (*)(CURL *,void *,void *)
_curl_ssl_ctx_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback2)(CURL *, void *, const void *);$/;"	t	typeref:typename:CURLcode (*)(CURL *,void *,const void *)
_curl_ssl_ctx_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback3)(CURL *, const void *, void *);$/;"	t	typeref:typename:CURLcode (*)(CURL *,const void *,void *)
_curl_ssl_ctx_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback4)(CURL *, const void *,$/;"	t	typeref:typename:CURLcode (*)(CURL *,const void *,const void *)
_curl_ssl_ctx_callback5	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback5)(CURL *, SSL_CTX *, void *);$/;"	t	typeref:typename:CURLcode (*)(CURL *,SSL_CTX *,void *)
_curl_ssl_ctx_callback5	lib/curl/include/curl/typecheck-gcc.h	/^typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback5;$/;"	t	typeref:typename:_curl_ssl_ctx_callback1
_curl_ssl_ctx_callback6	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback6)(CURL *, SSL_CTX *, const void *);$/;"	t	typeref:typename:CURLcode (*)(CURL *,SSL_CTX *,const void *)
_curl_ssl_ctx_callback6	lib/curl/include/curl/typecheck-gcc.h	/^typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback6;$/;"	t	typeref:typename:_curl_ssl_ctx_callback1
_curl_ssl_ctx_callback7	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback7)(CURL *, const SSL_CTX *, void *);$/;"	t	typeref:typename:CURLcode (*)(CURL *,const SSL_CTX *,void *)
_curl_ssl_ctx_callback7	lib/curl/include/curl/typecheck-gcc.h	/^typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback7;$/;"	t	typeref:typename:_curl_ssl_ctx_callback1
_curl_ssl_ctx_callback8	lib/curl/include/curl/typecheck-gcc.h	/^typedef CURLcode (*_curl_ssl_ctx_callback8)(CURL *, const SSL_CTX *,$/;"	t	typeref:typename:CURLcode (*)(CURL *,const SSL_CTX *,const void *)
_curl_ssl_ctx_callback8	lib/curl/include/curl/typecheck-gcc.h	/^typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback8;$/;"	t	typeref:typename:_curl_ssl_ctx_callback1
_curl_write_callback1	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_write_callback1)(const char *, size_t, size_t, void *);$/;"	t	typeref:typename:size_t (*)(const char *,size_t,size_t,void *)
_curl_write_callback2	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_write_callback2)(const char *, size_t, size_t,$/;"	t	typeref:typename:size_t (*)(const char *,size_t,size_t,const void *)
_curl_write_callback3	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_write_callback3)(const char *, size_t, size_t, FILE *);$/;"	t	typeref:typename:size_t (*)(const char *,size_t,size_t,FILE *)
_curl_write_callback4	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_write_callback4)(const void *, size_t, size_t, void *);$/;"	t	typeref:typename:size_t (*)(const void *,size_t,size_t,void *)
_curl_write_callback5	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_write_callback5)(const void *, size_t, size_t,$/;"	t	typeref:typename:size_t (*)(const void *,size_t,size_t,const void *)
_curl_write_callback6	lib/curl/include/curl/typecheck-gcc.h	/^typedef size_t (*_curl_write_callback6)(const void *, size_t, size_t, FILE *);$/;"	t	typeref:typename:size_t (*)(const void *,size_t,size_t,FILE *)
_dtor	src/Utils/SDK.hpp	/^	virtual void _dtor() {};$/;"	f	struct:ConCommandBase	typeref:typename:void
_dtor1	src/Utils/SDK.hpp	/^	virtual void _dtor1() {};$/;"	f	struct:ConCommandBase	typeref:typename:void
_fieldtypes	src/Utils/SDK.hpp	/^typedef enum _fieldtypes {$/;"	g
_functionCallback	src/Features/ConfigPlus.cpp	/^static void _functionCallback(const CCommand &args) {$/;"	f	typeref:typename:void	file:
_g_eventCallbacks	src/Event.hpp	/^	std::vector<_EventReg<E>> _g_eventCallbacks;$/;"	v	namespace:Event	typeref:typename:std::vector<_EventReg<E>>
_isIdentChar	src/Features/ConfigPlus.cpp	/^static bool _isIdentChar(char c) {$/;"	f	typeref:typename:bool	file:
_sar_speedrun_category_add_rule_completion	src/Features/Speedrun/Categories.cpp	/^static int _sar_speedrun_category_add_rule_completion(const char *partial, char commands[COMMAND/;"	f	typeref:typename:int	file:
_sar_speedrun_category_completion	src/Features/Speedrun/Categories.cpp	/^static int _sar_speedrun_category_completion(const char *partial, char commands[COMMAND_COMPLETI/;"	f	typeref:typename:int	file:
_sar_speedrun_category_remove_completion	src/Features/Speedrun/Categories.cpp	/^static int _sar_speedrun_category_remove_completion(const char *partial, char commands[COMMAND_C/;"	f	typeref:typename:int	file:
_sar_speedrun_category_remove_rule_completion	src/Features/Speedrun/Categories.cpp	/^static int _sar_speedrun_category_remove_rule_completion(const char *partial, char commands[COMM/;"	f	typeref:typename:int	file:
_sar_speedrun_rule_completion	src/Features/Speedrun/Categories.cpp	/^static int _sar_speedrun_rule_completion(const char *partial, char commands[COMMAND_COMPLETION_M/;"	f	typeref:typename:int	file:
_sar_speedrun_rule_remove_completion	src/Features/Speedrun/Categories.cpp	/^static int _sar_speedrun_rule_remove_completion(const char *partial, char commands[COMMAND_COMPL/;"	f	typeref:typename:int	file:
a	src/Utils/SDK.hpp	/^	inline int a() const { return _color[3]; }$/;"	f	struct:Color	typeref:typename:int
absoluteframetime	src/Utils/SDK.hpp	/^	float absoluteframetime;        \/\/ 8$/;"	m	struct:CGlobalVarsBase	typeref:typename:float
ac_bits	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *ac_bits, *ac_info;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
ac_codes	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint16_t *ac_codes;$/;"	m	struct:CIDEntry	typeref:typename:const uint16_t *
ac_info	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *ac_bits, *ac_info;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
access	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkAccessFlagBits access[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVkFrame	typeref:typename:VkAccessFlagBits[]
access_timestamp	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t access_timestamp;             \/**< Time of last access in microseconds since unix e/;"	m	struct:AVIODirEntry	typeref:typename:int64_t
act_dev	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkDevice act_dev;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:VkDevice
action	src/Features/Speedrun/Rules.hpp	/^	RuleAction action;$/;"	m	struct:SpeedrunRule	typeref:typename:RuleAction
action	src/Features/Speedrun/SpeedrunTimer.cpp	/^	TimerAction action;$/;"	m	struct:TimerInterface	typeref:typename:TimerAction	file:
activate	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*activate)(AVFilterContext *ctx);$/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext * ctx)
active	src/Features/Bot/BotServer.hpp	/^	bool active;$/;"	m	struct:TasStatus	typeref:typename:bool
active	src/Features/Demo/NetworkGhostPlayer.cpp	/^	bool active = false;$/;"	m	class:PlayerListUi	typeref:typename:bool	file:
active	src/Features/Demo/NetworkGhostPlayer.cpp	/^	bool active = false;$/;"	m	class:SyncUi	typeref:typename:bool	file:
active	src/Features/Tas/TasController.hpp	/^	bool active = false;$/;"	m	struct:TasControllerButton	typeref:typename:bool
active	src/Features/Tas/TasPlayer.hpp	/^	bool active = false;$/;"	m	class:TasPlayer	typeref:typename:bool
active	src/Features/Tas/TasServer.hpp	/^	bool active;$/;"	m	struct:TasStatus	typeref:typename:bool
active_thread_type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int active_thread_type;$/;"	m	struct:AVCodecContext	typeref:typename:int
addBitToStream	src/Utils/lodepng.cpp	/^static void addBitToStream(size_t *bitpointer, ucvector *bitstream, unsigned char bit) {$/;"	f	typeref:typename:void	file:
addBitsToStream	src/Utils/lodepng.cpp	/^static void addBitsToStream(size_t *bitpointer, ucvector *bitstream, unsigned value, size_t nbit/;"	f	typeref:typename:void	file:
addBitsToStreamReversed	src/Utils/lodepng.cpp	/^static void addBitsToStreamReversed(size_t *bitpointer, ucvector *bitstream, unsigned value, siz/;"	f	typeref:typename:void	file:
addBox	src/Features/OverlayRender.cpp	/^void OverlayRender::addBox(Vector origin, Vector mins, Vector maxs, QAngle ang, Color col, bool /;"	f	class:OverlayRender	typeref:typename:void
addChunk	src/Utils/lodepng.cpp	/^static unsigned addChunk(ucvector *out, const char *chunkName, const unsigned char *data, size_t/;"	f	typeref:typename:unsigned	file:
addChunk_IDAT	src/Utils/lodepng.cpp	/^static unsigned addChunk_IDAT(ucvector *out, const unsigned char *data, size_t datasize, LodePNG/;"	f	typeref:typename:unsigned	file:
addChunk_IEND	src/Utils/lodepng.cpp	/^static unsigned addChunk_IEND(ucvector *out) {$/;"	f	typeref:typename:unsigned	file:
addChunk_IHDR	src/Utils/lodepng.cpp	/^static unsigned addChunk_IHDR(ucvector *out, unsigned w, unsigned h, LodePNGColorType colortype,/;"	f	typeref:typename:unsigned	file:
addChunk_PLTE	src/Utils/lodepng.cpp	/^static unsigned addChunk_PLTE(ucvector *out, const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned	file:
addChunk_bKGD	src/Utils/lodepng.cpp	/^static unsigned addChunk_bKGD(ucvector *out, const LodePNGInfo *info) {$/;"	f	typeref:typename:unsigned	file:
addChunk_iTXt	src/Utils/lodepng.cpp	/^static unsigned addChunk_iTXt(ucvector *out, unsigned compressed, const char *keyword, const cha/;"	f	typeref:typename:unsigned	file:
addChunk_pHYs	src/Utils/lodepng.cpp	/^static unsigned addChunk_pHYs(ucvector *out, const LodePNGInfo *info) {$/;"	f	typeref:typename:unsigned	file:
addChunk_tEXt	src/Utils/lodepng.cpp	/^static unsigned addChunk_tEXt(ucvector *out, const char *keyword, const char *textstring) {$/;"	f	typeref:typename:unsigned	file:
addChunk_tIME	src/Utils/lodepng.cpp	/^static unsigned addChunk_tIME(ucvector *out, const LodePNGTime *time) {$/;"	f	typeref:typename:unsigned	file:
addChunk_tRNS	src/Utils/lodepng.cpp	/^static unsigned addChunk_tRNS(ucvector *out, const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned	file:
addChunk_zTXt	src/Utils/lodepng.cpp	/^static unsigned addChunk_zTXt(ucvector *out, const char *keyword, const char *textstring, LodePN/;"	f	typeref:typename:unsigned	file:
addColorBits	src/Utils/lodepng.cpp	/^static void addColorBits(unsigned char *out, size_t index, unsigned bits, unsigned in) {$/;"	f	typeref:typename:void	file:
addFileChecksum	src/Checksum.cpp	/^static void addFileChecksum(const char *path, uint32_t sum) {$/;"	f	typeref:typename:void	file:
addHuffmanSymbol	src/Utils/lodepng.cpp	/^static void addHuffmanSymbol(size_t *bp, ucvector *compressed, unsigned code, unsigned bitlen) {$/;"	f	typeref:typename:void	file:
addLengthDistance	src/Utils/lodepng.cpp	/^static void addLengthDistance(uivector *values, size_t length, size_t distance) {$/;"	f	typeref:typename:void	file:
addLine	src/Features/OverlayRender.cpp	/^void OverlayRender::addLine(Vector a, Vector b, Color col, bool throughWalls) {$/;"	f	class:OverlayRender	typeref:typename:void
addNewCount	src/Features/Hud/LPHud.cpp	/^static void addNewCount(int count, bool changelevel = false) {$/;"	f	typeref:typename:void	file:
addPaddingBits	src/Utils/lodepng.cpp	/^static void addPaddingBits(unsigned char *out, const unsigned char *in, size_t olinebits, size_t/;"	f	typeref:typename:void	file:
addQuad	src/Features/OverlayRender.cpp	/^void OverlayRender::addQuad(Vector a, Vector b, Vector c, Vector d, Color col, bool cullBack) {$/;"	f	class:OverlayRender	typeref:typename:void
addStream	src/Features/Renderer.cpp	/^static bool addStream(Stream *out, AVFormatContext *outputCtx, AVCodecID codecId, int64_t bitrat/;"	f	typeref:typename:bool	file:
addText	src/Features/OverlayRender.cpp	/^void OverlayRender::addText(Vector pos, int xOff, int yOff, const std::string &text, unsigned lo/;"	f	class:OverlayRender	typeref:typename:void
addToNetDump	src/Features/Demo/NetworkGhostPlayer.cpp	/^static void addToNetDump(const char *type, const char *info) {$/;"	f	typeref:typename:void	file:
addToParameterOutput	src/Features/Hud/InputHud.cpp	/^	auto addToParameterOutput = [&](std::string elementName, std::string parameter) {$/;"	v	typeref:typename:auto
addTriangle	src/Features/OverlayRender.cpp	/^void OverlayRender::addTriangle(Vector a, Vector b, Vector c, Color col, bool cullBack) {$/;"	f	class:OverlayRender	typeref:typename:void
addUnknownChunks	src/Utils/lodepng.cpp	/^static unsigned addUnknownChunks(ucvector *out, unsigned char *data, size_t datasize) {$/;"	f	typeref:typename:unsigned	file:
add_coins	src/Utils/lodepng.cpp	/^static void add_coins(Coin *c1, const Coin *c2) {$/;"	f	typeref:typename:void	file:
add_id	src/Utils/lodepng.hpp	/^	unsigned add_id;$/;"	m	struct:LodePNGEncoderSettings	typeref:typename:unsigned
addr	lib/curl/include/curl/curl.h	/^  struct sockaddr addr;$/;"	m	struct:curl_sockaddr	typeref:struct:sockaddr
addr	src/Cheats.cpp	/^			for (auto const &addr : result) {$/;"	v	typeref:typename:auto const &
address	lib/minhook/trampoline.h	/^    UINT64 address;     \/\/ Absolute destination address$/;"	m	struct:_CALL_ABS	typeref:typename:UINT64
address	lib/minhook/trampoline.h	/^    UINT64 address;     \/\/ Absolute destination address$/;"	m	struct:_JCC_ABS	typeref:typename:UINT64
address	lib/minhook/trampoline.h	/^    UINT64 address;     \/\/ Absolute destination address$/;"	m	struct:_JMP_ABS	typeref:typename:UINT64
addrlen	lib/curl/include/curl/curl.h	/^  unsigned int addrlen; \/* addrlen was a socklen_t type before 7.18.0 but it$/;"	m	struct:curl_sockaddr	typeref:typename:unsigned int
adler32	src/Utils/lodepng.cpp	/^static unsigned adler32(const unsigned char *data, unsigned len) {$/;"	f	typeref:typename:unsigned	file:
age	lib/curl/include/curl/curl.h	/^  CURLversion age;          \/* age of the returned struct *\/$/;"	m	struct:curl_version_info_data	typeref:typename:CURLversion
age_index	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int age_index;$/;"	m	struct:AVFilterLink	typeref:typename:int
aircontrol_fling_speed_addr	src/Modules/Server.hpp	/^	float *aircontrol_fling_speed_addr;$/;"	m	class:Server	typeref:typename:float *
album_gain	lib/ffmpeg/include/libavutil/replaygain.h	/^    int32_t album_gain;$/;"	m	struct:AVReplayGain	typeref:typename:int32_t
album_peak	lib/ffmpeg/include/libavutil/replaygain.h	/^    uint32_t album_peak;$/;"	m	struct:AVReplayGain	typeref:typename:uint32_t
alias	lib/ffmpeg/include/libavutil/pixdesc.h	/^    const char *alias;$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:const char *
alias	src/Features/ConfigPlus.cpp	/^		auto alias = g_aliases.find({args[1]});$/;"	v	typeref:typename:auto
all	Makefile	/^all: sar.so$/;"	t
all_channel_counts	lib/ffmpeg/include/libavfilter/buffersink.h	/^    int all_channel_counts;                 \/\/\/< if not 0, accept any channel count or layout$/;"	m	struct:AVABufferSinkParams	typeref:typename:int
alloc	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    const VkAllocationCallbacks *alloc;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:const VkAllocationCallbacks *
allocAudioFrame	src/Features/Renderer.cpp	/^static AVFrame *allocAudioFrame(AVSampleFormat sampleFmt, uint64_t channelLayout, int sampleRate/;"	f	typeref:typename:AVFrame *	file:
allocPicture	src/Features/Renderer.cpp	/^static AVFrame *allocPicture(AVPixelFormat pixFmt, int width, int height) {$/;"	f	typeref:typename:AVFrame *	file:
alloc_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*alloc_frame)(AVCodecContext *avctx, AVFrame *frame);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx,AVFrame * frame)
alloc_pnext	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    void *alloc_pnext[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVulkanFramesContext	typeref:typename:void * []
allocated_data_blocks	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             allocated_data_blocks;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
allocated_mv_blocks	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             allocated_mv_blocks;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
allocsize	src/Utils/lodepng.cpp	/^	size_t allocsize; \/*allocated size in bytes*\/$/;"	m	struct:uivector	typeref:typename:size_t	file:
allocsize	src/Utils/lodepng.cpp	/^	size_t allocsize; \/*allocated size*\/$/;"	m	struct:ucvector	typeref:typename:size_t	file:
allow	src/Modules/Tier1.cpp	/^	bool allow;$/;"	m	struct:ConFilterRule	typeref:typename:bool	file:
allowPre	src/Features/Updater.cpp	/^	bool allowPre = args.ArgC() == 2 && !strcmp(args[1], "pre");$/;"	v	typeref:typename:bool
allowPre	src/Features/Updater.cpp	/^	bool allowPre = false, exitOnSuccess = false, force = false;$/;"	v	typeref:typename:bool
allsolid	src/Utils/SDK.hpp	/^	bool allsolid;$/;"	m	struct:CBaseTrace	typeref:typename:bool
alpha	src/Utils/lodepng.cpp	/^	unsigned char alpha; \/*alpha channel, or alpha palette, required*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
alpha_done	src/Utils/lodepng.cpp	/^	unsigned char alpha_done;$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
ang	src/Features/Hud/Hud.cpp	/^		float ang = RAD2DEG(atan2(vel.y, vel.x));$/;"	v	typeref:typename:float
ang	src/Features/Hud/Hud.cpp	/^	auto ang = engine->GetAngles(engine->IsOrange() ? 0 : ctx->slot);$/;"	v	typeref:typename:auto
ang	src/Features/Hud/Hud.cpp	/^	auto ang = g_bluePortalAngles[engine->IsOrange() ? 0 : ctx->slot];$/;"	v	typeref:typename:auto
ang	src/Features/Hud/Hud.cpp	/^	auto ang = g_orangePortalAngles[engine->IsOrange() ? 0 : ctx->slot];$/;"	v	typeref:typename:auto
ang	src/Features/Teleporter.hpp	/^		QAngle ang;$/;"	m	struct:TeleportLocation::__anon6ae777660108	typeref:typename:QAngle
angle	src/Features/Hud/VphysHud.cpp	/^	float angle = std::atof(args[2]);$/;"	v	typeref:typename:float
angle	src/Features/Speedrun/CategoryCreator.cpp	/^		float angle = 0;$/;"	v	typeref:typename:float
angle	src/Features/Tas/TasTools/StrafeTool.hpp	/^	float angle;$/;"	m	struct:AutoStrafeDirection	typeref:typename:float
angles	src/Cheats.cpp	/^	QAngle angles;$/;"	v	typeref:typename:QAngle
angles	src/Features/Camera.cpp	/^		float angles[3] = {0, 0, 0};$/;"	v	typeref:typename:float[3]
angles	src/Features/Camera.hpp	/^	QAngle angles = QAngle();$/;"	m	struct:CameraState	typeref:typename:QAngle
angles	src/Features/Hud/InputHud.hpp	/^		QAngle angles[2]{0, 0};  \/\/storing two angles to calculate delta$/;"	m	struct:InputHud::__anon1a84afe10108	typeref:typename:QAngle[2]
angles	src/Features/Routing/EntityInspector.hpp	/^	QAngle angles;$/;"	m	struct:InspectionItem	typeref:typename:QAngle
angles	src/Features/Routing/Ruler.cpp	/^QAngle Ruler::angles() {$/;"	f	class:Ruler	typeref:typename:QAngle
angles	src/Features/Tas/TasPlayer.hpp	/^	QAngle angles;$/;"	m	struct:TasPlayerInfo	typeref:typename:QAngle
angles	src/Features/Teleporter.hpp	/^	QAngle angles;$/;"	m	struct:TeleportLocation	typeref:typename:QAngle
angles	src/Utils/SDK.hpp	/^	QAngle angles;$/;"	m	struct:CViewSetup	typeref:typename:QAngle
animatedVerts	src/Features/Demo/GhostRenderer.hpp	/^	std::vector<Vector> animatedVerts;$/;"	m	class:GhostRenderer	typeref:typename:std::vector<Vector>
appendI32	src/Features/Speedrun/SpeedrunTimer.cpp	/^static inline void appendI32(int x, std::vector<uint8_t> &vec) {$/;"	f	typeref:typename:void	file:
appendStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^static inline void appendStr(const std::string &str, std::vector<uint8_t> &vec) {$/;"	f	typeref:typename:void	file:
append_symbol_coins	src/Utils/lodepng.cpp	/^static unsigned append_symbol_coins(Coin *coins, const unsigned *frequencies, unsigned numcodes,/;"	f	typeref:typename:unsigned	file:
application_version	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t application_version;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
apply_cropping	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int apply_cropping;$/;"	m	struct:AVCodecContext	typeref:typename:int
ares	lib/curl/include/curl/curl.h	/^  const char *ares;$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
ares_num	lib/curl/include/curl/curl.h	/^  int ares_num;$/;"	m	struct:curl_version_info_data	typeref:typename:int
aresample_swr_opts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    char *aresample_swr_opts; \/\/\/< swr options to use for the auto-inserted aresample filters/;"	m	struct:AVFilterGraph	typeref:typename:char *
args	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *args;$/;"	m	struct:AVBitStreamFilterContext	typeref:typename:char *
argstr	src/Features/ConfigPlus.cpp	/^	const char *argstr = args.m_pArgSBuffer + args.m_nArgv0Size;$/;"	v	typeref:typename:const char *
array	src/Utils/json11.hpp	/^		typedef std::vector<Json> array;$/;"	t	class:json11::Json	typeref:typename:std::vector<Json>
array_items	src/Utils/json11.cpp	/^		const Json::array &array_items() const override { return m_value; }$/;"	f	class:json11::JsonArray	typeref:typename:const Json::array &	file:
array_items	src/Utils/json11.cpp	/^	const vector<Json> &Json::array_items() const { return m_ptr->array_items(); }$/;"	f	class:json11::Json	typeref:typename:const vector<Json> &
array_items	src/Utils/json11.cpp	/^	const vector<Json> &JsonValue::array_items() const { return statics().empty_vector; }$/;"	f	class:json11::JsonValue	typeref:typename:const vector<Json> &
aspect_ratio_index	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t aspect_ratio_index;     \/\/\/< index into dirac_aspect_ratio[]$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
ass	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *ass;$/;"	m	struct:AVSubtitleRect	typeref:typename:char *
attached_pic	lib/ffmpeg/include/libavformat/avformat.h	/^    AVPacket attached_pic;$/;"	m	struct:AVStream	typeref:typename:AVPacket
attribute_deprecated	lib/ffmpeg/include/libavutil/attributes.h	/^#    define attribute_deprecated /;"	d
attribute_deprecated	lib/ffmpeg/include/libavutil/attributes.h	/^#    define attribute_deprecated$/;"	d
attributes	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    VASurfaceAttrib *attributes;$/;"	m	struct:AVVAAPIFramesContext	typeref:typename:VASurfaceAttrib *
audioBuf	src/Features/Renderer.cpp	/^	int16_t *audioBuf[8];  \/\/ Temporary buffer - contains the planar audio info from the game$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int16_t * [8]	file:
audioBufIdx	src/Features/Renderer.cpp	/^	size_t audioBufIdx;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:size_t	file:
audioBufLock	src/Features/Renderer.cpp	/^	std::mutex audioBufLock;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::mutex	file:
audioBufSz	src/Features/Renderer.cpp	/^	size_t audioBufSz;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:size_t	file:
audioCodecFromName	src/Features/Renderer.cpp	/^static AVCodecID audioCodecFromName(const char *name) {$/;"	f	typeref:typename:AVCodecID	file:
audioStream	src/Features/Renderer.cpp	/^	Stream audioStream;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:Stream	file:
audio_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    AVCodec *audio_codec;$/;"	m	struct:AVFormatContext	typeref:typename:AVCodec *
audio_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID audio_codec;    \/**< default audio codec *\/$/;"	m	struct:AVOutputFormat	typeref:enum:AVCodecID
audio_codec_id	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID audio_codec_id;$/;"	m	struct:AVFormatContext	typeref:enum:AVCodecID
audio_min_samples	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              audio_min_samples[3];  \/* min amount of audio samples *\/$/;"	m	struct:AVDVProfile	typeref:typename:int[3]
audio_preload	lib/ffmpeg/include/libavformat/avformat.h	/^    int audio_preload;$/;"	m	struct:AVFormatContext	typeref:typename:int
audio_samples_dist	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              audio_samples_dist[5]; \/* how many samples are supposed to be *\/$/;"	m	struct:AVDVProfile	typeref:typename:int[5]
audio_service_type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVAudioServiceType audio_service_type;$/;"	m	struct:AVCodecContext	typeref:enum:AVAudioServiceType
audio_shuffle	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    const uint8_t  (*audio_shuffle)[9];     \/* PCM shuffling table *\/$/;"	m	struct:AVDVProfile	typeref:typename:const uint8_t (*)[9]
audio_stride	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              audio_stride;          \/* size of audio_shuffle table *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
autoAimTool	src/Features/Tas/TasTools/AutoAimTool.cpp	/^AutoAimTool autoAimTool[2] = {{0}, {1}};$/;"	v	typeref:typename:AutoAimTool[2]
autoJumpTool	src/Features/Tas/TasTools/AutoJumpTool.cpp	/^AutoJumpTool autoJumpTool[2] = {{0}, {1}};$/;"	v	typeref:typename:AutoJumpTool[2]
autoStrafeTool	src/Features/Tas/TasTools/StrafeTool.cpp	/^AutoStrafeTool autoStrafeTool[2] = {{0}, {1}};$/;"	v	typeref:typename:AutoStrafeTool[2]
auto_convert	src/Utils/lodepng.hpp	/^	LodePNGAutoConvert auto_convert; \/*how to automatically choose output PNG color type, if at al/;"	m	struct:LodePNGEncoderSettings	typeref:typename:LodePNGAutoConvert
autorecordStartNum	src/Modules/EngineDemoRecorder.hpp	/^	int autorecordStartNum = 1;$/;"	m	class:EngineDemoRecorder	typeref:typename:int
av_alias	lib/ffmpeg/include/libavutil/attributes.h	/^#   define av_alias /;"	d
av_alias	lib/ffmpeg/include/libavutil/attributes.h	/^#   define av_alias$/;"	d
av_alias	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_16 { uint16_t l; } __attribute__((packed)) av_alias;$/;"	v	typeref:union:unaligned_16
av_alias	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_32 { uint32_t l; } __attribute__((packed)) av_alias;$/;"	v	typeref:union:unaligned_32
av_alias	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_64 { uint64_t l; } __attribute__((packed)) av_alias;$/;"	v	typeref:union:unaligned_64
av_alias16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^} av_alias av_alias16;$/;"	t	typeref:union:__anon322f2785030a av_alias
av_alias32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^} av_alias av_alias32;$/;"	t	typeref:union:__anon322f2785020a av_alias
av_alias64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^} av_alias av_alias64;$/;"	t	typeref:union:__anon322f2785010a av_alias
av_alloc_size	lib/ffmpeg/include/libavutil/mem.h	/^    #define av_alloc_size(/;"	d
av_always_inline	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_always_inline /;"	d
av_assert0	lib/ffmpeg/include/libavutil/avassert.h	/^#define av_assert0(/;"	d
av_assert1	lib/ffmpeg/include/libavutil/avassert.h	/^#define av_assert1(/;"	d
av_assert2	lib/ffmpeg/include/libavutil/avassert.h	/^#define av_assert2(/;"	d
av_assert2_fpu	lib/ffmpeg/include/libavutil/avassert.h	/^#define av_assert2_fpu(/;"	d
av_be2ne16	lib/ffmpeg/include/libavutil/bswap.h	/^#define av_be2ne16(/;"	d
av_be2ne32	lib/ffmpeg/include/libavutil/bswap.h	/^#define av_be2ne32(/;"	d
av_be2ne64	lib/ffmpeg/include/libavutil/bswap.h	/^#define av_be2ne64(/;"	d
av_bprint_is_complete	lib/ffmpeg/include/libavutil/bprint.h	/^static inline int av_bprint_is_complete(const AVBPrint *buf)$/;"	f	typeref:typename:int
av_bswap16	lib/ffmpeg/include/libavutil/bswap.h	/^static av_always_inline av_const uint16_t av_bswap16(uint16_t x)$/;"	f	typeref:typename:av_always_inline av_const uint16_t
av_bswap32	lib/ffmpeg/include/libavutil/bswap.h	/^static av_always_inline av_const uint32_t av_bswap32(uint32_t x)$/;"	f	typeref:typename:av_always_inline av_const uint32_t
av_bswap64	lib/ffmpeg/include/libavutil/bswap.h	/^static inline uint64_t av_const av_bswap64(uint64_t x)$/;"	f	typeref:typename:uint64_t av_const
av_builtin_constant_p	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_builtin_constant_p /;"	d
av_builtin_constant_p	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_builtin_constant_p(/;"	d
av_ceil_log2	lib/ffmpeg/include/libavutil/common.h	/^#   define av_ceil_log2 /;"	d
av_ceil_log2_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int av_ceil_log2_c(int x)$/;"	f	typeref:typename:av_always_inline av_const int
av_class	lib/ffmpeg/include/libavcodec/avcodec.h	/^    const AVClass *av_class;$/;"	m	struct:AVCodecContext	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavcodec/avdct.h	/^    const AVClass *av_class;$/;"	m	struct:AVDCT	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavcodec/bsf.h	/^    const AVClass *av_class;$/;"	m	struct:AVBSFContext	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavdevice/avdevice.h	/^    const AVClass *av_class;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const AVClass *av_class;        \/\/\/< needed for av_log() and filters common options$/;"	m	struct:AVFilterContext	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const AVClass *av_class;$/;"	m	struct:AVFilterGraph	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavformat/avformat.h	/^    const AVClass *av_class;$/;"	m	struct:AVFormatContext	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavformat/avio.h	/^    const AVClass *av_class;$/;"	m	struct:AVIOContext	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavutil/hwcontext.h	/^    const AVClass *av_class;$/;"	m	struct:AVHWDeviceContext	typeref:typename:const AVClass *
av_class	lib/ffmpeg/include/libavutil/hwcontext.h	/^    const AVClass *av_class;$/;"	m	struct:AVHWFramesContext	typeref:typename:const AVClass *
av_clip	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip /;"	d
av_clip64	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip64 /;"	d
av_clip64_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int64_t av_clip64_c(int64_t a, int64_t amin, int64_t amax)$/;"	f	typeref:typename:av_always_inline av_const int64_t
av_clip_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int av_clip_c(int a, int amin, int amax)$/;"	f	typeref:typename:av_always_inline av_const int
av_clip_int16	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip_int16 /;"	d
av_clip_int16_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int16_t av_clip_int16_c(int a)$/;"	f	typeref:typename:av_always_inline av_const int16_t
av_clip_int8	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip_int8 /;"	d
av_clip_int8_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int8_t av_clip_int8_c(int a)$/;"	f	typeref:typename:av_always_inline av_const int8_t
av_clip_intp2	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip_intp2 /;"	d
av_clip_intp2_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int av_clip_intp2_c(int a, int p)$/;"	f	typeref:typename:av_always_inline av_const int
av_clip_uint16	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip_uint16 /;"	d
av_clip_uint16_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const uint16_t av_clip_uint16_c(int a)$/;"	f	typeref:typename:av_always_inline av_const uint16_t
av_clip_uint8	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip_uint8 /;"	d
av_clip_uint8_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const uint8_t av_clip_uint8_c(int a)$/;"	f	typeref:typename:av_always_inline av_const uint8_t
av_clip_uintp2	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clip_uintp2 /;"	d
av_clip_uintp2_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const unsigned av_clip_uintp2_c(int a, int p)$/;"	f	typeref:typename:av_always_inline av_const unsigned
av_clipd	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clipd /;"	d
av_clipd_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const double av_clipd_c(double a, double amin, double amax)$/;"	f	typeref:typename:av_always_inline av_const double
av_clipf	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clipf /;"	d
av_clipf_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const float av_clipf_c(float a, float amin, float amax)$/;"	f	typeref:typename:av_always_inline av_const float
av_clipl_int32	lib/ffmpeg/include/libavutil/common.h	/^#   define av_clipl_int32 /;"	d
av_clipl_int32_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int32_t av_clipl_int32_c(int64_t a)$/;"	f	typeref:typename:av_always_inline av_const int32_t
av_cmp_q	lib/ffmpeg/include/libavutil/rational.h	/^static inline int av_cmp_q(AVRational a, AVRational b){$/;"	f	typeref:typename:int
av_cold	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_cold /;"	d
av_cold	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_cold$/;"	d
av_const	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_const /;"	d
av_const	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_const$/;"	d
av_double2int	lib/ffmpeg/include/libavutil/intfloat.h	/^static av_always_inline uint64_t av_double2int(double f)$/;"	f	typeref:typename:av_always_inline uint64_t
av_err2str	lib/ffmpeg/include/libavutil/error.h	/^#define av_err2str(/;"	d
av_extern_inline	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_extern_inline /;"	d
av_fifo_peek2	lib/ffmpeg/include/libavutil/fifo.h	/^static inline uint8_t *av_fifo_peek2(const AVFifoBuffer *f, int offs)$/;"	f	typeref:typename:uint8_t *
av_flatten	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_flatten /;"	d
av_flatten	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_flatten$/;"	d
av_float2int	lib/ffmpeg/include/libavutil/intfloat.h	/^static av_always_inline uint32_t av_float2int(float f)$/;"	f	typeref:typename:av_always_inline uint32_t
av_format_control_message	lib/ffmpeg/include/libavformat/avformat.h	/^typedef int (*av_format_control_message)(struct AVFormatContext *s, int type,$/;"	t	typeref:typename:int (*)(struct AVFormatContext * s,int type,void * data,size_t data_size)
av_fourcc2str	lib/ffmpeg/include/libavutil/avutil.h	/^#define av_fourcc2str(/;"	d
av_int2double	lib/ffmpeg/include/libavutil/intfloat.h	/^static av_always_inline double av_int2double(uint64_t i)$/;"	f	typeref:typename:av_always_inline double
av_int2float	lib/ffmpeg/include/libavutil/intfloat.h	/^static av_always_inline float av_int2float(uint32_t i)$/;"	f	typeref:typename:av_always_inline float
av_int_list_length	lib/ffmpeg/include/libavutil/avutil.h	/^#define av_int_list_length(/;"	d
av_intfloat32	lib/ffmpeg/include/libavutil/intfloat.h	/^union av_intfloat32 {$/;"	u
av_intfloat64	lib/ffmpeg/include/libavutil/intfloat.h	/^union av_intfloat64 {$/;"	u
av_inv_q	lib/ffmpeg/include/libavutil/rational.h	/^static av_always_inline AVRational av_inv_q(AVRational q)$/;"	f	typeref:typename:av_always_inline AVRational
av_isdigit	lib/ffmpeg/include/libavutil/avstring.h	/^static inline av_const int av_isdigit(int c)$/;"	f	typeref:typename:av_const int
av_isgraph	lib/ffmpeg/include/libavutil/avstring.h	/^static inline av_const int av_isgraph(int c)$/;"	f	typeref:typename:av_const int
av_isspace	lib/ffmpeg/include/libavutil/avstring.h	/^static inline av_const int av_isspace(int c)$/;"	f	typeref:typename:av_const int
av_isxdigit	lib/ffmpeg/include/libavutil/avstring.h	/^static inline av_const int av_isxdigit(int c)$/;"	f	typeref:typename:av_const int
av_le2ne16	lib/ffmpeg/include/libavutil/bswap.h	/^#define av_le2ne16(/;"	d
av_le2ne32	lib/ffmpeg/include/libavutil/bswap.h	/^#define av_le2ne32(/;"	d
av_le2ne64	lib/ffmpeg/include/libavutil/bswap.h	/^#define av_le2ne64(/;"	d
av_lfg_get	lib/ffmpeg/include/libavutil/lfg.h	/^static inline unsigned int av_lfg_get(AVLFG *c){$/;"	f	typeref:typename:unsigned int
av_make_error_string	lib/ffmpeg/include/libavutil/error.h	/^static inline char *av_make_error_string(char *errbuf, size_t errbuf_size, int errnum)$/;"	f	typeref:typename:char *
av_make_q	lib/ffmpeg/include/libavutil/rational.h	/^static inline AVRational av_make_q(int num, int den)$/;"	f	typeref:typename:AVRational
av_malloc_attrib	lib/ffmpeg/include/libavutil/mem.h	/^    #define av_malloc_attrib /;"	d
av_malloc_attrib	lib/ffmpeg/include/libavutil/mem.h	/^    #define av_malloc_attrib$/;"	d
av_mlfg_get	lib/ffmpeg/include/libavutil/lfg.h	/^static inline unsigned int av_mlfg_get(AVLFG *c){$/;"	f	typeref:typename:unsigned int
av_mod_uintp2	lib/ffmpeg/include/libavutil/common.h	/^#   define av_mod_uintp2 /;"	d
av_mod_uintp2_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const unsigned av_mod_uintp2_c(unsigned a, unsigned p)$/;"	f	typeref:typename:av_always_inline av_const unsigned
av_noinline	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_noinline /;"	d
av_noinline	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_noinline$/;"	d
av_noreturn	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_noreturn /;"	d
av_noreturn	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_noreturn$/;"	d
av_opt_set_int_list	lib/ffmpeg/include/libavutil/opt.h	/^#define av_opt_set_int_list(/;"	d
av_parity	lib/ffmpeg/include/libavutil/common.h	/^#   define av_parity /;"	d
av_parity_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int av_parity_c(uint32_t v)$/;"	f	typeref:typename:av_always_inline av_const int
av_parse_ratio_quiet	lib/ffmpeg/include/libavutil/parseutils.h	/^#define av_parse_ratio_quiet(/;"	d
av_pixelutils_sad_fn	lib/ffmpeg/include/libavutil/pixelutils.h	/^typedef int (*av_pixelutils_sad_fn)(const uint8_t *src1, ptrdiff_t stride1,$/;"	t	typeref:typename:int (*)(const uint8_t * src1,ptrdiff_t stride1,const uint8_t * src2,ptrdiff_t stride2)
av_popcount	lib/ffmpeg/include/libavutil/common.h	/^#   define av_popcount /;"	d
av_popcount64	lib/ffmpeg/include/libavutil/common.h	/^#   define av_popcount64 /;"	d
av_popcount64_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int av_popcount64_c(uint64_t x)$/;"	f	typeref:typename:av_always_inline av_const int
av_popcount_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline av_const int av_popcount_c(uint32_t x)$/;"	f	typeref:typename:av_always_inline av_const int
av_printf_format	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_printf_format(/;"	d
av_pure	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_pure /;"	d
av_pure	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_pure$/;"	d
av_q2d	lib/ffmpeg/include/libavutil/rational.h	/^static inline double av_q2d(AVRational a){$/;"	f	typeref:typename:double
av_sat_add32	lib/ffmpeg/include/libavutil/common.h	/^#   define av_sat_add32 /;"	d
av_sat_add32_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline int av_sat_add32_c(int a, int b)$/;"	f	typeref:typename:av_always_inline int
av_sat_add64	lib/ffmpeg/include/libavutil/common.h	/^#   define av_sat_add64 /;"	d
av_sat_add64_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline int64_t av_sat_add64_c(int64_t a, int64_t b) {$/;"	f	typeref:typename:av_always_inline int64_t
av_sat_dadd32	lib/ffmpeg/include/libavutil/common.h	/^#   define av_sat_dadd32 /;"	d
av_sat_dadd32_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline int av_sat_dadd32_c(int a, int b)$/;"	f	typeref:typename:av_always_inline int
av_sat_dsub32	lib/ffmpeg/include/libavutil/common.h	/^#   define av_sat_dsub32 /;"	d
av_sat_dsub32_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline int av_sat_dsub32_c(int a, int b)$/;"	f	typeref:typename:av_always_inline int
av_sat_sub32	lib/ffmpeg/include/libavutil/common.h	/^#   define av_sat_sub32 /;"	d
av_sat_sub32_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline int av_sat_sub32_c(int a, int b)$/;"	f	typeref:typename:av_always_inline int
av_sat_sub64	lib/ffmpeg/include/libavutil/common.h	/^#   define av_sat_sub64 /;"	d
av_sat_sub64_c	lib/ffmpeg/include/libavutil/common.h	/^static av_always_inline int64_t av_sat_sub64_c(int64_t a, int64_t b) {$/;"	f	typeref:typename:av_always_inline int64_t
av_size_mult	lib/ffmpeg/include/libavutil/mem.h	/^static inline int av_size_mult(size_t a, size_t b, size_t *r)$/;"	f	typeref:typename:int
av_strnlen	lib/ffmpeg/include/libavutil/avstring.h	/^static inline size_t av_strnlen(const char *s, size_t len)$/;"	f	typeref:typename:size_t
av_tolower	lib/ffmpeg/include/libavutil/avstring.h	/^static inline av_const int av_tolower(int c)$/;"	f	typeref:typename:av_const int
av_toupper	lib/ffmpeg/include/libavutil/avstring.h	/^static inline av_const int av_toupper(int c)$/;"	f	typeref:typename:av_const int
av_ts2str	lib/ffmpeg/include/libavutil/timestamp.h	/^#define av_ts2str(/;"	d
av_ts2timestr	lib/ffmpeg/include/libavutil/timestamp.h	/^#define av_ts2timestr(/;"	d
av_ts_make_string	lib/ffmpeg/include/libavutil/timestamp.h	/^static inline char *av_ts_make_string(char *buf, int64_t ts)$/;"	f	typeref:typename:char *
av_ts_make_time_string	lib/ffmpeg/include/libavutil/timestamp.h	/^static inline char *av_ts_make_time_string(char *buf, int64_t ts, AVRational *tb)$/;"	f	typeref:typename:char *
av_tx_fn	lib/ffmpeg/include/libavutil/tx.h	/^typedef void (*av_tx_fn)(AVTXContext *s, void *out, void *in, ptrdiff_t stride);$/;"	t	typeref:typename:void (*)(AVTXContext * s,void * out,void * in,ptrdiff_t stride)
av_uninit	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_uninit(/;"	d
av_unused	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_unused /;"	d
av_unused	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_unused$/;"	d
av_used	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_used /;"	d
av_used	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_used$/;"	d
av_video_enc_params_block	lib/ffmpeg/include/libavutil/video_enc_params.h	/^av_video_enc_params_block(AVVideoEncParams *par, unsigned int idx)$/;"	f	typeref:typename:av_always_inline AVVideoBlockParams *
av_warn_unused_result	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_warn_unused_result /;"	d
av_warn_unused_result	lib/ffmpeg/include/libavutil/attributes.h	/^#    define av_warn_unused_result$/;"	d
av_x_if_null	lib/ffmpeg/include/libavutil/avutil.h	/^static inline void *av_x_if_null(const void *p, const void *x)$/;"	f	typeref:typename:void *
average	src/Features/Timer/Timer.cpp	/^	auto average = timer->avg->items.size();$/;"	v	typeref:typename:auto
averageTicks	src/Features/Timer/TimerAverage.hpp	/^	int averageTicks;$/;"	m	class:TimerAverage	typeref:typename:int
averageTime	src/Features/Timer/TimerAverage.hpp	/^	float averageTime;$/;"	m	class:TimerAverage	typeref:typename:float
average_maxrgb	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational average_maxrgb;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
avfilter_action_func	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef int (avfilter_action_func)(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs);$/;"	t	typeref:typename:int ()(AVFilterContext * ctx,void * arg,int jobnr,int nb_jobs)
avfilter_execute_func	lib/ffmpeg/include/libavfilter/avfilter.h	/^typedef int (avfilter_execute_func)(AVFilterContext *ctx, avfilter_action_func *func,$/;"	t	typeref:typename:int ()(AVFilterContext * ctx,avfilter_action_func * func,void * arg,int * ret,int nb_jobs)
avg	src/Features/Timer/Timer.hpp	/^	TimerAverage *avg;$/;"	m	class:Timer	typeref:typename:TimerAverage *
avgResetTime	src/Features/Stats/StatsCounter.hpp	/^	float avgResetTime;$/;"	m	class:StatsCounter	typeref:typename:float
avg_bitrate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int avg_bitrate;$/;"	m	struct:AVCPBProperties	typeref:typename:int
avg_bitrate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t avg_bitrate;$/;"	m	struct:AVCPBProperties	typeref:typename:int64_t
avg_frame_rate	lib/ffmpeg/include/libavformat/avformat.h	/^    AVRational avg_frame_rate;$/;"	m	struct:AVStream	typeref:typename:AVRational
avio_flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int avio_flags;$/;"	m	struct:AVFormatContext	typeref:typename:int
avio_print	lib/ffmpeg/include/libavformat/avio.h	/^#define avio_print(/;"	d
avio_tell	lib/ffmpeg/include/libavformat/avio.h	/^static av_always_inline int64_t avio_tell(AVIOContext *s)$/;"	f	typeref:typename:av_always_inline int64_t
avoid_negative_ts	lib/ffmpeg/include/libavformat/avformat.h	/^    int avoid_negative_ts;$/;"	m	struct:AVFormatContext	typeref:typename:int
awaitingFrameDraw	src/Features/Hud/InputHud.hpp	/^		bool awaitingFrameDraw = true;$/;"	m	struct:InputHud::__anon1a84afe10108	typeref:typename:bool
b	src/Cheats.cpp	/^	int b = 255;$/;"	v	typeref:typename:int
b	src/Features/Demo/GhostEntity.cpp	/^	int r, g, b;$/;"	v	typeref:typename:int
b	src/Features/Hud/Hud.cpp	/^				int r, g, b;$/;"	v	typeref:typename:int
b	src/Features/Hud/Hud.cpp	/^	int r, g, b;$/;"	v	typeref:typename:int
b	src/Features/Hud/Toasts.cpp	/^		int r, g, b;$/;"	v	typeref:typename:int
b	src/Features/Hud/Toasts.cpp	/^	uint8_t r, g, b;$/;"	m	struct:TagInfo	typeref:typename:uint8_t	file:
b	src/Utils/SDK.hpp	/^	inline int b() const { return _color[2]; }$/;"	f	struct:Color	typeref:typename:int
bMapLoadFailed	src/Utils/SDK.hpp	/^	char bMapLoadFailed;      \/\/ 76$/;"	m	struct:CGlobalVars	typeref:typename:char
bVal	src/Utils/SDK.hpp	/^		bool bVal;$/;"	m	union:variant_t::__anon21a65a74090a	typeref:typename:bool
b_data	lib/curl/include/curl/curl.h	/^  char *b_data;$/;"	m	struct:curl_fileinfo	typeref:typename:char *
b_frame_strategy	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int b_frame_strategy;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
b_quant_factor	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float b_quant_factor;$/;"	m	struct:AVCodecContext	typeref:typename:float
b_quant_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float b_quant_offset;$/;"	m	struct:AVCodecContext	typeref:typename:float
b_sensitivity	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int b_sensitivity;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
b_size	lib/curl/include/curl/curl.h	/^  size_t b_size;$/;"	m	struct:curl_fileinfo	typeref:typename:size_t
b_used	lib/curl/include/curl/curl.h	/^  size_t b_used;$/;"	m	struct:curl_fileinfo	typeref:typename:size_t
backend	lib/curl/include/curl/curl.h	/^  curl_sslbackend backend;$/;"	m	struct:curl_tlssessioninfo	typeref:typename:curl_sslbackend
background	src/Features/Hud/InputHud.hpp	/^		Color background;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:Color
background_b	src/Utils/lodepng.hpp	/^	unsigned background_b;       \/*blue component of suggested background color*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
background_defined	src/Utils/lodepng.hpp	/^	unsigned background_defined; \/*is a suggested background color given?*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
background_g	src/Utils/lodepng.hpp	/^	unsigned background_g;       \/*green component of suggested background color*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
background_r	src/Utils/lodepng.hpp	/^	unsigned background_r;       \/*red component of suggested background color*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
backup	lib/minhook/hook.c	/^    UINT8  backup[8];           \/\/ Original prologue of the target function.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT8[8]	file:
base	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int base;$/;"	m	struct:__anon77a6dab70108	typeref:typename:int	file:
base	src/Utils/Memory.hpp	/^		uintptr_t base;$/;"	m	struct:Memory::ModuleInfo	typeref:typename:uintptr_t
baseMap	src/Utils/SDK.hpp	/^	datamap_t *baseMap;           \/\/ 12$/;"	m	struct:datamap_t	typeref:typename:datamap_t *
baseTick	src/Features/Session.hpp	/^	int baseTick;$/;"	m	class:Session	typeref:typename:int
baseTick	src/Features/Timer/Timer.hpp	/^	int baseTick;$/;"	m	class:Timer	typeref:typename:int
baseclass	src/Interface.hpp	/^	uintptr_t **baseclass;$/;"	m	class:Interface	typeref:typename:uintptr_t **
before	src/Features/Tas/TasParser.cpp	/^	std::vector<Line> before;$/;"	m	struct:LoopInfo	typeref:typename:std::vector<Line>	file:
best_effort_timestamp	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t best_effort_timestamp;$/;"	m	struct:AVFrame	typeref:typename:int64_t
bezier_curve_anchors	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational bezier_curve_anchors[15];$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational[15]
bf_read	src/Utils/SDK.hpp	/^class bf_read {$/;"	c
bidir_refine	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int bidir_refine;$/;"	m	struct:AVCodecContext	typeref:typename:int
binop_l	src/Features/ConfigPlus.cpp	/^			Condition *binop_l, *binop_r;$/;"	m	struct:Condition::__anon19445435030a::__anon194454350408	typeref:typename:Condition *	file:
binop_r	src/Features/ConfigPlus.cpp	/^			Condition *binop_l, *binop_r;$/;"	m	struct:Condition::__anon19445435030a::__anon194454350408	typeref:typename:Condition *	file:
bit_depth	lib/ffmpeg/include/libavcodec/dirac.h	/^    int bit_depth;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:int
bit_depth	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    int bit_depth;$/;"	m	struct:CIDEntry	typeref:typename:int
bit_rate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t bit_rate;$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
bit_rate	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int64_t bit_rate;$/;"	m	struct:AVCodecParameters	typeref:typename:int64_t
bit_rate	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t bit_rate;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
bit_rate_tolerance	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int bit_rate_tolerance;$/;"	m	struct:AVCodecContext	typeref:typename:int
bit_rates	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    int bit_rates[5]; \/\/\/< Helper to choose variants, rounded to nearest 5Mb\/s$/;"	m	struct:CIDEntry	typeref:typename:int[5]
bitdepth	src/Utils/lodepng.hpp	/^	unsigned bitdepth;          \/*bits per sample, see PNG standard or documentation further in th/;"	m	struct:LodePNGColorMode	typeref:typename:unsigned
bits_per_coded_sample	lib/ffmpeg/include/libavcodec/avcodec.h	/^     int bits_per_coded_sample;$/;"	m	struct:AVCodecContext	typeref:typename:int
bits_per_coded_sample	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int bits_per_coded_sample;$/;"	m	struct:AVCodecParameters	typeref:typename:int
bits_per_raw_sample	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int bits_per_raw_sample;$/;"	m	struct:AVCodecContext	typeref:typename:int
bits_per_raw_sample	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int bits_per_raw_sample;$/;"	m	struct:AVCodecParameters	typeref:typename:int
bits_per_sample	lib/ffmpeg/include/libavcodec/avdct.h	/^    int bits_per_sample;$/;"	m	struct:AVDCT	typeref:typename:int
bl_present_flag	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t bl_present_flag;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
blendSumBuf	src/Features/Renderer.cpp	/^	uint16_t *blendSumBuf;  \/\/ Blending buffer - contains the sum of the pixel values during blen/;"	m	struct:__anon6dfe74d20108	typeref:typename:uint16_t *	file:
block_align	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int block_align;$/;"	m	struct:AVCodecContext	typeref:typename:int
block_align	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int      block_align;$/;"	m	struct:AVCodecParameters	typeref:typename:int
block_size	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    size_t block_size;$/;"	m	struct:AVVideoEncParams	typeref:typename:size_t
block_sizes	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    const uint8_t   *block_sizes;           \/* AC block sizes, in bits *\/$/;"	m	struct:AVDVProfile	typeref:typename:const uint8_t *
blocks_offset	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    size_t blocks_offset;$/;"	m	struct:AVVideoEncParams	typeref:typename:size_t
bool_value	src/Utils/json11.cpp	/^		bool bool_value() const override { return m_value; }$/;"	f	class:json11::JsonBoolean	typeref:typename:bool	file:
bool_value	src/Utils/json11.cpp	/^	bool Json::bool_value() const { return m_ptr->bool_value(); }$/;"	f	class:json11::Json	typeref:typename:bool
bool_value	src/Utils/json11.cpp	/^	bool JsonValue::bool_value() const { return false; }$/;"	f	class:json11::JsonValue	typeref:typename:bool
bottom	lib/ffmpeg/include/libavutil/frame.h	/^    int bottom;$/;"	m	struct:AVRegionOfInterest	typeref:typename:int
bottom	src/Features/Hud/Minimap.cpp	/^	float top, left, bottom, right;$/;"	m	struct:Minimap	typeref:typename:float	file:
bound_bottom	lib/ffmpeg/include/libavutil/spherical.h	/^    uint32_t bound_bottom; \/\/\/< Distance from the bottom edge$/;"	m	struct:AVSphericalMapping	typeref:typename:uint32_t
bound_left	lib/ffmpeg/include/libavutil/spherical.h	/^    uint32_t bound_left;   \/\/\/< Distance from the left edge$/;"	m	struct:AVSphericalMapping	typeref:typename:uint32_t
bound_right	lib/ffmpeg/include/libavutil/spherical.h	/^    uint32_t bound_right;  \/\/\/< Distance from the right edge$/;"	m	struct:AVSphericalMapping	typeref:typename:uint32_t
bound_top	lib/ffmpeg/include/libavutil/spherical.h	/^    uint32_t bound_top;    \/\/\/< Distance from the top edge$/;"	m	struct:AVSphericalMapping	typeref:typename:uint32_t
bpm	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              bpm;                   \/* blocks per macroblock *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
brd_scale	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int brd_scale;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
brotli_ver_num	lib/curl/include/curl/curl.h	/^  unsigned int brotli_ver_num; \/* Numeric Brotli version$/;"	m	struct:curl_version_info_data	typeref:typename:unsigned int
brotli_version	lib/curl/include/curl/curl.h	/^  const char *brotli_version; \/* human readable string. *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
bsfs	lib/ffmpeg/include/libavcodec/codec.h	/^    const char *bsfs;$/;"	m	struct:AVCodec	typeref:typename:const char *
btype	src/Utils/lodepng.hpp	/^	unsigned btype;          \/*the block type for LZ (0, 1, 2 or 3, see zlib standard). Should be /;"	m	struct:LodePNGCompressSettings	typeref:typename:unsigned
buf	lib/ffmpeg/include/libavcodec/packet.h	/^    AVBufferRef *buf;$/;"	m	struct:AVPacket	typeref:typename:AVBufferRef *
buf	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned char *buf; \/**< Buffer must have AVPROBE_PADDING_SIZE of extra allocated bytes fil/;"	m	struct:AVProbeData	typeref:typename:unsigned char *
buf	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef *buf;$/;"	m	struct:AVFrameSideData	typeref:typename:AVBufferRef *
buf	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef *buf[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVFrame	typeref:typename:AVBufferRef * []
buf	src/Modules/Tier1.cpp	/^	std::vector<BufferedPart> buf;$/;"	m	class:ConsoleDisplayHook	typeref:typename:std::vector<BufferedPart>	file:
buf_end	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned char *buf_end; \/**< End of the data, may be less than$/;"	m	struct:AVIOContext	typeref:typename:unsigned char *
buf_ptr	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned char *buf_ptr; \/**< Current position in the buffer *\/$/;"	m	struct:AVIOContext	typeref:typename:unsigned char *
buf_ptr_max	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned char *buf_ptr_max;$/;"	m	struct:AVIOContext	typeref:typename:unsigned char *
buf_size	lib/ffmpeg/include/libavformat/avformat.h	/^    int buf_size;       \/**< Size of buf except extra allocated bytes *\/$/;"	m	struct:AVProbeData	typeref:typename:int
buffer	lib/curl/include/curl/curl.h	/^  char *buffer;                     \/* pointer to allocated buffer contents *\/$/;"	m	struct:curl_httppost	typeref:typename:char *
buffer	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned char *buffer;  \/**< Start of the buffer. *\/$/;"	m	struct:AVIOContext	typeref:typename:unsigned char *
buffer	lib/ffmpeg/include/libavutil/buffer.h	/^    AVBuffer *buffer;$/;"	m	struct:AVBufferRef	typeref:typename:AVBuffer *
buffer	lib/ffmpeg/include/libavutil/fifo.h	/^    uint8_t *buffer;$/;"	m	struct:AVFifoBuffer	typeref:typename:uint8_t *
buffer	lib/minhook/buffer.c	/^        UINT8 buffer[MEMORY_SLOT_SIZE];$/;"	m	union:_MEMORY_SLOT::__anonfe6e4e1a010a	typeref:typename:UINT8[]	file:
buffer_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int buffer_size;$/;"	m	struct:AVCPBProperties	typeref:typename:int
buffer_size	lib/ffmpeg/include/libavformat/avio.h	/^    int buffer_size;        \/**< Maximum buffer size *\/$/;"	m	struct:AVIOContext	typeref:typename:int
bufferlength	lib/curl/include/curl/curl.h	/^  long bufferlength;                \/* length of buffer field *\/$/;"	m	struct:curl_httppost	typeref:typename:long
buttonBits	src/Features/Hud/InputHud.hpp	/^		int buttonBits = 0;$/;"	m	struct:InputHud::__anon1a84afe10108	typeref:typename:int
buttonStates	src/Features/Tas/TasPlayer.hpp	/^	bool buttonStates[TAS_CONTROLLER_INPUT_COUNT] = {0};$/;"	m	struct:TasFramebulk	typeref:typename:bool[]
buttons	src/Features/Tas/TasController.hpp	/^	TasControllerButton buttons[TAS_CONTROLLER_INPUT_COUNT] = {};$/;"	m	class:TasController	typeref:typename:TasControllerButton[]
buttons	src/Utils/SDK.hpp	/^	int buttons;            \/\/ 36$/;"	m	struct:CUserCmd	typeref:typename:int
bytes_of_clear_data	lib/ffmpeg/include/libavutil/encryption_info.h	/^    unsigned int bytes_of_clear_data;$/;"	m	struct:AVSubsampleEncryptionInfo	typeref:typename:unsigned int
bytes_of_protected_data	lib/ffmpeg/include/libavutil/encryption_info.h	/^    unsigned int bytes_of_protected_data;$/;"	m	struct:AVSubsampleEncryptionInfo	typeref:typename:unsigned int
bytes_read	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t bytes_read;$/;"	m	struct:AVIOContext	typeref:typename:int64_t
c	src/Features/ConfigPlus.cpp	/^	Command *c = new Command(name, &_aliasCallback, "SAR alias command.\\n", FCVAR_DONTRECORD);$/;"	v	typeref:typename:Command *
c	src/Features/ConfigPlus.cpp	/^	Command *c = new Command(name, &_functionCallback, "SAR function command.\\n", FCVAR_DONTRECORD/;"	v	typeref:typename:Command *
c	src/Features/Hud/Hud.cpp	/^			for (auto &c : t.second.components) {$/;"	v	typeref:typename:auto &
cainfo	lib/curl/include/curl/curl.h	/^  const char *cainfo;          \/* the built-in default CURLOPT_CAINFO, might$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
calcFileSums	src/Checksum.cpp	/^static void calcFileSums(std::map<std::string, uint32_t> *out, std::vector<std::string> paths) {$/;"	f	typeref:typename:void	file:
calcTotalPortals	src/Features/Hud/LPHud.cpp	/^static int calcTotalPortals() {$/;"	f	typeref:typename:int	file:
callFromCheckJumpButton	src/Modules/Server.hpp	/^	bool callFromCheckJumpButton = false;$/;"	m	class:Server	typeref:typename:bool
callback	lib/ffmpeg/include/libavformat/avio.h	/^    int (*callback)(void*);$/;"	m	struct:AVIOInterruptCB	typeref:typename:int (*)(void *)
callbackDefault	src/Features/Hud/Hud.hpp	/^		_PaintCallback callbackDefault;$/;"	m	union:HudElement::__anon52ed1f31010a	typeref:typename:_PaintCallback
callbackMode	src/Features/Hud/Hud.hpp	/^		_PaintCallbackMode callbackMode;$/;"	m	union:HudElement::__anon52ed1f31010a	typeref:typename:_PaintCallbackMode
callbackString	src/Features/Hud/Hud.hpp	/^		_PaintCallbackString callbackString;$/;"	m	union:HudElement::__anon52ed1f31010a	typeref:typename:_PaintCallbackString
cam	src/Features/Camera.cpp	/^			CameraState cam = state.second;$/;"	v	typeref:typename:CameraState
camera	src/Features/Camera.cpp	/^Camera *camera;$/;"	v	typeref:typename:Camera *
cameraRefreshRequested	src/Features/Camera.hpp	/^	bool cameraRefreshRequested = false;$/;"	m	class:Camera	typeref:typename:bool
campos	src/Features/Camera.cpp	/^		CameraState campos = camera->currentState;$/;"	v	typeref:typename:CameraState
canDelete	src/Features/Speedrun/Categories.cpp	/^	bool canDelete = true;$/;"	v	typeref:typename:bool
candidate	src/Features/Demo/GhostEntity.cpp	/^	GhostEntity *candidate = nullptr;$/;"	v	typeref:typename:GhostEntity *
capabilities	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int capabilities;$/;"	m	struct:AVHWAccel	typeref:typename:int
capabilities	lib/ffmpeg/include/libavcodec/codec.h	/^    int capabilities;$/;"	m	struct:AVCodec	typeref:typename:int
capacity	lib/minhook/hook.c	/^    UINT        capacity;   \/\/ Size of allocated data heap, items$/;"	m	struct:__anoncf0f1fd10108	typeref:typename:UINT	file:
capacity	lib/minhook/hook.c	/^    UINT    capacity;       \/\/ Size of allocated data heap, items$/;"	m	struct:_FROZEN_THREADS	typeref:typename:UINT	file:
capath	lib/curl/include/curl/curl.h	/^  const char *capath;          \/* the built-in default CURLOPT_CAPATH, might$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
caps_internal	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int caps_internal;$/;"	m	struct:AVHWAccel	typeref:typename:int
caps_internal	lib/ffmpeg/include/libavcodec/codec.h	/^    int caps_internal;$/;"	m	struct:AVCodec	typeref:typename:int
cat	src/Features/Speedrun/Categories.cpp	/^	auto cat = lookupMap(g_categories, args[1]);$/;"	v	typeref:typename:auto
cat	src/Features/Speedrun/Categories.cpp	/^	for (auto cat : g_categories) {$/;"	v	typeref:typename:auto
catName	src/Features/Speedrun/Categories.cpp	/^	std::string catName = args[1];$/;"	v	typeref:typename:std::string
category	lib/ffmpeg/include/libavutil/log.h	/^    AVClassCategory category;$/;"	m	struct:AVClass	typeref:typename:AVClassCategory
cb	src/Event.hpp	/^		std::function<void(EventData<E>)> cb;$/;"	m	struct:Event::_EventReg	typeref:typename:std::function<void (EventData<E>)>
cb	src/Event.hpp	/^	std::function<void()> cb;$/;"	m	class:SarInitHandler	typeref:typename:std::function<void ()>
cbk	src/Modules/Console.hpp	/^	std::function<void(const char *)> cbk;$/;"	m	class:ConsoleListener	typeref:typename:std::function<void (const char *)>
cclass	src/Features/ClassDumper.cpp	/^	for (auto cclass = client->GetAllClasses(); cclass; cclass = cclass->m_pNext) {$/;"	v	typeref:typename:auto
center	src/Features/OverlayRender.cpp	/^	bool center;$/;"	m	struct:OverlayText	typeref:typename:bool	file:
center	src/Features/Speedrun/CategoryCreator.cpp	/^		Vector center = (start + end) \/ 2;$/;"	v	typeref:typename:Vector
center	src/Features/Speedrun/Rules.hpp	/^	Vector center;$/;"	m	struct:PortalPlacementRule	typeref:typename:Vector
center	src/Features/Speedrun/Rules.hpp	/^	Vector center;$/;"	m	struct:ZoneTriggerRule	typeref:typename:Vector
center_mix_level	lib/ffmpeg/include/libavutil/downmix_info.h	/^    double center_mix_level;$/;"	m	struct:AVDownmixInfo	typeref:typename:double
center_mix_level_ltrt	lib/ffmpeg/include/libavutil/downmix_info.h	/^    double center_mix_level_ltrt;$/;"	m	struct:AVDownmixInfo	typeref:typename:double
center_of_ellipse_x	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint16_t center_of_ellipse_x;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint16_t
center_of_ellipse_y	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint16_t center_of_ellipse_y;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint16_t
certinfo	lib/curl/include/curl/curl.h	/^  struct curl_slist **certinfo; \/* for each index in this array, there's a$/;"	m	struct:curl_certinfo	typeref:struct:curl_slist **
cfg	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    D3D11_VIDEO_DECODER_CONFIG *cfg;$/;"	m	struct:AVD3D11VAContext	typeref:typename:D3D11_VIDEO_DECODER_CONFIG *
cfg	lib/ffmpeg/include/libavcodec/dxva2.h	/^    const DXVA2_ConfigPictureDecode *cfg;$/;"	m	struct:dxva_context	typeref:typename:const DXVA2_ConfigPictureDecode *
chain	src/Utils/lodepng.cpp	/^	unsigned short *chain;$/;"	m	struct:Hash	typeref:typename:unsigned short *	file:
changeCount	src/Features/Listener.hpp	/^	int changeCount;$/;"	m	class:Listener	typeref:typename:int
changelevel	src/Features/Hud/LPHud.cpp	/^	bool changelevel; \/\/ Was this count update triggered by a changelevel?$/;"	m	struct:LPHudCountHistoryInfo	typeref:typename:bool	file:
channelID	src/Utils/SDK.hpp	/^	int channelID;$/;"	m	struct:LoggingContext	typeref:typename:int
channel_counts	lib/ffmpeg/include/libavfilter/buffersink.h	/^    const int *channel_counts;              \/\/\/< list of allowed channel counts, terminated b/;"	m	struct:AVABufferSinkParams	typeref:typename:const int *
channel_layout	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint64_t channel_layout;$/;"	m	struct:AVCodecContext	typeref:typename:uint64_t
channel_layout	lib/ffmpeg/include/libavcodec/codec_par.h	/^    uint64_t channel_layout;$/;"	m	struct:AVCodecParameters	typeref:typename:uint64_t
channel_layout	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int64_t channel_layout;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int64_t
channel_layout	lib/ffmpeg/include/libavfilter/avfilter.h	/^    uint64_t channel_layout;    \/\/\/< channel layout of current buffer (see libavutil\/channel/;"	m	struct:AVFilterLink	typeref:typename:uint64_t
channel_layout	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    uint64_t channel_layout;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:uint64_t
channel_layout	lib/ffmpeg/include/libavutil/frame.h	/^    uint64_t channel_layout;$/;"	m	struct:AVFrame	typeref:typename:uint64_t
channel_layouts	lib/ffmpeg/include/libavcodec/codec.h	/^    const uint64_t *channel_layouts;         \/\/\/< array of support channel layouts, or NULL i/;"	m	struct:AVCodec	typeref:typename:const uint64_t *
channel_layouts	lib/ffmpeg/include/libavfilter/buffersink.h	/^    const int64_t *channel_layouts;         \/\/\/< list of allowed channel layouts, terminated /;"	m	struct:AVABufferSinkParams	typeref:typename:const int64_t *
channels	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int channels;    \/\/\/< number of audio channels$/;"	m	struct:AVCodecContext	typeref:typename:int
channels	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int      channels;$/;"	m	struct:AVCodecParameters	typeref:typename:int
channels	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int channels;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int
channels	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int channels;$/;"	m	struct:AVFilterLink	typeref:typename:int
channels	lib/ffmpeg/include/libavutil/frame.h	/^    int channels;$/;"	m	struct:AVFrame	typeref:typename:int
channels	src/Features/Renderer.cpp	/^	int channels;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
chapters	lib/ffmpeg/include/libavformat/avformat.h	/^    AVChapter **chapters;$/;"	m	struct:AVFormatContext	typeref:typename:AVChapter **
cheats	src/SAR.hpp	/^	Cheats *cheats;$/;"	m	class:SAR	typeref:typename:Cheats *
checkColorValidity	src/Utils/lodepng.cpp	/^static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) \/*bd = bitdepth*\/$/;"	f	typeref:typename:unsigned	file:
checkUpdate	src/Features/Updater.cpp	/^void checkUpdate(bool allowPre) {$/;"	f	typeref:typename:void
check_bitstream	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*check_bitstream)(struct AVFormatContext *, const AVPacket *pkt);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *,const AVPacket * pkt)
checksum	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned long checksum;$/;"	m	struct:AVIOContext	typeref:typename:unsigned long
checksum_ptr	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned char *checksum_ptr;$/;"	m	struct:AVIOContext	typeref:typename:unsigned char *
child_class_next	lib/ffmpeg/include/libavutil/log.h	/^    const struct AVClass* (*child_class_next)(const struct AVClass *prev);$/;"	m	struct:AVClass	typeref:typename:const struct AVClass * (*)(const struct AVClass * prev)
child_next	lib/ffmpeg/include/libavutil/log.h	/^    void* (*child_next)(void *obj, void *prev);$/;"	m	struct:AVClass	typeref:typename:void * (*)(void * obj,void * prev)
chrH	lib/ffmpeg/include/libswscale/swscale.h	/^    SwsVector *chrH;$/;"	m	struct:SwsFilter	typeref:typename:SwsVector *
chrV	lib/ffmpeg/include/libswscale/swscale.h	/^    SwsVector *chrV;$/;"	m	struct:SwsFilter	typeref:typename:SwsVector *
chroma_format	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t chroma_format;          \/\/\/< 0: 444  1: 422  2: 420$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
chroma_intra_matrix	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint16_t *chroma_intra_matrix;$/;"	m	struct:AVCodecContext	typeref:typename:uint16_t *
chroma_location	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVChromaLocation              chroma_location;$/;"	m	struct:AVCodecParameters	typeref:enum:AVChromaLocation
chroma_location	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVChromaLocation chroma_location;$/;"	m	struct:AVFrame	typeref:enum:AVChromaLocation
chroma_sample_location	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVChromaLocation chroma_sample_location;$/;"	m	struct:AVCodecContext	typeref:enum:AVChromaLocation
chroma_weight	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *luma_weight, *chroma_weight;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
chromaoffset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int chromaoffset;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
cid	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    int cid;$/;"	m	struct:CIDEntry	typeref:typename:int
cl	src/Modules/Engine.hpp	/^	Interface *cl = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
cl	src/Offsets.cpp	/^	int cl;$/;"	v	namespace:Offsets	typeref:typename:int
cl_backspeed	src/Modules/Client.cpp	/^Variable cl_backspeed;$/;"	v	typeref:typename:Variable
cl_crosshair_t	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshair_t("cl_crosshair_t", "0",$/;"	v	typeref:typename:Variable
cl_crosshairalpha	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshairalpha("cl_crosshairalpha", "255", 0, 255, "Change the amount of transparenc/;"	v	typeref:typename:Variable
cl_crosshaircolor_b	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshaircolor_b("cl_crosshaircolor_b", "0", 0, 255, "Changes the color of the cross/;"	v	typeref:typename:Variable
cl_crosshaircolor_g	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshaircolor_g("cl_crosshaircolor_g", "255", 0, 255, "Changes the color of the cro/;"	v	typeref:typename:Variable
cl_crosshaircolor_r	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshaircolor_r("cl_crosshaircolor_r", "0", 0, 255, "Changes the color of the cross/;"	v	typeref:typename:Variable
cl_crosshairdot	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshairdot("cl_crosshairdot", "1", "Decides if there is a dot in the middle of the/;"	v	typeref:typename:Variable
cl_crosshairgap	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshairgap("cl_crosshairgap", "5", 0, "Changes the distance of the crosshair lines/;"	v	typeref:typename:Variable
cl_crosshairsize	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshairsize("cl_crosshairsize", "5", -100, "Changes the size of the crosshair.\\n"/;"	v	typeref:typename:Variable
cl_crosshairthickness	src/Features/Hud/Crosshair.cpp	/^Variable cl_crosshairthickness("cl_crosshairthickness", "0", 0, "Changes the thinkness of the cr/;"	v	typeref:typename:Variable
cl_forwardspeed	src/Modules/Client.cpp	/^Variable cl_forwardspeed;$/;"	v	typeref:typename:Variable
cl_fov	src/Modules/Client.cpp	/^Variable cl_fov;$/;"	v	typeref:typename:Variable
cl_pitchdown	src/Features/Tas/TasController.cpp	/^Variable cl_pitchdown;$/;"	v	typeref:typename:Variable
cl_pitchup	src/Features/Tas/TasController.cpp	/^Variable cl_pitchup;$/;"	v	typeref:typename:Variable
cl_quickhud_alpha	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhud_alpha("cl_quickhud_alpha", "255", 0, 255, "Change the amount of transparenc/;"	v	typeref:typename:Variable
cl_quickhud_size	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhud_size("sar_quickhud_size", "15", -100, "Size of the custom quickhud.\\n");$/;"	v	typeref:typename:Variable
cl_quickhud_x	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhud_x("sar_quickhud_x", "45", -1000, "Horizontal distance of the custom quickhu/;"	v	typeref:typename:Variable
cl_quickhud_y	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhud_y("sar_quickhud_y", "0", -1000, "Vertical distance of the custom quickhud.\\/;"	v	typeref:typename:Variable
cl_quickhudleftcolor_b	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhudleftcolor_b("cl_quickhudleftcolor_b", "86", 0, 255, "Changes the color of th/;"	v	typeref:typename:Variable
cl_quickhudleftcolor_g	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhudleftcolor_g("cl_quickhudleftcolor_g", "184", 0, 255, "Changes the color of t/;"	v	typeref:typename:Variable
cl_quickhudleftcolor_r	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhudleftcolor_r("cl_quickhudleftcolor_r", "255", 0, 255, "Changes the color of t/;"	v	typeref:typename:Variable
cl_quickhudrightcolor_b	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhudrightcolor_b("cl_quickhudrightcolor_b", "255", 0, 255, "Changes the color of/;"	v	typeref:typename:Variable
cl_quickhudrightcolor_g	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhudrightcolor_g("cl_quickhudrightcolor_g", "184", 0, 255, "Changes the color of/;"	v	typeref:typename:Variable
cl_quickhudrightcolor_r	src/Features/Hud/Crosshair.cpp	/^Variable cl_quickhudrightcolor_r("cl_quickhudrightcolor_r", "111", 0, 255, "Changes the color of/;"	v	typeref:typename:Variable
cl_showpos	src/Modules/Client.cpp	/^Variable cl_showpos;$/;"	v	typeref:typename:Variable
cl_sidespeed	src/Modules/Client.cpp	/^Variable cl_sidespeed;$/;"	v	typeref:typename:Variable
cl_skip_player_render_in_main_view	src/Features/Camera.cpp	/^Variable cl_skip_player_render_in_main_view;$/;"	v	typeref:typename:Variable
classDumper	src/Features/ClassDumper.cpp	/^ClassDumper *classDumper;$/;"	v	typeref:typename:ClassDumper *
class_name	lib/ffmpeg/include/libavutil/log.h	/^    const char* class_name;$/;"	m	struct:AVClass	typeref:typename:const char *
classname	src/Features/Speedrun/Rules.hpp	/^	std::string classname;$/;"	m	struct:EntityInputRule	typeref:typename:std::string
clean	Makefile	/^clean:$/;"	t
clean_height	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint16_t clean_height;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint16_t
clean_left_offset	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint16_t clean_left_offset;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint16_t
clean_right_offset	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint16_t clean_right_offset;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint16_t
clean_width	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint16_t clean_width;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint16_t
cleanup_coins	src/Utils/lodepng.cpp	/^static void cleanup_coins(Coin *coins, size_t num) {$/;"	f	typeref:typename:void	file:
client	src/Modules/Client.cpp	/^Client *client;$/;"	v	typeref:typename:Client *
clientClassesFile	src/Features/ClassDumper.hpp	/^	std::string clientClassesFile;$/;"	m	class:ClassDumper	typeref:typename:std::string
clientDataMapFile	src/Features/DataMapDumper.hpp	/^	std::string clientDataMapFile;$/;"	m	class:DataMapDumper	typeref:typename:std::string
clientName	src/Features/Demo/Demo.hpp	/^	char clientName[260];$/;"	m	class:Demo	typeref:typename:char[260]
clientResult	src/Features/DataMapDumper.hpp	/^	std::vector<std::vector<uintptr_t>> clientResult;$/;"	m	class:DataMapDumper	typeref:typename:std::vector<std::vector<uintptr_t>>
clip16	src/Features/Renderer.cpp	/^static inline short clip16(int x) {$/;"	f	typeref:typename:short	file:
close	lib/ffmpeg/include/libavcodec/bsf.h	/^    void (*close)(AVBSFContext *ctx);$/;"	m	struct:AVBitStreamFilter	typeref:typename:void (*)(AVBSFContext * ctx)
close	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*close)(struct AVCodecContext *);$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext *)
closeStream	src/Features/Renderer.cpp	/^static void closeStream(Stream *s) {$/;"	f	typeref:typename:void	file:
closesocket	src/Features/Bot/BotServer.cpp	/^#	define closesocket /;"	d	file:
closesocket	src/Features/Tas/TasServer.cpp	/^#	define closesocket /;"	d	file:
cm_codec_type	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^    int cm_codec_type;$/;"	m	struct:AVVideotoolboxContext	typeref:typename:int
cm_fmt_desc	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^    CMVideoFormatDescriptionRef cm_fmt_desc;$/;"	m	struct:AVVideotoolboxContext	typeref:typename:CMVideoFormatDescriptionRef
cmd	src/Features/ConfigPlus.cpp	/^	Command *cmd;$/;"	m	struct:AliasInfo	typeref:typename:Command *	file:
cmd	src/Features/ConfigPlus.cpp	/^	const char *cmd = args.ArgC() == 2 ? args[1] : args.m_pArgSBuffer + args.m_nArgv0Size;$/;"	v	typeref:typename:const char *
cmd	src/Features/ConfigPlus.cpp	/^	const char *cmd;$/;"	v	typeref:typename:const char *
cmd	src/Features/ConfigPlus.cpp	/^	std::string cmd = it->second.run + " " + argstr;$/;"	v	typeref:typename:std::string
cmd	src/Features/SegmentedTools.cpp	/^	const char *cmd;$/;"	v	typeref:typename:const char *
cmd	src/Features/SegmentedTools.cpp	/^	std::string cmd;$/;"	m	struct:WaitEntry	typeref:typename:std::string	file:
cmdalias_t	src/Utils/SDK.hpp	/^struct cmdalias_t {$/;"	s
cmdbuf	src/Features/Bot/BotServer.cpp	/^	std::deque<uint8_t> cmdbuf;$/;"	m	struct:ClientData	typeref:typename:std::deque<uint8_t>	file:
cmdbuf	src/Features/Tas/TasServer.cpp	/^	std::deque<uint8_t> cmdbuf;$/;"	m	struct:ClientData	typeref:typename:std::deque<uint8_t>	file:
cmds	src/Features/ConfigPlus.cpp	/^	std::queue<std::string> cmds;$/;"	v	typeref:typename:std::queue<std::string>
cmdstr	src/Features/SegmentedTools.cpp	/^	std::string cmdstr = cmd;$/;"	v	typeref:typename:std::string
cname	src/Features/EntityList.cpp	/^		auto cname = server->GetEntityClassName(info->m_pEntity);$/;"	v	typeref:typename:auto
codec	lib/ffmpeg/include/libavcodec/avcodec.h	/^    const struct AVCodec  *codec;$/;"	m	struct:AVCodecContext	typeref:typename:const struct AVCodec *
codec	lib/ffmpeg/include/libavdevice/avdevice.h	/^    enum AVCodecID codec;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:enum:AVCodecID
codec	lib/ffmpeg/include/libavformat/avformat.h	/^    AVCodecContext *codec;$/;"	m	struct:AVStream	typeref:typename:attribute_deprecated AVCodecContext *
codec	src/Features/Renderer.cpp	/^	AVCodec *codec;$/;"	m	struct:Stream	typeref:typename:AVCodec *	file:
codec_descriptor	lib/ffmpeg/include/libavcodec/avcodec.h	/^    const AVCodecDescriptor *codec_descriptor;$/;"	m	struct:AVCodecContext	typeref:typename:const AVCodecDescriptor *
codec_id	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVCodecID     codec_id; \/* see AV_CODEC_ID_xxx *\/$/;"	m	struct:AVCodecContext	typeref:enum:AVCodecID
codec_id	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVCodecID   codec_id;$/;"	m	struct:AVCodecParameters	typeref:enum:AVCodecID
codec_ids	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int codec_ids[5]; \/* several codec IDs are permitted *\/$/;"	m	struct:AVCodecParser	typeref:typename:int[5]
codec_ids	lib/ffmpeg/include/libavcodec/bsf.h	/^    const enum AVCodecID *codec_ids;$/;"	m	struct:AVBitStreamFilter	typeref:typename:const enum AVCodecID *
codec_info_duration	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t codec_info_duration;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
codec_info_duration_fields	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t codec_info_duration_fields;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
codec_info_nb_frames	lib/ffmpeg/include/libavformat/avformat.h	/^    int codec_info_nb_frames;$/;"	m	struct:AVStream	typeref:typename:int
codec_tag	lib/ffmpeg/include/libavcodec/avcodec.h	/^    unsigned int codec_tag;$/;"	m	struct:AVCodecContext	typeref:typename:unsigned int
codec_tag	lib/ffmpeg/include/libavcodec/codec_par.h	/^    uint32_t         codec_tag;$/;"	m	struct:AVCodecParameters	typeref:typename:uint32_t
codec_tag	lib/ffmpeg/include/libavformat/avformat.h	/^    const struct AVCodecTag * const *codec_tag;$/;"	m	struct:AVInputFormat	typeref:typename:const struct AVCodecTag * const *
codec_tag	lib/ffmpeg/include/libavformat/avformat.h	/^    const struct AVCodecTag * const *codec_tag;$/;"	m	struct:AVOutputFormat	typeref:typename:const struct AVCodecTag * const *
codec_tags	lib/ffmpeg/include/libavcodec/codec.h	/^    const uint32_t *codec_tags;$/;"	m	struct:AVCodec	typeref:typename:const uint32_t *
codec_type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVMediaType codec_type; \/* see AVMEDIA_TYPE_xxx *\/$/;"	m	struct:AVCodecContext	typeref:enum:AVMediaType
codec_type	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVMediaType codec_type;$/;"	m	struct:AVCodecParameters	typeref:enum:AVMediaType
codec_whitelist	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *codec_whitelist;$/;"	m	struct:AVCodecContext	typeref:typename:char *
codec_whitelist	lib/ffmpeg/include/libavformat/avformat.h	/^    char *codec_whitelist;$/;"	m	struct:AVFormatContext	typeref:typename:char *
codecpar	lib/ffmpeg/include/libavformat/avformat.h	/^    AVCodecParameters *codecpar;$/;"	m	struct:AVStream	typeref:typename:AVCodecParameters *
coded_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    attribute_deprecated AVFrame *coded_frame;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated AVFrame *
coded_height	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int coded_height;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
coded_height	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int coded_width, coded_height;$/;"	m	struct:AVCodecContext	typeref:typename:int
coded_picture_number	lib/ffmpeg/include/libavutil/frame.h	/^    int coded_picture_number;$/;"	m	struct:AVFrame	typeref:typename:int
coded_side_data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVPacketSideData *coded_side_data;$/;"	m	struct:AVCodecContext	typeref:typename:AVPacketSideData *
coded_width	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int coded_width, coded_height;$/;"	m	struct:AVCodecContext	typeref:typename:int
coded_width	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int coded_width;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
coder_type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int coder_type;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
coding_unit_size	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    unsigned int coding_unit_size;$/;"	m	struct:CIDEntry	typeref:typename:unsigned int
coeff	lib/ffmpeg/include/libswscale/swscale.h	/^    double *coeff;              \/\/\/< pointer to the list of coefficients$/;"	m	struct:SwsVector	typeref:typename:double *
coin_cleanup	src/Utils/lodepng.cpp	/^static void coin_cleanup(void *c) {$/;"	f	typeref:typename:void	file:
coin_copy	src/Utils/lodepng.cpp	/^static void coin_copy(Coin *c1, const Coin *c2) {$/;"	f	typeref:typename:void	file:
coin_init	src/Utils/lodepng.cpp	/^static void coin_init(Coin *c) {$/;"	f	typeref:typename:void	file:
col	src/Cheats.cpp	/^	Color col;$/;"	m	struct:DrawLineInfo	typeref:typename:Color	file:
col	src/Features/Hud/Hud.cpp	/^		const char *col = args[2];$/;"	v	typeref:typename:const char *
col	src/Features/Hud/Toasts.cpp	/^		const char *col = args[2];$/;"	v	typeref:typename:const char *
col	src/Features/OverlayRender.cpp	/^	Color col;$/;"	m	struct:OverlayGroup	typeref:typename:Color	file:
col	src/Features/OverlayRender.cpp	/^	Color col;$/;"	m	struct:OverlayText	typeref:typename:Color	file:
col	src/Modules/Tier1.cpp	/^	Color col = Color();$/;"	m	struct:BufferedPart	typeref:typename:Color	file:
color	src/Features/Demo/GhostEntity.cpp	/^	const char *color = args[1];$/;"	v	typeref:typename:const char *
color	src/Features/Demo/GhostEntity.hpp	/^	std::optional<Color> color;$/;"	m	class:GhostEntity	typeref:typename:std::optional<Color>
color	src/Features/Hud/Hud.cpp	/^				Color color = c.color ? *c.color : t.second.defaultColor;$/;"	v	typeref:typename:Color
color	src/Features/Hud/Hud.cpp	/^	std::optional<Color> color;$/;"	m	struct:TextComponent	typeref:typename:std::optional<Color>	file:
color	src/Utils/SDK.hpp	/^	Color color;$/;"	m	struct:LoggingContext	typeref:typename:Color
color	src/Utils/lodepng.hpp	/^	LodePNGColorMode color;      \/*color type and bits, palette and transparency of the PNG file*\/$/;"	m	struct:LodePNGInfo	typeref:typename:LodePNGColorMode
color_convert	src/Utils/lodepng.hpp	/^	unsigned color_convert; \/*whether to convert the PNG to the color type you want. Default: yes*/;"	m	struct:LodePNGDecoderSettings	typeref:typename:unsigned
color_primaries	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVColorPrimaries color_primaries;$/;"	m	struct:AVCodecContext	typeref:enum:AVColorPrimaries
color_primaries	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVColorPrimaries              color_primaries;$/;"	m	struct:AVCodecParameters	typeref:enum:AVColorPrimaries
color_primaries	lib/ffmpeg/include/libavcodec/dirac.h	/^    enum AVColorPrimaries color_primaries;$/;"	m	struct:AVDiracSeqHeader	typeref:enum:AVColorPrimaries
color_primaries	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVColorPrimaries color_primaries;$/;"	m	struct:AVFrame	typeref:enum:AVColorPrimaries
color_profile_cleanup	src/Utils/lodepng.cpp	/^static void color_profile_cleanup(ColorProfile *profile) {$/;"	f	typeref:typename:void	file:
color_profile_init	src/Utils/lodepng.cpp	/^static void color_profile_init(ColorProfile *profile, LodePNGColorMode *mode) {$/;"	f	typeref:typename:void	file:
color_range	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVColorRange color_range;$/;"	m	struct:AVCodecContext	typeref:enum:AVColorRange
color_range	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVColorRange                  color_range;$/;"	m	struct:AVCodecParameters	typeref:enum:AVColorRange
color_range	lib/ffmpeg/include/libavcodec/dirac.h	/^    enum AVColorRange color_range;$/;"	m	struct:AVDiracSeqHeader	typeref:enum:AVColorRange
color_range	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVColorRange color_range;$/;"	m	struct:AVFrame	typeref:enum:AVColorRange
color_saturation_mapping_flag	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t color_saturation_mapping_flag;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint8_t
color_saturation_weight	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational color_saturation_weight;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
color_space	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVColorSpace                  color_space;$/;"	m	struct:AVCodecParameters	typeref:enum:AVColorSpace
color_spec_index	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t color_spec_index;       \/\/\/< index into dirac_color_spec_presets[]$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
color_trc	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVColorTransferCharacteristic color_trc;$/;"	m	struct:AVCodecContext	typeref:enum:AVColorTransferCharacteristic
color_trc	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVColorTransferCharacteristic color_trc;$/;"	m	struct:AVCodecParameters	typeref:enum:AVColorTransferCharacteristic
color_trc	lib/ffmpeg/include/libavcodec/dirac.h	/^    enum AVColorTransferCharacteristic color_trc;$/;"	m	struct:AVDiracSeqHeader	typeref:enum:AVColorTransferCharacteristic
color_trc	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVColorTransferCharacteristic color_trc;$/;"	m	struct:AVFrame	typeref:enum:AVColorTransferCharacteristic
color_tree_add	src/Utils/lodepng.cpp	/^static void color_tree_add(ColorTree *tree, unsigned char r, unsigned char g, unsigned char b, u/;"	f	typeref:typename:void	file:
color_tree_cleanup	src/Utils/lodepng.cpp	/^static void color_tree_cleanup(ColorTree *tree) {$/;"	f	typeref:typename:void	file:
color_tree_get	src/Utils/lodepng.cpp	/^static int color_tree_get(ColorTree *tree, unsigned char r, unsigned char g, unsigned char b, un/;"	f	typeref:typename:int	file:
color_tree_has	src/Utils/lodepng.cpp	/^static int color_tree_has(ColorTree *tree, unsigned char r, unsigned char g, unsigned char b, un/;"	f	typeref:typename:int	file:
color_tree_init	src/Utils/lodepng.cpp	/^static void color_tree_init(ColorTree *tree, int next) {$/;"	f	typeref:typename:void	file:
color_tree_make_next	src/Utils/lodepng.cpp	/^static void color_tree_make_next(ColorTree *tree) {$/;"	f	typeref:typename:void	file:
colored	src/Utils/lodepng.cpp	/^	unsigned char colored; \/*not greyscale*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
colored_done	src/Utils/lodepng.cpp	/^	unsigned char colored_done;$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
colorspace	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVColorSpace colorspace;$/;"	m	struct:AVCodecContext	typeref:enum:AVColorSpace
colorspace	lib/ffmpeg/include/libavcodec/dirac.h	/^    enum AVColorSpace colorspace;$/;"	m	struct:AVDiracSeqHeader	typeref:enum:AVColorSpace
colorspace	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVColorSpace colorspace;$/;"	m	struct:AVFrame	typeref:enum:AVColorSpace
colortype	src/Utils/lodepng.hpp	/^	LodePNGColorType colortype; \/*color type, see PNG standard or documentation further in this he/;"	m	struct:LodePNGColorMode	typeref:typename:LodePNGColorType
cols	src/Utils/Math.hpp	/^	unsigned int cols;$/;"	m	class:Matrix	typeref:typename:unsigned int
command	src/Features/Tas/TasController.hpp	/^	const char *command;$/;"	m	struct:TasControllerButton	typeref:typename:const char *
command	src/Features/WorkshopList.cpp	/^	auto command = std::string("map");$/;"	v	typeref:typename:auto
commandQueue	src/Features/Tas/TasController.hpp	/^	std::vector<std::string> commandQueue;$/;"	m	class:TasController	typeref:typename:std::vector<std::string>
command_number	src/Utils/SDK.hpp	/^	int command_number;     \/\/ 4$/;"	m	struct:CUserCmd	typeref:typename:int
command_queue	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilterCommand *command_queue;$/;"	m	struct:AVFilterContext	typeref:struct:AVFilterCommand *
command_queue	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^    cl_command_queue command_queue;$/;"	m	struct:AVOpenCLDeviceContext	typeref:typename:cl_command_queue
command_queue	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^    cl_command_queue command_queue;$/;"	m	struct:AVOpenCLFramesContext	typeref:typename:cl_command_queue
commands	src/Features/ConfigPlus.cpp	/^	std::queue<std::string> commands;$/;"	m	struct:Seq	typeref:typename:std::queue<std::string>	file:
commands	src/Features/Tas/TasPlayer.hpp	/^	std::vector<std::string> commands;$/;"	m	struct:TasFramebulk	typeref:typename:std::vector<std::string>
comp	lib/ffmpeg/include/libavutil/pixdesc.h	/^    AVComponentDescriptor comp[4];$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:AVComponentDescriptor[4]
compact	src/Features/Hud/Toasts.cpp	/^	bool compact = sar_toast_compact.GetBool();$/;"	v	typeref:typename:bool
completedRuns	src/Features/Stats/StatsCounter.hpp	/^	int completedRuns;$/;"	m	class:StatsCounter	typeref:typename:int
component	src/Features/Hud/Hud.cpp	/^	std::string component = "";$/;"	v	typeref:typename:std::string
component_max	lib/ffmpeg/include/libavutil/opt.h	/^    double component_min, component_max;$/;"	m	struct:AVOptionRange	typeref:typename:double
component_min	lib/ffmpeg/include/libavutil/opt.h	/^    double component_min, component_max;$/;"	m	struct:AVOptionRange	typeref:typename:double
components	src/Features/Hud/Hud.cpp	/^	std::vector<TextComponent> components;$/;"	m	struct:TextLine	typeref:typename:std::vector<TextComponent>	file:
components	src/Features/Hud/Hud.cpp	/^	std::vector<TextComponent> components;$/;"	v	typeref:typename:std::vector<TextComponent>
components	src/Features/Updater.cpp	/^	unsigned components[MAX_VERSION_COMPONENTS];$/;"	m	struct:SarVersion	typeref:typename:unsigned[]	file:
compress	src/Utils/lodepng.cpp	/^	unsigned compress(std::vector<unsigned char> &out, const std::vector<unsigned char> &in, const /;"	f	namespace:lodepng	typeref:typename:unsigned
compress	src/Utils/lodepng.cpp	/^	unsigned compress(std::vector<unsigned char> &out, const unsigned char *in, size_t insize, cons/;"	f	namespace:lodepng	typeref:typename:unsigned
compression_level	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int compression_level;$/;"	m	struct:AVCodecContext	typeref:typename:int
compression_method	src/Utils/lodepng.hpp	/^	unsigned compression_method; \/*compression method of the original file. Always 0.*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
conCol	src/Features/Hud/Toasts.cpp	/^		Color conCol{info.r, info.g, info.b, 255};$/;"	v	typeref:typename:Color
cond	src/Features/ConfigPlus.cpp	/^	Condition *cond = ParseCondition(LexCondition(cond_str, strlen(cond_str)));$/;"	v	typeref:typename:Condition *
cond_str	src/Features/ConfigPlus.cpp	/^	const char *cond_str = args[1];$/;"	v	typeref:typename:const char *
config_id	lib/ffmpeg/include/libavcodec/vaapi.h	/^    uint32_t config_id;$/;"	m	struct:vaapi_context	typeref:typename:uint32_t
config_id	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    VAConfigID config_id;$/;"	m	struct:AVVAAPIHWConfig	typeref:typename:VAConfigID
console	src/Modules/Console.cpp	/^Console *console;$/;"	v	typeref:typename:Console *
constructor	cvars.js	/^    constructor(name, value, games, description) {$/;"	m	class:Cvar
consume_comment	src/Utils/json11.cpp	/^			bool consume_comment() {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:bool	file:
consume_garbage	src/Utils/json11.cpp	/^			void consume_garbage() {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:void	file:
consume_whitespace	src/Utils/json11.cpp	/^			void consume_whitespace() {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:void	file:
contentheader	lib/curl/include/curl/curl.h	/^  struct curl_slist *contentheader; \/* list of extra headers for this form *\/$/;"	m	struct:curl_httppost	typeref:struct:curl_slist *
contentlen	lib/curl/include/curl/curl.h	/^  curl_off_t contentlen;            \/* alternative length of contents$/;"	m	struct:curl_httppost	typeref:typename:curl_off_t
contents	lib/curl/include/curl/curl.h	/^  char *contents;                   \/* pointer to allocated data contents *\/$/;"	m	struct:curl_httppost	typeref:typename:char *
contents	src/Utils/SDK.hpp	/^	int contents;$/;"	m	struct:CBaseTrace	typeref:typename:int
contentslength	lib/curl/include/curl/curl.h	/^  long contentslength;              \/* length of contents field, see also$/;"	m	struct:curl_httppost	typeref:typename:long
contenttype	lib/curl/include/curl/curl.h	/^  char *contenttype;                \/* Content-Type *\/$/;"	m	struct:curl_httppost	typeref:typename:char *
context	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^    cl_context context;$/;"	m	struct:AVOpenCLDeviceContext	typeref:typename:cl_context
context	src/Modules/VGui.hpp	/^	HudContext context = HudContext();$/;"	m	class:VGui	typeref:typename:HudContext
context_id	lib/ffmpeg/include/libavcodec/vaapi.h	/^    uint32_t context_id;$/;"	m	struct:vaapi_context	typeref:typename:uint32_t
context_model	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int context_model;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
context_mutex	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    HANDLE  context_mutex;$/;"	m	struct:AVD3D11VAContext	typeref:typename:HANDLE
controlType	src/Features/Camera.hpp	/^	CameraControlType controlType = Default;$/;"	m	class:Camera	typeref:typename:CameraControlType
control_message	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*control_message)(struct AVFormatContext *s, int type,$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext * s,int type,void * data,size_t data_size)
control_message_cb	lib/ffmpeg/include/libavformat/avformat.h	/^    av_format_control_message control_message_cb;$/;"	m	struct:AVFormatContext	typeref:typename:av_format_control_message
convergence_duration	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t convergence_duration;$/;"	m	struct:AVCodecParserContext	typeref:typename:attribute_deprecated int64_t
convergence_duration	lib/ffmpeg/include/libavcodec/packet.h	/^    int64_t convergence_duration;$/;"	m	struct:AVPacket	typeref:typename:attribute_deprecated int64_t
coop	src/Features/Stats/StatsCounter.hpp	/^	bool coop;$/;"	m	struct:MapStats	typeref:typename:bool
coop	src/Utils/SDK.hpp	/^	char coop;                \/\/ 78$/;"	m	struct:CGlobalVars	typeref:typename:char
coopControlSlot	src/Features/Tas/TasPlayer.hpp	/^	int coopControlSlot;$/;"	m	class:TasPlayer	typeref:typename:int
coopRadialMenuLastPos	src/Modules/EngineDemoRecorder.hpp	/^	char coopRadialMenuLastPos[8];$/;"	m	class:EngineDemoRecorder	typeref:typename:char[8]
copy	src/Interface.hpp	/^	std::unique_ptr<uintptr_t[]> copy;$/;"	m	class:Interface	typeref:typename:std::unique_ptr<uintptr_t[]>
correct_ts_overflow	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int correct_ts_overflow;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
count	lib/SFML/include/SFML/System/Utf.inl	/^std::size_t Utf<16>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	lib/SFML/include/SFML/System/Utf.inl	/^std::size_t Utf<32>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	lib/SFML/include/SFML/System/Utf.inl	/^std::size_t Utf<8>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	src/Features/Hud/LPHud.cpp	/^	int count;$/;"	m	struct:LPHudCountHistoryInfo	typeref:typename:int	file:
count	src/Features/Tas/TasParser.cpp	/^	unsigned count;$/;"	m	struct:LoopInfo	typeref:typename:unsigned	file:
countZeros	src/Utils/lodepng.cpp	/^static unsigned countZeros(const unsigned char *data, size_t size, size_t pos) {$/;"	f	typeref:typename:unsigned	file:
countdownEnd	src/Features/Demo/NetworkGhostPlayer.cpp	/^	std::optional<std::chrono::time_point<std::chrono::steady_clock>> countdownEnd;$/;"	m	class:SyncUi	typeref:typename:std::optional<std::chrono::time_point<std::chrono::steady_clock>>	file:
countdownShow	src/Features/Demo/NetworkGhostPlayer.hpp	/^	bool countdownShow;$/;"	m	class:NetworkManager	typeref:typename:bool
countdownStep	src/Features/Demo/NetworkGhostPlayer.hpp	/^	int countdownStep;$/;"	m	class:NetworkManager	typeref:typename:int
counter	src/Features/Demo/DemoGhostPlayer.cpp	/^	int counter = firstDemoId > 1 ? firstDemoId : 2;$/;"	v	typeref:typename:int
counter	src/Features/GroundFramesCounter.hpp	/^	int counter[2] = {0};$/;"	m	class:GroundFramesCounter	typeref:typename:int[2]
counter	src/Modules/EngineDemoPlayer.cpp	/^	int counter = 2;$/;"	v	typeref:typename:int
cplane_t	src/Utils/SDK.hpp	/^struct cplane_t {$/;"	s
cps	src/Features/Timer/Timer.cpp	/^	auto cps = timer->cps->items.size();$/;"	v	typeref:typename:auto
cps	src/Features/Timer/Timer.hpp	/^	TimerCheckPoints *cps;$/;"	m	class:Timer	typeref:typename:TimerCheckPoints *
crc32	src/Checksum.cpp	/^static uint32_t crc32(const char *buf, size_t len) {$/;"	f	typeref:typename:uint32_t	file:
crcTable	src/Checksum.cpp	/^static const uint32_t crcTable[256] = {$/;"	v	typeref:typename:const uint32_t[256]	file:
createMeshInternal	src/Features/OverlayRender.cpp	/^bool OverlayRender::createMeshInternal(void *collision, Vector **vertsOut, size_t *nvertsOut) {$/;"	f	class:OverlayRender	typeref:typename:bool
createTempPath	src/Features/Updater.cpp	/^static std::string createTempPath(const char *filename) {$/;"	f	typeref:typename:std::string	file:
create_device_capabilities	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*create_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuer/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext * s,struct AVDeviceCapabilitiesQuery * caps)
create_device_capabilities	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*create_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuer/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext * s,struct AVDeviceCapabilitiesQuery * caps)
create_pnext	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    void *create_pnext;$/;"	m	struct:AVVulkanFramesContext	typeref:typename:void *
created	src/Features/Hud/Toasts.cpp	/^	std::chrono::time_point<std::chrono::steady_clock> created;$/;"	m	struct:Toast	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>	file:
creationStage	src/Features/Routing/Ruler.hpp	/^	int creationStage;$/;"	m	class:RulerManager	typeref:typename:int
creatorRuler	src/Features/Routing/Ruler.hpp	/^	Ruler creatorRuler;$/;"	m	class:RulerManager	typeref:typename:Ruler
creatorTracePoint	src/Features/Routing/Ruler.hpp	/^	Vector creatorTracePoint;$/;"	m	class:RulerManager	typeref:typename:Vector
crop_bottom	lib/ffmpeg/include/libavutil/frame.h	/^    size_t crop_bottom;$/;"	m	struct:AVFrame	typeref:typename:size_t
crop_left	lib/ffmpeg/include/libavutil/frame.h	/^    size_t crop_left;$/;"	m	struct:AVFrame	typeref:typename:size_t
crop_right	lib/ffmpeg/include/libavutil/frame.h	/^    size_t crop_right;$/;"	m	struct:AVFrame	typeref:typename:size_t
crop_top	lib/ffmpeg/include/libavutil/frame.h	/^    size_t crop_top;$/;"	m	struct:AVFrame	typeref:typename:size_t
crosshair	src/Features/Hud/Crosshair.cpp	/^Crosshair crosshair;$/;"	v	typeref:typename:Crosshair
crosshairTextureID	src/Features/Hud/Crosshair.hpp	/^	int crosshairTextureID;$/;"	m	class:Crosshair	typeref:typename:int
crosshairVariable	src/Modules/Client.cpp	/^Variable crosshairVariable;$/;"	v	typeref:typename:Variable
crosshair_value	src/Features/Demo/GhostEntity.cpp	/^static int crosshair_value;$/;"	v	typeref:typename:int	file:
crouched	src/Features/PlayerTrace.cpp	/^		auto crouched = trace->crouched[0][i];$/;"	v	typeref:typename:auto
crouched	src/Features/PlayerTrace.hpp	/^	std::vector<bool> crouched[2];$/;"	m	struct:Trace	typeref:typename:std::vector<bool>[2]
crypt_byte_block	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t crypt_byte_block;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint32_t
csurface_t	src/Utils/SDK.hpp	/^struct csurface_t {$/;"	s
ctx_flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int ctx_flags;$/;"	m	struct:AVFormatContext	typeref:typename:int
cuda_ctx	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^    CUcontext cuda_ctx;$/;"	m	struct:AVCUDADeviceContext	typeref:typename:CUcontext
curColor	src/Features/Hud/Hud.cpp	/^	std::optional<Color> curColor;$/;"	v	typeref:typename:std::optional<Color>
curFrame	src/Features/Camera.cpp	/^		int curFrame = engine->demoplayer->GetTick();$/;"	v	typeref:typename:int
curVel	src/Features/Stats/Stats.cpp	/^		auto curVel = server->GetLocalVelocity(player);$/;"	v	typeref:typename:auto
cur_dts	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t cur_dts;$/;"	m	struct:AVStream	typeref:typename:int64_t
cur_frame_dts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t cur_frame_dts[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t[]
cur_frame_end	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t cur_frame_end[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t[]
cur_frame_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t cur_frame_offset[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t[]
cur_frame_pos	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t cur_frame_pos[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t[]
cur_frame_pts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t cur_frame_pts[AV_PARSER_PTS_NB];$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t[]
cur_frame_start_index	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int cur_frame_start_index;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
cur_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t cur_offset; \/* current offset$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
cur_spec_id	src/Features/Demo/GhostEntity.cpp	/^	int cur_spec_id = GhostEntity::followId;$/;"	v	typeref:typename:int
curlPrepare	src/Features/Updater.cpp	/^static bool curlPrepare(const char *url, int timeout) {$/;"	f	typeref:typename:bool	file:
curl_TimeCond	lib/curl/include/curl/curl.h	/^} curl_TimeCond;$/;"	t	typeref:enum:__anon5737ba341603
curl_blob	lib/curl/include/curl/easy.h	/^struct curl_blob {$/;"	s
curl_calloc_callback	lib/curl/include/curl/curl.h	/^typedef void *(*curl_calloc_callback)(size_t nmemb, size_t size);$/;"	t	typeref:typename:void * (*)(size_t nmemb,size_t size)
curl_certinfo	lib/curl/include/curl/curl.h	/^struct curl_certinfo {$/;"	s
curl_chunk_bgn_callback	lib/curl/include/curl/curl.h	/^typedef long (*curl_chunk_bgn_callback)(const void *transfer_info,$/;"	t	typeref:typename:long (*)(const void * transfer_info,void * ptr,int remains)
curl_chunk_end_callback	lib/curl/include/curl/curl.h	/^typedef long (*curl_chunk_end_callback)(void *ptr);$/;"	t	typeref:typename:long (*)(void * ptr)
curl_closepolicy	lib/curl/include/curl/curl.h	/^} curl_closepolicy;$/;"	t	typeref:enum:__anon5737ba341b03
curl_closesocket_callback	lib/curl/include/curl/curl.h	/^(*curl_closesocket_callback)(void *clientp, curl_socket_t item);$/;"	t	typeref:typename:int (*)(void * clientp,curl_socket_t item)
curl_conv_callback	lib/curl/include/curl/curl.h	/^typedef CURLcode (*curl_conv_callback)(char *buffer, size_t length);$/;"	t	typeref:typename:CURLcode (*)(char * buffer,size_t length)
curl_debug_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_debug_callback)$/;"	t	typeref:typename:int (*)(CURL * handle,curl_infotype type,char * data,size_t size,void * userptr)
curl_easy_getinfo	lib/curl/include/curl/curl.h	/^#define curl_easy_getinfo(/;"	d
curl_easy_getinfo	lib/curl/include/curl/typecheck-gcc.h	/^#define curl_easy_getinfo(/;"	d
curl_easy_setopt	lib/curl/include/curl/curl.h	/^#define curl_easy_setopt(/;"	d
curl_easy_setopt	lib/curl/include/curl/typecheck-gcc.h	/^#define curl_easy_setopt(/;"	d
curl_easyoption	lib/curl/include/curl/options.h	/^struct curl_easyoption {$/;"	s
curl_easytype	lib/curl/include/curl/options.h	/^} curl_easytype;$/;"	t	typeref:enum:__anonf610938a0103
curl_fileinfo	lib/curl/include/curl/curl.h	/^struct curl_fileinfo {$/;"	s
curl_fnmatch_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_fnmatch_callback)(void *ptr,$/;"	t	typeref:typename:int (*)(void * ptr,const char * pattern,const char * string)
curl_formget_callback	lib/curl/include/curl/curl.h	/^typedef size_t (*curl_formget_callback)(void *arg, const char *buf,$/;"	t	typeref:typename:size_t (*)(void * arg,const char * buf,size_t len)
curl_forms	lib/curl/include/curl/curl.h	/^struct curl_forms {$/;"	s
curl_free_callback	lib/curl/include/curl/curl.h	/^typedef void (*curl_free_callback)(void *ptr);$/;"	t	typeref:typename:void (*)(void * ptr)
curl_ftpauth	lib/curl/include/curl/curl.h	/^} curl_ftpauth;$/;"	t	typeref:enum:__anon5737ba340d03
curl_ftpccc	lib/curl/include/curl/curl.h	/^} curl_ftpccc;$/;"	t	typeref:enum:__anon5737ba340c03
curl_ftpcreatedir	lib/curl/include/curl/curl.h	/^} curl_ftpcreatedir;$/;"	t	typeref:enum:__anon5737ba340e03
curl_ftpmethod	lib/curl/include/curl/curl.h	/^} curl_ftpmethod;$/;"	t	typeref:enum:__anon5737ba340f03
curl_ftpssl	lib/curl/include/curl/curl.h	/^#define curl_ftpssl /;"	d
curl_hstsentry	lib/curl/include/curl/curl.h	/^struct curl_hstsentry {$/;"	s
curl_hstsread_callback	lib/curl/include/curl/curl.h	/^typedef CURLSTScode (*curl_hstsread_callback)(CURL *easy,$/;"	t	typeref:typename:CURLSTScode (*)(CURL * easy,struct curl_hstsentry * e,void * userp)
curl_hstswrite_callback	lib/curl/include/curl/curl.h	/^typedef CURLSTScode (*curl_hstswrite_callback)(CURL *easy,$/;"	t	typeref:typename:CURLSTScode (*)(CURL * easy,struct curl_hstsentry * e,struct curl_index * i,void * userp)
curl_httppost	lib/curl/include/curl/curl.h	/^struct curl_httppost {$/;"	s
curl_index	lib/curl/include/curl/curl.h	/^struct curl_index {$/;"	s
curl_infotype	lib/curl/include/curl/curl.h	/^} curl_infotype;$/;"	t	typeref:enum:__anon5737ba340703
curl_ioctl_callback	lib/curl/include/curl/curl.h	/^typedef curlioerr (*curl_ioctl_callback)(CURL *handle,$/;"	t	typeref:typename:curlioerr (*)(CURL * handle,int cmd,void * clientp)
curl_khkey	lib/curl/include/curl/curl.h	/^struct curl_khkey {$/;"	s
curl_khmatch	lib/curl/include/curl/curl.h	/^enum curl_khmatch {$/;"	g
curl_khstat	lib/curl/include/curl/curl.h	/^enum curl_khstat {$/;"	g
curl_khtype	lib/curl/include/curl/curl.h	/^enum curl_khtype {$/;"	g
curl_lock_access	lib/curl/include/curl/curl.h	/^} curl_lock_access;$/;"	t	typeref:enum:__anon5737ba341d03
curl_lock_data	lib/curl/include/curl/curl.h	/^} curl_lock_data;$/;"	t	typeref:enum:__anon5737ba341c03
curl_lock_function	lib/curl/include/curl/curl.h	/^typedef void (*curl_lock_function)(CURL *handle,$/;"	t	typeref:typename:void (*)(CURL * handle,curl_lock_data data,curl_lock_access locktype,void * userptr)
curl_malloc_callback	lib/curl/include/curl/curl.h	/^typedef void *(*curl_malloc_callback)(size_t size);$/;"	t	typeref:typename:void * (*)(size_t size)
curl_mime	lib/curl/include/curl/curl.h	/^typedef struct curl_mime      curl_mime;      \/* Mime context. *\/$/;"	t	typeref:struct:curl_mime
curl_mimepart	lib/curl/include/curl/curl.h	/^typedef struct curl_mimepart  curl_mimepart;  \/* Mime part context. *\/$/;"	t	typeref:struct:curl_mimepart
curl_multi_setopt	lib/curl/include/curl/curl.h	/^#define curl_multi_setopt(/;"	d
curl_multi_setopt	lib/curl/include/curl/typecheck-gcc.h	/^#define curl_multi_setopt(/;"	d
curl_multi_socket	lib/curl/include/curl/multi.h	/^#define curl_multi_socket(/;"	d
curl_multi_timer_callback	lib/curl/include/curl/multi.h	/^typedef int (*curl_multi_timer_callback)(CURLM *multi,    \/* multi handle *\/$/;"	t	typeref:typename:int (*)(CURLM * multi,long timeout_ms,void * userp)
curl_off_t	lib/curl/include/curl/system.h	/^  typedef CURL_TYPEOF_CURL_OFF_T curl_off_t;$/;"	t	typeref:typename:CURL_TYPEOF_CURL_OFF_T
curl_opensocket_callback	lib/curl/include/curl/curl.h	/^(*curl_opensocket_callback)(void *clientp,$/;"	t	typeref:typename:curl_socket_t (*)(void * clientp,curlsocktype purpose,struct curl_sockaddr * address)
curl_progress_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_progress_callback)(void *clientp,$/;"	t	typeref:typename:int (*)(void * clientp,double dltotal,double dlnow,double ultotal,double ulnow)
curl_proxytype	lib/curl/include/curl/curl.h	/^} curl_proxytype;  \/* this enum was added in 7.10 *\/$/;"	t	typeref:enum:__anon5737ba340a03
curl_push_callback	lib/curl/include/curl/multi.h	/^typedef int (*curl_push_callback)(CURL *parent,$/;"	t	typeref:typename:int (*)(CURL * parent,CURL * easy,size_t num_headers,struct curl_pushheaders * headers,void * userp)
curl_read_callback	lib/curl/include/curl/curl.h	/^typedef size_t (*curl_read_callback)(char *buffer,$/;"	t	typeref:typename:size_t (*)(char * buffer,size_t size,size_t nitems,void * instream)
curl_realloc_callback	lib/curl/include/curl/curl.h	/^typedef void *(*curl_realloc_callback)(void *ptr, size_t size);$/;"	t	typeref:typename:void * (*)(void * ptr,size_t size)
curl_resolver_start_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_resolver_start_callback)(void *resolver_state,$/;"	t	typeref:typename:int (*)(void * resolver_state,void * reserved,void * userdata)
curl_seek_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_seek_callback)(void *instream,$/;"	t	typeref:typename:int (*)(void * instream,curl_off_t offset,int origin)
curl_share_setopt	lib/curl/include/curl/curl.h	/^#define curl_share_setopt(/;"	d
curl_share_setopt	lib/curl/include/curl/typecheck-gcc.h	/^#define curl_share_setopt(/;"	d
curl_slist	lib/curl/include/curl/curl.h	/^struct curl_slist {$/;"	s
curl_sockaddr	lib/curl/include/curl/curl.h	/^struct curl_sockaddr {$/;"	s
curl_socket_callback	lib/curl/include/curl/multi.h	/^typedef int (*curl_socket_callback)(CURL *easy,      \/* easy handle *\/$/;"	t	typeref:typename:int (*)(CURL * easy,curl_socket_t s,int what,void * userp,void * socketp)
curl_socket_t	lib/curl/include/curl/curl.h	/^typedef SOCKET curl_socket_t;$/;"	t	typeref:typename:SOCKET
curl_socket_t	lib/curl/include/curl/curl.h	/^typedef int curl_socket_t;$/;"	t	typeref:typename:int
curl_socket_typedef	lib/curl/include/curl/curl.h	/^#define curl_socket_typedef$/;"	d
curl_socklen_t	lib/curl/include/curl/system.h	/^  typedef CURL_TYPEOF_CURL_SOCKLEN_T curl_socklen_t;$/;"	t	typeref:typename:CURL_TYPEOF_CURL_SOCKLEN_T
curl_sockopt_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_sockopt_callback)(void *clientp,$/;"	t	typeref:typename:int (*)(void * clientp,curl_socket_t curlfd,curlsocktype purpose)
curl_sshkeycallback	lib/curl/include/curl/curl.h	/^  (*curl_sshkeycallback) (CURL *easy,     \/* easy handle *\/$/;"	t	typeref:typename:int (*)(CURL * easy,const struct curl_khkey * knownkey,const struct curl_khkey * foundkey,enum curl_khmatch,void * clientp)
curl_ssl_backend	lib/curl/include/curl/curl.h	/^struct curl_ssl_backend {$/;"	s
curl_ssl_backend	lib/curl/include/curl/curl.h	/^typedef struct curl_ssl_backend curl_ssl_backend;$/;"	t	typeref:struct:curl_ssl_backend
curl_ssl_ctx_callback	lib/curl/include/curl/curl.h	/^typedef CURLcode (*curl_ssl_ctx_callback)(CURL *curl,    \/* easy handle *\/$/;"	t	typeref:typename:CURLcode (*)(CURL * curl,void * ssl_ctx,void * userptr)
curl_sslbackend	lib/curl/include/curl/curl.h	/^} curl_sslbackend;$/;"	t	typeref:enum:__anon5737ba340103
curl_strdup_callback	lib/curl/include/curl/curl.h	/^typedef char *(*curl_strdup_callback)(const char *str);$/;"	t	typeref:typename:char * (*)(const char * str)
curl_tlssessioninfo	lib/curl/include/curl/curl.h	/^struct curl_tlssessioninfo {$/;"	s
curl_trailer_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_trailer_callback)(struct curl_slist **list,$/;"	t	typeref:typename:int (*)(struct curl_slist ** list,void * userdata)
curl_unlock_function	lib/curl/include/curl/curl.h	/^typedef void (*curl_unlock_function)(CURL *handle,$/;"	t	typeref:typename:void (*)(CURL * handle,curl_lock_data data,void * userptr)
curl_usessl	lib/curl/include/curl/curl.h	/^} curl_usessl;$/;"	t	typeref:enum:__anon5737ba340b03
curl_version_info_data	lib/curl/include/curl/curl.h	/^struct curl_version_info_data {$/;"	s
curl_version_info_data	lib/curl/include/curl/curl.h	/^typedef struct curl_version_info_data curl_version_info_data;$/;"	t	typeref:struct:curl_version_info_data
curl_waitfd	lib/curl/include/curl/multi.h	/^struct curl_waitfd {$/;"	s
curl_write_callback	lib/curl/include/curl/curl.h	/^typedef size_t (*curl_write_callback)(char *buffer,$/;"	t	typeref:typename:size_t (*)(char * buffer,size_t size,size_t nitems,void * outstream)
curl_xferinfo_callback	lib/curl/include/curl/curl.h	/^typedef int (*curl_xferinfo_callback)(void *clientp,$/;"	t	typeref:typename:int (*)(void * clientp,curl_off_t dltotal,curl_off_t dlnow,curl_off_t ultotal,curl_off_t ulnow)
curlcheck_FILE	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_FILE(/;"	d
curlcheck_NULL	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_NULL(/;"	d
curlcheck_any_ptr	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_any_ptr(/;"	d
curlcheck_arr	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_arr(/;"	d
curlcheck_cb_compatible	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_cb_compatible(/;"	d
curlcheck_cb_data	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_cb_data(/;"	d
curlcheck_cb_data_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_cb_data_option(/;"	d
curlcheck_certinfo_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_certinfo_info(/;"	d
curlcheck_conv_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_conv_cb(/;"	d
curlcheck_conv_cb_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_conv_cb_option(/;"	d
curlcheck_debug_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_debug_cb(/;"	d
curlcheck_double_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_double_info(/;"	d
curlcheck_error_buffer	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_error_buffer(/;"	d
curlcheck_ioctl_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_ioctl_cb(/;"	d
curlcheck_long	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_long(/;"	d
curlcheck_long_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_long_info(/;"	d
curlcheck_long_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_long_option(/;"	d
curlcheck_off_t	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_off_t(/;"	d
curlcheck_off_t_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_off_t_info(/;"	d
curlcheck_off_t_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_off_t_option(/;"	d
curlcheck_opensocket_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_opensocket_cb(/;"	d
curlcheck_postfields	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_postfields(/;"	d
curlcheck_postfields_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_postfields_option(/;"	d
curlcheck_progress_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_progress_cb(/;"	d
curlcheck_ptr	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_ptr(/;"	d
curlcheck_read_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_read_cb(/;"	d
curlcheck_resolver_start_callback	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_resolver_start_callback(/;"	d
curlcheck_seek_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_seek_cb(/;"	d
curlcheck_slist_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_slist_info(/;"	d
curlcheck_slist_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_slist_option(/;"	d
curlcheck_socket_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_socket_info(/;"	d
curlcheck_sockopt_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_sockopt_cb(/;"	d
curlcheck_ssl_ctx_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_ssl_ctx_cb(/;"	d
curlcheck_string	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_string(/;"	d
curlcheck_string_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_string_info(/;"	d
curlcheck_string_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_string_option(/;"	d
curlcheck_tlssessioninfo_info	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_tlssessioninfo_info(/;"	d
curlcheck_write_cb	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_write_cb(/;"	d
curlcheck_write_cb_option	lib/curl/include/curl/typecheck-gcc.h	/^#define curlcheck_write_cb_option(/;"	d
curlfiletype	lib/curl/include/curl/curl.h	/^} curlfiletype;$/;"	t	typeref:enum:__anon5737ba340203
curliocmd	lib/curl/include/curl/curl.h	/^} curliocmd;$/;"	t	typeref:enum:__anon5737ba340603
curlioerr	lib/curl/include/curl/curl.h	/^} curlioerr;$/;"	t	typeref:enum:__anon5737ba340503
curlsocktype	lib/curl/include/curl/curl.h	/^} curlsocktype;$/;"	t	typeref:enum:__anon5737ba340403
currentDatas	src/Features/Demo/DemoGhostEntity.hpp	/^	std::map<int, DataGhost> currentDatas;  \/\/Pos and ang of ghost$/;"	m	class:DemoGhostEntity	typeref:typename:std::map<int,DataGhost>
currentDemo	src/Features/Demo/DemoGhostEntity.hpp	/^	unsigned int currentDemo;$/;"	m	class:DemoGhostEntity	typeref:typename:unsigned int
currentDemo	src/Modules/EngineDemoRecorder.hpp	/^	std::string currentDemo = std::string();$/;"	m	class:EngineDemoRecorder	typeref:typename:std::string
currentDemoID	src/Modules/EngineDemoPlayer.hpp	/^	int currentDemoID = false;$/;"	m	class:EngineDemoPlayer	typeref:typename:int
currentFrame	src/Features/Session.hpp	/^	unsigned currentFrame;$/;"	m	class:Session	typeref:typename:unsigned
currentMap	src/Features/Demo/DemoGhostEntity.hpp	/^	std::string currentMap;$/;"	m	class:DemoGhostEntity	typeref:typename:std::string
currentMap	src/Features/Demo/GhostEntity.hpp	/^	std::string currentMap;$/;"	m	class:GhostEntity	typeref:typename:std::string
currentSplit	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::vector<Segment> currentSplit;$/;"	m	struct:__anon77a6dab70108	typeref:typename:std::vector<Segment>	file:
currentState	src/Features/Camera.hpp	/^	CameraState currentState;$/;"	m	class:Camera	typeref:typename:CameraState
currentTick	src/Features/Demo/DemoGhostPlayer.hpp	/^	int currentTick;$/;"	m	class:DemoGhostPlayer	typeref:typename:int
currentTick	src/Features/Tas/TasPlayer.hpp	/^	int currentTick = 0;  \/\/ tick position of script player, relative to its starting point.$/;"	m	class:TasPlayer	typeref:typename:int
current_pts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int64_t current_pts;$/;"	m	struct:AVFilterLink	typeref:typename:int64_t
current_pts_us	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int64_t current_pts_us;$/;"	m	struct:AVFilterLink	typeref:typename:int64_t
current_type	lib/ffmpeg/include/libavformat/avio.h	/^    enum AVIODataMarkerType current_type;$/;"	m	struct:AVIOContext	typeref:enum:AVIODataMarkerType
curtime	src/Utils/SDK.hpp	/^	float curtime;                  \/\/ 12$/;"	m	struct:CGlobalVarsBase	typeref:typename:float
customDataReady	src/Modules/EngineDemoRecorder.hpp	/^	bool customDataReady = false;$/;"	m	class:EngineDemoRecorder	typeref:typename:bool
customDatas	src/Features/Demo/DemoGhostEntity.hpp	/^	CustomDatas customDatas;$/;"	m	class:DemoGhostEntity	typeref:typename:CustomDatas
custom_decoder	src/Utils/lodepng.hpp	/^	unsigned custom_decoder; \/*use custom decoder if LODEPNG_CUSTOM_ZLIB_DECODER and LODEPNG_COMPI/;"	m	struct:LodePNGDecompressSettings	typeref:typename:unsigned
custom_encoder	src/Utils/lodepng.hpp	/^	unsigned custom_encoder; \/*use custom encoder if LODEPNG_CUSTOM_ZLIB_DECODER and LODEPNG_COMPI/;"	m	struct:LodePNGCompressSettings	typeref:typename:unsigned
cutoff	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int cutoff;$/;"	m	struct:AVCodecContext	typeref:typename:int
cv_pix_fmt_type	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^    OSType cv_pix_fmt_type;$/;"	m	struct:AVVideotoolboxContext	typeref:typename:OSType
cvars	Makefile	/^cvars: doc\/cvars.md$/;"	t
cvars	src/Features/Cvars.cpp	/^Cvars *cvars;$/;"	v	typeref:typename:Cvars *
cycle	src/Features/Speedrun/Rules.hpp	/^	std::optional<std::pair<int, int>> cycle;$/;"	m	struct:SpeedrunRule	typeref:typename:std::optional<std::pair<int,int>>
dark_masking	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float dark_masking;$/;"	m	struct:AVCodecContext	typeref:typename:float
data	lib/curl/include/curl/curl.h	/^  char *data;$/;"	m	struct:curl_slist	typeref:typename:char *
data	lib/curl/include/curl/easy.h	/^  void *data;$/;"	m	struct:curl_blob	typeref:typename:void *
data	lib/curl/include/curl/multi.h	/^  } data;$/;"	m	struct:CURLMsg	typeref:union:CURLMsg::__anon3f8e2429030a
data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint8_t *data[4];$/;"	m	struct:AVSubtitleRect	typeref:typename:uint8_t * [4]
data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint8_t *data[AV_NUM_DATA_POINTERS];    \/\/\/< pointers to the image data planes$/;"	m	struct:AVPicture	typeref:typename:attribute_deprecated uint8_t * []
data	lib/ffmpeg/include/libavcodec/packet.h	/^    uint8_t *data;$/;"	m	struct:AVPacket	typeref:typename:uint8_t *
data	lib/ffmpeg/include/libavcodec/packet.h	/^    uint8_t *data;$/;"	m	struct:AVPacketSideData	typeref:typename:uint8_t *
data	lib/ffmpeg/include/libavutil/buffer.h	/^    uint8_t *data;$/;"	m	struct:AVBufferRef	typeref:typename:uint8_t *
data	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint8_t* data;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint8_t *
data	lib/ffmpeg/include/libavutil/frame.h	/^    uint8_t *data;$/;"	m	struct:AVFrameSideData	typeref:typename:uint8_t *
data	lib/ffmpeg/include/libavutil/frame.h	/^    uint8_t *data[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVFrame	typeref:typename:uint8_t * []
data	src/Features/ConfigPlus.cpp	/^			char *data = new char[size];$/;"	v	typeref:typename:char *
data	src/Features/Demo/GhostEntity.hpp	/^	DataGhost data;$/;"	m	class:GhostEntity	typeref:typename:DataGhost
data	src/Features/Hud/Toasts.cpp	/^		char *data = (char *)malloc(len);$/;"	v	typeref:typename:char *
data	src/Features/Hud/VelocityGraph.cpp	/^static std::deque<VelocityData> data[2];$/;"	v	typeref:typename:std::deque<VelocityData>[2]	file:
data	src/Features/Routing/EntityInspector.cpp	/^	auto data = inspector->GetData();$/;"	v	typeref:typename:auto
data	src/Features/Routing/EntityInspector.hpp	/^	std::vector<InspectionItem> data;$/;"	m	class:EntityInspector	typeref:typename:std::vector<InspectionItem>
data	src/Features/SegmentedTools.cpp	/^		char *data = new char[size];$/;"	v	typeref:typename:char *
data	src/Features/Stitcher.cpp	/^	std::vector<uint8_t> data;$/;"	m	struct:StitchRegion	typeref:typename:std::vector<uint8_t>	file:
data	src/Utils/lodepng.cpp	/^	unsigned *data;$/;"	m	struct:uivector	typeref:typename:unsigned *	file:
data	src/Utils/lodepng.cpp	/^	unsigned char *data;$/;"	m	struct:ucvector	typeref:typename:unsigned char *	file:
dataClassName	src/Utils/SDK.hpp	/^	char const *dataClassName;    \/\/ 8$/;"	m	struct:datamap_t	typeref:typename:char const *
dataDesc	src/Utils/SDK.hpp	/^	typedescription_t *dataDesc;  \/\/ 0$/;"	m	struct:datamap_t	typeref:typename:typedescription_t *
dataMapDumper	src/Features/DataMapDumper.cpp	/^DataMapDumper *dataMapDumper;$/;"	v	typeref:typename:DataMapDumper *
dataNumFields	src/Utils/SDK.hpp	/^	int dataNumFields;            \/\/ 4$/;"	m	struct:datamap_t	typeref:typename:int
data_blocks	lib/ffmpeg/include/libavcodec/xvmc.h	/^    short*          data_blocks;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:short *
data_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    AVCodec *data_codec;$/;"	m	struct:AVFormatContext	typeref:typename:AVCodec *
data_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID data_codec; \/**< default data codec *\/$/;"	m	struct:AVOutputFormat	typeref:enum:AVCodecID
data_codec_id	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID data_codec_id;$/;"	m	struct:AVFormatContext	typeref:enum:AVCodecID
data_size	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t data_size;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint32_t
datamap_t	src/Utils/SDK.hpp	/^struct datamap_t {$/;"	s
datasByLevel	src/Features/Demo/DemoGhostEntity.hpp	/^	std::vector<DemoDatas> datasByLevel;$/;"	m	class:DemoGhostEntity	typeref:typename:std::vector<DemoDatas>
day	src/Utils/lodepng.hpp	/^	unsigned day;    \/*1-31*\/$/;"	m	struct:LodePNGTime	typeref:typename:unsigned
dbl	lib/ffmpeg/include/libavutil/opt.h	/^        double dbl;$/;"	m	union:AVOption::__anon6e396c26010a	typeref:typename:double
dc_bits	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *dc_codes, *dc_bits;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
dc_codes	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *dc_codes, *dc_bits;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
dct_algo	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int dct_algo;$/;"	m	struct:AVCodecContext	typeref:typename:int
dct_algo	lib/ffmpeg/include/libavcodec/avdct.h	/^    int dct_algo;$/;"	m	struct:AVDCT	typeref:typename:int
deathmatch	src/Utils/SDK.hpp	/^	char deathmatch;          \/\/ 77$/;"	m	struct:CGlobalVars	typeref:typename:char
debug	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int debug;$/;"	m	struct:AVCodecContext	typeref:typename:int
debug	lib/ffmpeg/include/libavformat/avformat.h	/^    int debug;$/;"	m	struct:AVFormatContext	typeref:typename:int
debug_mv	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int debug_mv;$/;"	m	struct:AVCodecContext	typeref:typename:int
debugoverlay	src/Modules/Engine.hpp	/^	Interface *debugoverlay = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
decelTool	src/Features/Tas/TasTools/DecelTool.cpp	/^DecelTool decelTool[2] = {{0}, {1}};$/;"	v	typeref:typename:DecelTool[2]
decode	lib/SFML/include/SFML/System/Utf.inl	/^In Utf<16>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decode	lib/SFML/include/SFML/System/Utf.inl	/^In Utf<32>::decode(In begin, In \/*end*\/, Uint32& output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:In
decode	lib/SFML/include/SFML/System/Utf.inl	/^In Utf<8>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decode	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*decode)(struct AVCodecContext *, void *outdata, int *outdata_size, struct AVPacket *av/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext *,void * outdata,int * outdata_size,struct AVPacket * avpkt)
decode	src/Utils/lodepng.cpp	/^	unsigned decode(std::vector<unsigned char> &out, unsigned &w, unsigned &h, State &state, const /;"	f	namespace:lodepng	typeref:typename:unsigned
decode	src/Utils/lodepng.cpp	/^	unsigned decode(std::vector<unsigned char> &out, unsigned &w, unsigned &h, const std::string &f/;"	f	namespace:lodepng	typeref:typename:unsigned
decode	src/Utils/lodepng.cpp	/^	unsigned decode(std::vector<unsigned char> &out, unsigned &w, unsigned &h, const std::vector<un/;"	f	namespace:lodepng	typeref:typename:unsigned
decode	src/Utils/lodepng.cpp	/^	unsigned decode(std::vector<unsigned char> &out, unsigned &w, unsigned &h, const unsigned char /;"	f	namespace:lodepng	typeref:typename:unsigned
decodeAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Uint32 Utf<32>::decodeAnsi(In input, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Uint32
decodeGeneric	src/Utils/lodepng.cpp	/^static void decodeGeneric(unsigned char **out, unsigned *w, unsigned *h, LodePNGState *state, co/;"	f	typeref:typename:void	file:
decodeWide	lib/SFML/include/SFML/System/Utf.inl	/^Uint32 Utf<32>::decodeWide(In input)$/;"	f	class:Utf	typeref:typename:Uint32
decode_error_flags	lib/ffmpeg/include/libavutil/frame.h	/^    int decode_error_flags;$/;"	m	struct:AVFrame	typeref:typename:int
decode_mb	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void (*decode_mb)(struct MpegEncContext *s);$/;"	m	struct:AVHWAccel	typeref:typename:void (*)(struct MpegEncContext * s)
decode_params	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*decode_params)(AVCodecContext *avctx, int type, const uint8_t *buf, uint32_t buf_size)/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx,int type,const uint8_t * buf,uint32_t buf_size)
decode_slice	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*decode_slice)(AVCodecContext *avctx, const uint8_t *buf, uint32_t buf_size);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx,const uint8_t * buf,uint32_t buf_size)
decoder	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    ID3D11VideoDecoder *decoder;$/;"	m	struct:AVD3D11VAContext	typeref:typename:ID3D11VideoDecoder *
decoder	lib/ffmpeg/include/libavcodec/dxva2.h	/^    IDirectXVideoDecoder *decoder;$/;"	m	struct:dxva_context	typeref:typename:IDirectXVideoDecoder *
decoder	lib/ffmpeg/include/libavcodec/vdpau.h	/^    VdpDecoder decoder;$/;"	m	struct:AVVDPAUContext	typeref:typename:VdpDecoder
decoder	src/Utils/lodepng.hpp	/^	LodePNGDecoderSettings decoder; \/*the decoding settings*\/$/;"	m	struct:LodePNGState	typeref:typename:LodePNGDecoderSettings
decoder_to_release	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^    IDirectXVideoDecoder *decoder_to_release;$/;"	m	struct:AVDXVA2FramesContext	typeref:typename:IDirectXVideoDecoder *
decompress	src/Utils/lodepng.cpp	/^	unsigned decompress(std::vector<unsigned char> &out, const std::vector<unsigned char> &in, cons/;"	f	namespace:lodepng	typeref:typename:unsigned
decompress	src/Utils/lodepng.cpp	/^	unsigned decompress(std::vector<unsigned char> &out, const unsigned char *in, size_t insize, co/;"	f	namespace:lodepng	typeref:typename:unsigned
defaultColor	src/Features/Hud/Hud.cpp	/^	Color defaultColor;$/;"	m	struct:TextLine	typeref:typename:Color	file:
defaultFontID	src/Modules/Surface.cpp	/^	int defaultFontID = scheme->GetDefaultFont();$/;"	v	typeref:typename:int
defaultFov	src/Features/FovChanger.hpp	/^	int defaultFov;$/;"	m	class:FovChanger	typeref:typename:int
defaultModelName	src/Features/Demo/GhostEntity.cpp	/^std::string GhostEntity::defaultModelName = "models\/props\/food_can\/food_can_open.mdl";$/;"	m	class:GhostEntity	typeref:typename:std::string
defaultModelName	src/Features/Demo/GhostEntity.hpp	/^	static std::string defaultModelName;$/;"	m	class:GhostEntity	typeref:typename:std::string
default_device	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int default_device;                  \/**< index of default device or -1 if no default *\/$/;"	m	struct:AVDeviceInfoList	typeref:typename:int
default_val	lib/ffmpeg/include/libavutil/opt.h	/^    } default_val;$/;"	m	struct:AVOption	typeref:union:AVOption::__anon6e396c26010a
defaults	lib/ffmpeg/include/libavcodec/codec.h	/^    const AVCodecDefault *defaults;$/;"	m	struct:AVCodec	typeref:typename:const AVCodecDefault *
defaults	src/Features/Speedrun/CategoryCreator.cpp	/^		auto defaults = g_creatorDefaults;$/;"	v	typeref:typename:auto
defaults	src/Features/Speedrun/CategoryCreator.cpp	/^	auto defaults = g_creatorDefaults;$/;"	v	typeref:typename:auto
deflateDynamic	src/Utils/lodepng.cpp	/^static unsigned deflateDynamic(ucvector *out, size_t *bp, Hash *hash, const unsigned char *data,/;"	f	typeref:typename:unsigned	file:
deflateFixed	src/Utils/lodepng.cpp	/^static unsigned deflateFixed(ucvector *out, size_t *bp, Hash *hash, const unsigned char *data, s/;"	f	typeref:typename:unsigned	file:
deflateNoCompression	src/Utils/lodepng.cpp	/^static unsigned deflateNoCompression(ucvector *out, const unsigned char *data, size_t datasize) /;"	f	typeref:typename:unsigned	file:
deinit	lib/ffmpeg/include/libavformat/avformat.h	/^    void (*deinit)(struct AVFormatContext *);$/;"	m	struct:AVOutputFormat	typeref:typename:void (*)(struct AVFormatContext *)
delay	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int delay;$/;"	m	struct:AVCodecContext	typeref:typename:int
delta_qp	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int32_t delta_qp;$/;"	m	struct:AVVideoBlockParams	typeref:typename:int32_t
delta_qp	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int32_t delta_qp[4][2];$/;"	m	struct:AVVideoEncParams	typeref:typename:int32_t[4][2]
demo	src/Features/Demo/DemoGhostEntity.hpp	/^	Demo demo;$/;"	m	struct:DemoDatas	typeref:typename:Demo
demo	src/Features/Demo/DemoParser.cpp	/^		Demo demo;$/;"	v	typeref:typename:Demo
demo	src/Features/Demo/DemoParser.cpp	/^	Demo demo;$/;"	v	typeref:typename:Demo
demo	src/Modules/EngineDemoPlayer.cpp	/^	Demo demo;$/;"	v	typeref:typename:Demo
demoFileStamp	src/Features/Demo/Demo.hpp	/^	char demoFileStamp[8];$/;"	m	class:Demo	typeref:typename:char[8]
demoGhostPlayer	src/Features/Demo/DemoGhostPlayer.cpp	/^DemoGhostPlayer demoGhostPlayer;$/;"	v	typeref:typename:DemoGhostPlayer
demoName	src/Features/Demo/DemoParser.cpp	/^	const char *demoName;$/;"	v	typeref:typename:const char *
demoProtocol	src/Features/Demo/Demo.hpp	/^	int32_t demoProtocol;$/;"	m	class:Demo	typeref:typename:int32_t
demoQueue	src/Modules/EngineDemoPlayer.hpp	/^	std::vector<std::string> demoQueue;$/;"	m	class:EngineDemoPlayer	typeref:typename:std::vector<std::string>
demoQueueSize	src/Modules/EngineDemoPlayer.hpp	/^	int demoQueueSize = false;$/;"	m	class:EngineDemoPlayer	typeref:typename:int
demoSmootherPatch	src/Modules/Engine.hpp	/^	Memory::Patch *demoSmootherPatch = nullptr;$/;"	m	class:Engine	typeref:typename:Memory::Patch *
demoTick	src/Features/Demo/DemoGhostEntity.hpp	/^	int demoTick;$/;"	m	class:DemoGhostEntity	typeref:typename:int
demoplayer	src/Modules/Engine.hpp	/^	EngineDemoPlayer *demoplayer = nullptr;$/;"	m	class:Engine	typeref:typename:EngineDemoPlayer *
demoplayer	src/Offsets.cpp	/^	int demoplayer;$/;"	v	namespace:Offsets	typeref:typename:int
demorecorder	src/Modules/Engine.hpp	/^	EngineDemoRecorder *demorecorder = nullptr;$/;"	m	class:Engine	typeref:typename:EngineDemoRecorder *
demorecorder	src/Offsets.cpp	/^	int demorecorder;$/;"	v	namespace:Offsets	typeref:typename:int
den	lib/ffmpeg/include/libavutil/rational.h	/^    int den; \/\/\/< Denominator$/;"	m	struct:AVRational	typeref:typename:int
depth	lib/ffmpeg/include/libavutil/pixdesc.h	/^    int depth;$/;"	m	struct:AVComponentDescriptor	typeref:typename:int
depth_minus1	lib/ffmpeg/include/libavutil/pixdesc.h	/^    attribute_deprecated int depth_minus1;$/;"	m	struct:AVComponentDescriptor	typeref:typename:attribute_deprecated int
description	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const char *description;$/;"	m	struct:AVFilter	typeref:typename:const char *
destroyMeshInternal	src/Features/OverlayRender.cpp	/^bool OverlayRender::destroyMeshInternal(Vector *verts, size_t nverts) {$/;"	f	class:OverlayRender	typeref:typename:bool
device	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    ID3D11Device        *device;$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:ID3D11Device *
device	lib/ffmpeg/include/libavutil/hwcontext_vdpau.h	/^    VdpDevice          device;$/;"	m	struct:AVVDPAUDeviceContext	typeref:typename:VdpDevice
device_context	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AVFormatContext *device_context;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:AVFormatContext *
device_context	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    ID3D11DeviceContext *device_context;$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:ID3D11DeviceContext *
device_ctx	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AVHWDeviceContext *device_ctx;$/;"	m	struct:AVHWFramesContext	typeref:typename:AVHWDeviceContext *
device_description	lib/ffmpeg/include/libavdevice/avdevice.h	/^    char *device_description;            \/**< human friendly name *\/$/;"	m	struct:AVDeviceInfo	typeref:typename:char *
device_features	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkPhysicalDeviceFeatures2 device_features;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:VkPhysicalDeviceFeatures2
device_id	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^    cl_device_id device_id;$/;"	m	struct:AVOpenCLDeviceContext	typeref:typename:cl_device_id
device_name	lib/ffmpeg/include/libavdevice/avdevice.h	/^    char *device_name;                   \/**< device name, format depends on device *\/$/;"	m	struct:AVDeviceInfo	typeref:typename:char *
device_ref	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AVBufferRef *device_ref;$/;"	m	struct:AVHWFramesContext	typeref:typename:AVBufferRef *
device_type	lib/ffmpeg/include/libavcodec/codec.h	/^    enum AVHWDeviceType device_type;$/;"	m	struct:AVCodecHWConfig	typeref:enum:AVHWDeviceType
devices	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AVDeviceInfo **devices;              \/**< list of autodetected devices *\/$/;"	m	struct:AVDeviceInfoList	typeref:typename:AVDeviceInfo **
devmgr	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^    IDirect3DDeviceManager9 *devmgr;$/;"	m	struct:AVDXVA2DeviceContext	typeref:typename:IDirect3DDeviceManager9 *
dia_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int dia_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
difseg_size	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              difseg_size;           \/* number of DIF segments per DIF channel *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
dir	src/Features/Demo/DemoGhostPlayer.cpp	/^	auto dir = engine->GetGameDirectory() + std::string("\/") + args[1];$/;"	v	typeref:typename:auto
dir	src/Features/Demo/DemoParser.cpp	/^	auto dir = std::string(engine->GetGameDirectory()) + std::string("\/") + name;$/;"	v	typeref:typename:auto
dir	src/Features/Demo/DemoParser.cpp	/^	auto dir = std::string(engine->GetGameDirectory()) + std::string("\/");$/;"	v	typeref:typename:auto
dir	src/Modules/EngineDemoPlayer.cpp	/^	auto dir = engine->GetGameDirectory() + std::string("\/");$/;"	v	typeref:typename:auto
direct	lib/ffmpeg/include/libavformat/avio.h	/^    int direct;$/;"	m	struct:AVIOContext	typeref:typename:int
direction	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^	float direction = 0;$/;"	m	struct:AbsoluteMoveToolParams	typeref:typename:float
disableSyncForLoad	src/Features/Demo/NetworkGhostPlayer.hpp	/^	bool disableSyncForLoad = false;$/;"	m	class:NetworkManager	typeref:typename:bool
disable_auto_convert	lib/ffmpeg/include/libavfilter/avfilter.h	/^    unsigned disable_auto_convert;$/;"	m	struct:AVFilterGraph	typeref:typename:unsigned
discard	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVDiscard discard;        \/\/\/< selects which program to discard and which to feed to/;"	m	struct:AVProgram	typeref:enum:AVDiscard
discard	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVDiscard discard; \/\/\/< Selects which packets can be discarded at will and do not ne/;"	m	struct:AVStream	typeref:enum:AVDiscard
discard_damaged_percentage	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int discard_damaged_percentage;$/;"	m	struct:AVCodecContext	typeref:typename:int
disp	lib/minhook/hde/hde32.h	/^    } disp;$/;"	m	struct:__anon296988db0108	typeref:union:__anon296988db0108::__anon296988db030a
disp	lib/minhook/hde/hde64.h	/^    } disp;$/;"	m	struct:__anon296b36800108	typeref:union:__anon296b36800108::__anon296b3680030a
disp16	lib/minhook/hde/hde32.h	/^        uint16_t disp16;$/;"	m	union:__anon296988db0108::__anon296988db030a	typeref:typename:uint16_t
disp16	lib/minhook/hde/hde64.h	/^        uint16_t disp16;$/;"	m	union:__anon296b36800108::__anon296b3680030a	typeref:typename:uint16_t
disp32	lib/minhook/hde/hde32.h	/^        uint32_t disp32;$/;"	m	union:__anon296988db0108::__anon296988db030a	typeref:typename:uint32_t
disp32	lib/minhook/hde/hde64.h	/^        uint32_t disp32;$/;"	m	union:__anon296b36800108::__anon296b3680030a	typeref:typename:uint32_t
disp8	lib/minhook/hde/hde32.h	/^        uint8_t disp8;$/;"	m	union:__anon296988db0108::__anon296988db030a	typeref:typename:uint8_t
disp8	lib/minhook/hde/hde64.h	/^        uint8_t disp8;$/;"	m	union:__anon296b36800108::__anon296b3680030a	typeref:typename:uint8_t
dispFlags	src/Utils/SDK.hpp	/^	unsigned short dispFlags;$/;"	m	struct:CBaseTrace	typeref:typename:unsigned short
dispatchRule	src/Features/Speedrun/Categories.cpp	/^static void dispatchRule(std::string name, SpeedrunRule *rule) {$/;"	f	typeref:typename:void	file:
dispatchRuleCycled	src/Features/Speedrun/Categories.cpp	/^static void dispatchRuleCycled(std::string name, SpeedrunRule *rule) {$/;"	f	typeref:typename:void	file:
display	lib/ffmpeg/include/libavcodec/vaapi.h	/^    void *display;$/;"	m	struct:vaapi_context	typeref:typename:void *
display	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    VADisplay display;$/;"	m	struct:AVVAAPIDeviceContext	typeref:typename:VADisplay
display_aspect_ratio	lib/ffmpeg/include/libavformat/avformat.h	/^    AVRational display_aspect_ratio;$/;"	m	struct:AVStream	typeref:typename:AVRational
display_picture_number	lib/ffmpeg/include/libavutil/frame.h	/^    int display_picture_number;$/;"	m	struct:AVFrame	typeref:typename:int
display_primaries	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    AVRational display_primaries[3][2];$/;"	m	struct:AVMasteringDisplayMetadata	typeref:typename:AVRational[3][2]
disposition	lib/ffmpeg/include/libavformat/avformat.h	/^    int disposition; \/**< AV_DISPOSITION_* bit field *\/$/;"	m	struct:AVStream	typeref:typename:int
dist	src/Utils/SDK.hpp	/^	float dist;$/;"	m	struct:cplane_t	typeref:typename:float
distance	src/Features/Stats/JumpStats.hpp	/^	float distance;$/;"	m	class:JumpStats	typeref:typename:float
distancePeak	src/Features/Stats/JumpStats.hpp	/^	float distancePeak;$/;"	m	class:JumpStats	typeref:typename:float
distribution_maxrgb	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVHDRPlusPercentile distribution_maxrgb[15];$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVHDRPlusPercentile[15]
doAutoChooseColor	src/Utils/lodepng.cpp	/^static unsigned doAutoChooseColor(LodePNGColorMode *mode_out, const unsigned char *image, unsign/;"	f	typeref:typename:unsigned	file:
doMovement	src/Features/Stitcher.cpp	/^static void doMovement(float delta) {$/;"	f	typeref:typename:void	file:
doPride	src/SAR.cpp	/^static void doPride() {$/;"	f	typeref:typename:void	file:
doUpdate	src/Features/Updater.cpp	/^void doUpdate(bool allowPre, bool exitOnSuccess, bool force) {$/;"	f	typeref:typename:void
do_until_end	src/Modules/Tier1.cpp	/^	std::optional<bool> do_until_end;$/;"	m	class:ConsoleDisplayHook	typeref:typename:std::optional<bool>	file:
doc/cvars.md	Makefile	/^doc\/cvars.md:$/;"	t
down	src/Utils/SDK.hpp	/^		int down[2];$/;"	m	struct:kbutton_t::Split_t	typeref:typename:int[2]
downloadFile	src/Features/Updater.cpp	/^static bool downloadFile(const char *url, const char *path) {$/;"	f	typeref:typename:bool	file:
draw	src/Features/Hud/Hud.cpp	/^	bool draw = true;$/;"	m	struct:TextLine	typeref:typename:bool	file:
draw	src/Features/Routing/Ruler.cpp	/^void Ruler::draw() {$/;"	f	class:Ruler	typeref:typename:void
drawLabel	src/Features/Routing/Ruler.cpp	/^void drawLabel(Vector pos, int yOffset, std::string text) {$/;"	f	typeref:typename:void
drawMeshes	src/Features/OverlayRender.cpp	/^void OverlayRender::drawMeshes() {$/;"	f	class:OverlayRender	typeref:typename:void
drawMinimap	src/Features/Hud/Minimap.cpp	/^static void drawMinimap(Minimap m, MinimapSettings s) {$/;"	f	typeref:typename:void	file:
drawPoint	src/Features/Routing/Ruler.cpp	/^void drawPoint(Vector pos, bool label, Color c) {$/;"	f	typeref:typename:void
drawSecondSplitScreen	src/Features/Hud/Hud.hpp	/^	bool drawSecondSplitScreen;$/;"	m	class:BaseHud	typeref:typename:bool
drawSpeeds	src/Features/Hud/Hud.cpp	/^	static float drawSpeeds[2];$/;"	v	typeref:typename:float[2]	file:
drawSurroundingBox	src/Features/Stitcher.cpp	/^static void drawSurroundingBox(int x0, int y0, int x1, int y1, Color t, Color r, Color b, Color /;"	f	typeref:typename:void	file:
draw_horiz_band	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void (*draw_horiz_band)(struct AVCodecContext *s,$/;"	m	struct:AVCodecContext	typeref:typename:void (*)(struct AVCodecContext * s,const AVFrame * src,int offset[AV_NUM_DATA_POINTERS],int y,int type,int height)
driver_quirks	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    unsigned int driver_quirks;$/;"	m	struct:AVVAAPIDeviceContext	typeref:typename:unsigned int
dsf	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              dsf;                   \/* value of the dsf in the DV header *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
dst	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterContext *dst;       \/\/\/< dest filter$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterContext *
dst_x	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int16_t dst_x, dst_y;$/;"	m	struct:AVMotionVector	typeref:typename:int16_t
dst_y	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int16_t dst_x, dst_y;$/;"	m	struct:AVMotionVector	typeref:typename:int16_t
dstpad	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterPad *dstpad;        \/\/\/< input pad on the dest filter$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterPad *
dts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t dts;     \/* dts of the current frame *\/$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
dts	lib/ffmpeg/include/libavcodec/packet.h	/^    int64_t dts;$/;"	m	struct:AVPacket	typeref:typename:int64_t
dts_misordered	lib/ffmpeg/include/libavformat/avformat.h	/^    uint8_t dts_misordered;$/;"	m	struct:AVStream	typeref:typename:uint8_t
dts_ordered	lib/ffmpeg/include/libavformat/avformat.h	/^    uint8_t dts_ordered;$/;"	m	struct:AVStream	typeref:typename:uint8_t
dts_ref_dts_delta	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int dts_ref_dts_delta;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
dts_sync_point	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int dts_sync_point;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
duckJumpTimeMsecs	src/Features/Hud/Hud.cpp	/^		int duckJumpTimeMsecs = *reinterpret_cast<int *>((uintptr_t)player + Offsets::C_m_nDuckJumpTim/;"	v	typeref:typename:int
duckState	src/Features/Hud/Hud.cpp	/^		std::string duckState = "standing";$/;"	v	typeref:typename:std::string
duckTimeMsecs	src/Features/Hud/Hud.cpp	/^		int duckTimeMsecs = *reinterpret_cast<int *>((uintptr_t)player + Offsets::C_m_nDuckTimeMsecs);$/;"	v	typeref:typename:int
ducked	src/Features/Hud/Hud.cpp	/^	bool ducked = *reinterpret_cast<bool *>((uintptr_t)player + Offsets::C_m_bDucked);$/;"	v	typeref:typename:bool
ducked	src/Features/Tas/TasPlayer.hpp	/^	bool ducked;$/;"	m	struct:TasPlayerInfo	typeref:typename:bool
duckedInAir	src/Features/Hud/Hud.cpp	/^		bool duckedInAir = client->GetPortalLocal(player).m_bDuckedInAir;$/;"	v	typeref:typename:bool
ducking	src/Features/Hud/Hud.cpp	/^		bool ducking = *reinterpret_cast<bool *>((uintptr_t)player + Offsets::C_m_bDucking);$/;"	v	typeref:typename:bool
dummy	lib/minhook/trampoline.h	/^    UINT32 dummy;$/;"	m	struct:_JMP_ABS	typeref:typename:UINT32
dummy0	lib/minhook/trampoline.h	/^    UINT32 dummy0;$/;"	m	struct:_CALL_ABS	typeref:typename:UINT32
dummy0	lib/minhook/trampoline.h	/^    UINT8  dummy0;$/;"	m	struct:_JCC_ABS	typeref:typename:UINT8
dummy1	lib/minhook/trampoline.h	/^    UINT8  dummy1;      \/\/ EB 08:         JMP +10$/;"	m	struct:_CALL_ABS	typeref:typename:UINT8
dummy1	lib/minhook/trampoline.h	/^    UINT8  dummy1;      \/\/ FF25 00000000: JMP [+6]$/;"	m	struct:_JCC_ABS	typeref:typename:UINT8
dummy2	lib/minhook/trampoline.h	/^    UINT8  dummy2;$/;"	m	struct:_CALL_ABS	typeref:typename:UINT8
dummy2	lib/minhook/trampoline.h	/^    UINT8  dummy2;$/;"	m	struct:_JCC_ABS	typeref:typename:UINT8
dummy3	lib/minhook/trampoline.h	/^    UINT32 dummy3;$/;"	m	struct:_JCC_ABS	typeref:typename:UINT32
dump	src/Utils/json11.cpp	/^		void dump(string &out) const override { json11::dump(m_value, out); }$/;"	f	class:json11::Value	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(NullStruct, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(bool value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(const Json::array &values, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(const Json::object &values, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(const string &value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(double value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	static void dump(int value, string &out) {$/;"	f	namespace:json11	typeref:typename:void	file:
dump	src/Utils/json11.cpp	/^	void Json::dump(string &out) const {$/;"	f	class:json11::Json	typeref:typename:void
dump	src/Utils/json11.hpp	/^		std::string dump() const {$/;"	f	class:json11::Json	typeref:typename:std::string
dump_separator	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint8_t *dump_separator;$/;"	m	struct:AVCodecContext	typeref:typename:uint8_t *
dump_separator	lib/ffmpeg/include/libavformat/avformat.h	/^    uint8_t *dump_separator;$/;"	m	struct:AVFormatContext	typeref:typename:uint8_t *
duration	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int duration;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
duration	lib/ffmpeg/include/libavcodec/packet.h	/^    int64_t duration;$/;"	m	struct:AVPacket	typeref:typename:int64_t
duration	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t duration;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
duration	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t duration;$/;"	m	struct:AVStream	typeref:typename:int64_t
duration	src/Features/Hud/Toasts.cpp	/^		float duration = strtof(args[2], &end);$/;"	v	typeref:typename:float
duration	src/Features/Hud/Toasts.cpp	/^	uint32_t duration;  \/\/ ms$/;"	m	struct:TagInfo	typeref:typename:uint32_t	file:
duration_count	lib/ffmpeg/include/libavformat/avformat.h	/^        int duration_count;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int
duration_error	lib/ffmpeg/include/libavformat/avformat.h	/^        double (*duration_error)[2][MAX_STD_TIMEBASES];$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:double (*)[2]
duration_estimation_method	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVDurationEstimationMethod duration_estimation_method;$/;"	m	struct:AVFormatContext	typeref:enum:AVDurationEstimationMethod
duration_gcd	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t duration_gcd;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
dv_bl_signal_compatibility_id	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t dv_bl_signal_compatibility_id;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
dv_level	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t dv_level;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
dv_profile	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t dv_profile;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
dv_version_major	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t dv_version_major;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
dv_version_minor	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t dv_version_minor;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
dxva_context	lib/ffmpeg/include/libavcodec/dxva2.h	/^struct dxva_context {$/;"	s
e	src/Modules/EngineDemoPlayer.cpp	/^		} catch (std::system_error &e) {$/;"	v	typeref:typename:std::system_error &
eFlags	src/Features/Routing/EntityInspector.hpp	/^	int eFlags;$/;"	m	struct:InspectionItem	typeref:typename:int
eLoadType	src/Utils/SDK.hpp	/^	MapLoadType_t eLoadType;  \/\/ 72$/;"	m	struct:CGlobalVars	typeref:typename:MapLoadType_t
ePlacementResult	src/Utils/SDK.hpp	/^	PortalPlacementResult_t ePlacementResult; \/\/ Success indicator$/;"	m	struct:TracePortalPlacementInfo_t	typeref:typename:PortalPlacementResult_t
eVal	src/Utils/SDK.hpp	/^	unsigned long eVal;  \/\/ CHandle<CBaseEntity>$/;"	m	struct:variant_t	typeref:typename:unsigned long
easy_handle	lib/curl/include/curl/multi.h	/^  CURL *easy_handle; \/* the handle it concerns *\/$/;"	m	struct:CURLMsg	typeref:typename:CURL *
edict_t	src/Utils/SDK.hpp	/^struct edict_t : CBaseEdict {$/;"	s
el_present_flag	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t el_present_flag;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
elapsed	src/Features/Tas/TasTools/AutoAimTool.cpp	/^	int elapsed;$/;"	m	struct:AutoAimParams	typeref:typename:int	file:
elapsed	src/Features/Tas/TasTools/SetAngleTool.cpp	/^	int elapsed;$/;"	m	struct:SetAngleParams	typeref:typename:int	file:
element	src/Features/Hud/Hud.cpp	/^	auto element = *result;$/;"	v	typeref:typename:auto
element	src/Features/Hud/InputHud.cpp	/^				for (auto &element : inputHud.elements) {$/;"	v	typeref:typename:auto &
elementName	src/Features/Hud/InputHud.cpp	/^	const char *elementName = args[1];$/;"	v	typeref:typename:const char *
elementOrder	src/Features/Hud/Hud.cpp	/^std::vector<std::string> elementOrder = {$/;"	v	typeref:typename:std::vector<std::string>
elements	src/Features/Hud/Hud.cpp	/^	auto elements = &vgui->elements;$/;"	v	typeref:typename:auto
elements	src/Features/Hud/Hud.hpp	/^	int elements = 0;$/;"	m	class:HudContext	typeref:typename:int
elements	src/Features/Hud/InputHud.hpp	/^	std::vector<InputHudElement> elements;$/;"	m	class:InputHud	typeref:typename:std::vector<InputHudElement>
elements	src/Modules/VGui.hpp	/^	std::vector<HudElement *> elements = std::vector<HudElement *>();$/;"	m	class:VGui	typeref:typename:std::vector<HudElement * >
empty_map	src/Utils/json11.cpp	/^		const map<string, Json> empty_map;$/;"	m	struct:json11::Statics	typeref:typename:const map<string,Json>	file:
empty_string	src/Utils/json11.cpp	/^		const string empty_string;$/;"	m	struct:json11::Statics	typeref:typename:const string	file:
empty_vector	src/Utils/json11.cpp	/^		const vector<Json> empty_vector;$/;"	m	struct:json11::Statics	typeref:typename:const vector<Json>	file:
enable	lib/ffmpeg/include/libavfilter/avfilter.h	/^    void *enable;                   \/\/\/< parsed expression (AVExpr*)$/;"	m	struct:AVFilterContext	typeref:typename:void *
enable_str	lib/ffmpeg/include/libavfilter/avfilter.h	/^    char *enable_str;               \/\/\/< enable expression string$/;"	m	struct:AVFilterContext	typeref:typename:char *
enabled	src/Features/Hud/InputHud.hpp	/^		bool enabled;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:bool
enabled	src/Features/Hud/VphysHud.cpp	/^	int enabled = std::atoi(args[2]);$/;"	v	typeref:typename:int
enabled	src/Features/Tas/TasController.hpp	/^	bool enabled;$/;"	m	class:TasController	typeref:typename:bool
enabled	src/Features/Tas/TasTool.hpp	/^	bool enabled = false;$/;"	m	struct:TasToolParams	typeref:typename:bool
enabled	src/Hook.hpp	/^	bool enabled;$/;"	m	class:Hook	typeref:typename:bool
enabled_dev_extensions	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    const char * const *enabled_dev_extensions;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:const char * const *
enabled_inst_extensions	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    const char * const *enabled_inst_extensions;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:const char * const *
enc	src/Features/Renderer.cpp	/^	AVCodecContext *enc;$/;"	m	struct:Stream	typeref:typename:AVCodecContext *	file:
encode	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::encode(Uint32 input, Out output, Uint16 replacement)$/;"	f	class:Utf	typeref:typename:Out
encode	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::encode(Uint32 input, Out output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:Out
encode	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::encode(Uint32 input, Out output, Uint8 replacement)$/;"	f	class:Utf	typeref:typename:Out
encode	src/Utils/lodepng.cpp	/^	unsigned encode(const std::string &filename, const std::vector<unsigned char> &in, unsigned w, /;"	f	namespace:lodepng	typeref:typename:unsigned
encode	src/Utils/lodepng.cpp	/^	unsigned encode(const std::string &filename, const unsigned char *in, unsigned w, unsigned h, L/;"	f	namespace:lodepng	typeref:typename:unsigned
encode	src/Utils/lodepng.cpp	/^	unsigned encode(std::vector<unsigned char> &out, const std::vector<unsigned char> &in, unsigned/;"	f	namespace:lodepng	typeref:typename:unsigned
encode	src/Utils/lodepng.cpp	/^	unsigned encode(std::vector<unsigned char> &out, const unsigned char *in, unsigned w, unsigned /;"	f	namespace:lodepng	typeref:typename:unsigned
encode2	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*encode2)(struct AVCodecContext *avctx, struct AVPacket *avpkt,$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext * avctx,struct AVPacket * avpkt,const struct AVFrame * frame,int * got_packet_ptr)
encodeAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::encodeAnsi(Uint32 codepoint, Out output, char replacement, const std::locale& local/;"	f	class:Utf	typeref:typename:Out
encodeLZ77	src/Utils/lodepng.cpp	/^static unsigned encodeLZ77(uivector *out, Hash *hash, const unsigned char *in, size_t inpos, siz/;"	f	typeref:typename:unsigned	file:
encodeRaw32	src/Features/Bot/BotServer.cpp	/^static void encodeRaw32(std::vector<uint8_t> &buf, uint32_t val) {$/;"	f	typeref:typename:void	file:
encodeRaw32	src/Features/Tas/TasServer.cpp	/^static void encodeRaw32(std::vector<uint8_t> &buf, uint32_t val) {$/;"	f	typeref:typename:void	file:
encodeWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::encodeWide(Uint32 codepoint, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
encode_sub	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*encode_sub)(struct AVCodecContext *, uint8_t *buf, int buf_size,$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext *,uint8_t * buf,int buf_size,const struct AVSubtitle * sub)
encode_utf8	src/Utils/json11.cpp	/^			void encode_utf8(long pt, string &out) {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:void	file:
encoder	src/Utils/lodepng.hpp	/^	LodePNGEncoderSettings encoder; \/*the encoding settings*\/$/;"	m	struct:LodePNGState	typeref:typename:LodePNGEncoderSettings
end	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start, end;     \/\/\/< chapter start\/end time in time_base units$/;"	m	struct:AVChapter	typeref:typename:int64_t
end	lib/ffmpeg/include/libavutil/fifo.h	/^    uint8_t *rptr, *wptr, *end;$/;"	m	struct:AVFifoBuffer	typeref:typename:uint8_t *
end	src/Cheats.cpp	/^	Vector start, end;$/;"	m	struct:DrawLineInfo	typeref:typename:Vector	file:
end	src/Event.hpp	/^		bool end;$/;"	m	struct:Event::EventData	typeref:typename:bool
end	src/Features/Demo/GhostEntity.cpp	/^	int end;$/;"	v	typeref:typename:int
end	src/Features/Hud/Hud.cpp	/^				int end = -1;$/;"	v	typeref:typename:int
end	src/Features/Hud/Hud.cpp	/^		char *end;$/;"	v	typeref:typename:char *
end	src/Features/Hud/Hud.cpp	/^		int end = -1;$/;"	v	typeref:typename:int
end	src/Features/Hud/Toasts.cpp	/^		char *end;$/;"	v	typeref:typename:char *
end	src/Features/Hud/Toasts.cpp	/^		int end = -1;$/;"	v	typeref:typename:int
end	src/Features/Routing/Ruler.hpp	/^	Vector end;$/;"	m	struct:Ruler	typeref:typename:Vector
end	src/Features/Speedrun/CategoryCreator.cpp	/^		Vector end = tr.endpos;$/;"	v	typeref:typename:Vector
end	src/Features/Speedrun/SpeedrunTimer.cpp	/^	char *end;$/;"	v	typeref:typename:char *
end	src/Features/Speedrun/SpeedrunTimer.cpp	/^	char end[14];$/;"	m	struct:TimerInterface	typeref:typename:char[14]	file:
end	src/Modules/Tier1.cpp	/^	std::string end;$/;"	m	struct:ConFilterRule	typeref:typename:std::string	file:
endNetDump	src/Features/Demo/NetworkGhostPlayer.cpp	/^static void endNetDump() {$/;"	f	typeref:typename:void	file:
endShading	src/Features/OverlayRender.cpp	/^void OverlayRender::endShading() {$/;"	f	class:OverlayRender	typeref:typename:void
end_display_time	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint32_t end_display_time; \/* relative to packet pts, in ms *\/$/;"	m	struct:AVSubtitle	typeref:typename:uint32_t
end_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*end_frame)(AVCodecContext *avctx);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx)
end_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int end_frame;$/;"	m	struct:RcOverride	typeref:typename:int
end_pat	src/Modules/Tier1.cpp	/^	std::string end_pat;$/;"	m	class:ConsoleDisplayHook	typeref:typename:std::string	file:
end_time	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t end_time;$/;"	m	struct:AVProgram	typeref:typename:int64_t
endmovie_cbk	src/Features/Renderer.cpp	/^static void endmovie_cbk(const CCommand &args) {$/;"	f	typeref:typename:void	file:
endmovie_origCbk	src/Features/Renderer.cpp	/^static _CommandCallback endmovie_origCbk;$/;"	v	typeref:typename:_CommandCallback	file:
endpos	src/Utils/SDK.hpp	/^	Vector endpos;$/;"	m	struct:CBaseTrace	typeref:typename:Vector
endptr	src/Modules/EngineDemoPlayer.cpp	/^			char *endptr;$/;"	v	typeref:typename:char *
eng	src/Modules/Engine.hpp	/^	Interface *eng = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
eng	src/Offsets.cpp	/^	int eng;$/;"	v	namespace:Offsets	typeref:typename:int
engine	src/Modules/Engine.cpp	/^Engine *engine;$/;"	v	typeref:typename:Engine *
engineClient	src/Modules/Engine.hpp	/^	Interface *engineClient = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
engineTool	src/Modules/Engine.hpp	/^	Interface *engineTool = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
engineTrace	src/Modules/Engine.hpp	/^	Interface *engineTrace = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
enginevgui	src/Modules/VGui.hpp	/^	Interface *enginevgui = nullptr;$/;"	m	class:VGui	typeref:typename:Interface *
ensureCurlReady	src/Features/AutoSubmit.cpp	/^static bool ensureCurlReady() {$/;"	f	typeref:typename:bool	file:
entityIndex	src/Features/Routing/EntityInspector.hpp	/^	int entityIndex;$/;"	m	class:EntityInspector	typeref:typename:int
entityList	src/Features/EntityList.cpp	/^EntityList *entityList;$/;"	v	typeref:typename:EntityList *
eob_index	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    int eob_index;$/;"	m	struct:CIDEntry	typeref:typename:int
eof_reached	lib/ffmpeg/include/libavformat/avio.h	/^    int eof_reached;        \/**< true if was unable to read due to error or eof *\/$/;"	m	struct:AVIOContext	typeref:typename:int
equals	src/Utils/json11.cpp	/^		bool equals(const JsonValue *other) const override { return m_value == other->number_value(); /;"	f	class:json11::JsonDouble	typeref:typename:bool	file:
equals	src/Utils/json11.cpp	/^		bool equals(const JsonValue *other) const override { return m_value == other->number_value(); /;"	f	class:json11::JsonInt	typeref:typename:bool	file:
equals	src/Utils/json11.cpp	/^		bool equals(const JsonValue *other) const override {$/;"	f	class:json11::Value	typeref:typename:bool	file:
err	src/Utils/json11.cpp	/^			string &err;$/;"	m	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:string &	file:
err_recognition	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int err_recognition;$/;"	m	struct:AVCodecContext	typeref:typename:int
error	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint64_t error[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVCodecContext	typeref:typename:uint64_t[]
error	lib/ffmpeg/include/libavformat/avio.h	/^    int error;              \/**< contains the error code or 0 if no error happened *\/$/;"	m	struct:AVIOContext	typeref:typename:int
error	lib/ffmpeg/include/libavutil/frame.h	/^    uint64_t error[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVFrame	typeref:typename:attribute_deprecated uint64_t[]
error	src/Utils/lodepng.hpp	/^	unsigned error;$/;"	m	struct:LodePNGState	typeref:typename:unsigned
error_concealment	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int error_concealment;$/;"	m	struct:AVCodecContext	typeref:typename:int
error_recognition	lib/ffmpeg/include/libavformat/avformat.h	/^    int error_recognition;$/;"	m	struct:AVFormatContext	typeref:typename:int
esc	src/Utils/json11.cpp	/^	static inline string esc(char c) {$/;"	f	namespace:json11	typeref:typename:string	file:
event_flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int event_flags;$/;"	m	struct:AVFormatContext	typeref:typename:int
event_flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int event_flags;$/;"	m	struct:AVStream	typeref:typename:int
events	lib/curl/include/curl/multi.h	/^  short events;$/;"	m	struct:curl_waitfd	typeref:typename:short
execute	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*execute)(struct AVCodecContext *c, int (*func)(struct AVCodecContext *c2, void *arg), /;"	m	struct:AVCodecContext	typeref:typename:int (*)(struct AVCodecContext * c,int (* func)(struct AVCodecContext * c2,void * arg),void * arg2,int * ret,int count,int size)
execute	lib/ffmpeg/include/libavfilter/avfilter.h	/^    avfilter_execute_func *execute;$/;"	m	struct:AVFilterGraph	typeref:typename:avfilter_execute_func *
execute2	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*execute2)(struct AVCodecContext *c, int (*func)(struct AVCodecContext *c2, void *arg, /;"	m	struct:AVCodecContext	typeref:typename:int (*)(struct AVCodecContext * c,int (* func)(struct AVCodecContext * c2,void * arg,int jobnr,int threadnr),void * arg2,int * ret,int count)
existing	src/Features/ConfigPlus.cpp	/^	auto existing = g_aliases.find({args[1]});$/;"	v	typeref:typename:auto
existing	src/Features/ConfigPlus.cpp	/^	auto existing = g_functions.find({args[1]});$/;"	v	typeref:typename:auto
exists	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool exists = !_access(filename.c_str(), 0);$/;"	v	typeref:typename:bool
exists	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool exists = !access(filename.c_str(), F_OK);$/;"	v	typeref:typename:bool
exitOnSuccess	src/Features/Updater.cpp	/^	bool allowPre = false, exitOnSuccess = false, force = false;$/;"	v	typeref:typename:bool
expand	src/Features/ConfigPlus.cpp	/^static void expand(size_t nargs, const char *const *args, std::string body) {$/;"	f	typeref:typename:void	file:
expect	src/Utils/json11.cpp	/^			Json expect(const string &expected, Json res) {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:Json	file:
expire	lib/curl/include/curl/curl.h	/^  char expire[18]; \/* YYYYMMDD HH:MM:SS [null-terminated] *\/$/;"	m	struct:curl_hstsentry	typeref:typename:char[18]
exportRegions	src/Features/Stitcher.cpp	/^static void exportRegions() {$/;"	f	typeref:typename:void	file:
export_side_data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int export_side_data;$/;"	m	struct:AVCodecContext	typeref:typename:int
ext_buffers	lib/ffmpeg/include/libavcodec/qsv.h	/^    mfxExtBuffer **ext_buffers;$/;"	m	struct:AVQSVContext	typeref:typename:mfxExtBuffer **
extended_buf	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef **extended_buf;$/;"	m	struct:AVFrame	typeref:typename:AVBufferRef **
extended_data	lib/ffmpeg/include/libavutil/frame.h	/^    uint8_t **extended_data;$/;"	m	struct:AVFrame	typeref:typename:uint8_t **
extensions	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *extensions; \/**< comma-separated filename extensions *\/$/;"	m	struct:AVOutputFormat	typeref:typename:const char *
extensions	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *extensions;$/;"	m	struct:AVInputFormat	typeref:typename:const char *
externalName	src/Utils/SDK.hpp	/^	const char *externalName;  \/\/ 16$/;"	m	struct:typedescription_t	typeref:typename:const char *
extra_hw_frames	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int extra_hw_frames;$/;"	m	struct:AVCodecContext	typeref:typename:int
extra_hw_frames	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int extra_hw_frames;$/;"	m	struct:AVFilterContext	typeref:typename:int
extractPartialArgs	src/Features/Speedrun/Categories.cpp	/^static std::optional<std::vector<std::string>> extractPartialArgs(const char *str, const char *c/;"	f	typeref:typename:std::optional<std::vector<std::string>>	file:
extradata	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint8_t *extradata;$/;"	m	struct:AVCodecContext	typeref:typename:uint8_t *
extradata	lib/ffmpeg/include/libavcodec/codec_par.h	/^    uint8_t *extradata;$/;"	m	struct:AVCodecParameters	typeref:typename:uint8_t *
extradata_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int extradata_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
extradata_size	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int      extradata_size;$/;"	m	struct:AVCodecParameters	typeref:typename:int
eye	src/Cheats.cpp	/^	Vector eye;$/;"	v	typeref:typename:Vector
eyepos	src/Features/Hud/Hud.cpp	/^		auto eyepos = client->GetPortalLocal(player).m_vEyeOffset;$/;"	v	typeref:typename:auto
f	lib/ffmpeg/include/libavutil/intfloat.h	/^    double   f;$/;"	m	union:av_intfloat64	typeref:typename:double
f	lib/ffmpeg/include/libavutil/intfloat.h	/^    float    f;$/;"	m	union:av_intfloat32	typeref:typename:float
f	src/Features/Bot/BotServer.cpp	/^				union { uint32_t i; float f; } rate = { popRaw32(cl.cmdbuf) };$/;"	m	union:processCommands::__anonba1d32eb060a	typeref:typename:float	file:
f	src/Features/Bot/BotServer.cpp	/^		union { float f; int i; } rate = { status.playback_rate };$/;"	m	union:update::__anonba1d32eb020a	typeref:typename:float	file:
f	src/Features/Bot/BotServer.cpp	/^	union { float f; int i; } rate = { g_last_status.playback_rate };$/;"	m	union:fullUpdate::__anonba1d32eb010a	typeref:typename:float	file:
f	src/Features/PlayerTrace.cpp	/^	FILE *f = fopen(filename.c_str(), "w");$/;"	v	typeref:typename:FILE *
f	src/Features/Speedrun/SpeedrunTimer.cpp	/^	FILE *f = fopen(filename.c_str(), "a");$/;"	v	typeref:typename:FILE *
f	src/Features/Speedrun/SpeedrunTimer.cpp	/^	FILE *f = fopen(filename.c_str(), "w");$/;"	v	typeref:typename:FILE *
f	src/Features/Tas/TasParser.cpp	/^		float f;$/;"	m	union:TasToken::__anon5c4243c7020a	typeref:typename:float	file:
f	src/Features/Tas/TasServer.cpp	/^				union { uint32_t i; float f; } rate = { popRaw32(cl.cmdbuf) };$/;"	m	union:processCommands::__anon21427171060a	typeref:typename:float	file:
f	src/Features/Tas/TasServer.cpp	/^		union { float f; int i; } rate = { status.playback_rate };$/;"	m	union:update::__anon21427171020a	typeref:typename:float	file:
f	src/Features/Tas/TasServer.cpp	/^	union { float f; int i; } rate = { g_last_status.playback_rate };$/;"	m	union:fullUpdate::__anon21427171010a	typeref:typename:float	file:
f	src/Utils/json11.cpp	/^		const std::shared_ptr<JsonValue> f = make_shared<JsonBoolean>(false);$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
f32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    float    f32;$/;"	m	union:__anon322f2785020a	typeref:typename:float
f32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    float    f32[2];$/;"	m	union:__anon322f2785010a	typeref:typename:float[2]
f64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    double   f64;$/;"	m	union:__anon322f2785010a	typeref:typename:double
fail	src/Utils/json11.cpp	/^			Json fail(string &&msg) {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:Json	file:
fail	src/Utils/json11.cpp	/^			T fail(string &&msg, const T err_ret) {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:T	file:
failed	src/Utils/json11.cpp	/^			bool failed;$/;"	m	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:bool	file:
family	lib/curl/include/curl/curl.h	/^  int family;$/;"	m	struct:curl_sockaddr	typeref:typename:int
fd	lib/curl/include/curl/multi.h	/^  curl_socket_t fd;$/;"	m	struct:curl_waitfd	typeref:typename:curl_socket_t
fd	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    int fd;$/;"	m	struct:AVDRMDeviceContext	typeref:typename:int
fd	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    int fd;$/;"	m	struct:AVDRMObjectDescriptor	typeref:typename:int
fdct	lib/ffmpeg/include/libavcodec/avdct.h	/^    void (*fdct)(int16_t *block \/* align 16 *\/);$/;"	m	struct:AVDCT	typeref:typename:void (*)(int16_t * block)
features	lib/curl/include/curl/curl.h	/^  int features;             \/* bitmask, see defines below *\/$/;"	m	struct:curl_version_info_data	typeref:typename:int
features	src/SAR.hpp	/^	Features *features;$/;"	m	class:SAR	typeref:typename:Features *
fetch_timestamp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int fetch_timestamp;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
ff_const59	lib/ffmpeg/include/libavformat/avformat.h	/^#define ff_const59 /;"	d
ff_const59	lib/ffmpeg/include/libavformat/avformat.h	/^#define ff_const59$/;"	d
ff_dnxhd_check_header_prefix	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^static av_always_inline uint64_t ff_dnxhd_check_header_prefix(uint64_t prefix)$/;"	f	typeref:typename:av_always_inline uint64_t
ff_dnxhd_check_header_prefix_hr	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^static av_always_inline uint64_t ff_dnxhd_check_header_prefix_hr(uint64_t prefix)$/;"	f	typeref:typename:av_always_inline uint64_t
ff_dnxhd_parse_header_prefix	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^static av_always_inline uint64_t ff_dnxhd_parse_header_prefix(const uint8_t *buf)$/;"	f	typeref:typename:av_always_inline uint64_t
fieldName	src/Utils/SDK.hpp	/^	const char *fieldName;     \/\/ 4$/;"	m	struct:typedescription_t	typeref:typename:const char *
fieldOffset	src/Utils/SDK.hpp	/^	int fieldOffset;           \/\/ 8$/;"	m	struct:typedescription_t	typeref:typename:int
fieldSize	src/Utils/SDK.hpp	/^	unsigned short fieldSize;  \/\/ 12$/;"	m	struct:typedescription_t	typeref:typename:unsigned short
fieldSizeInBytes	src/Utils/SDK.hpp	/^	int fieldSizeInBytes;                      \/\/ 32\/36$/;"	m	struct:typedescription_t	typeref:typename:int
fieldTolerance	src/Utils/SDK.hpp	/^	float fieldTolerance;                      \/\/ 44\/48$/;"	m	struct:typedescription_t	typeref:typename:float
fieldType	src/Utils/SDK.hpp	/^	fieldtype_t fieldType;     \/\/ 0$/;"	m	struct:typedescription_t	typeref:typename:fieldtype_t
fieldType	src/Utils/SDK.hpp	/^	fieldtype_t fieldType;$/;"	m	struct:variant_t	typeref:typename:fieldtype_t
field_order	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVFieldOrder field_order;$/;"	m	struct:AVCodecContext	typeref:enum:AVFieldOrder
field_order	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVFieldOrder field_order;$/;"	m	struct:AVCodecParserContext	typeref:enum:AVFieldOrder
field_order	lib/ffmpeg/include/libavcodec/codec_par.h	/^    enum AVFieldOrder                  field_order;$/;"	m	struct:AVCodecParameters	typeref:enum:AVFieldOrder
fieldtype_t	src/Utils/SDK.hpp	/^} fieldtype_t;$/;"	t	typeref:enum:_fieldtypes
fifo	lib/ffmpeg/include/libavfilter/avfilter.h	/^    FFFrameQueue fifo;$/;"	m	struct:AVFilterLink	typeref:typename:FFFrameQueue
file	src/Modules/EngineDemoPlayer.cpp	/^	for (const auto &file : std::filesystem::directory_iterator(dir + args[1])) {$/;"	v	typeref:typename:const auto &
file	src/SAR.cpp	/^	std::ofstream file("game.cvars", std::ios::out | std::ios::trunc | std::ios::binary);$/;"	v	typeref:typename:std::ofstream
file	src/SAR.cpp	/^	std::ofstream file("sar.cvars", std::ios::out | std::ios::trunc | std::ios::binary);$/;"	v	typeref:typename:std::ofstream
fileChecksum	src/Checksum.cpp	/^static bool fileChecksum(FILE *fp, size_t ignoreEnd, uint32_t *crcOut) {$/;"	f	typeref:typename:bool	file:
filePath	src/Features/Hud/Crosshair.cpp	/^	auto filePath = std::string(engine->GetGameDirectory()) + std::string("\/") + std::string(args[/;"	v	typeref:typename:auto
filePath	src/Features/Routing/EntityInspector.cpp	/^	auto filePath = std::string(engine->GetGameDirectory()) + std::string("\/") + std::string(args[/;"	v	typeref:typename:auto
filemode	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t filemode;                     \/**< Unix file mode, -1 if unknown. *\/$/;"	m	struct:AVIODirEntry	typeref:typename:int64_t
filename	lib/curl/include/curl/curl.h	/^  char *filename;$/;"	m	struct:curl_fileinfo	typeref:typename:char *
filename	lib/ffmpeg/include/libavformat/avformat.h	/^    char filename[1024];$/;"	m	struct:AVFormatContext	typeref:typename:attribute_deprecated char[1024]
filename	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *filename;$/;"	m	struct:AVProbeData	typeref:typename:const char *
filename	src/Features/PlayerTrace.cpp	/^	std::string filename = args[1];$/;"	v	typeref:typename:std::string
filename	src/Features/Renderer.cpp	/^	std::string filename;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::string	file:
filename	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::string filename = args[1];$/;"	v	typeref:typename:std::string
filepath	src/Modules/EngineDemoPlayer.cpp	/^	std::string filepath;$/;"	v	typeref:typename:std::string
filetype	lib/curl/include/curl/curl.h	/^  curlfiletype filetype;$/;"	m	struct:curl_fileinfo	typeref:typename:curlfiletype
filled_mv_blocks_num	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             filled_mv_blocks_num;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
filter	lib/ffmpeg/include/libavcodec/avcodec.h	/^    const struct AVBitStreamFilter *filter;$/;"	m	struct:AVBitStreamFilterContext	typeref:typename:const struct AVBitStreamFilter *
filter	lib/ffmpeg/include/libavcodec/bsf.h	/^    const struct AVBitStreamFilter *filter;$/;"	m	struct:AVBSFContext	typeref:typename:const struct AVBitStreamFilter *
filter	lib/ffmpeg/include/libavcodec/bsf.h	/^    int (*filter)(AVBSFContext *ctx, AVPacket *pkt);$/;"	m	struct:AVBitStreamFilter	typeref:typename:int (*)(AVBSFContext * ctx,AVPacket * pkt)
filter	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const AVFilter *filter;         \/\/\/< the AVFilter of which this is an instance$/;"	m	struct:AVFilterContext	typeref:typename:const AVFilter *
filter	src/Utils/lodepng.cpp	/^static unsigned filter(unsigned char *out, const unsigned char *in, unsigned w, unsigned h, cons/;"	f	typeref:typename:unsigned	file:
filterScanline	src/Utils/lodepng.cpp	/^static void filterScanline(unsigned char *out, const unsigned char *scanline, const unsigned cha/;"	f	typeref:typename:void	file:
filter_ctx	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterContext *filter_ctx;$/;"	m	struct:AVFilterInOut	typeref:typename:AVFilterContext *
filter_method	src/Utils/lodepng.hpp	/^	unsigned filter_method;      \/*filter method of the original file*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
filter_strategy	src/Utils/lodepng.hpp	/^	LodePNGFilterStrategy filter_strategy;$/;"	m	struct:LodePNGEncoderSettings	typeref:typename:LodePNGFilterStrategy
filters	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterContext **filters;$/;"	m	struct:AVFilterGraph	typeref:typename:AVFilterContext **
finalAngle	src/Utils/SDK.hpp	/^	QAngle finalAngle;$/;"	m	struct:TracePortalPlacementInfo_t	typeref:typename:QAngle
finalPos	src/Utils/SDK.hpp	/^	Vector finalPos;$/;"	m	struct:TracePortalPlacementInfo_t	typeref:typename:Vector
findPluginThread	src/SAR.hpp	/^	std::thread findPluginThread;$/;"	m	class:SAR	typeref:typename:std::thread
findSubCapitalization	src/Features/Tas/TasPlayer.cpp	/^static std::string findSubCapitalization(const char *base, const char *sub) {$/;"	f	typeref:typename:std::string	file:
finish	src/CrashHandler.cpp	/^#	define finish /;"	d	file:
fired	src/Features/Speedrun/Rules.hpp	/^	bool fired;$/;"	m	struct:SpeedrunRule	typeref:typename:bool
first	src/Features/Demo/GhostEntity.cpp	/^	GhostEntity *first = nullptr;$/;"	v	typeref:typename:GhostEntity *
first	src/Features/EntityList.cpp	/^	auto first = (page - 1) * 512;$/;"	v	typeref:typename:auto
firstDemoId	src/Features/Demo/DemoGhostPlayer.cpp	/^	int firstDemoId = args.ArgC() > 2 ? std::atoi(args[2]) : 0;$/;"	v	typeref:typename:int
firstLevel	src/Features/Demo/DemoGhostEntity.hpp	/^	std::string firstLevel;$/;"	m	class:DemoGhostEntity	typeref:typename:std::string
firstPositivePacketTick	src/Features/Demo/Demo.hpp	/^	int32_t firstPositivePacketTick;$/;"	m	class:Demo	typeref:typename:int32_t
first_discard_sample	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t first_discard_sample;$/;"	m	struct:AVStream	typeref:typename:int64_t
first_dts	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t first_dts;$/;"	m	struct:AVStream	typeref:typename:int64_t
flVal	src/Utils/SDK.hpp	/^		float flVal;$/;"	m	union:variant_t::__anon21a65a74090a	typeref:typename:float
flags	lib/curl/include/curl/curl.h	/^  long flags;                       \/* as defined below *\/$/;"	m	struct:curl_httppost	typeref:typename:long
flags	lib/curl/include/curl/curl.h	/^  unsigned int flags;$/;"	m	struct:curl_fileinfo	typeref:typename:unsigned int
flags	lib/curl/include/curl/easy.h	/^  unsigned int flags; \/* bit 0 is defined, the rest are reserved and should be$/;"	m	struct:curl_blob	typeref:typename:unsigned int
flags	lib/curl/include/curl/options.h	/^  unsigned int flags;$/;"	m	struct:curl_easyoption	typeref:typename:unsigned int
flags	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int flags;$/;"	m	struct:AVCodecContext	typeref:typename:int
flags	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int flags;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
flags	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int flags;$/;"	m	struct:AVProducerReferenceTime	typeref:typename:int
flags	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int flags;$/;"	m	struct:AVSubtitleRect	typeref:typename:int
flags	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    uint16_t flags;$/;"	m	struct:CIDEntry	typeref:typename:uint16_t
flags	lib/ffmpeg/include/libavcodec/packet.h	/^    int   flags;$/;"	m	struct:AVPacket	typeref:typename:int
flags	lib/ffmpeg/include/libavcodec/xvmc.h	/^    unsigned int    flags;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:unsigned int
flags	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int flags;$/;"	m	struct:AVFilter	typeref:typename:int
flags	lib/ffmpeg/include/libavfilter/avfilter.h	/^    unsigned flags;$/;"	m	struct:AVFilterLink	typeref:typename:unsigned
flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int            flags;$/;"	m	struct:AVProgram	typeref:typename:int
flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int flags:2;$/;"	m	struct:AVIndexEntry	typeref:typename:int:2
flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int flags;$/;"	m	struct:AVFormatContext	typeref:typename:int
flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int flags;$/;"	m	struct:AVInputFormat	typeref:typename:int
flags	lib/ffmpeg/include/libavformat/avformat.h	/^    int flags;$/;"	m	struct:AVOutputFormat	typeref:typename:int
flags	lib/ffmpeg/include/libavutil/frame.h	/^    int flags;$/;"	m	struct:AVFrame	typeref:typename:int
flags	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkMemoryPropertyFlagBits flags;$/;"	m	struct:AVVkFrame	typeref:typename:VkMemoryPropertyFlagBits
flags	lib/ffmpeg/include/libavutil/motion_vector.h	/^    uint64_t flags;$/;"	m	struct:AVMotionVector	typeref:typename:uint64_t
flags	lib/ffmpeg/include/libavutil/opt.h	/^    int flags;$/;"	m	struct:AVOption	typeref:typename:int
flags	lib/ffmpeg/include/libavutil/pixdesc.h	/^    uint64_t flags;$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:uint64_t
flags	lib/ffmpeg/include/libavutil/stereo3d.h	/^    int flags;$/;"	m	struct:AVStereo3D	typeref:typename:int
flags	lib/ffmpeg/include/libavutil/timecode.h	/^    uint32_t flags;     \/\/\/< flags such as drop frame, +24 hours support, ...$/;"	m	struct:__anon74cc4c7d0108	typeref:typename:uint32_t
flags	lib/minhook/hde/hde32.h	/^    uint32_t flags;$/;"	m	struct:__anon296988db0108	typeref:typename:uint32_t
flags	lib/minhook/hde/hde64.h	/^    uint32_t flags;$/;"	m	struct:__anon296b36800108	typeref:typename:uint32_t
flags	src/Features/Routing/EntityInspector.hpp	/^	int flags;$/;"	m	struct:InspectionItem	typeref:typename:int
flags	src/Utils/SDK.hpp	/^	LoggingChannelFlags flags;$/;"	m	struct:LoggingContext	typeref:typename:LoggingChannelFlags
flags	src/Utils/SDK.hpp	/^	short flags;               \/\/ 14$/;"	m	struct:typedescription_t	typeref:typename:short
flags	src/Utils/SDK.hpp	/^	unsigned short flags;$/;"	m	struct:csurface_t	typeref:typename:unsigned short
flags2	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int flags2;$/;"	m	struct:AVCodecContext	typeref:typename:int
flags_internal	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int flags_internal; \/\/\/< Additional flags for avfilter internal use only.$/;"	m	struct:AVFilter	typeref:typename:int
flatGroup	src/Utils/SDK.hpp	/^	unsigned short flatGroup;                  \/\/ 56\/60$/;"	m	struct:typedescription_t	typeref:typename:unsigned short
flatOffset	src/Utils/SDK.hpp	/^	int flatOffset[TD_OFFSET_COUNT];           \/\/ 48\/52$/;"	m	struct:typedescription_t	typeref:typename:int[]
flush	lib/ffmpeg/include/libavcodec/bsf.h	/^    void (*flush)(AVBSFContext *ctx);$/;"	m	struct:AVBitStreamFilter	typeref:typename:void (*)(AVBSFContext * ctx)
flush	lib/ffmpeg/include/libavcodec/codec.h	/^    void (*flush)(struct AVCodecContext *);$/;"	m	struct:AVCodec	typeref:typename:void (*)(struct AVCodecContext *)
flushStream	src/Features/Renderer.cpp	/^static bool flushStream(Stream *s, bool isEnd = false) {$/;"	f	typeref:typename:bool	file:
flush_packets	lib/ffmpeg/include/libavformat/avformat.h	/^    int flush_packets;$/;"	m	struct:AVFormatContext	typeref:typename:int
fmtdTicks	src/Features/Speedrun/SpeedrunTimer.cpp	/^				auto fmtdTicks = SpeedrunTimer::Format(ticks * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
fmtdTicks	src/Features/Speedrun/SpeedrunTimer.cpp	/^		auto fmtdTicks = SpeedrunTimer::Format(split.ticks * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
fmtdTotal	src/Features/Speedrun/SpeedrunTimer.cpp	/^				auto fmtdTotal = SpeedrunTimer::Format(total * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
fmtdTotal	src/Features/Speedrun/SpeedrunTimer.cpp	/^		auto fmtdTotal = SpeedrunTimer::Format(total * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
followGhostID	src/Features/Demo/NetworkGhostPlayer.hpp	/^	int followGhostID = -1;$/;"	m	class:NetworkManager	typeref:typename:int
followID	src/Features/Demo/DemoGhostPlayer.hpp	/^	int followID;$/;"	m	class:DemoGhostPlayer	typeref:typename:int
followId	src/Features/Demo/GhostEntity.cpp	/^int GhostEntity::followId = -1;$/;"	m	class:GhostEntity	typeref:typename:int
followId	src/Features/Demo/GhostEntity.hpp	/^	static int followId;$/;"	m	class:GhostEntity	typeref:typename:int
followLinePoint	src/Features/Tas/TasTools/StrafeTool.hpp	/^	Vector followLinePoint;$/;"	m	class:AutoStrafeTool	typeref:typename:Vector
followNetwork	src/Features/Demo/GhostEntity.cpp	/^bool GhostEntity::followNetwork;$/;"	m	class:GhostEntity	typeref:typename:bool
followNetwork	src/Features/Demo/GhostEntity.hpp	/^	static bool followNetwork;$/;"	m	class:GhostEntity	typeref:typename:bool
font	src/Features/Hud/Hud.hpp	/^	int font = 0;$/;"	m	class:HudContext	typeref:typename:int
font	src/Features/Hud/Toasts.cpp	/^	Surface::HFont font = scheme->GetFontByID(sar_toast_font.GetInt());$/;"	v	typeref:typename:Surface::HFont
font	src/Features/OverlayRender.cpp	/^	unsigned long font;$/;"	m	struct:OverlayText	typeref:typename:unsigned long	file:
fontCount	src/Modules/Surface.cpp	/^	int fontCount = surface->m_FontAmalgams->m_Size;$/;"	v	typeref:typename:int
fontSize	src/Features/Hud/Hud.hpp	/^	int fontSize = 0;$/;"	m	class:HudContext	typeref:typename:int
force	src/Features/Updater.cpp	/^	bool allowPre = false, exitOnSuccess = false, force = false;$/;"	v	typeref:typename:bool
force_palette	src/Utils/lodepng.hpp	/^	unsigned force_palette;$/;"	m	struct:LodePNGEncoderSettings	typeref:typename:unsigned
forcedPrimaryFullscreen	src/Modules/Engine.hpp	/^	bool forcedPrimaryFullscreen = false;$/;"	m	class:Engine	typeref:typename:bool
format	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int format;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
format	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint16_t format; \/* 0 = graphics *\/$/;"	m	struct:AVSubtitle	typeref:typename:uint16_t
format	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int format;$/;"	m	struct:AVCodecParameters	typeref:typename:int
format	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int format;                 \/\/\/< agreed upon media format$/;"	m	struct:AVFilterLink	typeref:typename:int
format	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    int format;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:int
format	lib/ffmpeg/include/libavutil/frame.h	/^    int format;$/;"	m	struct:AVFrame	typeref:typename:int
format	lib/ffmpeg/include/libavutil/hwcontext.h	/^    enum AVPixelFormat format;$/;"	m	struct:AVHWFramesContext	typeref:enum:AVPixelFormat
format	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    uint32_t format;$/;"	m	struct:AVDRMLayerDescriptor	typeref:typename:uint32_t
format_modifier	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    uint64_t format_modifier;$/;"	m	struct:AVDRMObjectDescriptor	typeref:typename:uint64_t
format_probesize	lib/ffmpeg/include/libavformat/avformat.h	/^    int format_probesize;$/;"	m	struct:AVFormatContext	typeref:typename:int
format_whitelist	lib/ffmpeg/include/libavformat/avformat.h	/^    char *format_whitelist;$/;"	m	struct:AVFormatContext	typeref:typename:char *
forwardmove	src/Utils/SDK.hpp	/^	float forwardmove;      \/\/ 24$/;"	m	struct:CUserCmd	typeref:typename:float
found	src/Features/Demo/GhostEntity.cpp	/^	bool found = false;$/;"	v	typeref:typename:bool
found_decoder	lib/ffmpeg/include/libavformat/avformat.h	/^        int found_decoder;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int
fov	src/Features/Camera.cpp	/^		float fov = (float)std::atof(args[1]);$/;"	v	typeref:typename:float
fov	src/Features/Camera.hpp	/^	float fov = 90;$/;"	m	struct:CameraState	typeref:typename:float
fov	src/Features/FovChanger.cpp	/^	auto fov = std::atoi(args[1]);$/;"	v	typeref:typename:auto
fov	src/Utils/SDK.hpp	/^	float fov;$/;"	m	struct:CViewSetup	typeref:typename:float
fovChanger	src/Features/FovChanger.cpp	/^FovChanger *fovChanger;$/;"	v	typeref:typename:FovChanger *
fovViewmodel	src/Utils/SDK.hpp	/^	float fovViewmodel;$/;"	m	struct:CViewSetup	typeref:typename:float
fp	src/Features/ConfigPlus.cpp	/^	FILE *fp = fopen(PERSISTENT_SVAR_FILENAME, "w");$/;"	v	typeref:typename:FILE *
fps	lib/ffmpeg/include/libavdevice/avdevice.h	/^    AVRational fps;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:AVRational
fps	lib/ffmpeg/include/libavutil/timecode.h	/^    unsigned fps;       \/\/\/< frame per second; must be consistent with the rate field$/;"	m	struct:__anon74cc4c7d0108	typeref:typename:unsigned
fps	src/Features/Renderer.cpp	/^	int fps;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
fps_first_dts	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t fps_first_dts;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
fps_first_dts_idx	lib/ffmpeg/include/libavformat/avformat.h	/^        int     fps_first_dts_idx;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int
fps_last_dts	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t fps_last_dts;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
fps_last_dts_idx	lib/ffmpeg/include/libavformat/avformat.h	/^        int     fps_last_dts_idx;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int
fps_max	src/Modules/Engine.cpp	/^Variable fps_max;$/;"	v	typeref:typename:Variable
fps_probe_size	lib/ffmpeg/include/libavformat/avformat.h	/^    int fps_probe_size;$/;"	m	struct:AVFormatContext	typeref:typename:int
fraction	src/Utils/SDK.hpp	/^	float fraction;$/;"	m	struct:CBaseTrace	typeref:typename:float
fraction_bright_pixels	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational fraction_bright_pixels;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
fractionleftsolid	src/Utils/SDK.hpp	/^	float fractionleftsolid;$/;"	m	struct:CGameTrace	typeref:typename:float
frame	src/Features/Renderer.cpp	/^	AVFrame *frame, *tmpFrame;$/;"	m	struct:Stream	typeref:typename:AVFrame *	file:
frame_bits	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_bits;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
frame_blocked_in	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int frame_blocked_in;$/;"	m	struct:AVFilterLink	typeref:typename:int
frame_count_in	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int64_t frame_count_in, frame_count_out;$/;"	m	struct:AVFilterLink	typeref:typename:int64_t
frame_count_out	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int64_t frame_count_in, frame_count_out;$/;"	m	struct:AVFilterLink	typeref:typename:int64_t
frame_delay_evidence	lib/ffmpeg/include/libavformat/avformat.h	/^        int frame_delay_evidence;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int
frame_height	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int frame_height;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int
frame_number	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_number;$/;"	m	struct:AVCodecContext	typeref:typename:int
frame_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t frame_offset; \/* offset of the current frame *\/$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
frame_params	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*frame_params)(AVCodecContext *avctx, AVBufferRef *hw_frames_ctx);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx,AVBufferRef * hw_frames_ctx)
frame_pool	lib/ffmpeg/include/libavfilter/avfilter.h	/^    void *frame_pool;$/;"	m	struct:AVFilterLink	typeref:typename:void *
frame_priv_data_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_priv_data_size;$/;"	m	struct:AVHWAccel	typeref:typename:int
frame_rate	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVRational frame_rate;$/;"	m	struct:AVFilterLink	typeref:typename:AVRational
frame_rate	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AVRational frame_rate;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:AVRational
frame_rate_index	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t frame_rate_index;       \/\/\/< index into dirac_frame_rate[]$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
frame_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
frame_size	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int      frame_size;$/;"	m	struct:AVCodecParameters	typeref:typename:int
frame_size	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    unsigned int frame_size;$/;"	m	struct:CIDEntry	typeref:typename:unsigned int
frame_size	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              frame_size;            \/* total size of one frame in bytes *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
frame_skip_cmp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_skip_cmp;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
frame_skip_exp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_skip_exp;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
frame_skip_factor	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_skip_factor;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
frame_skip_threshold	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int frame_skip_threshold;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
frame_type	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^    int frame_type;$/;"	m	struct:AVQSVFramesContext	typeref:typename:int
frame_wanted_out	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int frame_wanted_out;$/;"	m	struct:AVFilterLink	typeref:typename:int
frame_width	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int frame_width;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int
framebulkQueue	src/Features/Tas/TasPlayer.hpp	/^	std::vector<TasFramebulk> framebulkQueue[2];$/;"	m	class:TasPlayer	typeref:typename:std::vector<TasFramebulk>[2]
framecount	src/Utils/SDK.hpp	/^	int framecount;                 \/\/ 4$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
framerate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVRational framerate;$/;"	m	struct:AVCodecContext	typeref:typename:AVRational
framerate	lib/ffmpeg/include/libavcodec/dirac.h	/^    AVRational framerate;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:AVRational
frametime	src/Utils/SDK.hpp	/^	float frametime;                \/\/ 16$/;"	m	struct:CGlobalVarsBase	typeref:typename:float
free	lib/ffmpeg/include/libavutil/hwcontext.h	/^    void (*free)(struct AVHWDeviceContext *ctx);$/;"	m	struct:AVHWDeviceContext	typeref:typename:void (*)(struct AVHWDeviceContext * ctx)
free	lib/ffmpeg/include/libavutil/hwcontext.h	/^    void (*free)(struct AVHWFramesContext *ctx);$/;"	m	struct:AVHWFramesContext	typeref:typename:void (*)(struct AVHWFramesContext * ctx)
free_device_capabilities	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*free_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuery /;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext * s,struct AVDeviceCapabilitiesQuery * caps)
free_device_capabilities	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*free_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuery /;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext * s,struct AVDeviceCapabilitiesQuery * caps)
fromAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromUtf16	lib/SFML/include/SFML/System/String.inl	/^String String::fromUtf16(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf32	lib/SFML/include/SFML/System/String.inl	/^String String::fromUtf32(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf8	lib/SFML/include/SFML/System/String.inl	/^String String::fromUtf8(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fs	cvars.js	/^const fs = require('fs');$/;"	C
fullArg	src/Features/Hud/InputHud.cpp	/^		std::string fullArg = args[i];$/;"	v	typeref:typename:std::string
fullUpdate	src/Features/Bot/BotServer.cpp	/^static void fullUpdate(ClientData &cl, bool first_packet = false) {$/;"	f	typeref:typename:void	file:
fullUpdate	src/Features/Tas/TasServer.cpp	/^static void fullUpdate(ClientData &cl, bool first_packet = false) {$/;"	f	typeref:typename:void	file:
func	src/Features/ConfigPlus.cpp	/^		auto func = g_functions.find({args[1]});$/;"	v	typeref:typename:auto
func	src/Hook.hpp	/^	void *func;$/;"	m	class:Hook	typeref:typename:void *
g	src/Cheats.cpp	/^	int g = 255;$/;"	v	typeref:typename:int
g	src/Features/Demo/GhostEntity.cpp	/^	int r, g, b;$/;"	v	typeref:typename:int
g	src/Features/Hud/Hud.cpp	/^				int r, g, b;$/;"	v	typeref:typename:int
g	src/Features/Hud/Hud.cpp	/^	int r, g, b;$/;"	v	typeref:typename:int
g	src/Features/Hud/Toasts.cpp	/^		int r, g, b;$/;"	v	typeref:typename:int
g	src/Features/Hud/Toasts.cpp	/^	uint8_t r, g, b;$/;"	m	struct:TagInfo	typeref:typename:uint8_t	file:
g	src/Utils/SDK.hpp	/^	inline int g() const { return _color[1]; }$/;"	f	struct:Color	typeref:typename:int
g_AcceptInputHook	src/Modules/Server.cpp	/^Hook g_AcceptInputHook(&AcceptInput_Hook);$/;"	v	typeref:typename:Hook
g_ClientDLL	src/Modules/Client.hpp	/^	Interface *g_ClientDLL = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_DrawTranslucentRenderablesHook	src/Modules/Client.cpp	/^Hook g_DrawTranslucentRenderablesHook(&Client::DrawTranslucentRenderables_Hook);$/;"	v	typeref:typename:Hook
g_GameMovement	src/Modules/Client.hpp	/^	Interface *g_GameMovement = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_GameMovement	src/Modules/Server.hpp	/^	Interface *g_GameMovement = nullptr;$/;"	m	class:Server	typeref:typename:Interface *
g_HUDChallengeStats	src/Modules/Client.hpp	/^	Interface *g_HUDChallengeStats = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_HUDQuickInfo	src/Modules/Client.hpp	/^	Interface *g_HUDQuickInfo = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_HudChat	src/Modules/Client.hpp	/^	Interface *g_HudChat = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_HudMultiplayerBasicInfo	src/Modules/Client.hpp	/^	Interface *g_HudMultiplayerBasicInfo = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_HudSaveStatus	src/Modules/Client.hpp	/^	Interface *g_HudSaveStatus = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_Input	src/Modules/Client.hpp	/^	Interface *g_Input = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_Input	src/Offsets.cpp	/^	int g_Input;$/;"	v	namespace:Offsets	typeref:typename:int
g_InputSystem	src/Modules/InputSystem.hpp	/^	Interface *g_InputSystem = nullptr;$/;"	m	class:InputSystem	typeref:typename:Interface *
g_IsCMFlagHookInitialized	src/Modules/Server.cpp	/^static bool g_IsCMFlagHookInitialized = false;$/;"	v	typeref:typename:bool	file:
g_IsPlayerRunCommandHookInitialized	src/Modules/Server.cpp	/^static bool g_IsPlayerRunCommandHookInitialized = false;$/;"	v	typeref:typename:bool	file:
g_RecordBufferHook	src/Features/Renderer.cpp	/^static Hook g_RecordBufferHook(&SND_RecordBuffer_Hook);$/;"	v	typeref:typename:Hook	file:
g_ServerGameDLL	src/Modules/Server.hpp	/^	Interface *g_ServerGameDLL = nullptr;$/;"	m	class:Server	typeref:typename:Interface *
g_TasControllerDigitalActions	src/Features/Tas/TasController.hpp	/^static const char *g_TasControllerDigitalActions[] = {$/;"	v	typeref:typename:const char * []
g_TasControllerInGameButtons	src/Features/Tas/TasController.hpp	/^static const int g_TasControllerInGameButtons[] = {$/;"	v	typeref:typename:const int[]
g_VEngineServer	src/Modules/Engine.hpp	/^	Interface *g_VEngineServer = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
g_actionResetTime	src/Features/Speedrun/SpeedrunTimer.cpp	/^static std::chrono::time_point<std::chrono::steady_clock> g_actionResetTime;$/;"	v	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>	file:
g_activeRun	src/Features/Speedrun/SpeedrunTimer.cpp	/^static std::map<std::string, int> g_activeRun;$/;"	v	typeref:typename:std::map<std::string,int>	file:
g_advance	src/Modules/Engine.cpp	/^static unsigned g_advance = 0;$/;"	v	typeref:typename:unsigned	file:
g_advancing	src/Modules/Engine.cpp	/^static bool g_advancing = false;$/;"	v	typeref:typename:bool	file:
g_aliases	src/Features/ConfigPlus.cpp	/^static std::map<std::string, AliasInfo> g_aliases;$/;"	v	typeref:typename:std::map<std::string,AliasInfo>	file:
g_api_key	src/Features/AutoSubmit.cpp	/^static std::string g_api_key;$/;"	v	typeref:typename:std::string	file:
g_bluePlacementInfo	src/Features/Hud/PortalPlacement.cpp	/^TracePortalPlacementInfo_t g_bluePlacementInfo;$/;"	v	typeref:typename:TracePortalPlacementInfo_t
g_bluePortalAngles	src/Features/Hud/Hud.cpp	/^QAngle g_bluePortalAngles[2];$/;"	v	typeref:typename:QAngle[2]
g_canPlaceBlue	src/Features/Hud/PortalPlacement.cpp	/^bool g_canPlaceBlue;$/;"	v	typeref:typename:bool
g_canPlaceOrange	src/Features/Hud/PortalPlacement.cpp	/^bool g_canPlaceOrange;$/;"	v	typeref:typename:bool
g_categories	src/Features/Speedrun/Categories.cpp	/^static std::map<std::string, SpeedrunCategory> g_categories;$/;"	v	typeref:typename:std::map<std::string,SpeedrunCategory>	file:
g_check_stuck_code	src/Modules/Server.cpp	/^static void *g_check_stuck_code;$/;"	v	typeref:typename:void *	file:
g_clients	src/Features/Bot/BotServer.cpp	/^static std::vector<ClientData> g_clients;$/;"	v	typeref:typename:std::vector<ClientData>	file:
g_clients	src/Features/Tas/TasServer.cpp	/^static std::vector<ClientData> g_clients;$/;"	v	typeref:typename:std::vector<ClientData>	file:
g_con_display_hook	src/Modules/Tier1.cpp	/^static ConsoleDisplayHook g_con_display_hook;$/;"	v	typeref:typename:ConsoleDisplayHook	file:
g_con_filter_rules	src/Modules/Tier1.cpp	/^static std::vector<ConFilterRule> g_con_filter_rules;$/;"	v	typeref:typename:std::vector<ConFilterRule>	file:
g_coopLastSyncEngineTick	src/Features/Speedrun/SpeedrunTimer.cpp	/^static int g_coopLastSyncEngineTick;$/;"	v	typeref:typename:int	file:
g_coopLastSyncTick	src/Features/Speedrun/SpeedrunTimer.cpp	/^static int g_coopLastSyncTick;$/;"	v	typeref:typename:int	file:
g_count_history	src/Features/Hud/LPHud.cpp	/^static std::vector<LPHudCountHistoryInfo> g_count_history;$/;"	v	typeref:typename:std::vector<LPHudCountHistoryInfo>	file:
g_creatorActive	src/Features/Speedrun/CategoryCreator.cpp	/^static bool g_creatorActive;$/;"	v	typeref:typename:bool	file:
g_creatorCategory	src/Features/Speedrun/CategoryCreator.cpp	/^static std::string g_creatorCategory;$/;"	v	typeref:typename:std::string	file:
g_creatorDefaults	src/Features/Speedrun/CategoryCreator.cpp	/^static std::map<std::string, std::string> g_creatorDefaults;$/;"	v	typeref:typename:std::map<std::string,std::string>	file:
g_cur_history_idx	src/Features/Hud/LPHud.cpp	/^static int g_cur_history_idx = -1; \/\/ Cannot be size_t; may be -1$/;"	v	typeref:typename:int	file:
g_cur_map	src/Features/Hud/Minimap.cpp	/^static std::optional<Minimap> g_cur_map;$/;"	v	typeref:typename:std::optional<Minimap>	file:
g_curl	src/Features/AutoSubmit.cpp	/^static CURL *g_curl;$/;"	v	typeref:typename:CURL *	file:
g_curl	src/Features/Updater.cpp	/^static CURL *g_curl;$/;"	v	typeref:typename:CURL *	file:
g_currentCategory	src/Features/Speedrun/Categories.cpp	/^static std::string g_currentCategory = "Singleplayer";$/;"	v	typeref:typename:std::string	file:
g_current_status	src/Features/Bot/BotServer.cpp	/^static TasStatus g_current_status;$/;"	v	typeref:typename:TasStatus	file:
g_current_status	src/Features/Tas/TasServer.cpp	/^static TasStatus g_current_status;$/;"	v	typeref:typename:TasStatus	file:
g_demoBlacklist	src/Modules/EngineDemoPlayer.cpp	/^static std::vector<std::string> g_demoBlacklist;$/;"	v	typeref:typename:std::vector<std::string>	file:
g_demoFixing	src/Modules/EngineDemoPlayer.cpp	/^static bool g_demoFixing = false;$/;"	v	typeref:typename:bool	file:
g_demoStart	src/Modules/EngineDemoPlayer.cpp	/^static int g_demoStart;$/;"	v	typeref:typename:int	file:
g_drawlines	src/Cheats.cpp	/^static std::vector<DrawLineInfo> g_drawlines;$/;"	v	typeref:typename:std::vector<DrawLineInfo>	file:
g_dumpBaseTime	src/Features/Demo/NetworkGhostPlayer.cpp	/^static float g_dumpBaseTime;$/;"	v	typeref:typename:float	file:
g_dumpFile	src/Features/Demo/NetworkGhostPlayer.cpp	/^static FILE *g_dumpFile;$/;"	v	typeref:typename:FILE *	file:
g_entries	src/Features/SegmentedTools.cpp	/^static std::vector<WaitEntry> g_entries;$/;"	v	typeref:typename:std::vector<WaitEntry>	file:
g_filesums	src/Checksum.cpp	/^static std::map<std::string, uint32_t> g_filesums[NUM_FILE_SUM_THREADS];$/;"	v	typeref:typename:std::map<std::string,uint32_t>[]	file:
g_flagStartTouchHook	src/Modules/Server.cpp	/^Hook g_flagStartTouchHook(&Server::StartTouchChallengeNode_Hook);$/;"	v	typeref:typename:Hook
g_frozen	src/Features/Hud/AimPointHud.cpp	/^std::vector<CGameTrace> g_frozen;$/;"	v	typeref:typename:std::vector<CGameTrace>
g_functions	src/Features/ConfigPlus.cpp	/^static std::map<std::string, AliasInfo> g_functions;$/;"	v	typeref:typename:std::map<std::string,AliasInfo>	file:
g_group_idx	src/Features/OverlayRender.cpp	/^static size_t g_group_idx;$/;"	v	typeref:typename:size_t	file:
g_groups	src/Features/OverlayRender.cpp	/^static std::vector<OverlayGroup> g_groups;$/;"	v	typeref:typename:std::vector<OverlayGroup>	file:
g_hHeap	lib/minhook/hook.c	/^HANDLE g_hHeap = NULL;$/;"	v	typeref:typename:HANDLE
g_handlers	src/Features/NetMessage.cpp	/^static std::map<std::string, void (*)(const void *, size_t)> g_handlers;$/;"	v	typeref:typename:std::map<std::string,void (*)(const void *,size_t)>	file:
g_hasPortalGun	src/Features/Hud/PortalPlacement.cpp	/^bool g_hasPortalGun;$/;"	v	typeref:typename:bool
g_hooks	lib/minhook/hook.c	/^} g_hooks;$/;"	v	typeref:struct:__anoncf0f1fd10108
g_hostScheds	src/Scheduler.cpp	/^static std::vector<std::pair<int, std::function<void()>>> g_hostScheds;$/;"	v	typeref:typename:std::vector<std::pair<int,std::function<void ()>>>	file:
g_httpHdrs	src/Features/Updater.cpp	/^static curl_slist *g_httpHdrs;$/;"	v	typeref:typename:curl_slist *	file:
g_inDemoLoad	src/Features/Speedrun/SpeedrunTimer.cpp	/^static bool g_inDemoLoad = false;$/;"	v	typeref:typename:bool	file:
g_isGhostChat	src/Features/Demo/NetworkGhostPlayer.cpp	/^static bool g_isGhostChat = false;$/;"	v	typeref:typename:bool	file:
g_isLocked	lib/minhook/hook.c	/^volatile LONG g_isLocked = FALSE;$/;"	v	typeref:typename:volatile LONG
g_isMainThread	src/CrashHandler.cpp	/^static thread_local bool g_isMainThread = false;$/;"	v	typeref:typename:thread_local bool	file:
g_key_valid	src/Features/AutoSubmit.cpp	/^static bool g_key_valid;$/;"	v	typeref:typename:bool	file:
g_lastControllerMove	src/Features/Tas/TasController.cpp	/^std::chrono::time_point<std::chrono::high_resolution_clock> g_lastControllerMove;$/;"	v	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>
g_lastMouseDeltas	src/Features/Hud/StrafeQuality.cpp	/^static int g_lastMouseDeltas[2];$/;"	v	typeref:typename:int[2]	file:
g_lastScroll	src/Features/Hud/ScrollSpeed.cpp	/^int g_lastScroll[2];$/;"	v	typeref:typename:int[2]
g_lastSps	src/Features/Hud/ScrollSpeed.cpp	/^float g_lastSps[2];$/;"	v	typeref:typename:float[2]
g_lastUserCmd	src/Features/Hud/StrafeQuality.cpp	/^static CUserCmd g_lastUserCmd[2];$/;"	v	typeref:typename:CUserCmd[2]	file:
g_last_group	src/Features/OverlayRender.cpp	/^static size_t g_last_group = SIZE_MAX;$/;"	v	typeref:typename:size_t	file:
g_last_status	src/Features/Bot/BotServer.cpp	/^static TasStatus g_last_status;$/;"	v	typeref:typename:TasStatus	file:
g_last_status	src/Features/Tas/TasServer.cpp	/^static TasStatus g_last_status;$/;"	v	typeref:typename:TasStatus	file:
g_last_trace	src/Features/Hud/AimPointHud.cpp	/^static CGameTrace g_last_trace;$/;"	v	typeref:typename:CGameTrace	file:
g_last_trace_valid	src/Features/Hud/AimPointHud.cpp	/^static bool g_last_trace_valid;$/;"	v	typeref:typename:bool	file:
g_listen_sock	src/Features/Bot/BotServer.cpp	/^static SOCKET g_listen_sock = INVALID_SOCKET;$/;"	v	typeref:typename:SOCKET	file:
g_listen_sock	src/Features/Tas/TasServer.cpp	/^static SOCKET g_listen_sock = INVALID_SOCKET;$/;"	v	typeref:typename:SOCKET	file:
g_mainThreadMutex	src/Scheduler.cpp	/^static std::mutex g_mainThreadMutex;$/;"	v	typeref:typename:std::mutex	file:
g_mainThreadScheds	src/Scheduler.cpp	/^static std::vector<std::function<void()>> g_mainThreadScheds;$/;"	v	typeref:typename:std::vector<std::function<void ()>>	file:
g_main_thread	src/Features/Hud/Toasts.cpp	/^static thread_local bool g_main_thread = false;$/;"	v	typeref:typename:thread_local bool	file:
g_map_ids	src/Features/AutoSubmit.cpp	/^static std::map<std::string, const char *> g_map_ids = {$/;"	v	typeref:typename:std::map<std::string,const char * >	file:
g_movieInfo	src/Features/Renderer.cpp	/^static MovieInfo_t *g_movieInfo;$/;"	v	typeref:typename:MovieInfo_t *	file:
g_nameColorOverrides	src/Modules/Client.cpp	/^static std::deque<Color> g_nameColorOverrides;$/;"	v	typeref:typename:std::deque<Color>	file:
g_net_thread	src/Features/Bot/BotServer.cpp	/^static std::thread g_net_thread;$/;"	v	typeref:typename:std::thread	file:
g_net_thread	src/Features/Tas/TasServer.cpp	/^static std::thread g_net_thread;$/;"	v	typeref:typename:std::thread	file:
g_old_fpe	src/CrashHandler.cpp	/^static struct sigaction g_old_segv, g_old_ill, g_old_fpe;$/;"	v	typeref:struct:sigaction	file:
g_old_ill	src/CrashHandler.cpp	/^static struct sigaction g_old_segv, g_old_ill, g_old_fpe;$/;"	v	typeref:struct:sigaction	file:
g_old_segv	src/CrashHandler.cpp	/^static struct sigaction g_old_segv, g_old_ill, g_old_fpe;$/;"	v	typeref:struct:sigaction	file:
g_orangePlacementInfo	src/Features/Hud/PortalPlacement.cpp	/^TracePortalPlacementInfo_t g_orangePlacementInfo;$/;"	v	typeref:typename:TracePortalPlacementInfo_t
g_orangePortalAngles	src/Features/Hud/Hud.cpp	/^QAngle g_orangePortalAngles[2];$/;"	v	typeref:typename:QAngle[2]
g_orangeReady	src/Features/NetMessage.cpp	/^static bool g_orangeReady = false;$/;"	v	typeref:typename:bool	file:
g_orig_check_stuck_code	src/Modules/Server.cpp	/^static char g_orig_check_stuck_code[6];$/;"	v	typeref:typename:char[6]	file:
g_pCVar	src/Modules/Tier1.hpp	/^	Interface *g_pCVar = nullptr;$/;"	m	class:Tier1	typeref:typename:Interface *
g_pClientMode	src/Modules/Client.hpp	/^	Interface *g_pClientMode = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_pClientMode	src/Offsets.cpp	/^	int g_pClientMode;$/;"	v	namespace:Offsets	typeref:typename:int
g_pClientMode2	src/Modules/Client.hpp	/^	Interface *g_pClientMode2 = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
g_pMemoryBlocks	lib/minhook/buffer.c	/^PMEMORY_BLOCK g_pMemoryBlocks;$/;"	v	typeref:typename:PMEMORY_BLOCK
g_pScheme	src/Modules/Scheme.hpp	/^	Interface *g_pScheme = nullptr;$/;"	m	class:Scheme	typeref:typename:Interface *
g_partner_name	src/Features/AutoSubmit.cpp	/^static std::string g_partner_name;$/;"	v	typeref:typename:std::string	file:
g_persistentSvars	src/Features/ConfigPlus.cpp	/^static std::unordered_set<std::string> g_persistentSvars;$/;"	v	typeref:typename:std::unordered_set<std::string>	file:
g_physCollision	src/Modules/Engine.hpp	/^	Interface *g_physCollision = nullptr; \/\/ This is actually on the vphysics module but I don't /;"	m	class:Engine	typeref:typename:Interface *
g_placeholder	src/Features/OverlayRender.cpp	/^static int g_placeholder;$/;"	v	typeref:typename:int	file:
g_placementName	src/Features/Speedrun/CategoryCreator.cpp	/^static std::string g_placementName;$/;"	v	typeref:typename:std::string	file:
g_placementOptions	src/Features/Speedrun/CategoryCreator.cpp	/^static std::map<std::string, std::string> g_placementOptions;$/;"	v	typeref:typename:std::map<std::string,std::string>	file:
g_placementStage	src/Features/Speedrun/CategoryCreator.cpp	/^static int g_placementStage;$/;"	v	typeref:typename:int	file:
g_placementStart	src/Features/Speedrun/CategoryCreator.cpp	/^static Vector g_placementStart;$/;"	v	typeref:typename:Vector	file:
g_placementType	src/Features/Speedrun/CategoryCreator.cpp	/^static std::string g_placementType;$/;"	v	typeref:typename:std::string	file:
g_playerRunCommandHook	src/Modules/Server.cpp	/^Hook g_playerRunCommandHook(&Server::PlayerRunCommand_Hook);$/;"	v	typeref:typename:Hook
g_playerTraceNeedsTeleport	src/Features/PlayerTrace.cpp	/^bool g_playerTraceNeedsTeleport = false;$/;"	v	typeref:typename:bool
g_playerTraceTeleportLocation	src/Features/PlayerTrace.cpp	/^Vector g_playerTraceTeleportLocation;$/;"	v	typeref:typename:Vector
g_playerTraceTeleportSlot	src/Features/PlayerTrace.cpp	/^int g_playerTraceTeleportSlot;$/;"	v	typeref:typename:int
g_prideThread	src/SAR.cpp	/^static std::thread g_prideThread;$/;"	v	typeref:typename:std::thread	file:
g_queued	src/Features/NetMessage.cpp	/^static std::queue<std::string> g_queued;$/;"	v	typeref:typename:std::queue<std::string>	file:
g_rainbow	src/Features/Hud/Hud.cpp	/^static bool g_rainbow = false;$/;"	v	typeref:typename:bool	file:
g_render	src/Features/Renderer.cpp	/^} g_render;$/;"	v	typeref:struct:__anon6dfe74d20108
g_replayTasCoop	src/Features/Tas/TasPlayer.cpp	/^static bool g_replayTasCoop;$/;"	v	typeref:typename:bool	file:
g_replayTasSingleCoop	src/Features/Tas/TasPlayer.cpp	/^static bool g_replayTasSingleCoop;$/;"	v	typeref:typename:bool	file:
g_rules	src/Features/Speedrun/Categories.cpp	/^static std::map<std::string, SpeedrunRule> g_rules;$/;"	v	typeref:typename:std::map<std::string,SpeedrunRule>	file:
g_running	src/Features/Bot/BotServer.cpp	/^static bool g_running;$/;"	v	typeref:typename:bool	file:
g_running	src/Features/Tas/TasServer.cpp	/^static bool g_running;$/;"	v	typeref:typename:bool	file:
g_runs	src/Features/Speedrun/SpeedrunTimer.cpp	/^static std::vector<std::map<std::string, int>> g_runs;$/;"	v	typeref:typename:std::vector<std::map<std::string,int>>	file:
g_scheduledRules	src/Features/Speedrun/Categories.cpp	/^static std::vector<ScheduledRule> g_scheduledRules;$/;"	v	typeref:typename:std::vector<ScheduledRule>	file:
g_scrolls	src/Features/Hud/ScrollSpeed.cpp	/^int g_scrolls[2];$/;"	v	typeref:typename:int[2]
g_sendResetDoneAt	src/Modules/Server.cpp	/^static int g_sendResetDoneAt = -1;$/;"	v	typeref:typename:int	file:
g_serverScheds	src/Scheduler.cpp	/^static std::vector<std::pair<int, std::function<void()>>> g_serverScheds;$/;"	v	typeref:typename:std::vector<std::pair<int,std::function<void ()>>>	file:
g_shade_color	src/Features/OverlayRender.cpp	/^static std::optional<Vector> g_shade_color;$/;"	v	typeref:typename:std::optional<Vector>	file:
g_should_stop	src/Features/Bot/BotServer.cpp	/^static std::atomic<bool> g_should_stop;$/;"	v	typeref:typename:std::atomic<bool>	file:
g_should_stop	src/Features/Tas/TasServer.cpp	/^static std::atomic<bool> g_should_stop;$/;"	v	typeref:typename:std::atomic<bool>	file:
g_skipping	src/Modules/Engine.cpp	/^static bool g_skipping = false;$/;"	v	typeref:typename:bool	file:
g_slideOff	src/Features/Hud/Toasts.cpp	/^static int g_slideOff;$/;"	v	typeref:typename:int	file:
g_slideOffStart	src/Features/Hud/Toasts.cpp	/^static int g_slideOffStart;$/;"	v	typeref:typename:int	file:
g_slideOffTime	src/Features/Hud/Toasts.cpp	/^static std::chrono::time_point<std::chrono::steady_clock> g_slideOffTime;$/;"	v	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>	file:
g_snd_linear_count	src/Features/Renderer.cpp	/^static int *g_snd_linear_count;$/;"	v	typeref:typename:int *	file:
g_snd_p	src/Features/Renderer.cpp	/^static int **g_snd_p;$/;"	v	typeref:typename:int **	file:
g_snd_vol	src/Features/Renderer.cpp	/^static int *g_snd_vol;$/;"	v	typeref:typename:int *	file:
g_speedrun	src/Features/Speedrun/SpeedrunTimer.cpp	/^} g_speedrun;$/;"	v	typeref:struct:__anon77a6dab70108
g_stats_count	src/Features/Hud/LPHud.cpp	/^static int g_stats_count = 0; \/\/ The last portal count as reported by m_StatsThisLevel$/;"	v	typeref:typename:int	file:
g_status_mutex	src/Features/Bot/BotServer.cpp	/^static std::mutex g_status_mutex;$/;"	v	typeref:typename:std::mutex	file:
g_status_mutex	src/Features/Tas/TasServer.cpp	/^static std::mutex g_status_mutex;$/;"	v	typeref:typename:std::mutex	file:
g_stitch	src/Features/Stitcher.cpp	/^} g_stitch;$/;"	v	typeref:struct:__anonc8a8a2210208
g_stitcher	src/Features/Stitcher.cpp	/^} g_stitcher;$/;"	v	typeref:struct:__anonc8a8a2210108
g_sumthreads	src/Checksum.cpp	/^static std::thread g_sumthreads[NUM_FILE_SUM_THREADS];$/;"	v	typeref:typename:std::thread[]	file:
g_svarListener	src/Features/ConfigPlus.cpp	/^static ConsoleListener *g_svarListener;$/;"	v	typeref:typename:ConsoleListener *	file:
g_svarListenerOutput	src/Features/ConfigPlus.cpp	/^static std::string g_svarListenerOutput;$/;"	v	typeref:typename:std::string	file:
g_svarListenerTarget	src/Features/ConfigPlus.cpp	/^static std::string g_svarListenerTarget;$/;"	v	typeref:typename:std::string	file:
g_svars	src/Features/ConfigPlus.cpp	/^static std::map<std::string, std::string> g_svars;$/;"	v	typeref:typename:std::map<std::string,std::string>	file:
g_tags	src/Features/Hud/Toasts.cpp	/^static std::map<std::string, TagInfo> g_tags;$/;"	v	typeref:typename:std::map<std::string,TagInfo>	file:
g_text	src/Features/OverlayRender.cpp	/^static std::vector<OverlayText> g_text;$/;"	v	typeref:typename:std::vector<OverlayText>	file:
g_textures	src/Features/Hud/Minimap.cpp	/^static std::map<std::string, std::pair<int, float>> g_textures;$/;"	v	typeref:typename:std::map<std::string,std::pair<int,float>>	file:
g_ticks	src/Features/Hud/StrafeQuality.cpp	/^static std::vector<TickInfo> g_ticks[2];$/;"	v	typeref:typename:std::vector<TickInfo>[2]	file:
g_timerInterface	src/Features/Speedrun/SpeedrunTimer.cpp	/^static TimerInterface *g_timerInterface;$/;"	v	typeref:typename:TimerInterface *	file:
g_toasts	src/Features/Hud/Toasts.cpp	/^static std::deque<Toast> g_toasts;$/;"	v	typeref:typename:std::deque<Toast>	file:
g_total	src/Features/Hud/ScrollSpeed.cpp	/^int g_total[2];$/;"	v	typeref:typename:int[2]
g_videomode	src/Features/Renderer.cpp	/^static void **g_videomode;$/;"	v	typeref:typename:void **	file:
g_videomode	src/Features/Stitcher.cpp	/^static void **g_videomode;$/;"	v	typeref:typename:void **	file:
g_waitingForSession	src/Modules/EngineDemoPlayer.cpp	/^static bool g_waitingForSession = false;$/;"	v	typeref:typename:bool	file:
g_wasGhostChat	src/Features/Demo/NetworkGhostPlayer.cpp	/^static bool g_wasGhostChat = false;$/;"	v	typeref:typename:bool	file:
g_worker	src/Features/AutoSubmit.cpp	/^static std::thread g_worker;$/;"	v	typeref:typename:std::thread	file:
g_worker	src/Features/Updater.cpp	/^static std::thread g_worker;$/;"	v	typeref:typename:std::thread	file:
game	src/SAR.hpp	/^	Game *game;$/;"	m	class:SAR	typeref:typename:Game *
gameDirectory	src/Features/Demo/Demo.hpp	/^	char gameDirectory[260];$/;"	m	class:Demo	typeref:typename:char[260]
gameName	src/Features/ConfigPlus.cpp	/^static const char *gameName() {$/;"	f	typeref:typename:const char *	file:
gap	src/Features/Hud/Toasts.cpp	/^	int gap = compact ? 0 : TOAST_GAP;$/;"	v	typeref:typename:int
generateFixedDistanceTree	src/Utils/lodepng.cpp	/^static unsigned generateFixedDistanceTree(HuffmanTree *tree) {$/;"	f	typeref:typename:unsigned	file:
generateFixedLitLenTree	src/Utils/lodepng.cpp	/^static unsigned generateFixedLitLenTree(HuffmanTree *tree) {$/;"	f	typeref:typename:unsigned	file:
getBits	src/Utils/Memory.cpp	/^#define getBits(/;"	d	file:
getByte	src/Utils/Memory.cpp	/^#define getByte(/;"	d	file:
getCurrentCount	src/Features/Hud/LPHud.cpp	/^static int getCurrentCount() {$/;"	f	typeref:typename:int	file:
getCurrentPbScore	src/Features/AutoSubmit.cpp	/^static std::optional<int> getCurrentPbScore(const char *map_id) {$/;"	f	typeref:typename:std::optional<int>	file:
getCurrentTick	src/Features/Speedrun/SpeedrunTimer.cpp	/^static int getCurrentTick() {$/;"	f	typeref:typename:int	file:
getDemoBakName	src/Modules/EngineDemoRecorder.cpp	/^static std::string getDemoBakName(const char *base, int idx) {$/;"	f	typeref:typename:std::string	file:
getEffectiveMapName	src/Features/Speedrun/SpeedrunTimer.cpp	/^static std::string getEffectiveMapName() {$/;"	f	typeref:typename:std::string	file:
getGroupVertVector	src/Features/OverlayRender.cpp	/^static std::vector<Vector> &getGroupVertVector(Color col, bool wireframe, bool line, bool noz = /;"	f	typeref:typename:std::vector<Vector> &	file:
getHash	src/Utils/lodepng.cpp	/^static unsigned getHash(const unsigned char *data, size_t size, size_t pos) {$/;"	f	typeref:typename:unsigned	file:
getLatestVersion	src/Features/Updater.cpp	/^static bool getLatestVersion(std::string *name, std::string *dlUrl, std::string *pdbUrl, bool al/;"	f	typeref:typename:bool	file:
getNextCycleTick	src/Features/Speedrun/Categories.cpp	/^static int getNextCycleTick(std::pair<int, int> cycle) {$/;"	f	typeref:typename:int	file:
getNumColorChannels	src/Utils/lodepng.cpp	/^static unsigned getNumColorChannels(LodePNGColorType colortype) {$/;"	f	typeref:typename:unsigned	file:
getPaletteTranslucency	src/Utils/lodepng.cpp	/^static unsigned getPaletteTranslucency(const unsigned char *palette, size_t palettesize) {$/;"	f	typeref:typename:unsigned	file:
getPixelColorRGBA16	src/Utils/lodepng.cpp	/^static unsigned getPixelColorRGBA16(unsigned short *r, unsigned short *g, unsigned short *b, uns/;"	f	typeref:typename:unsigned	file:
getPixelColorRGBA8	src/Utils/lodepng.cpp	/^static unsigned getPixelColorRGBA8(unsigned char *r, unsigned char *g, unsigned char *b, unsigne/;"	f	typeref:typename:unsigned	file:
getPrecision	src/Features/Hud/Hud.cpp	/^static inline int getPrecision(bool velocity = false) {$/;"	f	typeref:typename:int	file:
getSaveDir	src/Features/Tas/TasPlayer.cpp	/^#define getSaveDir /;"	d	file:
getSaveDir	src/Features/Tas/TasPlayer.cpp	/^static std::string getSaveDir() {$/;"	f	typeref:typename:std::string	file:
getStatsCount	src/Features/Hud/LPHud.cpp	/^static int getStatsCount() {$/;"	f	typeref:typename:int	file:
getSyncForTick	src/Features/Hud/StrafeQuality.cpp	/^static inline void getSyncForTick(const TickInfo &tick, int *totalStrafe, int *syncedStrafe) {$/;"	f	typeref:typename:void	file:
getTagInfo	src/Features/Hud/Toasts.cpp	/^static TagInfo getTagInfo(std::string tag) {$/;"	f	typeref:typename:TagInfo	file:
getTextureId	src/Features/Hud/Minimap.cpp	/^static bool getTextureId(std::string path, Minimap &out) {$/;"	f	typeref:typename:bool	file:
getTreeInflateDynamic	src/Utils/lodepng.cpp	/^static unsigned getTreeInflateDynamic(HuffmanTree *tree_ll, HuffmanTree *tree_d, const unsigned /;"	f	typeref:typename:unsigned	file:
getTreeInflateFixed	src/Utils/lodepng.cpp	/^static void getTreeInflateFixed(HuffmanTree *tree_ll, HuffmanTree *tree_d) {$/;"	f	typeref:typename:void	file:
getValueRequiredBits	src/Utils/lodepng.cpp	/^unsigned getValueRequiredBits(unsigned char value) {$/;"	f	typeref:typename:unsigned
getVersionComponents	src/Features/Updater.cpp	/^static std::optional<SarVersion> getVersionComponents(const char *str) {$/;"	f	typeref:typename:std::optional<SarVersion>	file:
get_buffer2	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*get_buffer2)(struct AVCodecContext *s, AVFrame *frame, int flags);$/;"	m	struct:AVCodecContext	typeref:typename:int (*)(struct AVCodecContext * s,AVFrame * frame,int flags)
get_category	lib/ffmpeg/include/libavutil/log.h	/^    AVClassCategory (*get_category)(void* ctx);$/;"	m	struct:AVClass	typeref:typename:AVClassCategory (*)(void * ctx)
get_color_profile	src/Utils/lodepng.cpp	/^static unsigned get_color_profile(ColorProfile *profile, const unsigned char *in, size_t numpixe/;"	f	typeref:typename:unsigned	file:
get_device_list	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*get_device_list)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext * s,struct AVDeviceInfoList * device_list)
get_device_list	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*get_device_list)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext * s,struct AVDeviceInfoList * device_list)
get_format	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVPixelFormat (*get_format)(struct AVCodecContext *s, const enum AVPixelFormat * fmt);$/;"	m	struct:AVCodecContext	typeref:enum:AVPixelFormat (*)(struct AVCodecContext * s,const enum AVPixelFormat * fmt)
get_next_token	src/Utils/json11.cpp	/^			char get_next_token() {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:char	file:
get_output_timestamp	lib/ffmpeg/include/libavformat/avformat.h	/^    void (*get_output_timestamp)(struct AVFormatContext *s, int stream,$/;"	m	struct:AVOutputFormat	typeref:typename:void (*)(struct AVFormatContext * s,int stream,int64_t * dts,int64_t * wall)
get_pixels	lib/ffmpeg/include/libavcodec/avdct.h	/^    void (*get_pixels)(int16_t *block \/* align 16 *\/,$/;"	m	struct:AVDCT	typeref:typename:void (*)(int16_t * block,const uint8_t * pixels,ptrdiff_t line_size)
get_pixels_unaligned	lib/ffmpeg/include/libavcodec/avdct.h	/^    void (*get_pixels_unaligned)(int16_t *block \/* align 16 *\/,$/;"	m	struct:AVDCT	typeref:typename:void (*)(int16_t * block,const uint8_t * pixels,ptrdiff_t line_size)
get_proc_address	lib/ffmpeg/include/libavutil/hwcontext_vdpau.h	/^    VdpGetProcAddress *get_proc_address;$/;"	m	struct:AVVDPAUDeviceContext	typeref:typename:VdpGetProcAddress *
ghost	src/Features/Demo/DemoGhostPlayer.cpp	/^	auto ghost = demoGhostPlayer.GetGhostByID(ID);$/;"	v	typeref:typename:auto
ghost	src/Features/Demo/GhostEntity.cpp	/^		for (auto &ghost : demoGhostPlayer.GetAllGhosts()) {$/;"	v	typeref:typename:auto &
ghost	src/Features/Demo/GhostEntity.cpp	/^		for (auto ghost : networkManager.ghostPool) {$/;"	v	typeref:typename:auto
ghost	src/Features/Demo/GhostEntity.cpp	/^	auto ghost = GhostEntity::GetFollowTarget();$/;"	v	typeref:typename:auto
ghost	src/Features/Demo/GhostRenderer.hpp	/^	GhostEntity *ghost;$/;"	m	class:GhostRenderer	typeref:typename:GhostEntity *
ghost	src/Features/Demo/NetworkGhostPlayer.cpp	/^		auto ghost = networkManager.ghostPool[i];$/;"	v	typeref:typename:auto
ghostPool	src/Features/Demo/DemoGhostPlayer.hpp	/^	std::vector<DemoGhostEntity> ghostPool;$/;"	m	class:DemoGhostPlayer	typeref:typename:std::vector<DemoGhostEntity>
ghostPool	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::vector<std::shared_ptr<GhostEntity>> ghostPool;$/;"	m	class:NetworkManager	typeref:typename:std::vector<std::shared_ptr<GhostEntity>>
ghostPoolLock	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::mutex ghostPoolLock;$/;"	m	class:NetworkManager	typeref:typename:std::mutex
ghost_TCP_only	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_TCP_only("ghost_TCP_only", "0", "Lathil's special command :).\\n");$/;"	v	typeref:typename:Variable
ghost_bendy_force_lod	src/Features/Demo/GhostRenderer.cpp	/^Variable ghost_bendy_force_lod("ghost_bendy_force_lod", "0", 0, 2, "LOD level that should be enf/;"	v	typeref:typename:Variable
ghost_bendy_lod_proximity	src/Features/Demo/GhostRenderer.cpp	/^Variable ghost_bendy_lod_proximity("ghost_bendy_lod_proximity", "512", 0, 99999, "Distance from /;"	v	typeref:typename:Variable
ghost_height	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_height("ghost_height", "16", -256, "Height of the ghosts. (For prop models, only /;"	v	typeref:typename:Variable
ghost_list_font	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_list_font("ghost_list_font", "0", 0, "Font index for ghost list HUD.\\n");$/;"	v	typeref:typename:Variable
ghost_list_mode	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_list_mode("ghost_list_mode", "0", 0, 1, "Mode for ghost list HUD. 0 = all players/;"	v	typeref:typename:Variable
ghost_list_off	src/Features/Demo/NetworkGhostPlayer.cpp	/^Command ghost_list_off("-ghost_list", +[](const CCommand &args){ playerListUi.active = false; },/;"	v	typeref:typename:Command
ghost_list_on	src/Features/Demo/NetworkGhostPlayer.cpp	/^Command ghost_list_on("+ghost_list", +[](const CCommand &args){ playerListUi.active = true; }, "/;"	v	typeref:typename:Command
ghost_list_show_map	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_list_show_map("ghost_list_show_map", "0", "Show the map name in the ghost list HU/;"	v	typeref:typename:Variable
ghost_list_x	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_list_x("ghost_list_x", "2", "X position of ghost list HUD.\\n", 0);$/;"	v	typeref:typename:Variable
ghost_list_y	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_list_y("ghost_list_y", "-2", "Y position of ghost list HUD.\\n", 0);$/;"	v	typeref:typename:Variable
ghost_name_font	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_name_font("ghost_name_font", "0", 0, "Font index to use for ghost names.\\n");$/;"	v	typeref:typename:Variable
ghost_net_dump	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_net_dump("ghost_net_dump", "0", "Dump all ghost network activity to a file for de/;"	v	typeref:typename:Variable
ghost_opacity	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_opacity("ghost_opacity", "255", 0, 255, "Opacity of the ghosts.\\n");$/;"	v	typeref:typename:Variable
ghost_proximity_fade	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_proximity_fade("ghost_proximity_fade", "100", 0, 2000, "Distance from ghosts at w/;"	v	typeref:typename:Variable
ghost_shading	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_shading("ghost_shading", "1", "Enable simple light level based shading for overla/;"	v	typeref:typename:Variable
ghost_show_advancement	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_show_advancement("ghost_show_advancement", "3", 0, 3, "Show the advancement of th/;"	v	typeref:typename:Variable
ghost_show_names	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_show_names("ghost_show_names", "1", "Whether to show names above ghosts.\\n");$/;"	v	typeref:typename:Variable
ghost_show_spec_chat	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_show_spec_chat("ghost_show_spec_chat", "1", "Show chat messages from spectators w/;"	v	typeref:typename:Variable
ghost_spec_see_spectators	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_spec_see_spectators("ghost_spec_see_spectators", "1", 0, "Whether to see other sp/;"	v	typeref:typename:Variable
ghost_spec_thirdperson	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_spec_thirdperson("ghost_spec_thirdperson", "0", "Whether to spectate ghost from a/;"	v	typeref:typename:Variable
ghost_spec_thirdperson_dist	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_spec_thirdperson_dist("ghost_spec_thirdperson_dist", "300", 50, "The maximum dist/;"	v	typeref:typename:Variable
ghost_sync	src/Features/Demo/DemoGhostPlayer.cpp	/^Variable ghost_sync("ghost_sync", "0", "When loading a new level, pauses the game until other pl/;"	v	typeref:typename:Variable
ghost_sync_countdown	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_sync_countdown("ghost_sync_countdown", "3", 0, "The number of seconds of countdow/;"	v	typeref:typename:Variable
ghost_text_offset	src/Features/Demo/GhostEntity.cpp	/^Variable ghost_text_offset("ghost_text_offset", "7", -1024, "Offset of the name over the ghosts./;"	v	typeref:typename:Variable
ghost_type	src/Features/Demo/GhostEntity.cpp	/^GhostType GhostEntity::ghost_type = GhostType::BENDY;$/;"	m	class:GhostEntity	typeref:typename:GhostType
ghost_type	src/Features/Demo/GhostEntity.hpp	/^	static GhostType ghost_type;$/;"	m	class:GhostEntity	typeref:typename:GhostType
ghost_update_rate	src/Features/Demo/NetworkGhostPlayer.cpp	/^Variable ghost_update_rate("ghost_update_rate", "50", 1, "Adjust the update rate. For people wit/;"	v	typeref:typename:Variable
gid	lib/curl/include/curl/curl.h	/^  int gid;$/;"	m	struct:curl_fileinfo	typeref:typename:int
global_quality	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int global_quality;$/;"	m	struct:AVCodecContext	typeref:typename:int
gop_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int gop_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
gpGlobals	src/Modules/Server.hpp	/^	CGlobalVars *gpGlobals = nullptr;$/;"	m	class:Server	typeref:typename:CGlobalVars *
gpGlobals	src/Offsets.cpp	/^	int gpGlobals;$/;"	v	namespace:Offsets	typeref:typename:int
graph	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilterGraph *graph;    \/\/\/< filtergraph this filter belongs to$/;"	m	struct:AVFilterContext	typeref:struct:AVFilterGraph *
graph	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilterGraph *graph;$/;"	m	struct:AVFilterLink	typeref:struct:AVFilterGraph *
gravity	src/Features/Routing/EntityInspector.hpp	/^	float gravity;$/;"	m	struct:InspectionItem	typeref:typename:float
greybits	src/Utils/lodepng.cpp	/^	unsigned greybits; \/*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit /;"	m	struct:ColorProfile	typeref:typename:unsigned	file:
greybits_done	src/Utils/lodepng.cpp	/^	unsigned char greybits_done;$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
groundFramesCounter	src/Features/GroundFramesCounter.cpp	/^GroundFramesCounter *groundFramesCounter;$/;"	v	typeref:typename:GroundFramesCounter *
groundHandle	src/Features/Hud/Hud.cpp	/^	unsigned groundHandle = *(unsigned *)((uintptr_t)player + Offsets::C_m_hGroundEntity);$/;"	v	typeref:typename:unsigned
grounded	src/Features/Demo/GhostEntity.hpp	/^	bool grounded;$/;"	m	struct:DataGhost	typeref:typename:bool
grounded	src/Features/GroundFramesCounter.hpp	/^	bool grounded[2] = {false};$/;"	m	class:GroundFramesCounter	typeref:typename:bool[2]
grounded	src/Features/Hud/StrafeQuality.cpp	/^	bool grounded;$/;"	m	struct:TickInfo	typeref:typename:bool	file:
grounded	src/Features/PlayerTrace.cpp	/^		auto grounded = trace->grounded[0][i];$/;"	v	typeref:typename:auto
grounded	src/Features/PlayerTrace.hpp	/^	std::vector<bool> grounded[2];$/;"	m	struct:Trace	typeref:typename:std::vector<bool>[2]
grounded	src/Features/Tas/TasPlayer.hpp	/^	bool grounded;$/;"	m	struct:TasPlayerInfo	typeref:typename:bool
groundeds	src/Features/Hud/Hud.cpp	/^	static bool groundeds[2];$/;"	v	typeref:typename:bool[2]	file:
group	lib/curl/include/curl/curl.h	/^    char *group;$/;"	m	struct:curl_fileinfo::__anon5737ba340308	typeref:typename:char *
group	src/Features/Hud/Hud.hpp	/^	std::array<int, 256> group{0};$/;"	m	class:HudContext	typeref:typename:std::array<int,256>
group_id	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t group_id;                     \/**< Group ID of owner, -1 if unknown. *\/$/;"	m	struct:AVIODirEntry	typeref:typename:int64_t
h	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int h;         \/\/\/< height           of pict, undefined when pict is not set$/;"	m	struct:AVSubtitleRect	typeref:typename:int
h	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int h;                      \/\/\/< agreed upon image height$/;"	m	struct:AVFilterLink	typeref:typename:int
h	lib/ffmpeg/include/libavutil/motion_vector.h	/^    uint8_t w, h;$/;"	m	struct:AVMotionVector	typeref:typename:uint8_t
h	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int w, h;$/;"	m	struct:AVVideoBlockParams	typeref:typename:int
handleCoopPacket	src/Features/Speedrun/SpeedrunTimer.cpp	/^static void handleCoopPacket(const void *data, size_t size) {$/;"	f	typeref:typename:void	file:
handleMessage	src/Features/NetMessage.cpp	/^static inline void handleMessage(const char *type, void *data, size_t size) {$/;"	f	typeref:typename:void	file:
handleMessage	src/Features/Teleporter.cpp	/^static void handleMessage(const void *data, size_t size) {$/;"	f	typeref:typename:void	file:
handler	src/CrashHandler.cpp	/^static LONG WINAPI handler(EXCEPTION_POINTERS *ExceptionInfo)$/;"	f	typeref:typename:LONG WINAPI	file:
hardlinks	lib/curl/include/curl/curl.h	/^  long int hardlinks;$/;"	m	struct:curl_fileinfo	typeref:typename:long int
hasAlignmentByte	src/Features/Demo/DemoParser.hpp	/^	bool hasAlignmentByte;$/;"	m	class:DemoParser	typeref:typename:bool
hasCustomCallback	src/Variable.hpp	/^	bool hasCustomCallback;$/;"	m	class:Variable	typeref:typename:bool
hasFinished	src/Features/Demo/DemoGhostEntity.hpp	/^	bool hasFinished;$/;"	m	class:DemoGhostEntity	typeref:typename:bool
hasJumpedLastTick	src/Features/Tas/TasTools/AutoJumpTool.hpp	/^	bool hasJumpedLastTick = false;$/;"	m	class:AutoJumpTool	typeref:typename:bool
hasLoaded	src/Features/Feature.hpp	/^	bool hasLoaded = false;$/;"	m	class:Feature	typeref:typename:bool
hasLoaded	src/Modules/Module.hpp	/^	bool hasLoaded = false;$/;"	m	class:Module	typeref:typename:bool
hasNotified	src/Modules/EngineDemoRecorder.hpp	/^	bool hasNotified = false;$/;"	m	class:EngineDemoRecorder	typeref:typename:bool
hasPaused	src/Modules/Engine.hpp	/^	bool hasPaused = false;$/;"	m	class:Engine	typeref:typename:bool
hasRecorded	src/Modules/Engine.hpp	/^	bool hasRecorded = false;$/;"	m	class:Engine	typeref:typename:bool
hasSplitLoad	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool hasSplitLoad;$/;"	m	struct:__anon77a6dab70108	typeref:typename:bool	file:
hasWaited	src/Modules/Engine.hpp	/^	bool hasWaited = false;$/;"	m	class:Engine	typeref:typename:bool
has_b_frames	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int has_b_frames;$/;"	m	struct:AVCodecContext	typeref:typename:int
has_luminance	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    int has_luminance;$/;"	m	struct:AVMasteringDisplayMetadata	typeref:typename:int
has_primaries	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    int has_primaries;$/;"	m	struct:AVMasteringDisplayMetadata	typeref:typename:int
has_shape	src/Utils/json11.cpp	/^	bool Json::has_shape(const shape &types, string &err) const {$/;"	f	class:json11::Json	typeref:typename:bool
hasbeenpredicted	src/Utils/SDK.hpp	/^	bool hasbeenpredicted;  \/\/ 60$/;"	m	struct:CUserCmd	typeref:typename:bool
hash_cleanup	src/Utils/lodepng.cpp	/^static void hash_cleanup(Hash *hash) {$/;"	f	typeref:typename:void	file:
hash_init	src/Utils/lodepng.cpp	/^static unsigned hash_init(Hash *hash, unsigned windowsize) {$/;"	f	typeref:typename:unsigned	file:
hde32_disasm	lib/minhook/hde/hde32.c	/^unsigned int hde32_disasm(const void *code, hde32s *hs)$/;"	f	typeref:typename:unsigned int
hde32_table	lib/minhook/hde/table32.h	/^unsigned char hde32_table[] = {$/;"	v	typeref:typename:unsigned char[]
hde32s	lib/minhook/hde/hde32.h	/^} hde32s;$/;"	t	typeref:struct:__anon296988db0108
hde64_disasm	lib/minhook/hde/hde64.c	/^unsigned int hde64_disasm(const void *code, hde64s *hs)$/;"	f	typeref:typename:unsigned int
hde64_table	lib/minhook/hde/table64.h	/^unsigned char hde64_table[] = {$/;"	v	typeref:typename:unsigned char[]
hde64s	lib/minhook/hde/hde64.h	/^} hde64s;$/;"	t	typeref:struct:__anon296b36800108
head	src/Utils/lodepng.cpp	/^	int *head; \/*hash value to head circular pos*\/$/;"	m	struct:Hash	typeref:typename:int *	file:
header	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::vector<std::string> header;$/;"	v	typeref:typename:std::vector<std::string>
headerOnly	src/Features/Demo/DemoParser.hpp	/^	bool headerOnly;$/;"	m	class:DemoParser	typeref:typename:bool
header_bits	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int header_bits;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
height	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int height;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
height	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int height;$/;"	m	struct:AVPanScan	typeref:typename:int
height	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int width, height;$/;"	m	struct:AVCodecContext	typeref:typename:int
height	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int height;$/;"	m	struct:AVCodecParameters	typeref:typename:int
height	lib/ffmpeg/include/libavcodec/dirac.h	/^    unsigned height;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:unsigned
height	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    unsigned int width, height;$/;"	m	struct:CIDEntry	typeref:typename:unsigned int
height	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              height;                \/* picture height in pixels *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
height	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int height; \/**< height *\/$/;"	m	struct:AVDeviceRect	typeref:typename:int
height	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    int width, height;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:int
height	lib/ffmpeg/include/libavutil/frame.h	/^    int width, height;$/;"	m	struct:AVFrame	typeref:typename:int
height	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int width, height;$/;"	m	struct:AVHWFramesContext	typeref:typename:int
height	src/Features/Hud/InputHud.hpp	/^		int height;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:int
height	src/Features/Renderer.cpp	/^	int width, height;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
height	src/Utils/SDK.hpp	/^	int height;$/;"	m	struct:CViewSetup	typeref:typename:int
help	lib/ffmpeg/include/libavutil/opt.h	/^    const char *help;$/;"	m	struct:AVOption	typeref:typename:const char *
hide_gun_when_holding	src/Cheats.cpp	/^Variable hide_gun_when_holding;$/;"	v	typeref:typename:Variable
highRange	src/Utils/SDK.hpp	/^		int highRange;$/;"	m	struct:CFontAmalgam::TFontRange	typeref:typename:int
highlight	src/Features/Hud/InputHud.hpp	/^		Color highlight;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:Color
hitbox	src/Features/Hud/VphysHud.cpp	/^	int hitbox = std::atoi(args[1]);$/;"	v	typeref:typename:int
hitbox	src/Utils/SDK.hpp	/^	int hitbox;$/;"	m	struct:CGameTrace	typeref:typename:int
hitgroup	src/Utils/SDK.hpp	/^	int hitgroup;$/;"	m	struct:CGameTrace	typeref:typename:int
holdingDuck	src/Features/Hud/Hud.cpp	/^		bool holdingDuck = (inputHud.GetButtonBits(ctx->slot) & IN_DUCK);$/;"	v	typeref:typename:bool
hook	src/Hook.hpp	/^	void *hook;$/;"	m	class:Hook	typeref:typename:void *
hooks	src/Hook.hpp	/^	static std::vector<Hook *> hooks;$/;"	m	class:Hook	typeref:typename:std::vector<Hook * >
hooks	src/SARHook.cpp	/^std::vector<Hook *> Hook::hooks;$/;"	m	class:Hook	typeref:typename:std::vector<Hook * >
host	lib/curl/include/curl/curl.h	/^  const char *host;         \/* OS\/host\/cpu\/machine when configured *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
hostTimeWrap	src/Modules/Server.cpp	/^float hostTimeWrap() {$/;"	f	typeref:typename:float
host_framerate	src/Modules/Engine.cpp	/^Variable host_framerate;$/;"	v	typeref:typename:Variable
host_frametime	src/Modules/Engine.cpp	/^static float *host_frametime;$/;"	v	typeref:typename:float *	file:
hoststate	src/Modules/Engine.hpp	/^	CHostState *hoststate = nullptr;$/;"	m	class:Engine	typeref:typename:CHostState *
hoststate	src/Offsets.cpp	/^	int hoststate;$/;"	v	namespace:Offsets	typeref:typename:int
hour	src/Utils/lodepng.hpp	/^	unsigned hour;   \/*0-23*\/$/;"	m	struct:LodePNGTime	typeref:typename:unsigned
hovers	src/Features/PlayerTrace.cpp	/^std::vector<TraceHoverInfo> hovers;$/;"	v	typeref:typename:std::vector<TraceHoverInfo>
huds	src/Modules/VGui.hpp	/^	std::vector<Hud *> huds = std::vector<Hud *>();$/;"	m	class:VGui	typeref:typename:std::vector<Hud * >
huffmanDecodeSymbol	src/Utils/lodepng.cpp	/^static unsigned huffmanDecodeSymbol(const unsigned char *in, size_t *bp, const HuffmanTree *code/;"	f	typeref:typename:unsigned	file:
hw_configs	lib/ffmpeg/include/libavcodec/codec.h	/^    const struct AVCodecHWConfigInternal **hw_configs;$/;"	m	struct:AVCodec	typeref:typename:const struct AVCodecHWConfigInternal **
hw_device_ctx	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVBufferRef *hw_device_ctx;$/;"	m	struct:AVCodecContext	typeref:typename:AVBufferRef *
hw_device_ctx	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVBufferRef *hw_device_ctx;$/;"	m	struct:AVFilterContext	typeref:typename:AVBufferRef *
hw_frames_ctx	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVBufferRef *hw_frames_ctx;$/;"	m	struct:AVCodecContext	typeref:typename:AVBufferRef *
hw_frames_ctx	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVBufferRef *hw_frames_ctx;$/;"	m	struct:AVFilterLink	typeref:typename:AVBufferRef *
hw_frames_ctx	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AVBufferRef *hw_frames_ctx;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:AVBufferRef *
hw_frames_ctx	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef *hw_frames_ctx;$/;"	m	struct:AVFrame	typeref:typename:AVBufferRef *
hwaccel	lib/ffmpeg/include/libavcodec/avcodec.h	/^    const struct AVHWAccel *hwaccel;$/;"	m	struct:AVCodecContext	typeref:typename:const struct AVHWAccel *
hwaccel_context	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void *hwaccel_context;$/;"	m	struct:AVCodecContext	typeref:typename:void *
hwaccel_flags	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int hwaccel_flags;$/;"	m	struct:AVCodecContext	typeref:typename:int
hwctx	lib/ffmpeg/include/libavutil/hwcontext.h	/^    void *hwctx;$/;"	m	struct:AVHWDeviceContext	typeref:typename:void *
hwctx	lib/ffmpeg/include/libavutil/hwcontext.h	/^    void *hwctx;$/;"	m	struct:AVHWFramesContext	typeref:typename:void *
hyper_version	lib/curl/include/curl/curl.h	/^  const char *hyper_version; \/* human readable string. *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
i	lib/ffmpeg/include/libavutil/intfloat.h	/^    uint32_t i;$/;"	m	union:av_intfloat32	typeref:typename:uint32_t
i	lib/ffmpeg/include/libavutil/intfloat.h	/^    uint64_t i;$/;"	m	union:av_intfloat64	typeref:typename:uint64_t
i	src/Cheats.cpp	/^	for (int i = 0; i < 20; ++i) {$/;"	v	typeref:typename:int
i	src/Features/Bot/BotServer.cpp	/^				union { uint32_t i; float f; } rate = { popRaw32(cl.cmdbuf) };$/;"	m	union:processCommands::__anonba1d32eb060a	typeref:typename:uint32_t	file:
i	src/Features/Bot/BotServer.cpp	/^		union { float f; int i; } rate = { status.playback_rate };$/;"	m	union:update::__anonba1d32eb020a	typeref:typename:int	file:
i	src/Features/Bot/BotServer.cpp	/^	union { float f; int i; } rate = { g_last_status.playback_rate };$/;"	m	union:fullUpdate::__anonba1d32eb010a	typeref:typename:int	file:
i	src/Features/Camera.cpp	/^			for (int i = 0; i < args.ArgC() - 2; i++) {$/;"	v	typeref:typename:int
i	src/Features/Camera.cpp	/^		for (int i = 0; i < args.ArgC() - 1; i++) {$/;"	v	typeref:typename:int
i	src/Features/Camera.cpp	/^		int i = std::atoi(args[1]);$/;"	v	typeref:typename:int
i	src/Features/ConfigPlus.cpp	/^	for (int i = 1; i < args.ArgC(); ++i) {$/;"	v	typeref:typename:int
i	src/Features/Demo/DemoParser.cpp	/^	for (auto i = 1; i < args.ArgC(); ++i) {$/;"	v	typeref:typename:auto
i	src/Features/Demo/NetworkGhostPlayer.cpp	/^	for (int i = 0; i < networkManager.ghostPool.size(); ++i) {$/;"	v	typeref:typename:int
i	src/Features/Demo/NetworkGhostPlayer.cpp	/^	for (int i = 2; i < args.ArgC(); ++i) {$/;"	v	typeref:typename:int
i	src/Features/Hud/InputHud.cpp	/^	for (int i = 2; i < args.ArgC(); i++) {$/;"	v	typeref:typename:int
i	src/Features/Listener.cpp	/^		for (auto i = 0; i < m_Size; ++i) {$/;"	v	typeref:typename:auto
i	src/Features/PlayerTrace.cpp	/^	for (int i = 0; i < size; i++) {$/;"	v	typeref:typename:int
i	src/Features/Speedrun/Categories.cpp	/^	for (size_t i = 3; i < args.ArgC(); ++i) {$/;"	v	typeref:typename:size_t
i	src/Features/Speedrun/SpeedrunTimer.cpp	/^		for (size_t i = 0; i < header.size(); ++i) {$/;"	v	typeref:typename:size_t
i	src/Features/Summary.cpp	/^	for (size_t i = 0; i < summary->items.size(); ++i) {$/;"	v	typeref:typename:size_t
i	src/Features/Tas/TasParser.cpp	/^		int i;$/;"	m	union:TasToken::__anon5c4243c7020a	typeref:typename:int	file:
i	src/Features/Tas/TasServer.cpp	/^				union { uint32_t i; float f; } rate = { popRaw32(cl.cmdbuf) };$/;"	m	union:processCommands::__anon21427171060a	typeref:typename:uint32_t	file:
i	src/Features/Tas/TasServer.cpp	/^		union { float f; int i; } rate = { status.playback_rate };$/;"	m	union:update::__anon21427171020a	typeref:typename:int	file:
i	src/Features/Tas/TasServer.cpp	/^	union { float f; int i; } rate = { g_last_status.playback_rate };$/;"	m	union:fullUpdate::__anon21427171010a	typeref:typename:int	file:
i	src/Features/Timer/Timer.cpp	/^	for (size_t i = 0; i < average; ++i) {$/;"	v	typeref:typename:size_t
i	src/Features/Timer/Timer.cpp	/^	for (size_t i = 0; i < cps; ++i) {$/;"	v	typeref:typename:size_t
i	src/Features/Updater.cpp	/^	for (int i = 1; i < args.ArgC(); ++i) {$/;"	v	typeref:typename:int
i	src/Modules/Surface.cpp	/^	for (int i = 0; i < fontCount; i++) {$/;"	v	typeref:typename:int
i	src/Utils/json11.cpp	/^			size_t i;$/;"	m	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:size_t	file:
i64	lib/ffmpeg/include/libavutil/opt.h	/^        int64_t i64;$/;"	m	union:AVOption::__anon6e396c26010a	typeref:typename:int64_t
iNumPortalsPlaced	src/Offsets.cpp	/^	int iNumPortalsPlaced;$/;"	v	namespace:Offsets	typeref:typename:int
iVal	src/Utils/SDK.hpp	/^		int iVal;$/;"	m	union:variant_t::__anon21a65a74090a	typeref:typename:int
i_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int i_count;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
i_quant_factor	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float i_quant_factor;$/;"	m	struct:AVCodecContext	typeref:typename:float
i_quant_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float i_quant_offset;$/;"	m	struct:AVCodecContext	typeref:typename:float
i_tex_bits	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int i_tex_bits;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
iconv_ver_num	lib/curl/include/curl/curl.h	/^  int iconv_ver_num;$/;"	m	struct:curl_version_info_data	typeref:typename:int
id	lib/curl/include/curl/curl.h	/^  curl_sslbackend id;$/;"	m	struct:curl_ssl_backend	typeref:typename:curl_sslbackend
id	lib/curl/include/curl/options.h	/^  CURLoption id;$/;"	m	struct:curl_easyoption	typeref:typename:CURLoption
id	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVCodecID id;$/;"	m	struct:AVHWAccel	typeref:enum:AVCodecID
id	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int id;$/;"	m	struct:AVPanScan	typeref:typename:int
id	lib/ffmpeg/include/libavcodec/codec.h	/^    enum AVCodecID id;$/;"	m	struct:AVCodec	typeref:enum:AVCodecID
id	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    enum AVCodecID     id;$/;"	m	struct:AVCodecDescriptor	typeref:enum:AVCodecID
id	lib/ffmpeg/include/libavformat/avformat.h	/^    int            id;$/;"	m	struct:AVProgram	typeref:typename:int
id	lib/ffmpeg/include/libavformat/avformat.h	/^    int id;                 \/\/\/< unique ID to identify the chapter$/;"	m	struct:AVChapter	typeref:typename:int
id	lib/ffmpeg/include/libavformat/avformat.h	/^    int id;$/;"	m	struct:AVStream	typeref:typename:int
id	src/Modules/Surface.cpp	/^	int id = scheme->GetDefaultFont() + atoi(args[1]);$/;"	v	typeref:typename:int
idct	lib/ffmpeg/include/libavcodec/avdct.h	/^    void (*idct)(int16_t *block \/* align 16 *\/);$/;"	m	struct:AVDCT	typeref:typename:void (*)(int16_t * block)
idct	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             idct;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
idct_algo	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int idct_algo;$/;"	m	struct:AVCodecContext	typeref:typename:int
idct_algo	lib/ffmpeg/include/libavcodec/avdct.h	/^    int idct_algo;$/;"	m	struct:AVDCT	typeref:typename:int
idct_permutation	lib/ffmpeg/include/libavcodec/avdct.h	/^    uint8_t idct_permutation[64];$/;"	m	struct:AVDCT	typeref:typename:uint8_t[64]
idx	src/Features/Hud/Hud.cpp	/^	long idx = parseIdx(args[1]);$/;"	v	typeref:typename:long
idx	src/Modules/EngineDemoPlayer.cpp	/^		size_t idx = name.rfind('_');$/;"	v	typeref:typename:size_t
iformat	lib/ffmpeg/include/libavformat/avformat.h	/^    ff_const59 struct AVInputFormat *iformat;$/;"	m	struct:AVFormatContext	typeref:struct:AVInputFormat *
ignoreThisSession	src/Features/SegmentedTools.cpp	/^	bool ignoreThisSession;$/;"	m	struct:WaitEntry	typeref:typename:bool	file:
ignore_adler32	src/Utils/lodepng.hpp	/^	unsigned ignore_adler32; \/*if 1, continue and don't give an error message if the Adler32 check/;"	m	struct:LodePNGDecompressSettings	typeref:typename:unsigned
ignore_boundary_point	lib/ffmpeg/include/libavformat/avio.h	/^    int ignore_boundary_point;$/;"	m	struct:AVIOContext	typeref:typename:int
ignore_crc	src/Utils/lodepng.hpp	/^	unsigned ignore_crc;    \/*ignore CRC checksums*\/$/;"	m	struct:LodePNGDecoderSettings	typeref:typename:unsigned
ildct_cmp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int ildct_cmp;$/;"	m	struct:AVCodecContext	typeref:typename:int
im	lib/ffmpeg/include/libavcodec/avfft.h	/^    FFTSample re, im;$/;"	m	struct:FFTComplex	typeref:typename:FFTSample
im	lib/ffmpeg/include/libavutil/tx.h	/^    double re, im;$/;"	m	struct:AVComplexDouble	typeref:typename:double
im	lib/ffmpeg/include/libavutil/tx.h	/^    float re, im;$/;"	m	struct:AVComplexFloat	typeref:typename:float
im	lib/ffmpeg/include/libavutil/tx.h	/^    int32_t re, im;$/;"	m	struct:AVComplexInt32	typeref:typename:int32_t
imageBuf	src/Features/Renderer.cpp	/^	uint8_t *imageBuf;  \/\/ Temporary buffer - contains the raw pixel data read from the screen$/;"	m	struct:__anon6dfe74d20108	typeref:typename:uint8_t *	file:
imageBufLock	src/Features/Renderer.cpp	/^	std::mutex imageBufLock;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::mutex	file:
images	src/Features/Hud/Crosshair.hpp	/^	std::vector<std::string> images;$/;"	m	class:Crosshair	typeref:typename:std::vector<std::string>
img	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkImage img[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVkFrame	typeref:typename:VkImage[]
imm	lib/minhook/hde/hde32.h	/^    } imm;$/;"	m	struct:__anon296988db0108	typeref:union:__anon296988db0108::__anon296988db020a
imm	lib/minhook/hde/hde64.h	/^    } imm;$/;"	m	struct:__anon296b36800108	typeref:union:__anon296b36800108::__anon296b3680020a
imm16	lib/minhook/hde/hde32.h	/^        uint16_t imm16;$/;"	m	union:__anon296988db0108::__anon296988db020a	typeref:typename:uint16_t
imm16	lib/minhook/hde/hde64.h	/^        uint16_t imm16;$/;"	m	union:__anon296b36800108::__anon296b3680020a	typeref:typename:uint16_t
imm32	lib/minhook/hde/hde32.h	/^        uint32_t imm32;$/;"	m	union:__anon296988db0108::__anon296988db020a	typeref:typename:uint32_t
imm32	lib/minhook/hde/hde64.h	/^        uint32_t imm32;$/;"	m	union:__anon296b36800108::__anon296b3680020a	typeref:typename:uint32_t
imm64	lib/minhook/hde/hde64.h	/^        uint64_t imm64;$/;"	m	union:__anon296b36800108::__anon296b3680020a	typeref:typename:uint64_t
imm8	lib/minhook/hde/hde32.h	/^        uint8_t imm8;$/;"	m	union:__anon296988db0108::__anon296988db020a	typeref:typename:uint8_t
imm8	lib/minhook/hde/hde64.h	/^        uint8_t imm8;$/;"	m	union:__anon296b36800108::__anon296b3680020a	typeref:typename:uint8_t
impulse	src/Utils/SDK.hpp	/^	unsigned char impulse;  \/\/ 40$/;"	m	struct:CUserCmd	typeref:typename:unsigned char
inControllerCommands	src/Features/Tas/TasPlayer.hpp	/^	bool inControllerCommands = false;$/;"	m	class:TasPlayer	typeref:typename:bool
inCoopPause	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool inCoopPause;$/;"	m	struct:__anon77a6dab70108	typeref:typename:bool	file:
inDuckJump	src/Features/Hud/Hud.cpp	/^		bool inDuckJump = *reinterpret_cast<bool *>((uintptr_t)player + Offsets::C_m_bInDuckJump);$/;"	v	typeref:typename:bool
inMapCheatsEnabled	src/Features/ReloadedFix.hpp	/^	bool inMapCheatsEnabled = false;$/;"	m	class:ReloadedFix	typeref:typename:bool
in_channel_layouts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilterChannelLayouts  *in_channel_layouts;$/;"	m	struct:AVFilterLink	typeref:struct:AVFilterChannelLayouts *
in_forceuser	src/Modules/Client.cpp	/^Variable in_forceuser;$/;"	v	typeref:typename:Variable
in_formats	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterFormats *in_formats;$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterFormats *
in_jump	src/Offsets.cpp	/^	int in_jump;$/;"	v	namespace:Offsets	typeref:typename:int
in_range	src/Utils/json11.cpp	/^	static inline bool in_range(long x, long lower, long upper) {$/;"	f	namespace:json11	typeref:typename:bool	file:
in_samplerates	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterFormats  *in_samplerates;$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterFormats *
includeSubDomains	lib/curl/include/curl/curl.h	/^  unsigned int includeSubDomains:1;$/;"	m	struct:curl_hstsentry	typeref:typename:unsigned int:1
index	lib/curl/include/curl/curl.h	/^  size_t index; \/* the provided entry's "index" or count *\/$/;"	m	struct:curl_index	typeref:typename:size_t
index	lib/ffmpeg/include/libavformat/avformat.h	/^    int index;    \/**< stream index in AVFormatContext *\/$/;"	m	struct:AVStream	typeref:typename:int
index	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    intptr_t index;$/;"	m	struct:AVD3D11FrameDescriptor	typeref:typename:intptr_t
index	lib/ffmpeg/include/libavutil/lfg.h	/^    int index;$/;"	m	struct:AVLFG	typeref:typename:int
index	src/Features/EntityList.cpp	/^	for (auto index = 0; index < Offsets::NUM_ENT_ENTRIES; ++index) {$/;"	v	typeref:typename:auto
index	src/Features/EntityList.cpp	/^	for (auto index = first; index < Offsets::NUM_ENT_ENTRIES; ++index) {$/;"	v	typeref:typename:auto
index	src/Features/Routing/EntityInspector.cpp	/^	auto index = std::atoi(args[1]);$/;"	v	typeref:typename:auto
index	src/Plugin.hpp	/^	int index;$/;"	m	class:Plugin	typeref:typename:int
index	src/Utils/lodepng.cpp	/^	int index;       \/*the payload. Only has a meaningful value if this is in the 4th level*\/$/;"	m	struct:ColorTree	typeref:typename:int	file:
index_bits	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    int index_bits;$/;"	m	struct:CIDEntry	typeref:typename:int
index_entries	lib/ffmpeg/include/libavformat/avformat.h	/^    AVIndexEntry *index_entries; \/**< Only used if the format does not$/;"	m	struct:AVStream	typeref:typename:AVIndexEntry *
index_entries_allocated_size	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int index_entries_allocated_size;$/;"	m	struct:AVStream	typeref:typename:unsigned int
inflateHuffmanBlock	src/Utils/lodepng.cpp	/^static unsigned inflateHuffmanBlock(ucvector *out, const unsigned char *in, size_t *bp, size_t */;"	f	typeref:typename:unsigned	file:
inflateNoCompression	src/Utils/lodepng.cpp	/^static unsigned inflateNoCompression(ucvector *out, const unsigned char *in, size_t *bp, size_t /;"	f	typeref:typename:unsigned	file:
info	lib/ffmpeg/include/libavformat/avformat.h	/^    } *info;$/;"	m	struct:AVStream	typeref:struct:AVStream::__anonb574a3de0108 *
info	src/Features/ConfigPlus.cpp	/^		AliasInfo info = g_aliases[std::string(args[1])];$/;"	v	typeref:typename:AliasInfo
info	src/Features/ConfigPlus.cpp	/^		AliasInfo info = g_functions[std::string(args[1])];$/;"	v	typeref:typename:AliasInfo
info	src/Features/EntityList.cpp	/^		auto info = entityList->GetEntityInfoByIndex(index);$/;"	v	typeref:typename:auto
info	src/Features/Hud/Toasts.cpp	/^		auto info = getTagInfo(tag);$/;"	v	typeref:typename:auto
info	src/Features/Hud/Toasts.cpp	/^	auto info = getTagInfo(tag);$/;"	v	typeref:typename:auto
info	src/Features/Routing/EntityInspector.cpp	/^	auto info = entityList->GetEntityInfoByIndex(inspector->entityIndex);$/;"	v	typeref:typename:auto
info_png	src/Utils/lodepng.hpp	/^	LodePNGInfo info_png;           \/*info of the PNG image obtained after decoding*\/$/;"	m	struct:LodePNGState	typeref:typename:LodePNGInfo
info_raw	src/Utils/lodepng.hpp	/^	LodePNGColorMode info_raw;      \/*specifies the format in which you would like to get the raw /;"	m	struct:LodePNGState	typeref:typename:LodePNGColorMode
init	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*init)(AVCodecContext *avctx);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx)
init	lib/ffmpeg/include/libavcodec/bsf.h	/^    int (*init)(AVBSFContext *ctx);$/;"	m	struct:AVBitStreamFilter	typeref:typename:int (*)(AVBSFContext * ctx)
init	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*init)(struct AVCodecContext *);$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext *)
init	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*init)(AVFilterContext *ctx);$/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext * ctx)
init	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*init)(struct AVFormatContext *);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *)
initFileSums	src/Checksum.cpp	/^static void initFileSums() {$/;"	f	typeref:typename:void	file:
initPride	src/SAR.cpp	/^static void initPride() {$/;"	f	typeref:typename:void	file:
initStitch	src/Features/Stitcher.cpp	/^static void initStitch(bool stitching) {$/;"	f	typeref:typename:void	file:
init_coins	src/Utils/lodepng.cpp	/^static void init_coins(Coin *coins, size_t num) {$/;"	f	typeref:typename:void	file:
init_dict	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*init_dict)(AVFilterContext *ctx, AVDictionary **options);$/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext * ctx,AVDictionary ** options)
init_opaque	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*init_opaque)(AVFilterContext *ctx, void *opaque);$/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext * ctx,void * opaque)
init_state	lib/ffmpeg/include/libavfilter/avfilter.h	/^    } init_state;$/;"	m	struct:AVFilterLink	typeref:enum:AVFilterLink::__anon3784a0f80103
init_static_data	lib/ffmpeg/include/libavcodec/codec.h	/^    void (*init_static_data)(struct AVCodec *codec);$/;"	m	struct:AVCodec	typeref:typename:void (*)(struct AVCodec * codec)
initial_padding	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int initial_padding;$/;"	m	struct:AVCodecContext	typeref:typename:int
initial_padding	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int initial_padding;$/;"	m	struct:AVCodecParameters	typeref:typename:int
initial_pool_size	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int initial_pool_size;$/;"	m	struct:AVHWFramesContext	typeref:typename:int
inject_global_side_data	lib/ffmpeg/include/libavformat/avformat.h	/^    int inject_global_side_data;$/;"	m	struct:AVStream	typeref:typename:int
inputFunc	src/Utils/SDK.hpp	/^	inputfunc_t inputFunc;                     \/\/ 24\/28$/;"	m	struct:typedescription_t	typeref:typename:inputfunc_t
inputHud	src/Features/Hud/InputHud.cpp	/^InputHud inputHud;$/;"	v	typeref:typename:InputHud
inputInfo	src/Features/Hud/InputHud.hpp	/^	} inputInfo[2];$/;"	m	class:InputHud	typeref:struct:InputHud::__anon1a84afe10108[2]
inputSystem	src/Modules/InputSystem.cpp	/^InputSystem *inputSystem;$/;"	v	typeref:typename:InputSystem *
input_pads	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterPad   *input_pads;      \/\/\/< array of input pads$/;"	m	struct:AVFilterContext	typeref:typename:AVFilterPad *
inputfunc_t	src/Utils/SDK.hpp	/^typedef void (*inputfunc_t)(inputdata_t &data);$/;"	t	typeref:typename:void (*)(inputdata_t & data)
inputname	src/Features/Speedrun/Rules.hpp	/^	std::string inputname;$/;"	m	struct:EntityInputRule	typeref:typename:std::string
inputs	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterLink **inputs;          \/\/\/< array of pointers to input links$/;"	m	struct:AVFilterContext	typeref:typename:AVFilterLink **
inputs	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const AVFilterPad *inputs;$/;"	m	struct:AVFilter	typeref:typename:const AVFilterPad *
inspectionHud	src/Features/Hud/InspectionHud.cpp	/^InspectionHud inspectionHud;$/;"	v	typeref:typename:InspectionHud
inspector	src/Features/Routing/EntityInspector.cpp	/^EntityInspector *inspector;$/;"	v	typeref:typename:EntityInspector *
inst	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkInstance inst;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:VkInstance
installedChangeCallback	src/Features/Listener.hpp	/^	bool installedChangeCallback;$/;"	m	class:Listener	typeref:typename:bool
int16_t	lib/minhook/hde/pstdint.h	/^typedef INT16  int16_t;$/;"	t	typeref:typename:INT16
int32_t	lib/minhook/hde/pstdint.h	/^typedef INT32  int32_t;$/;"	t	typeref:typename:INT32
int64_t	lib/minhook/hde/pstdint.h	/^typedef INT64  int64_t;$/;"	t	typeref:typename:INT64
int8_t	lib/minhook/hde/pstdint.h	/^typedef INT8   int8_t;$/;"	t	typeref:typename:INT8
int_value	src/Utils/json11.cpp	/^		int int_value() const override { return m_value; }$/;"	f	class:json11::JsonInt	typeref:typename:int	file:
int_value	src/Utils/json11.cpp	/^		int int_value() const override { return static_cast<int>(m_value); }$/;"	f	class:json11::JsonDouble	typeref:typename:int	file:
int_value	src/Utils/json11.cpp	/^	int Json::int_value() const { return m_ptr->int_value(); }$/;"	f	class:json11::Json	typeref:typename:int
int_value	src/Utils/json11.cpp	/^	int JsonValue::int_value() const { return 0; }$/;"	f	class:json11::JsonValue	typeref:typename:int
inter_matrix	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint16_t *inter_matrix;$/;"	m	struct:AVCodecContext	typeref:typename:uint16_t *
interlace_method	src/Utils/lodepng.hpp	/^	unsigned interlace_method;   \/*interlace method of the original file*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
interlaced	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t interlaced;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
interlaced_frame	lib/ffmpeg/include/libavutil/frame.h	/^    int interlaced_frame;$/;"	m	struct:AVFrame	typeref:typename:int
interleave_packet	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*interleave_packet)(struct AVFormatContext *, AVPacket *out,$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *,AVPacket * out,AVPacket * in,int flush)
interleaver_chunk_duration	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t interleaver_chunk_duration;$/;"	m	struct:AVStream	typeref:typename:int64_t
interleaver_chunk_size	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t interleaver_chunk_size;$/;"	m	struct:AVStream	typeref:typename:int64_t
internal	lib/ffmpeg/include/libavcodec/avcodec.h	/^    struct AVCodecInternal *internal;$/;"	m	struct:AVCodecContext	typeref:struct:AVCodecInternal *
internal	lib/ffmpeg/include/libavcodec/bsf.h	/^    AVBSFInternal *internal;$/;"	m	struct:AVBSFContext	typeref:typename:AVBSFInternal *
internal	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterGraphInternal *internal;$/;"	m	struct:AVFilterGraph	typeref:typename:AVFilterGraphInternal *
internal	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterInternal *internal;$/;"	m	struct:AVFilterContext	typeref:typename:AVFilterInternal *
internal	lib/ffmpeg/include/libavformat/avformat.h	/^    AVFormatInternal *internal;$/;"	m	struct:AVFormatContext	typeref:typename:AVFormatInternal *
internal	lib/ffmpeg/include/libavformat/avformat.h	/^    AVStreamInternal *internal;$/;"	m	struct:AVStream	typeref:typename:AVStreamInternal *
internal	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AVHWDeviceInternal *internal;$/;"	m	struct:AVHWDeviceContext	typeref:typename:AVHWDeviceInternal *
internal	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AVHWFramesInternal *internal;$/;"	m	struct:AVHWFramesContext	typeref:typename:AVHWFramesInternal *
internal	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^    AVCUDADeviceContextInternal *internal;$/;"	m	struct:AVCUDADeviceContext	typeref:typename:AVCUDADeviceContextInternal *
internal	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    struct AVVkFrameInternal *internal;$/;"	m	struct:AVVkFrame	typeref:struct:AVVkFrameInternal *
internals	lib/curl/include/curl/curl.h	/^  void *internals;$/;"	m	struct:curl_tlssessioninfo	typeref:typename:void *
interpolation_amount	src/Utils/SDK.hpp	/^	float interpolation_amount;     \/\/ 32$/;"	m	struct:CGlobalVarsBase	typeref:typename:float
interrupt_callback	lib/ffmpeg/include/libavformat/avformat.h	/^    AVIOInterruptCB interrupt_callback;$/;"	m	struct:AVFormatContext	typeref:typename:AVIOInterruptCB
interval_per_tick	src/Modules/Engine.hpp	/^	float *interval_per_tick = nullptr;$/;"	m	class:Engine	typeref:typename:float *
interval_per_tick	src/Offsets.cpp	/^	int interval_per_tick;$/;"	v	namespace:Offsets	typeref:typename:int
interval_per_tick	src/Utils/SDK.hpp	/^	float interval_per_tick;        \/\/ 28$/;"	m	struct:CGlobalVarsBase	typeref:typename:float
intra_dc_precision	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int intra_dc_precision;$/;"	m	struct:AVCodecContext	typeref:typename:int
intra_matrix	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint16_t *intra_matrix;$/;"	m	struct:AVCodecContext	typeref:typename:uint16_t *
io_close	lib/ffmpeg/include/libavformat/avformat.h	/^    void (*io_close)(struct AVFormatContext *s, AVIOContext *pb);$/;"	m	struct:AVFormatContext	typeref:typename:void (*)(struct AVFormatContext * s,AVIOContext * pb)
io_open	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*io_open)(struct AVFormatContext *s, AVIOContext **pb, const char *url,$/;"	m	struct:AVFormatContext	typeref:typename:int (*)(struct AVFormatContext * s,AVIOContext ** pb,const char * url,int flags,AVDictionary ** options)
io_repositioned	lib/ffmpeg/include/libavformat/avformat.h	/^    int io_repositioned;$/;"	m	struct:AVFormatContext	typeref:typename:int
iopattern	lib/ffmpeg/include/libavcodec/qsv.h	/^    int iopattern;$/;"	m	struct:AVQSVContext	typeref:typename:int
ipt	src/Features/Speedrun/SpeedrunTimer.cpp	/^	float ipt;$/;"	m	struct:TimerInterface	typeref:typename:float	file:
isActive	src/Features/Timer/PauseTimer.hpp	/^	bool isActive;$/;"	m	class:PauseTimer	typeref:typename:bool
isAhead	src/Features/Demo/DemoGhostEntity.hpp	/^	bool isAhead;$/;"	m	class:DemoGhostEntity	typeref:typename:bool
isAhead	src/Features/Demo/GhostEntity.hpp	/^	bool isAhead;$/;"	m	class:GhostEntity	typeref:typename:bool
isConnected	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::atomic<bool> isConnected;$/;"	m	class:NetworkManager	typeref:typename:std::atomic<bool>
isCoop	src/Features/Tas/TasPlayer.hpp	/^	bool isCoop;$/;"	m	class:TasPlayer	typeref:typename:bool
isCountdownReady	src/Features/Demo/NetworkGhostPlayer.hpp	/^	bool isCountdownReady;$/;"	m	class:NetworkManager	typeref:typename:bool
isCustomCrosshairReady	src/Features/Hud/Crosshair.hpp	/^	bool isCustomCrosshairReady;$/;"	m	class:Crosshair	typeref:typename:bool
isCustomQuickHudReady	src/Features/Hud/Crosshair.hpp	/^	bool isCustomQuickHudReady;$/;"	m	class:Crosshair	typeref:typename:bool
isDemoLoading	src/Features/Renderer.cpp	/^bool Renderer::isDemoLoading = false;$/;"	m	class:Renderer	typeref:typename:bool
isDestroyed	src/Features/Demo/GhostEntity.hpp	/^	bool isDestroyed;  \/\/ used by NetworkGhostPlayer for sync reasons$/;"	m	class:GhostEntity	typeref:typename:bool
isEnabled	lib/minhook/hook.c	/^    UINT8  isEnabled   : 1;     \/\/ Enabled.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT8:1	file:
isEnabled	src/Features/Tas/TasController.cpp	/^bool TasController::isEnabled() {$/;"	f	class:TasController	typeref:typename:bool
isEnabled	src/Features/Timer/TimerAverage.hpp	/^	bool isEnabled;$/;"	m	class:TimerAverage	typeref:typename:bool
isFullGame	src/Features/Demo/DemoGhostPlayer.hpp	/^	bool isFullGame;$/;"	m	class:DemoGhostPlayer	typeref:typename:bool
isHooked	src/Interface.hpp	/^	bool isHooked;$/;"	m	class:Interface	typeref:typename:bool
isLevelTransition	src/Modules/Engine.hpp	/^	bool isLevelTransition = false;$/;"	m	class:Engine	typeref:typename:bool
isNewerVersion	src/Features/Updater.cpp	/^static bool isNewerVersion(const char *verStr) {$/;"	f	typeref:typename:bool	file:
isNormalKey	src/Features/Hud/InputHud.hpp	/^		bool isNormalKey = false;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:bool
isPaused	src/Features/Renderer.cpp	/^	std::atomic<bool> isPaused;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::atomic<bool>	file:
isPaused	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool isPaused;$/;"	m	struct:__anon77a6dab70108	typeref:typename:bool	file:
isPaused	src/Features/Timer/Timer.hpp	/^	bool isPaused;$/;"	m	class:Timer	typeref:typename:bool
isPausing	src/Modules/Engine.hpp	/^	bool isPausing = false;$/;"	m	class:Engine	typeref:typename:bool
isPlaying	src/Features/Demo/DemoGhostPlayer.hpp	/^	bool isPlaying;$/;"	m	class:DemoGhostPlayer	typeref:typename:bool
isRecordingDemo	src/Modules/EngineDemoRecorder.hpp	/^	bool isRecordingDemo = false;$/;"	m	class:EngineDemoRecorder	typeref:typename:bool
isReference	src/Command.hpp	/^	bool isReference;$/;"	m	class:Command	typeref:typename:bool
isReference	src/Variable.hpp	/^	bool isReference;$/;"	m	class:Variable	typeref:typename:bool
isRegistered	src/Command.hpp	/^	bool isRegistered;$/;"	m	class:Command	typeref:typename:bool
isRegistered	src/Variable.hpp	/^	bool isRegistered;$/;"	m	class:Variable	typeref:typename:bool
isRendering	src/Features/Renderer.cpp	/^	std::atomic<bool> isRendering;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::atomic<bool>	file:
isReset	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool isReset;$/;"	m	struct:__anon77a6dab70108	typeref:typename:bool	file:
isRunning	src/Features/Routing/EntityInspector.hpp	/^	bool isRunning;$/;"	m	class:EntityInspector	typeref:typename:bool
isRunning	src/Features/Session.hpp	/^	bool isRunning;$/;"	m	class:Session	typeref:typename:bool
isRunning	src/Features/Speedrun/SpeedrunTimer.cpp	/^	bool isRunning;$/;"	m	struct:__anon77a6dab70108	typeref:typename:bool	file:
isRunning	src/Features/Summary.hpp	/^	bool isRunning;$/;"	m	class:Summary	typeref:typename:bool
isRunning	src/Features/Timer/Timer.hpp	/^	bool isRunning;$/;"	m	class:Timer	typeref:typename:bool
isRunning	src/Modules/Engine.cpp	/^bool Engine::isRunning() {$/;"	f	class:Engine	typeref:typename:bool
isSet	src/Features/Teleporter.hpp	/^		bool isSet = false;$/;"	m	struct:TeleportLocation::__anon6ae777660108	typeref:typename:bool
isSet	src/Features/Teleporter.hpp	/^	bool isSet = false;$/;"	m	struct:TeleportLocation	typeref:typename:bool
isSpeedrunMod	src/Features/ConfigPlus.cpp	/^static bool isSpeedrunMod() {$/;"	f	typeref:typename:bool	file:
isStitching	src/Features/Stitcher.cpp	/^static bool isStitching() {$/;"	f	typeref:typename:bool	file:
isTracing	src/Features/Stats/JumpStats.hpp	/^	bool isTracing;$/;"	m	class:JumpStats	typeref:typename:bool
isUnlocked	src/Variable.hpp	/^	bool isUnlocked;$/;"	m	class:Variable	typeref:typename:bool
isVector	src/Features/Hud/InputHud.hpp	/^		bool isVector;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:bool
is_array	src/Utils/json11.hpp	/^		bool is_array() const { return type() == ARRAY; }$/;"	f	class:json11::Json	typeref:typename:bool
is_bool	src/Utils/json11.hpp	/^		bool is_bool() const { return type() == BOOL; }$/;"	f	class:json11::Json	typeref:typename:bool
is_coop_trace	src/Features/PlayerTrace.cpp	/^	bool is_coop_trace = trace->positions[0].size() == trace->positions[1].size();$/;"	v	typeref:typename:bool
is_disabled	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int is_disabled;                \/\/\/< the enabled state from the last expression evaluatio/;"	m	struct:AVFilterContext	typeref:typename:int
is_null	src/Utils/json11.hpp	/^		bool is_null() const { return type() == NUL; }$/;"	f	class:json11::Json	typeref:typename:bool
is_number	src/Utils/json11.hpp	/^		bool is_number() const { return type() == NUMBER; }$/;"	f	class:json11::Json	typeref:typename:bool
is_object	src/Utils/json11.hpp	/^		bool is_object() const { return type() == OBJECT; }$/;"	f	class:json11::Json	typeref:typename:bool
is_range	lib/ffmpeg/include/libavutil/opt.h	/^    int is_range;$/;"	m	struct:AVOptionRange	typeref:typename:int
is_string	src/Utils/json11.hpp	/^		bool is_string() const { return type() == STRING; }$/;"	f	class:json11::Json	typeref:typename:bool
iszVal	src/Utils/SDK.hpp	/^		const char *iszVal;$/;"	m	union:variant_t::__anon21a65a74090a	typeref:typename:const char *
it	src/Features/ConfigPlus.cpp	/^	auto it = g_aliases.find({args[1]});$/;"	v	typeref:typename:auto
it	src/Features/ConfigPlus.cpp	/^	auto it = g_functions.find({args[1]});$/;"	v	typeref:typename:auto
it	src/Features/Speedrun/Categories.cpp	/^	auto it = std::find(cat->rules.begin(), cat->rules.end(), std::string(args[2]));$/;"	v	typeref:typename:auto
it	src/Features/Speedrun/SpeedrunTimer.cpp	/^			auto it = run.find(header[i]);$/;"	v	typeref:typename:auto
it	src/Modules/EngineDemoPlayer.cpp	/^	auto it = std::find(engine->demoplayer->demoQueue.begin(), engine->demoplayer->demoQueue.end(),/;"	v	typeref:typename:auto
item_name	lib/ffmpeg/include/libavutil/log.h	/^    const char* (*item_name)(void* ctx);$/;"	m	struct:AVClass	typeref:typename:const char * (*)(void * ctx)
items	src/Features/Summary.hpp	/^	std::vector<SummaryItem> items;$/;"	m	class:Summary	typeref:typename:std::vector<SummaryItem>
items	src/Features/Timer/TimerAverage.hpp	/^	std::vector<TimerAverageItem> items;$/;"	m	class:TimerAverage	typeref:typename:std::vector<TimerAverageItem>
items	src/Features/Timer/TimerCheckPoints.hpp	/^	std::vector<TimerCheckPointItem> items;$/;"	m	class:TimerCheckPoints	typeref:typename:std::vector<TimerCheckPointItem>
itext_keys	src/Utils/lodepng.hpp	/^	char **itext_keys;      \/*the English keyword of the text chunk (e.g. "Comment")*\/$/;"	m	struct:LodePNGInfo	typeref:typename:char **
itext_langtags	src/Utils/lodepng.hpp	/^	char **itext_langtags;  \/*language tag for this text's language, ISO\/IEC 646 string, e.g. ISO/;"	m	struct:LodePNGInfo	typeref:typename:char **
itext_num	src/Utils/lodepng.hpp	/^	size_t itext_num;       \/*the amount of international texts in this PNG*\/$/;"	m	struct:LodePNGInfo	typeref:typename:size_t
itext_strings	src/Utils/lodepng.hpp	/^	char **itext_strings;   \/*the actual international text - UTF-8 string*\/$/;"	m	struct:LodePNGInfo	typeref:typename:char **
itext_transkeys	src/Utils/lodepng.hpp	/^	char **itext_transkeys; \/*keyword translated to the international language - UTF-8 string*\/$/;"	m	struct:LodePNGInfo	typeref:typename:char **
itu_t_t35_country_code	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t itu_t_t35_country_code;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
iv	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint8_t *iv;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint8_t *
iv_size	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t iv_size;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint32_t
joy_axis_t	src/Utils/SDK.hpp	/^} joy_axis_t;$/;"	t	typeref:struct:__anon21a65a740708
jpeg_quality	src/Utils/SDK.hpp	/^	int jpeg_quality;$/;"	m	struct:MovieInfo_t	typeref:typename:int
json11	src/Utils/json11.cpp	/^namespace json11 {$/;"	n	file:
json11	src/Utils/json11.hpp	/^namespace json11 {$/;"	n
jumpFactor	src/Offsets.cpp	/^	int jumpFactor;$/;"	v	namespace:Offsets	typeref:typename:int
jumped	src/Features/Hud/StrafeQuality.cpp	/^	bool jumped;$/;"	m	struct:TickInfo	typeref:typename:bool	file:
jumpedLastTime	src/Modules/Server.hpp	/^	bool jumpedLastTime = false;$/;"	m	class:Server	typeref:typename:bool
jumps	src/Features/Stats/Stats.hpp	/^	JumpStats *jumps;$/;"	m	struct:PlayerStats	typeref:typename:JumpStats *
kbutton_t	src/Utils/SDK.hpp	/^struct kbutton_t {$/;"	s
key	lib/curl/include/curl/curl.h	/^  const char *key; \/* points to a null-terminated string encoded with base64$/;"	m	struct:curl_khkey	typeref:typename:const char *
key	lib/ffmpeg/include/libavformat/avformat.h	/^    const uint8_t *key;$/;"	m	struct:AVFormatContext	typeref:typename:const uint8_t *
key	lib/ffmpeg/include/libavutil/dict.h	/^    char *key;$/;"	m	struct:AVDictionaryEntry	typeref:typename:char *
key	lib/ffmpeg/include/libavutil/xtea.h	/^    uint32_t key[16];$/;"	m	struct:AVXTEA	typeref:typename:uint32_t[16]
key	src/Features/Speedrun/Categories.cpp	/^		std::string key = std::string(pair, mid - pair);$/;"	v	typeref:typename:std::string
key	src/Utils/lodepng.cpp	/^	unsigned char key;    \/*a color key is required, or more*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
keyCode	src/Features/Hud/InputHud.cpp	/^	int keyCode = inputSystem->GetButton(args[1]);$/;"	v	typeref:typename:int
key_b	src/Utils/lodepng.cpp	/^	unsigned short key_b;$/;"	m	struct:ColorProfile	typeref:typename:unsigned short	file:
key_b	src/Utils/lodepng.hpp	/^	unsigned key_b;       \/*blue component of color key*\/$/;"	m	struct:LodePNGColorMode	typeref:typename:unsigned
key_defined	src/Utils/lodepng.hpp	/^	unsigned key_defined; \/*is a transparent color key given? 0 = false, 1 = true*\/$/;"	m	struct:LodePNGColorMode	typeref:typename:unsigned
key_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int key_frame;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
key_frame	lib/ffmpeg/include/libavutil/frame.h	/^    int key_frame;$/;"	m	struct:AVFrame	typeref:typename:int
key_g	src/Utils/lodepng.cpp	/^	unsigned short key_g;$/;"	m	struct:ColorProfile	typeref:typename:unsigned short	file:
key_g	src/Utils/lodepng.hpp	/^	unsigned key_g;       \/*green component of color key*\/$/;"	m	struct:LodePNGColorMode	typeref:typename:unsigned
key_id	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint8_t *key_id;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint8_t *
key_id_size	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t key_id_size;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint32_t
key_id_size	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t key_id_size;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint32_t
key_ids	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint8_t** key_ids;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint8_t **
key_r	src/Utils/lodepng.cpp	/^	unsigned short key_r; \/*these values are always in 16-bit bitdepth in the profile*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned short	file:
key_r	src/Utils/lodepng.hpp	/^	unsigned key_r;       \/*red\/greyscale component of color key*\/$/;"	m	struct:LodePNGColorMode	typeref:typename:unsigned
keyint_min	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int keyint_min;$/;"	m	struct:AVCodecContext	typeref:typename:int
keylen	lib/ffmpeg/include/libavformat/avformat.h	/^    int keylen;$/;"	m	struct:AVFormatContext	typeref:typename:int
keytype	lib/curl/include/curl/curl.h	/^  enum curl_khtype keytype;$/;"	m	struct:curl_khkey	typeref:enum:curl_khtype
knee_point_x	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational knee_point_x;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
knee_point_y	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational knee_point_y;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
l	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_16 { uint16_t l; } __attribute__((packed)) av_alias;$/;"	m	union:unaligned_16	typeref:typename:uint16_t
l	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_32 { uint32_t l; } __attribute__((packed)) av_alias;$/;"	m	union:unaligned_32	typeref:typename:uint32_t
l	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_64 { uint64_t l; } __attribute__((packed)) av_alias;$/;"	m	union:unaligned_64	typeref:typename:uint64_t
landed	src/Features/Hud/StrafeQuality.cpp	/^	bool landed;$/;"	m	struct:TickInfo	typeref:typename:bool	file:
last	src/Features/Demo/GhostEntity.cpp	/^	GhostEntity *last = nullptr;$/;"	v	typeref:typename:GhostEntity *
last	src/Features/EntityList.cpp	/^	auto last = page * 512;$/;"	v	typeref:typename:auto
lastDemoNumber	src/Modules/EngineDemoRecorder.hpp	/^	int lastDemoNumber = 1;$/;"	m	class:EngineDemoRecorder	typeref:typename:int
lastFrame	src/Features/Session.hpp	/^	unsigned lastFrame;$/;"	m	class:Session	typeref:typename:unsigned
lastGameTick	src/Features/Demo/DemoGhostEntity.hpp	/^	int lastGameTick;$/;"	m	class:DemoGhostEntity	typeref:typename:int
lastLevel	src/Features/Demo/DemoGhostEntity.hpp	/^	std::string lastLevel;$/;"	m	class:DemoGhostEntity	typeref:typename:std::string
lastLevelName	src/Modules/Client.hpp	/^	std::string lastLevelName;$/;"	m	class:Client	typeref:typename:std::string
lastMap	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::string lastMap;$/;"	m	struct:__anon77a6dab70108	typeref:typename:std::string	file:
lastOpacity	src/Features/Demo/GhostEntity.hpp	/^	float lastOpacity;$/;"	m	class:GhostEntity	typeref:typename:float
lastProgressBar	src/Modules/VGui.hpp	/^	int lastProgressBar = 0;$/;"	m	class:VGui	typeref:typename:int
lastSession	src/Features/Routing/EntityInspector.hpp	/^	int lastSession;$/;"	m	class:EntityInspector	typeref:typename:int
lastSession	src/Features/Session.hpp	/^	int lastSession;$/;"	m	class:Session	typeref:typename:int
lastTick	src/Features/Tas/TasPlayer.hpp	/^	int lastTick = 0;     \/\/ last tick of script, relative to its starting point$/;"	m	class:TasPlayer	typeref:typename:int
lastTick	src/Modules/Engine.hpp	/^	int lastTick = 0;$/;"	m	class:Engine	typeref:typename:int
lastTurnDir	src/Features/Tas/TasTools/StrafeTool.hpp	/^	int lastTurnDir = 0;$/;"	m	class:AutoStrafeTool	typeref:typename:int
lastUpdate	src/Features/Demo/GhostEntity.hpp	/^	std::chrono::time_point<std::chrono::steady_clock> lastUpdate;$/;"	m	class:GhostEntity	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>
lastUpdateCall	src/Features/Demo/GhostRenderer.hpp	/^	float lastUpdateCall;$/;"	m	class:GhostRenderer	typeref:typename:float
lastUpdateTime	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::chrono::time_point<std::chrono::steady_clock> lastUpdateTime;$/;"	m	class:NetworkManager	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>
last_IP_duration	lib/ffmpeg/include/libavformat/avformat.h	/^    int last_IP_duration;$/;"	m	struct:AVStream	typeref:typename:int
last_IP_pts	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t last_IP_pts;$/;"	m	struct:AVStream	typeref:typename:int64_t
last_discard_sample	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t last_discard_sample;$/;"	m	struct:AVStream	typeref:typename:int64_t
last_dts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t last_dts;$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
last_dts	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t last_dts;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
last_dts_for_order_check	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t last_dts_for_order_check;$/;"	m	struct:AVStream	typeref:typename:int64_t
last_duration	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t last_duration;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
last_in_packet_buffer	lib/ffmpeg/include/libavformat/avformat.h	/^    struct AVPacketList *last_in_packet_buffer;$/;"	m	struct:AVStream	typeref:struct:AVPacketList *
last_pos	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t last_pos;$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
last_predictor_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int last_predictor_count;$/;"	m	struct:AVCodecContext	typeref:typename:int
last_pts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t last_pts;$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
last_time	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t last_time;$/;"	m	struct:AVIOContext	typeref:typename:int64_t
last_vel	src/Features/Hud/VelocityGraph.cpp	/^static int last_vel[2] = {0, 0};$/;"	v	typeref:typename:int[2]	file:
last_was_newline	src/Modules/Tier1.cpp	/^	bool last_was_newline;$/;"	m	class:ConsoleDisplayHook	typeref:typename:bool	file:
latest	src/Features/Routing/EntityInspector.hpp	/^	InspectionItem latest;$/;"	m	class:EntityInspector	typeref:typename:InspectionItem
latestTick	src/Features/Timer/TimerCheckPoints.hpp	/^	int latestTick;$/;"	m	class:TimerCheckPoints	typeref:typename:int
latestTime	src/Features/Timer/TimerCheckPoints.hpp	/^	float latestTime;$/;"	m	class:TimerCheckPoints	typeref:typename:float
layers	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    AVDRMLayerDescriptor layers[AV_DRM_MAX_PLANES];$/;"	m	struct:AVDRMFrameDescriptor	typeref:typename:AVDRMLayerDescriptor[]
layout	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkImageLayout layout[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVkFrame	typeref:typename:VkImageLayout[]
left	lib/ffmpeg/include/libavutil/frame.h	/^    int left;$/;"	m	struct:AVRegionOfInterest	typeref:typename:int
left	src/Features/Hud/Minimap.cpp	/^	float top, left, bottom, right;$/;"	m	struct:Minimap	typeref:typename:float	file:
len	lib/curl/include/curl/curl.h	/^  size_t len;$/;"	m	struct:curl_khkey	typeref:typename:size_t
len	lib/curl/include/curl/easy.h	/^  size_t len;$/;"	m	struct:curl_blob	typeref:typename:size_t
len	lib/minhook/hde/hde32.h	/^    uint8_t len;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
len	lib/minhook/hde/hde64.h	/^    uint8_t len;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
len	src/Features/ConfigPlus.cpp	/^	size_t len;$/;"	m	struct:Token	typeref:typename:size_t	file:
len	src/Features/Hud/Toasts.cpp	/^		size_t len = tagLen + toastLen + 2;$/;"	v	typeref:typename:size_t
length	lib/ffmpeg/include/libswscale/swscale.h	/^    int length;                 \/\/\/< number of coefficients in the vector$/;"	m	struct:SwsVector	typeref:typename:int
length	src/Features/Hud/Hud.cpp	/^			int length = 400;$/;"	v	typeref:typename:int
length	src/Features/Routing/Ruler.cpp	/^float Ruler::length() {$/;"	f	class:Ruler	typeref:typename:float
lengths	src/Utils/lodepng.cpp	/^	unsigned *lengths;  \/*the lengths of the codes of the 1d-tree*\/$/;"	m	struct:HuffmanTree	typeref:typename:unsigned *	file:
less	src/Utils/json11.cpp	/^		bool less(const JsonValue *other) const override { return m_value < other->number_value(); }$/;"	f	class:json11::JsonDouble	typeref:typename:bool	file:
less	src/Utils/json11.cpp	/^		bool less(const JsonValue *other) const override { return m_value < other->number_value(); }$/;"	f	class:json11::JsonInt	typeref:typename:bool	file:
less	src/Utils/json11.cpp	/^		bool less(const JsonValue *other) const override {$/;"	f	class:json11::Value	typeref:typename:bool	file:
level	lib/ffmpeg/include/libavcodec/avcodec.h	/^     int level;$/;"	m	struct:AVCodecContext	typeref:typename:int
level	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int level;$/;"	m	struct:AVCodecParameters	typeref:typename:int
level	lib/ffmpeg/include/libavcodec/dirac.h	/^    int level;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:int
level	src/Features/ClassDumper.cpp	/^			auto level = 1;$/;"	v	typeref:typename:auto
levelDatas	src/Features/Demo/DemoGhostEntity.hpp	/^	std::map<int, DataGhost> levelDatas;$/;"	m	struct:DemoDatas	typeref:typename:std::map<int,DataGhost>
levelName	src/Modules/EngineDemoPlayer.hpp	/^	std::string levelName;$/;"	m	class:EngineDemoPlayer	typeref:typename:std::string
lfe_mix_level	lib/ffmpeg/include/libavutil/downmix_info.h	/^    double lfe_mix_level;$/;"	m	struct:AVDownmixInfo	typeref:typename:double
libidn	lib/curl/include/curl/curl.h	/^  const char *libidn;$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
libssh_version	lib/curl/include/curl/curl.h	/^  const char *libssh_version; \/* human readable string *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
libz_version	lib/curl/include/curl/curl.h	/^  const char *libz_version; \/* human readable string *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
line	src/Features/OverlayRender.cpp	/^	bool line;$/;"	m	struct:OverlayGroup	typeref:typename:bool	file:
lineHeight	src/Features/Hud/Toasts.cpp	/^	int lineHeight = surface->GetFontHeight(font) + linePadding;$/;"	v	typeref:typename:int
linePadding	src/Features/Hud/Toasts.cpp	/^	int linePadding = compact ? 0 : LINE_PAD;$/;"	v	typeref:typename:int
line_num	src/Features/Tas/TasParser.cpp	/^	unsigned line_num;$/;"	m	struct:LoopInfo	typeref:typename:unsigned	file:
lines	src/Features/Hud/Toasts.cpp	/^	auto lines = splitIntoLines(font, text, maxWidth - 2 * sidePadding);$/;"	v	typeref:typename:auto
linesize	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int linesize[4];$/;"	m	struct:AVSubtitleRect	typeref:typename:int[4]
linesize	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int linesize[AV_NUM_DATA_POINTERS];     \/\/\/< number of bytes per line$/;"	m	struct:AVPicture	typeref:typename:attribute_deprecated int[]
linesize	lib/ffmpeg/include/libavutil/frame.h	/^    int linesize[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVFrame	typeref:typename:int[]
linkage	src/Features/Teleporter.hpp	/^		unsigned char linkage;$/;"	m	struct:TeleportLocation::__anon6ae777660108	typeref:typename:unsigned char
list	src/Features/Feature.hpp	/^	std::vector<Feature *> list;$/;"	m	class:Features	typeref:typename:std::vector<Feature * >
list	src/Modules/Module.hpp	/^	std::vector<Module *> list;$/;"	m	class:Modules	typeref:typename:std::vector<Module * >
listener	src/Features/Listener.cpp	/^Listener *listener;$/;"	v	typeref:typename:Listener *
load	src/Event.hpp	/^		bool load;$/;"	m	struct:Event::EventData	typeref:typename:bool
loadApiKey	src/Features/AutoSubmit.cpp	/^static void loadApiKey() {$/;"	f	typeref:typename:void	file:
loadEnd	src/Features/Session.hpp	/^	std::chrono::time_point<std::chrono::high_resolution_clock> loadEnd;$/;"	m	class:Session	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>
loadMinimap	src/Features/Hud/Minimap.cpp	/^static std::optional<Minimap> loadMinimap(std::string name) {$/;"	f	typeref:typename:std::optional<Minimap>	file:
loadMinimapData	src/Features/Hud/Minimap.cpp	/^static bool loadMinimapData(std::string path, Minimap &out, std::string &img_path_out) {$/;"	f	typeref:typename:bool	file:
loadStart	src/Features/Session.hpp	/^	std::chrono::time_point<std::chrono::high_resolution_clock> loadStart;$/;"	m	class:Session	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>
load_file	src/Utils/lodepng.cpp	/^	void load_file(std::vector<unsigned char> &buffer, const std::string &filename) {$/;"	f	namespace:lodepng	typeref:typename:void
local	src/Features/Teleporter.cpp	/^	int local = engine->IsOrange() ? 1 : 0;$/;"	v	typeref:typename:int
location	src/Utils/Memory.hpp	/^		uintptr_t location;$/;"	m	class:Memory::Patch	typeref:typename:uintptr_t
locations	src/Features/Teleporter.hpp	/^	std::vector<TeleportLocation> locations;$/;"	m	class:Teleporter	typeref:typename:std::vector<TeleportLocation>
lock	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    void (*lock)(void *lock_ctx);$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:void (*)(void * lock_ctx)
lock_ctx	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    void *lock_ctx;$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:void *
locked	src/Features/Cvars.hpp	/^	bool locked;$/;"	m	class:Cvars	typeref:typename:bool
lodepng	src/Utils/lodepng.cpp	/^namespace lodepng {$/;"	n	file:
lodepng	src/Utils/lodepng.hpp	/^namespace lodepng {$/;"	n
lodepng_add32bitInt	src/Utils/lodepng.cpp	/^static void lodepng_add32bitInt(ucvector *buffer, unsigned value) {$/;"	f	typeref:typename:void	file:
lodepng_add_itext	src/Utils/lodepng.cpp	/^unsigned lodepng_add_itext(LodePNGInfo *info, const char *key, const char *langtag, const char */;"	f	typeref:typename:unsigned
lodepng_add_text	src/Utils/lodepng.cpp	/^unsigned lodepng_add_text(LodePNGInfo *info, const char *key, const char *str) {$/;"	f	typeref:typename:unsigned
lodepng_can_have_alpha	src/Utils/lodepng.cpp	/^unsigned lodepng_can_have_alpha(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_chunk_ancillary	src/Utils/lodepng.cpp	/^unsigned char lodepng_chunk_ancillary(const unsigned char *chunk) {$/;"	f	typeref:typename:unsigned char
lodepng_chunk_append	src/Utils/lodepng.cpp	/^unsigned lodepng_chunk_append(unsigned char **out, size_t *outlength, const unsigned char *chunk/;"	f	typeref:typename:unsigned
lodepng_chunk_check_crc	src/Utils/lodepng.cpp	/^unsigned lodepng_chunk_check_crc(const unsigned char *chunk) {$/;"	f	typeref:typename:unsigned
lodepng_chunk_create	src/Utils/lodepng.cpp	/^unsigned lodepng_chunk_create(unsigned char **out, size_t *outlength, unsigned length, const cha/;"	f	typeref:typename:unsigned
lodepng_chunk_data	src/Utils/lodepng.cpp	/^unsigned char *lodepng_chunk_data(unsigned char *chunk) {$/;"	f	typeref:typename:unsigned char *
lodepng_chunk_data_const	src/Utils/lodepng.cpp	/^const unsigned char *lodepng_chunk_data_const(const unsigned char *chunk) {$/;"	f	typeref:typename:const unsigned char *
lodepng_chunk_generate_crc	src/Utils/lodepng.cpp	/^void lodepng_chunk_generate_crc(unsigned char *chunk) {$/;"	f	typeref:typename:void
lodepng_chunk_length	src/Utils/lodepng.cpp	/^unsigned lodepng_chunk_length(const unsigned char *chunk) {$/;"	f	typeref:typename:unsigned
lodepng_chunk_next	src/Utils/lodepng.cpp	/^unsigned char *lodepng_chunk_next(unsigned char *chunk) {$/;"	f	typeref:typename:unsigned char *
lodepng_chunk_next_const	src/Utils/lodepng.cpp	/^const unsigned char *lodepng_chunk_next_const(const unsigned char *chunk) {$/;"	f	typeref:typename:const unsigned char *
lodepng_chunk_private	src/Utils/lodepng.cpp	/^unsigned char lodepng_chunk_private(const unsigned char *chunk) {$/;"	f	typeref:typename:unsigned char
lodepng_chunk_safetocopy	src/Utils/lodepng.cpp	/^unsigned char lodepng_chunk_safetocopy(const unsigned char *chunk) {$/;"	f	typeref:typename:unsigned char
lodepng_chunk_type	src/Utils/lodepng.cpp	/^void lodepng_chunk_type(char type[5], const unsigned char *chunk) {$/;"	f	typeref:typename:void
lodepng_chunk_type_equals	src/Utils/lodepng.cpp	/^unsigned char lodepng_chunk_type_equals(const unsigned char *chunk, const char *type) {$/;"	f	typeref:typename:unsigned char
lodepng_clear_itext	src/Utils/lodepng.cpp	/^void lodepng_clear_itext(LodePNGInfo *info) {$/;"	f	typeref:typename:void
lodepng_clear_text	src/Utils/lodepng.cpp	/^void lodepng_clear_text(LodePNGInfo *info) {$/;"	f	typeref:typename:void
lodepng_color_mode_cleanup	src/Utils/lodepng.cpp	/^void lodepng_color_mode_cleanup(LodePNGColorMode *info) {$/;"	f	typeref:typename:void
lodepng_color_mode_copy	src/Utils/lodepng.cpp	/^unsigned lodepng_color_mode_copy(LodePNGColorMode *dest, const LodePNGColorMode *source) {$/;"	f	typeref:typename:unsigned
lodepng_color_mode_equal	src/Utils/lodepng.cpp	/^static int lodepng_color_mode_equal(const LodePNGColorMode *a, const LodePNGColorMode *b) {$/;"	f	typeref:typename:int	file:
lodepng_color_mode_init	src/Utils/lodepng.cpp	/^void lodepng_color_mode_init(LodePNGColorMode *info) {$/;"	f	typeref:typename:void
lodepng_compress_settings_init	src/Utils/lodepng.cpp	/^void lodepng_compress_settings_init(LodePNGCompressSettings *settings) {$/;"	f	typeref:typename:void
lodepng_convert	src/Utils/lodepng.cpp	/^unsigned lodepng_convert(unsigned char *out, const unsigned char *in, LodePNGColorMode *mode_out/;"	f	typeref:typename:unsigned
lodepng_crc32	src/Utils/lodepng.cpp	/^unsigned lodepng_crc32(const unsigned char *buf, size_t len) {$/;"	f	typeref:typename:unsigned
lodepng_decode	src/Utils/lodepng.cpp	/^unsigned lodepng_decode(unsigned char **out, unsigned *w, unsigned *h, LodePNGState *state, cons/;"	f	typeref:typename:unsigned
lodepng_decode24	src/Utils/lodepng.cpp	/^unsigned lodepng_decode24(unsigned char **out, unsigned *w, unsigned *h, const unsigned char *in/;"	f	typeref:typename:unsigned
lodepng_decode24_file	src/Utils/lodepng.cpp	/^unsigned lodepng_decode24_file(unsigned char **out, unsigned *w, unsigned *h, const char *filena/;"	f	typeref:typename:unsigned
lodepng_decode32	src/Utils/lodepng.cpp	/^unsigned lodepng_decode32(unsigned char **out, unsigned *w, unsigned *h, const unsigned char *in/;"	f	typeref:typename:unsigned
lodepng_decode32_file	src/Utils/lodepng.cpp	/^unsigned lodepng_decode32_file(unsigned char **out, unsigned *w, unsigned *h, const char *filena/;"	f	typeref:typename:unsigned
lodepng_decode_file	src/Utils/lodepng.cpp	/^unsigned lodepng_decode_file(unsigned char **out, unsigned *w, unsigned *h, const char *filename/;"	f	typeref:typename:unsigned
lodepng_decode_memory	src/Utils/lodepng.cpp	/^unsigned lodepng_decode_memory(unsigned char **out, unsigned *w, unsigned *h, const unsigned cha/;"	f	typeref:typename:unsigned
lodepng_decoder_settings_init	src/Utils/lodepng.cpp	/^void lodepng_decoder_settings_init(LodePNGDecoderSettings *settings) {$/;"	f	typeref:typename:void
lodepng_decompress_settings_init	src/Utils/lodepng.cpp	/^void lodepng_decompress_settings_init(LodePNGDecompressSettings *settings) {$/;"	f	typeref:typename:void
lodepng_default_compress_settings	src/Utils/lodepng.cpp	/^const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 0};$/;"	v	typeref:typename:const LodePNGCompressSettings
lodepng_default_compress_settings	src/Utils/lodepng.cpp	/^const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 1};$/;"	v	typeref:typename:const LodePNGCompressSettings
lodepng_default_decompress_settings	src/Utils/lodepng.cpp	/^const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0};$/;"	v	typeref:typename:const LodePNGDecompressSettings
lodepng_default_decompress_settings	src/Utils/lodepng.cpp	/^const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 1};$/;"	v	typeref:typename:const LodePNGDecompressSettings
lodepng_deflate	src/Utils/lodepng.cpp	/^unsigned lodepng_deflate(unsigned char **out, size_t *outsize, const unsigned char *in, size_t i/;"	f	typeref:typename:unsigned
lodepng_deflatev	src/Utils/lodepng.cpp	/^static unsigned lodepng_deflatev(ucvector *out, const unsigned char *in, size_t insize, const Lo/;"	f	typeref:typename:unsigned	file:
lodepng_encode	src/Utils/lodepng.cpp	/^unsigned lodepng_encode(unsigned char **out, size_t *outsize, const unsigned char *image, unsign/;"	f	typeref:typename:unsigned
lodepng_encode24	src/Utils/lodepng.cpp	/^unsigned lodepng_encode24(unsigned char **out, size_t *outsize, const unsigned char *image, unsi/;"	f	typeref:typename:unsigned
lodepng_encode24_file	src/Utils/lodepng.cpp	/^unsigned lodepng_encode24_file(const char *filename, const unsigned char *image, unsigned w, uns/;"	f	typeref:typename:unsigned
lodepng_encode32	src/Utils/lodepng.cpp	/^unsigned lodepng_encode32(unsigned char **out, size_t *outsize, const unsigned char *image, unsi/;"	f	typeref:typename:unsigned
lodepng_encode32_file	src/Utils/lodepng.cpp	/^unsigned lodepng_encode32_file(const char *filename, const unsigned char *image, unsigned w, uns/;"	f	typeref:typename:unsigned
lodepng_encode_file	src/Utils/lodepng.cpp	/^unsigned lodepng_encode_file(const char *filename, const unsigned char *image, unsigned w, unsig/;"	f	typeref:typename:unsigned
lodepng_encode_memory	src/Utils/lodepng.cpp	/^unsigned lodepng_encode_memory(unsigned char **out, size_t *outsize, const unsigned char *image,/;"	f	typeref:typename:unsigned
lodepng_encoder_settings_init	src/Utils/lodepng.cpp	/^void lodepng_encoder_settings_init(LodePNGEncoderSettings *settings) {$/;"	f	typeref:typename:void
lodepng_error_text	src/Utils/lodepng.cpp	/^const char *lodepng_error_text(unsigned code) {$/;"	f	typeref:typename:const char *
lodepng_get_bpp	src/Utils/lodepng.cpp	/^unsigned lodepng_get_bpp(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_get_bpp_lct	src/Utils/lodepng.cpp	/^static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth) {$/;"	f	typeref:typename:unsigned	file:
lodepng_get_channels	src/Utils/lodepng.cpp	/^unsigned lodepng_get_channels(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_get_raw_size	src/Utils/lodepng.cpp	/^size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode *color) {$/;"	f	typeref:typename:size_t
lodepng_get_raw_size_lct	src/Utils/lodepng.cpp	/^size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bit/;"	f	typeref:typename:size_t
lodepng_has_palette_alpha	src/Utils/lodepng.cpp	/^unsigned lodepng_has_palette_alpha(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_huffman_code_lengths	src/Utils/lodepng.cpp	/^unsigned lodepng_huffman_code_lengths(unsigned *lengths, const unsigned *frequencies, size_t num/;"	f	typeref:typename:unsigned
lodepng_inflate	src/Utils/lodepng.cpp	/^unsigned lodepng_inflate(unsigned char **out, size_t *outsize, const unsigned char *in, size_t i/;"	f	typeref:typename:unsigned
lodepng_inflatev	src/Utils/lodepng.cpp	/^static unsigned lodepng_inflatev(ucvector *out, const unsigned char *in, size_t insize, const Lo/;"	f	typeref:typename:unsigned	file:
lodepng_info_cleanup	src/Utils/lodepng.cpp	/^void lodepng_info_cleanup(LodePNGInfo *info) {$/;"	f	typeref:typename:void
lodepng_info_copy	src/Utils/lodepng.cpp	/^unsigned lodepng_info_copy(LodePNGInfo *dest, const LodePNGInfo *source) {$/;"	f	typeref:typename:unsigned
lodepng_info_init	src/Utils/lodepng.cpp	/^void lodepng_info_init(LodePNGInfo *info) {$/;"	f	typeref:typename:void
lodepng_info_swap	src/Utils/lodepng.cpp	/^void lodepng_info_swap(LodePNGInfo *a, LodePNGInfo *b) {$/;"	f	typeref:typename:void
lodepng_inspect	src/Utils/lodepng.cpp	/^unsigned lodepng_inspect(unsigned *w, unsigned *h, LodePNGState *state, const unsigned char *in,/;"	f	typeref:typename:unsigned
lodepng_is_alpha_type	src/Utils/lodepng.cpp	/^unsigned lodepng_is_alpha_type(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_is_greyscale_type	src/Utils/lodepng.cpp	/^unsigned lodepng_is_greyscale_type(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_is_palette_type	src/Utils/lodepng.cpp	/^unsigned lodepng_is_palette_type(const LodePNGColorMode *info) {$/;"	f	typeref:typename:unsigned
lodepng_load_file	src/Utils/lodepng.cpp	/^unsigned lodepng_load_file(unsigned char **out, size_t *outsize, const char *filename) {$/;"	f	typeref:typename:unsigned
lodepng_palette_add	src/Utils/lodepng.cpp	/^unsigned lodepng_palette_add(LodePNGColorMode *info, unsigned char r, unsigned char g, unsigned /;"	f	typeref:typename:unsigned
lodepng_palette_clear	src/Utils/lodepng.cpp	/^void lodepng_palette_clear(LodePNGColorMode *info) {$/;"	f	typeref:typename:void
lodepng_read32bitInt	src/Utils/lodepng.cpp	/^unsigned lodepng_read32bitInt(const unsigned char *buffer) {$/;"	f	typeref:typename:unsigned
lodepng_save_file	src/Utils/lodepng.cpp	/^unsigned lodepng_save_file(const unsigned char *buffer, size_t buffersize, const char *filename)/;"	f	typeref:typename:unsigned
lodepng_set32bitInt	src/Utils/lodepng.cpp	/^static void lodepng_set32bitInt(unsigned char *buffer, unsigned value) {$/;"	f	typeref:typename:void	file:
lodepng_state_cleanup	src/Utils/lodepng.cpp	/^void lodepng_state_cleanup(LodePNGState *state) {$/;"	f	typeref:typename:void
lodepng_state_copy	src/Utils/lodepng.cpp	/^void lodepng_state_copy(LodePNGState *dest, const LodePNGState *source) {$/;"	f	typeref:typename:void
lodepng_state_init	src/Utils/lodepng.cpp	/^void lodepng_state_init(LodePNGState *state) {$/;"	f	typeref:typename:void
lodepng_zlib_compress	src/Utils/lodepng.cpp	/^static unsigned lodepng_zlib_compress(unsigned char **out, size_t *outsize, const unsigned char /;"	f	typeref:typename:unsigned	file:
lodepng_zlib_compress	src/Utils/lodepng.cpp	/^unsigned lodepng_zlib_compress(unsigned char **out, size_t *outsize, const unsigned char *in, si/;"	f	typeref:typename:unsigned
lodepng_zlib_decompress	src/Utils/lodepng.cpp	/^static unsigned lodepng_zlib_decompress(unsigned char **out, size_t *outsize, const unsigned cha/;"	f	typeref:typename:unsigned	file:
lodepng_zlib_decompress	src/Utils/lodepng.cpp	/^unsigned lodepng_zlib_decompress(unsigned char **out, size_t *outsize, const unsigned char *in, /;"	f	typeref:typename:unsigned
log2_chroma_h	lib/ffmpeg/include/libavutil/pixdesc.h	/^    uint8_t log2_chroma_h;$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:uint8_t
log2_chroma_w	lib/ffmpeg/include/libavutil/pixdesc.h	/^    uint8_t log2_chroma_w;$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:uint8_t
log_level_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int log_level_offset;$/;"	m	struct:AVCodecContext	typeref:typename:int
log_level_offset_offset	lib/ffmpeg/include/libavutil/log.h	/^    int log_level_offset_offset;$/;"	m	struct:AVClass	typeref:typename:int
long_name	lib/ffmpeg/include/libavcodec/codec.h	/^    const char *long_name;$/;"	m	struct:AVCodec	typeref:typename:const char *
long_name	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    const char *long_name;$/;"	m	struct:AVCodecDescriptor	typeref:typename:const char *
long_name	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *long_name;$/;"	m	struct:AVInputFormat	typeref:typename:const char *
long_name	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *long_name;$/;"	m	struct:AVOutputFormat	typeref:typename:const char *
lookupMap	src/Features/Speedrun/Categories.cpp	/^static inline V *lookupMap(std::map<std::string, V> &m, std::string k) {$/;"	f	typeref:typename:V *	file:
lookupMap	src/Features/Speedrun/Rules.cpp	/^static inline V *lookupMap(std::map<std::string, V> &m, std::string k) {$/;"	f	typeref:typename:V *	file:
loopTime	src/Features/Demo/GhostEntity.hpp	/^	long long loopTime;$/;"	m	class:GhostEntity	typeref:typename:long long
lowRange	src/Utils/SDK.hpp	/^		int lowRange;$/;"	m	struct:CFontAmalgam::TFontRange	typeref:typename:int
lowres	lib/ffmpeg/include/libavcodec/avcodec.h	/^     int lowres;$/;"	m	struct:AVCodecContext	typeref:typename:int
lpHud	src/Features/Hud/LPHud.cpp	/^LPHud lpHud;$/;"	v	typeref:typename:LPHud
ltc_divisor	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              ltc_divisor;           \/* FPS from the LTS standpoint *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
lumH	lib/ffmpeg/include/libswscale/swscale.h	/^    SwsVector *lumH;$/;"	m	struct:SwsFilter	typeref:typename:SwsVector *
lumV	lib/ffmpeg/include/libswscale/swscale.h	/^    SwsVector *lumV;$/;"	m	struct:SwsFilter	typeref:typename:SwsVector *
luma_weight	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *luma_weight, *chroma_weight;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
lumi_masking	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float lumi_masking;$/;"	m	struct:AVCodecContext	typeref:typename:float
m	src/Utils/SDK.hpp	/^	float m[4][4];$/;"	m	struct:VMatrix	typeref:typename:float[4][4]
m_ArrayLengthProxy	src/Utils/SDK.hpp	/^	ArrayLengthRecvProxyFn m_ArrayLengthProxy;$/;"	m	struct:RecvProp	typeref:typename:ArrayLengthRecvProxyFn
m_ArrayLengthProxy	src/Utils/SDK.hpp	/^	ArrayLengthSendProxyFn m_ArrayLengthProxy;  \/\/ 28$/;"	m	struct:SendProp	typeref:typename:ArrayLengthSendProxyFn
m_CameraIsOrthographic	src/Utils/SDK.hpp	/^	bool m_CameraIsOrthographic;             \/\/ 136$/;"	m	struct:PerUserInput_t	typeref:typename:bool
m_ClassID	src/Utils/SDK.hpp	/^	int m_ClassID;$/;"	m	struct:ClientClass	typeref:typename:int
m_ClassID	src/Utils/SDK.hpp	/^	int m_ClassID;$/;"	m	struct:ServerClass	typeref:typename:int
m_ContactPoint	src/Utils/SDK.hpp	/^	Vector m_ContactPoint;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:Vector
m_CreateFn	src/Utils/SDK.hpp	/^	InstantiateInterfaceFn m_CreateFn;$/;"	m	struct:InterfaceReg	typeref:typename:InstantiateInterfaceFn
m_DataTableProxyFn	src/Utils/SDK.hpp	/^	DataTableRecvVarProxyFn m_DataTableProxyFn;$/;"	m	struct:RecvProp	typeref:typename:DataTableRecvVarProxyFn
m_DataTableProxyFn	src/Utils/SDK.hpp	/^	SendTableProxyFn m_DataTableProxyFn;        \/\/ 68$/;"	m	struct:SendProp	typeref:typename:SendTableProxyFn
m_Delta	src/Utils/SDK.hpp	/^	VectorAligned m_Delta;        \/\/ direction + length of the ray$/;"	m	struct:Ray_t	typeref:typename:VectorAligned
m_DisplayFuncs	src/Modules/Tier1.hpp	/^	CUtlVector<IConsoleDisplayFunc *> *m_DisplayFuncs = nullptr;$/;"	m	class:Tier1	typeref:typename:CUtlVector<IConsoleDisplayFunc * > *
m_DisplayFuncs	src/Offsets.cpp	/^	int m_DisplayFuncs;$/;"	v	namespace:Offsets	typeref:typename:int
m_ElementStride	src/Utils/SDK.hpp	/^	int m_ElementStride;                        \/\/ 36$/;"	m	struct:SendProp	typeref:typename:int
m_ElementStride	src/Utils/SDK.hpp	/^	int m_ElementStride;$/;"	m	struct:RecvProp	typeref:typename:int
m_EntPtrArray	src/Modules/Server.hpp	/^	CEntInfo *m_EntPtrArray = nullptr;$/;"	m	class:Server	typeref:typename:CEntInfo *
m_EntPtrArray	src/Offsets.cpp	/^	int m_EntPtrArray;$/;"	v	namespace:Offsets	typeref:typename:int
m_Events	src/Utils/SDK.hpp	/^	EventQueuePrioritizedEvent_t m_Events;  \/\/ 0$/;"	m	struct:CEventQueue	typeref:typename:EventQueuePrioritizedEvent_t
m_Extents	src/Utils/SDK.hpp	/^	VectorAligned m_Extents;      \/\/ Describes an axis aligned box extruded along a ray$/;"	m	struct:Ray_t	typeref:typename:VectorAligned
m_Flags	src/Utils/SDK.hpp	/^	int m_Flags;                                \/\/ 60$/;"	m	struct:SendProp	typeref:typename:int
m_Flags	src/Utils/SDK.hpp	/^	int m_Flags;$/;"	m	struct:RecvProp	typeref:typename:int
m_FontAmalgams	src/Modules/Surface.hpp	/^	CUtlVector<CFontAmalgam> *m_FontAmalgams;$/;"	m	class:Surface	typeref:typename:CUtlVector<CFontAmalgam> *
m_Fonts	src/Utils/SDK.hpp	/^	CUtlVector<TFontRange> m_Fonts;$/;"	m	struct:CFontAmalgam	typeref:typename:CUtlVector<TFontRange>
m_GameEvents	src/Features/Listener.cpp	/^		auto m_GameEvents = *(uintptr_t *)(s_GameEventManager + CGameEventManager_m_GameEvents);$/;"	v	typeref:typename:auto
m_HandleToOther	src/Utils/SDK.hpp	/^	CBaseHandle m_HandleToOther;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:CBaseHandle
m_InAirState	src/Offsets.cpp	/^	int m_InAirState;$/;"	v	namespace:Offsets	typeref:typename:int
m_Index	src/Utils/SDK.hpp	/^	unsigned long m_Index;$/;"	m	class:CBaseHandle	typeref:typename:unsigned long
m_InstanceBaselineIndex	src/Utils/SDK.hpp	/^	int m_InstanceBaselineIndex;$/;"	m	struct:ServerClass	typeref:typename:int
m_IsOnThinSurface	src/Utils/SDK.hpp	/^	bool m_IsOnThinSurface;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:bool
m_IsRay	src/Utils/SDK.hpp	/^	bool m_IsRay;    \/\/ are there extents zero$/;"	m	struct:Ray_t	typeref:typename:bool
m_IsSwept	src/Utils/SDK.hpp	/^	bool m_IsSwept;  \/\/ is delta != 0$/;"	m	struct:Ray_t	typeref:typename:bool
m_Memory	src/Utils/SDK.hpp	/^	A m_Memory;$/;"	m	struct:CUtlVector	typeref:typename:A
m_MoveType	src/Offsets.cpp	/^	int m_MoveType;$/;"	v	namespace:Offsets	typeref:typename:int
m_NetworkSerialNumber	src/Utils/SDK.hpp	/^	int m_NetworkSerialNumber;  \/\/ 4$/;"	m	struct:CBaseEdict	typeref:typename:int
m_Offset	src/Utils/SDK.hpp	/^	int m_Offset;                               \/\/ 76$/;"	m	struct:SendProp	typeref:typename:int
m_Offset	src/Utils/SDK.hpp	/^	int m_Offset;$/;"	m	struct:RecvProp	typeref:typename:int
m_OrthoBottom	src/Utils/SDK.hpp	/^	float m_OrthoBottom;$/;"	m	struct:CViewSetup	typeref:typename:float
m_OrthoLeft	src/Utils/SDK.hpp	/^	float m_OrthoLeft;$/;"	m	struct:CViewSetup	typeref:typename:float
m_OrthoRight	src/Utils/SDK.hpp	/^	float m_OrthoRight;$/;"	m	struct:CViewSetup	typeref:typename:float
m_OrthoTop	src/Utils/SDK.hpp	/^	float m_OrthoTop;$/;"	m	struct:CViewSetup	typeref:typename:float
m_PaintPowerType	src/Utils/SDK.hpp	/^	int m_PaintPowerType;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:int
m_PerUser	src/Utils/SDK.hpp	/^	} m_PerUser[2];$/;"	m	struct:kbutton_t	typeref:struct:kbutton_t::Split_t[2]
m_ProxyFn	src/Utils/SDK.hpp	/^	RecvVarProxyFn m_ProxyFn;$/;"	m	struct:RecvProp	typeref:typename:RecvVarProxyFn
m_ProxyFn	src/Utils/SDK.hpp	/^	SendVarProxyFn m_ProxyFn;                   \/\/ 64$/;"	m	struct:SendProp	typeref:typename:SendVarProxyFn
m_RecvType	src/Utils/SDK.hpp	/^	SendPropType m_RecvType;$/;"	m	struct:RecvProp	typeref:typename:SendPropType
m_SaveBool	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveBool[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveColor	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveColor[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveEHandle	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveEHandle[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveFloat	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveFloat[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveInt	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveInt[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveMatrix3x4Worldspace	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveMatrix3x4Worldspace[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SavePositionVector	src/Utils/SDK.hpp	/^	static typedescription_t m_SavePositionVector[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveString	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveString[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveVMatrix	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveVMatrix[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveVMatrixWorldspace	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveVMatrixWorldspace[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SaveVector	src/Utils/SDK.hpp	/^	static typedescription_t m_SaveVector[];$/;"	m	struct:variant_t	typeref:typename:typedescription_t[]
m_SerialNumber	src/Utils/SDK.hpp	/^	int m_SerialNumber;  \/\/ 4$/;"	m	struct:CEntInfo	typeref:typename:int
m_Size	src/Features/Listener.cpp	/^	auto m_Size = *reinterpret_cast<int *>(s_GameEventManager + CGameEventManager_m_Size);$/;"	v	typeref:typename:auto
m_Size	src/Utils/SDK.hpp	/^	int m_Size;$/;"	m	struct:CUtlVector	typeref:typename:int
m_Start	src/Utils/SDK.hpp	/^	VectorAligned m_Start;        \/\/ starting point, centered within the extents$/;"	m	struct:Ray_t	typeref:typename:VectorAligned
m_StartOffset	src/Utils/SDK.hpp	/^	VectorAligned m_StartOffset;  \/\/ Add this to m_Start to get the actual ray start$/;"	m	struct:Ray_t	typeref:typename:VectorAligned
m_State	src/Utils/SDK.hpp	/^	int m_State;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:int
m_StringBufferSize	src/Utils/SDK.hpp	/^	int m_StringBufferSize;$/;"	m	struct:RecvProp	typeref:typename:int
m_StringLength	src/Utils/SDK.hpp	/^	int m_StringLength;                                 \/\/ 40$/;"	m	struct:ConVar	typeref:typename:int
m_SurfaceNormal	src/Utils/SDK.hpp	/^	Vector m_SurfaceNormal;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:Vector
m_Type	src/Utils/SDK.hpp	/^	SendPropType m_Type;                        \/\/ 8$/;"	m	struct:SendProp	typeref:typename:SendPropType
m_VariantValue	src/Utils/SDK.hpp	/^	char m_VariantValue[20];                \/\/ 28$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:char[20]
m_activeGame	src/Utils/SDK.hpp	/^	bool m_activeGame;             \/\/ 804$/;"	m	struct:CHostState	typeref:typename:bool
m_address	lib/SFML/include/SFML/Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress	typeref:typename:Uint32
m_angLocation	src/Utils/SDK.hpp	/^	QAngle m_angLocation;          \/\/ 20, 24, 28$/;"	m	struct:CHostState	typeref:typename:QAngle
m_angPreviousViewAngles	src/Utils/SDK.hpp	/^	QAngle m_angPreviousViewAngles;          \/\/ 140, 144, 148$/;"	m	struct:PerUserInput_t	typeref:typename:QAngle
m_angPreviousViewAnglesTilt	src/Utils/SDK.hpp	/^	QAngle m_angPreviousViewAnglesTilt;      \/\/ 152, 156, 160$/;"	m	struct:PerUserInput_t	typeref:typename:QAngle
m_arg	lib/SFML/include/SFML/System/Thread.inl	/^    A m_arg;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:A	file:
m_bActivated	src/Offsets.cpp	/^	int m_bActivated;$/;"	v	namespace:Offsets	typeref:typename:int
m_bActive	src/Utils/SDK.hpp	/^	uint8_t m_bActive;$/;"	m	struct:GameOverlayActivated_t	typeref:typename:uint8_t
m_bAttemptHullResize	src/Utils/SDK.hpp	/^	bool m_bAttemptHullResize;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bBackgroundLevel	src/Utils/SDK.hpp	/^	bool m_bBackgroundLevel;       \/\/ 806$/;"	m	struct:CHostState	typeref:typename:bool
m_bBouncedThisFrame	src/Utils/SDK.hpp	/^	bool m_bBouncedThisFrame;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bCacheFullSceneState	src/Utils/SDK.hpp	/^	bool m_bCacheFullSceneState : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bCanFirePortal1	src/Offsets.cpp	/^	int m_bCanFirePortal1;$/;"	v	namespace:Offsets	typeref:typename:int
m_bCanFirePortal2	src/Offsets.cpp	/^	int m_bCanFirePortal2;$/;"	v	namespace:Offsets	typeref:typename:int
m_bClient	src/Utils/SDK.hpp	/^	bool m_bClient;                 \/\/ 48$/;"	m	struct:CGlobalVarsBase	typeref:typename:bool
m_bConstraintPastRadius	src/Utils/SDK.hpp	/^	bool m_bConstraintPastRadius;     \/\/ 154$/;"	m	struct:CMoveData	typeref:typename:bool
m_bCullFrontFaces	src/Utils/SDK.hpp	/^	bool m_bCullFrontFaces : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bCustomViewMatrix	src/Utils/SDK.hpp	/^	bool m_bCustomViewMatrix;$/;"	m	struct:CViewSetup	typeref:typename:bool
m_bDisable	src/Utils/SDK.hpp	/^	bool m_bDisable;                    \/\/ 128$/;"	m	struct:CPlugin	typeref:typename:bool
m_bDoBloomAndToneMapping	src/Utils/SDK.hpp	/^	bool m_bDoBloomAndToneMapping : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bDoDepthOfField	src/Utils/SDK.hpp	/^	bool m_bDoDepthOfField : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bDoneCorrectPitch	src/Utils/SDK.hpp	/^	bool m_bDoneCorrectPitch;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bDoneStickInterp	src/Utils/SDK.hpp	/^	bool m_bDoneStickInterp;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bDrawWorldNormal	src/Utils/SDK.hpp	/^	bool m_bDrawWorldNormal : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bDuckedInAir	src/Utils/SDK.hpp	/^	bool m_bDuckedInAir;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bFirstRunOfFunctions	src/Utils/SDK.hpp	/^	bool m_bFirstRunOfFunctions : 1;  \/\/ 0$/;"	m	struct:CMoveData	typeref:typename:bool:1
m_bGameCodeMovedPlayer	src/Utils/SDK.hpp	/^	bool m_bGameCodeMovedPlayer : 1;  \/\/ 2$/;"	m	struct:CMoveData	typeref:typename:bool:1
m_bHDRTarget	src/Utils/SDK.hpp	/^	bool m_bHDRTarget : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bHasBeenWritten	src/Utils/SDK.hpp	/^	bool m_bHasBeenWritten : 1;$/;"	m	struct:SendTable	typeref:typename:bool:1
m_bHasCompletionCallback	src/Utils/SDK.hpp	/^	bool m_bHasCompletionCallback : 1;$/;"	m	struct:ConCommand	typeref:typename:bool:1
m_bHasMax	src/Utils/SDK.hpp	/^	bool m_bHasMax;                                     \/\/ 60$/;"	m	struct:ConVar	typeref:typename:bool
m_bHasMin	src/Utils/SDK.hpp	/^	bool m_bHasMin;                                     \/\/ 52$/;"	m	struct:ConVar	typeref:typename:bool
m_bHasPropsEncodedAgainstCurrentTickCount	src/Utils/SDK.hpp	/^	bool m_bHasPropsEncodedAgainstCurrentTickCount : 1;$/;"	m	struct:SendTable	typeref:typename:bool:1
m_bInMainList	src/Utils/SDK.hpp	/^	bool m_bInMainList;$/;"	m	struct:RecvTable	typeref:typename:bool
m_bInitialized	src/Utils/SDK.hpp	/^	bool m_bInitialized : 1;$/;"	m	struct:SendTable	typeref:typename:bool:1
m_bInitialized	src/Utils/SDK.hpp	/^	bool m_bInitialized;$/;"	m	struct:RecvTable	typeref:typename:bool
m_bInsideArray	src/Utils/SDK.hpp	/^	bool m_bInsideArray;$/;"	m	struct:RecvProp	typeref:typename:bool
m_bIsPortal2	src/Offsets.cpp	/^	int m_bIsPortal2;$/;"	v	namespace:Offsets	typeref:typename:int
m_bIsSprinting	src/Utils/SDK.hpp	/^	bool m_bIsSprinting;$/;"	m	class:CHLMoveData	typeref:typename:bool
m_bJumpedThisFrame	src/Utils/SDK.hpp	/^	bool m_bJumpedThisFrame;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bLoadGame	src/Offsets.cpp	/^	int m_bLoadGame;$/;"	v	namespace:Offsets	typeref:typename:int
m_bLoadgame	src/Modules/Engine.hpp	/^	bool *m_bLoadgame = nullptr;$/;"	m	class:Engine	typeref:typename:bool *
m_bNoAirControl	src/Utils/SDK.hpp	/^	bool m_bNoAirControl : 1;         \/\/ 0$/;"	m	struct:CMoveData	typeref:typename:bool:1
m_bOffCenter	src/Utils/SDK.hpp	/^	bool m_bOffCenter : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bOrtho	src/Utils/SDK.hpp	/^	bool m_bOrtho;$/;"	m	struct:CViewSetup	typeref:typename:bool
m_bOverflow	src/Utils/SDK.hpp	/^	bool m_bOverflow;$/;"	m	class:bf_read	typeref:typename:bool
m_bPlacingPhoto	src/Utils/SDK.hpp	/^	bool m_bPlacingPhoto;  \/\/ f-stop.$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bPreventedCrouchJumpThisFrame	src/Utils/SDK.hpp	/^	bool m_bPreventedCrouchJumpThisFrame;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bRecording	src/Modules/EngineDemoRecorder.hpp	/^	bool *m_bRecording = nullptr;$/;"	m	class:EngineDemoRecorder	typeref:typename:bool *
m_bRecording	src/Offsets.cpp	/^	int m_bRecording;$/;"	v	namespace:Offsets	typeref:typename:int
m_bRegistered	src/Utils/SDK.hpp	/^	bool m_bRegistered;           \/\/ 8$/;"	m	struct:ConCommandBase	typeref:typename:bool
m_bRegisteredForEvents	src/Features/Listener.hpp	/^	bool m_bRegisteredForEvents;$/;"	m	class:Listener	typeref:typename:bool
m_bRememberLocation	src/Utils/SDK.hpp	/^	bool m_bRememberLocation;      \/\/ 805$/;"	m	struct:CHostState	typeref:typename:bool
m_bRenderToSubrectOfLargerScreen	src/Utils/SDK.hpp	/^	bool m_bRenderToSubrectOfLargerScreen : 1;$/;"	m	struct:CViewSetup	typeref:typename:bool:1
m_bShowingViewFinder	src/Utils/SDK.hpp	/^	bool m_bShowingViewFinder;  \/\/ f-stop????$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_bUsingCommandCallbackInterface	src/Utils/SDK.hpp	/^	bool m_bUsingCommandCallbackInterface : 1;$/;"	m	struct:ConCommand	typeref:typename:bool:1
m_bUsingNewCommandCallback	src/Utils/SDK.hpp	/^	bool m_bUsingNewCommandCallback : 1;$/;"	m	struct:ConCommand	typeref:typename:bool:1
m_bWaitEnabled	src/Modules/Engine.hpp	/^	bool *m_bWaitEnabled = nullptr;$/;"	m	class:Engine	typeref:typename:bool *
m_bWaitEnabled	src/Offsets.cpp	/^	int m_bWaitEnabled;$/;"	v	namespace:Offsets	typeref:typename:int
m_bWaitEnabled2	src/Modules/Engine.hpp	/^	bool *m_bWaitEnabled2 = nullptr;$/;"	m	class:Engine	typeref:typename:bool *
m_bWaitingForConnection	src/Utils/SDK.hpp	/^	bool m_bWaitingForConnection;  \/\/ 807$/;"	m	struct:CHostState	typeref:typename:bool
m_bZoomedIn	src/Utils/SDK.hpp	/^	bool m_bZoomedIn;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:bool
m_body	lib/SFML/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_body	lib/SFML/include/SFML/Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response	typeref:typename:std::string
m_buffer	lib/SFML/include/SFML/Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Pa/;"	m	class:sf::UdpSocket	typeref:typename:std::vector<char>
m_cachedDuckHullMaxAttempt	src/Utils/SDK.hpp	/^	Vector m_cachedDuckHullMaxAttempt;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_cachedDuckHullMinAttempt	src/Utils/SDK.hpp	/^	Vector m_cachedDuckHullMinAttempt;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_cachedPaintPowerChoiceResults	src/Utils/SDK.hpp	/^	CachedPaintPowerChoiceResult m_cachedPaintPowerChoiceResults[PAINT_POWER_TYPE_COUNT];$/;"	m	class:CPortalPlayerLocalData	typeref:typename:CachedPaintPowerChoiceResult[]
m_cachedStandHullMaxAttempt	src/Utils/SDK.hpp	/^	Vector m_cachedStandHullMaxAttempt;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_cachedStandHullMinAttempt	src/Utils/SDK.hpp	/^	Vector m_cachedStandHullMinAttempt;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_cmd	src/Utils/SDK.hpp	/^	CUserCmd m_cmd;$/;"	m	class:CVerifiedUserCmd	typeref:typename:CUserCmd
m_collisionGroup	src/Utils/SDK.hpp	/^	int m_collisionGroup;$/;"	m	class:CTraceFilterSimple	typeref:typename:int
m_commandSocket	lib/SFML/include/SFML/Network/Ftp.hpp	/^    TcpSocket   m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp	typeref:typename:TcpSocket
m_connection	lib/SFML/include/SFML/Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http	typeref:typename:TcpSocket
m_crc	src/Utils/SDK.hpp	/^	CRC32_t m_crc;$/;"	m	class:CVerifiedUserCmd	typeref:typename:CRC32_t
m_currentState	src/Utils/SDK.hpp	/^	int m_currentState;            \/\/ 0$/;"	m	struct:CHostState	typeref:typename:int
m_data	lib/SFML/include/SFML/Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet	typeref:typename:std::vector<char>
m_data	lib/SFML/include/SFML/System/MemoryInputStream.hpp	/^    const char* m_data;   \/\/\/< Pointer to the data in memory$/;"	m	class:sf::MemoryInputStream	typeref:typename:const char *
m_directory	lib/SFML/include/SFML/Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse	typeref:typename:std::string
m_duckHullMax	src/Utils/SDK.hpp	/^	Vector m_duckHullMax;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_duckHullMin	src/Utils/SDK.hpp	/^	Vector m_duckHullMin;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_duration	src/Utils/SDK.hpp	/^	float m_duration;$/;"	m	class:CountdownTimer	typeref:typename:float
m_entryPoint	lib/SFML/include/SFML/System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadFunc *
m_fBouncedTime	src/Utils/SDK.hpp	/^	float m_fBouncedTime;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:float
m_fCameraDistanceMove	src/Utils/SDK.hpp	/^	bool m_fCameraDistanceMove;              \/\/ 116$/;"	m	struct:PerUserInput_t	typeref:typename:bool
m_fCameraInThirdPerson	src/Utils/SDK.hpp	/^	bool m_fCameraInThirdPerson;             \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:bool
m_fCameraInterceptingMouse	src/Utils/SDK.hpp	/^	bool m_fCameraInterceptingMouse;         \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:bool
m_fCameraMovingWithMouse	src/Utils/SDK.hpp	/^	bool m_fCameraMovingWithMouse;           \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:bool
m_fFlags	src/Offsets.cpp	/^	int m_fFlags;$/;"	v	namespace:Offsets	typeref:typename:int
m_fHighLowMul	src/Utils/SDK.hpp	/^	float m_fHighLowMul;                        \/\/ 52$/;"	m	struct:SendProp	typeref:typename:float
m_fHighValue	src/Utils/SDK.hpp	/^	float m_fHighValue;                         \/\/ 20$/;"	m	struct:SendProp	typeref:typename:float
m_fLowValue	src/Utils/SDK.hpp	/^	float m_fLowValue;                          \/\/ 16$/;"	m	struct:SendProp	typeref:typename:float
m_fMaxVal	src/Utils/SDK.hpp	/^	float m_fMaxVal;                                    \/\/ 64$/;"	m	struct:ConVar	typeref:typename:float
m_fMinVal	src/Utils/SDK.hpp	/^	float m_fMinVal;                                    \/\/ 56$/;"	m	struct:ConVar	typeref:typename:float
m_fStateFlags	src/Utils/SDK.hpp	/^	int m_fStateFlags;          \/\/ 0$/;"	m	struct:CBaseEdict	typeref:typename:int
m_fValue	src/Utils/SDK.hpp	/^	float m_fValue;                                     \/\/ 44$/;"	m	struct:ConVar	typeref:typename:float
m_fields	lib/SFML/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request	typeref:typename:FieldTable
m_fields	lib/SFML/include/SFML/Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response	typeref:typename:FieldTable
m_file	lib/SFML/include/SFML/System/FileInputStream.hpp	/^    priv::ResourceStream* m_file;$/;"	m	class:sf::FileInputStream	typeref:typename:priv::ResourceStream *
m_flAccumulatedMouseXMovement	src/Utils/SDK.hpp	/^	float m_flAccumulatedMouseXMovement;     \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flAccumulatedMouseYMovement	src/Utils/SDK.hpp	/^	float m_flAccumulatedMouseYMovement;     \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flAirControlSupressionTime	src/Utils/SDK.hpp	/^	float m_flAirControlSupressionTime;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:float
m_flAirInputScale	src/Utils/SDK.hpp	/^	float m_flAirInputScale;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:float
m_flAspectRatio	src/Utils/SDK.hpp	/^	float m_flAspectRatio;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flClientMaxSpeed	src/Utils/SDK.hpp	/^	float m_flClientMaxSpeed;         \/\/ 60$/;"	m	struct:CMoveData	typeref:typename:float
m_flConstraintRadius	src/Utils/SDK.hpp	/^	float m_flConstraintRadius;       \/\/ 140$/;"	m	struct:CMoveData	typeref:typename:float
m_flConstraintSpeedFactor	src/Utils/SDK.hpp	/^	float m_flConstraintSpeedFactor;  \/\/ 148$/;"	m	struct:CMoveData	typeref:typename:float
m_flConstraintWidth	src/Utils/SDK.hpp	/^	float m_flConstraintWidth;        \/\/ 144$/;"	m	struct:CMoveData	typeref:typename:float
m_flCurrentStickTime	src/Utils/SDK.hpp	/^	float m_flCurrentStickTime;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:float
m_flDelay	src/Utils/SDK.hpp	/^	float m_flDelay;             \/\/ 12$/;"	m	struct:CEventAction	typeref:typename:float
m_flDist	src/Utils/SDK.hpp	/^	float m_flDist;       \/\/ 8$/;"	m	struct:CameraThirdData_t	typeref:typename:float
m_flFarBlurDepth	src/Utils/SDK.hpp	/^	float m_flFarBlurDepth;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flFarBlurRadius	src/Utils/SDK.hpp	/^	float m_flFarBlurRadius;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flFarFocusDepth	src/Utils/SDK.hpp	/^	float m_flFarFocusDepth;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flFireTime	src/Utils/SDK.hpp	/^	float m_flFireTime;                     \/\/ 0$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:float
m_flForwardMove	src/Utils/SDK.hpp	/^	float m_flForwardMove;            \/\/ 44$/;"	m	struct:CMoveData	typeref:typename:float
m_flFriction	src/Offsets.cpp	/^	int m_flFriction;$/;"	v	namespace:Offsets	typeref:typename:int
m_flGravity	src/Offsets.cpp	/^	int m_flGravity;$/;"	v	namespace:Offsets	typeref:typename:int
m_flKeyboardSampleTime	src/Utils/SDK.hpp	/^	float m_flKeyboardSampleTime;            \/\/ 12$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flLag	src/Utils/SDK.hpp	/^	float m_flLag;        \/\/ 12$/;"	m	struct:CameraThirdData_t	typeref:typename:float
m_flLastForwardMove	src/Utils/SDK.hpp	/^	float m_flLastForwardMove;               \/\/ 164$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flLastYawAngle	src/Utils/SDK.hpp	/^	float m_flLastYawAngle;                  \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flMatVal	src/Utils/SDK.hpp	/^	float m_flMatVal[3][4];$/;"	m	struct:matrix3x4_t	typeref:typename:float[3][4]
m_flMaxSpeed	src/Utils/SDK.hpp	/^	float m_flMaxSpeed;               \/\/ 56$/;"	m	struct:CMoveData	typeref:typename:float
m_flMaxspeed	src/Offsets.cpp	/^	int m_flMaxspeed;$/;"	v	namespace:Offsets	typeref:typename:int
m_flNearBlurDepth	src/Utils/SDK.hpp	/^	float m_flNearBlurDepth;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flNearBlurRadius	src/Utils/SDK.hpp	/^	float m_flNearBlurRadius;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flNearFocusDepth	src/Utils/SDK.hpp	/^	float m_flNearFocusDepth;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flOffCenterBottom	src/Utils/SDK.hpp	/^	float m_flOffCenterBottom;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flOffCenterLeft	src/Utils/SDK.hpp	/^	float m_flOffCenterLeft;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flOffCenterRight	src/Utils/SDK.hpp	/^	float m_flOffCenterRight;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flOffCenterTop	src/Utils/SDK.hpp	/^	float m_flOffCenterTop;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flPitch	src/Utils/SDK.hpp	/^	float m_flPitch;      \/\/ 0$/;"	m	struct:CameraThirdData_t	typeref:typename:float
m_flPreviousMouseXPosition	src/Utils/SDK.hpp	/^	float m_flPreviousMouseXPosition;        \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flPreviousMouseYPosition	src/Utils/SDK.hpp	/^	float m_flPreviousMouseYPosition;        \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flRemainingJoystickSampleTime	src/Utils/SDK.hpp	/^	float m_flRemainingJoystickSampleTime;   \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flShortFrameTime	src/Utils/SDK.hpp	/^	float m_flShortFrameTime;      \/\/ 800$/;"	m	struct:CHostState	typeref:typename:float
m_flShutterTime	src/Utils/SDK.hpp	/^	float m_flShutterTime;$/;"	m	struct:CViewSetup	typeref:typename:float
m_flSideMove	src/Utils/SDK.hpp	/^	float m_flSideMove;               \/\/ 48$/;"	m	struct:CMoveData	typeref:typename:float
m_flSpinFrameTime	src/Utils/SDK.hpp	/^	float m_flSpinFrameTime;                 \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flSpinRate	src/Utils/SDK.hpp	/^	float m_flSpinRate;                      \/\/ ?$/;"	m	struct:PerUserInput_t	typeref:typename:float
m_flUpMove	src/Utils/SDK.hpp	/^	float m_flUpMove;                 \/\/ 52$/;"	m	struct:CMoveData	typeref:typename:float
m_flYaw	src/Utils/SDK.hpp	/^	float m_flYaw;        \/\/ 4$/;"	m	struct:CameraThirdData_t	typeref:typename:float
m_fnChangeCallback	src/Utils/SDK.hpp	/^	CUtlVector<FnChangeCallback_t> m_fnChangeCallback;  \/\/ 68$/;"	m	struct:ConVar	typeref:typename:CUtlVector<FnChangeCallback_t>
m_fnCommandCallback	src/Utils/SDK.hpp	/^		_CommandCallback m_fnCommandCallback;$/;"	m	union:ConCommand::__anon21a65a74020a	typeref:typename:_CommandCallback
m_fnCommandCallbackV1	src/Utils/SDK.hpp	/^		void *m_fnCommandCallbackV1;$/;"	m	union:ConCommand::__anon21a65a74020a	typeref:typename:void *
m_fnCompletionCallback	src/Utils/SDK.hpp	/^		_CommandCompletionCallback m_fnCompletionCallback;$/;"	m	union:ConCommand::__anon21a65a74030a	typeref:typename:_CommandCompletionCallback
m_function	lib/SFML/include/SFML/System/Thread.inl	/^    F m_function;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:F	file:
m_function	lib/SFML/include/SFML/System/Thread.inl	/^    void(C::*m_function)();$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:void (C::*)()	file:
m_functor	lib/SFML/include/SFML/System/Thread.inl	/^    T m_functor;$/;"	m	struct:priv::ThreadFunctor	typeref:typename:T	file:
m_hActiveWeapon	src/Offsets.cpp	/^	int m_hActiveWeapon;$/;"	v	namespace:Offsets	typeref:typename:int
m_hPortalEnvironment	src/Offsets.cpp	/^	int m_hPortalEnvironment;$/;"	v	namespace:Offsets	typeref:typename:int
m_hPrimaryPortal	src/Offsets.cpp	/^	int m_hPrimaryPortal;$/;"	v	namespace:Offsets	typeref:typename:int
m_hSecondaryPortal	src/Offsets.cpp	/^	int m_hSecondaryPortal;$/;"	v	namespace:Offsets	typeref:typename:int
m_hSelectedWeapon	src/Utils/SDK.hpp	/^	unsigned long m_hSelectedWeapon;         \/\/ 180 CHandle<C_BaseCombatWeapon>$/;"	m	struct:PerUserInput_t	typeref:typename:unsigned long
m_hTractorBeam	src/Utils/SDK.hpp	/^	uint32_t m_hTractorBeam;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:uint32_t
m_host	lib/SFML/include/SFML/Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http	typeref:typename:IpAddress
m_hostName	lib/SFML/include/SFML/Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http	typeref:typename:std::string
m_iBonusChallenge	src/Offsets.cpp	/^	int m_iBonusChallenge;$/;"	v	namespace:Offsets	typeref:typename:int
m_iClassName	src/Offsets.cpp	/^	int m_iClassName;$/;"	v	namespace:Offsets	typeref:typename:int
m_iEFlags	src/Offsets.cpp	/^	int m_iEFlags;$/;"	v	namespace:Offsets	typeref:typename:int
m_iIDStamp	src/Utils/SDK.hpp	/^	int m_iIDStamp;              \/\/ 20$/;"	m	struct:CEventAction	typeref:typename:int
m_iListCount	src/Utils/SDK.hpp	/^	int m_iListCount;                       \/\/ 56$/;"	m	struct:CEventQueue	typeref:typename:int
m_iMaxHeight	src/Utils/SDK.hpp	/^	int m_iMaxHeight;$/;"	m	struct:CFontAmalgam	typeref:typename:int
m_iMaxWidth	src/Utils/SDK.hpp	/^	int m_iMaxWidth;$/;"	m	struct:CFontAmalgam	typeref:typename:int
m_iName	src/Offsets.cpp	/^	int m_iName;$/;"	v	namespace:Offsets	typeref:typename:int
m_iOutputID	src/Utils/SDK.hpp	/^	int m_iOutputID;                        \/\/ 20$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:int
m_iParameter	src/Utils/SDK.hpp	/^	const char *m_iParameter;    \/\/ 8$/;"	m	struct:CEventAction	typeref:typename:const char *
m_iPluginInterfaceVersion	src/Utils/SDK.hpp	/^	int m_iPluginInterfaceVersion;      \/\/ 136$/;"	m	struct:CPlugin	typeref:typename:int
m_iPortalLinkageGroupID	src/Offsets.cpp	/^	int m_iPortalLinkageGroupID;$/;"	v	namespace:Offsets	typeref:typename:int
m_iTarget	src/Utils/SDK.hpp	/^	char *m_iTarget;                        \/\/ 4$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:char *
m_iTarget	src/Utils/SDK.hpp	/^	const char *m_iTarget;       \/\/ 0$/;"	m	struct:CEventAction	typeref:typename:const char *
m_iTargetInput	src/Utils/SDK.hpp	/^	char *m_iTargetInput;                   \/\/ 8$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:char *
m_iTargetInput	src/Utils/SDK.hpp	/^	const char *m_iTargetInput;  \/\/ 4$/;"	m	struct:CEventAction	typeref:typename:const char *
m_impl	lib/SFML/include/SFML/Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-/;"	m	class:sf::SocketSelector	typeref:typename:SocketSelectorImpl *
m_impl	lib/SFML/include/SFML/System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadImpl *
m_impl	lib/SFML/include/SFML/System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal	typeref:typename:priv::ThreadLocalImpl *
m_inAirState	src/Utils/SDK.hpp	/^	InAirState m_inAirState;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:InAirState
m_isBlocking	lib/SFML/include/SFML/Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket	typeref:typename:bool
m_isValid	lib/SFML/include/SFML/Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet	typeref:typename:bool
m_landmarkName	src/Utils/SDK.hpp	/^	char m_landmarkName[256];      \/\/ 288$/;"	m	struct:CHostState	typeref:typename:char[256]
m_levelName	src/Utils/SDK.hpp	/^	char m_levelName[256];         \/\/ 32$/;"	m	struct:CHostState	typeref:typename:char[256]
m_lifeState	src/Offsets.cpp	/^	int m_lifeState;$/;"	v	namespace:Offsets	typeref:typename:int
m_listing	lib/SFML/include/SFML/Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the dat/;"	m	class:sf::Ftp::ListingResponse	typeref:typename:std::vector<std::string>
m_majorVersion	lib/SFML/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_majorVersion	lib/SFML/include/SFML/Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_matCustomViewMatrix	src/Utils/SDK.hpp	/^	float m_matCustomViewMatrix[3][4];$/;"	m	struct:CViewSetup	typeref:typename:float[3][4]
m_matrixThisToLinked	src/Offsets.cpp	/^	int m_matrixThisToLinked;$/;"	v	namespace:Offsets	typeref:typename:int
m_message	lib/SFML/include/SFML/Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:std::string
m_method	lib/SFML/include/SFML/Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request	typeref:typename:Method
m_microseconds	lib/SFML/include/SFML/System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time	typeref:typename:Int64
m_minorVersion	lib/SFML/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_minorVersion	lib/SFML/include/SFML/Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_mutex	lib/SFML/include/SFML/System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock	typeref:typename:Mutex &
m_mutexImpl	lib/SFML/include/SFML/System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex	typeref:typename:priv::MutexImpl *
m_nAllocationCount	src/Utils/SDK.hpp	/^	int m_nAllocationCount;$/;"	m	struct:CUtlMemory	typeref:typename:int
m_nArgc	src/Utils/SDK.hpp	/^	int m_nArgc;$/;"	m	struct:CCommand	typeref:typename:int
m_nArgv0Size	src/Utils/SDK.hpp	/^	int m_nArgv0Size;$/;"	m	struct:CCommand	typeref:typename:int
m_nBits	src/Utils/SDK.hpp	/^	int m_nBits;                                \/\/ 12$/;"	m	struct:SendProp	typeref:typename:int
m_nBitsAvail	src/Utils/SDK.hpp	/^	int m_nBitsAvail;$/;"	m	class:bf_read	typeref:typename:int
m_nButtons	src/Utils/SDK.hpp	/^	int m_nButtons;                   \/\/ 36$/;"	m	struct:CMoveData	typeref:typename:int
m_nCamCommand	src/Utils/SDK.hpp	/^	int m_nCamCommand;                       \/\/ 188$/;"	m	struct:PerUserInput_t	typeref:typename:int
m_nCameraOldX	src/Utils/SDK.hpp	/^	int m_nCameraOldX;                       \/\/ 120$/;"	m	struct:PerUserInput_t	typeref:typename:int
m_nCameraOldY	src/Utils/SDK.hpp	/^	int m_nCameraOldY;                       \/\/ 124$/;"	m	struct:PerUserInput_t	typeref:typename:int
m_nCameraX	src/Utils/SDK.hpp	/^	int m_nCameraX;                          \/\/ 128$/;"	m	struct:PerUserInput_t	typeref:typename:int
m_nCameraY	src/Utils/SDK.hpp	/^	int m_nCameraY;                          \/\/ 132$/;"	m	struct:PerUserInput_t	typeref:typename:int
m_nClearInputState	src/Utils/SDK.hpp	/^	int m_nClearInputState;                  \/\/ 168$/;"	m	struct:PerUserInput_t	typeref:typename:int
m_nDataBits	src/Utils/SDK.hpp	/^	int m_nDataBits;$/;"	m	class:bf_read	typeref:typename:int
m_nDataBytes	src/Utils/SDK.hpp	/^	size_t m_nDataBytes;$/;"	m	class:bf_read	typeref:typename:size_t
m_nDemoNumber	src/Modules/EngineDemoRecorder.hpp	/^	int *m_nDemoNumber = nullptr;$/;"	m	class:EngineDemoRecorder	typeref:typename:int *
m_nDemoNumber	src/Offsets.cpp	/^	int m_nDemoNumber;$/;"	v	namespace:Offsets	typeref:typename:int
m_nDoFQuality	src/Utils/SDK.hpp	/^	int m_nDoFQuality;$/;"	m	struct:CViewSetup	typeref:typename:int
m_nElements	src/Utils/SDK.hpp	/^	int m_nElements;                            \/\/ 32$/;"	m	struct:SendProp	typeref:typename:int
m_nElements	src/Utils/SDK.hpp	/^	int m_nElements;$/;"	m	struct:RecvProp	typeref:typename:int
m_nFlags	src/Utils/SDK.hpp	/^	int m_nFlags;                 \/\/ 20$/;"	m	struct:ConCommandBase	typeref:typename:int
m_nGrowSize	src/Utils/SDK.hpp	/^	int m_nGrowSize;$/;"	m	struct:CUtlMemory	typeref:typename:int
m_nImpulseCommand	src/Utils/SDK.hpp	/^	int m_nImpulseCommand;            \/\/ 8$/;"	m	struct:CMoveData	typeref:typename:int
m_nInBufWord	src/Utils/SDK.hpp	/^	uint32_t m_nInBufWord;$/;"	m	class:bf_read	typeref:typename:uint32_t
m_nLocatorEntityIndices	src/Utils/SDK.hpp	/^	int m_nLocatorEntityIndices[16];$/;"	m	class:CPortalPlayerLocalData	typeref:typename:int[16]
m_nMotionBlurMode	src/Utils/SDK.hpp	/^	int m_nMotionBlurMode;$/;"	m	struct:CViewSetup	typeref:typename:int
m_nOldButtons	src/Utils/SDK.hpp	/^	int m_nOldButtons;                \/\/ 40$/;"	m	struct:CMoveData	typeref:typename:int
m_nPackedSize	src/Utils/SDK.hpp	/^	int m_nPackedSize;            \/\/ 16$/;"	m	struct:datamap_t	typeref:typename:int
m_nPlayerHandle	src/Utils/SDK.hpp	/^	void *m_nPlayerHandle;            \/\/ 4$/;"	m	struct:CMoveData	typeref:typename:void *
m_nProps	src/Utils/SDK.hpp	/^	int m_nProps;$/;"	m	struct:RecvTable	typeref:typename:int
m_nProps	src/Utils/SDK.hpp	/^	int m_nProps;$/;"	m	struct:SendTable	typeref:typename:int
m_nStickCameraState	src/Utils/SDK.hpp	/^	StickCameraState m_nStickCameraState;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:StickCameraState
m_nTickBase	src/Offsets.cpp	/^	int m_nTickBase;$/;"	v	namespace:Offsets	typeref:typename:int
m_nTimesToFire	src/Utils/SDK.hpp	/^	int m_nTimesToFire;          \/\/ 16$/;"	m	struct:CEventAction	typeref:typename:int
m_nTractorBeamCount	src/Utils/SDK.hpp	/^	int m_nTractorBeamCount;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:int
m_nUnscaledHeight	src/Utils/SDK.hpp	/^	int m_nUnscaledHeight;$/;"	m	struct:CViewSetup	typeref:typename:int
m_nUnscaledWidth	src/Utils/SDK.hpp	/^	int m_nUnscaledWidth;$/;"	m	struct:CViewSetup	typeref:typename:int
m_nUnscaledX	src/Utils/SDK.hpp	/^	int m_nUnscaledX;$/;"	m	struct:CViewSetup	typeref:typename:int
m_nUnscaledY	src/Utils/SDK.hpp	/^	int m_nUnscaledY;$/;"	m	struct:CViewSetup	typeref:typename:int
m_nValue	src/Utils/SDK.hpp	/^	int m_nValue;                                       \/\/ 48$/;"	m	struct:ConVar	typeref:typename:int
m_nWaterLevel	src/Offsets.cpp	/^	int m_nWaterLevel;$/;"	v	namespace:Offsets	typeref:typename:int
m_nextState	src/Utils/SDK.hpp	/^	int m_nextState;               \/\/ 4$/;"	m	struct:CHostState	typeref:typename:int
m_object	lib/SFML/include/SFML/System/Thread.inl	/^    C* m_object;$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:C *	file:
m_offset	lib/SFML/include/SFML/System/MemoryInputStream.hpp	/^    Int64       m_offset; \/\/\/< Current reading position$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_oldStickNormal	src/Utils/SDK.hpp	/^	Vector m_oldStickNormal;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_outJumpVel	src/Utils/SDK.hpp	/^	Vector m_outJumpVel;              \/\/ 116, 120, 124$/;"	m	struct:CMoveData	typeref:typename:Vector
m_outStepHeight	src/Utils/SDK.hpp	/^	float m_outStepHeight;            \/\/ 100$/;"	m	struct:CMoveData	typeref:typename:float
m_outWishVel	src/Utils/SDK.hpp	/^	Vector m_outWishVel;              \/\/ 104, 108, 112$/;"	m	struct:CMoveData	typeref:typename:Vector
m_pActivator	src/Utils/SDK.hpp	/^	int m_pActivator;                       \/\/ 12$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:int
m_pArgSBuffer	src/Utils/SDK.hpp	/^	char m_pArgSBuffer[COMMAND_MAX_LENGTH];$/;"	m	struct:CCommand	typeref:typename:char[]
m_pArgvBuffer	src/Utils/SDK.hpp	/^	char m_pArgvBuffer[COMMAND_MAX_LENGTH];$/;"	m	struct:CCommand	typeref:typename:char[]
m_pArrayProp	src/Utils/SDK.hpp	/^	RecvProp *m_pArrayProp;$/;"	m	struct:RecvProp	typeref:typename:RecvProp *
m_pArrayProp	src/Utils/SDK.hpp	/^	SendProp *m_pArrayProp;                     \/\/ 24$/;"	m	struct:SendProp	typeref:typename:SendProp *
m_pBufferEnd	src/Utils/SDK.hpp	/^	const uint32_t *m_pBufferEnd;$/;"	m	class:bf_read	typeref:typename:const uint32_t *
m_pCaller	src/Utils/SDK.hpp	/^	int m_pCaller;                          \/\/ 16$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:int
m_pCameraThirdData	src/Utils/SDK.hpp	/^	CameraThirdData_t *m_pCameraThirdData;   \/\/ 184$/;"	m	struct:PerUserInput_t	typeref:typename:CameraThirdData_t *
m_pCommandCallback	src/Utils/SDK.hpp	/^		void *m_pCommandCallback;$/;"	m	union:ConCommand::__anon21a65a74020a	typeref:typename:void *
m_pCommandCompletionCallback	src/Utils/SDK.hpp	/^		void *m_pCommandCompletionCallback;$/;"	m	union:ConCommand::__anon21a65a74030a	typeref:typename:void *
m_pCommands	src/Offsets.cpp	/^	int m_pCommands;$/;"	v	namespace:Offsets	typeref:typename:int
m_pCommands	src/Utils/SDK.hpp	/^	CUserCmd *m_pCommands;                   \/\/ 172$/;"	m	struct:PerUserInput_t	typeref:typename:CUserCmd *
m_pConCommandList	src/Modules/Tier1.hpp	/^	ConCommandBase *m_pConCommandList = nullptr;$/;"	m	class:Tier1	typeref:typename:ConCommandBase *
m_pConCommandList	src/Offsets.cpp	/^	int m_pConCommandList;$/;"	v	namespace:Offsets	typeref:typename:int
m_pCreateEventFn	src/Utils/SDK.hpp	/^	CreateEventFn m_pCreateEventFn;$/;"	m	struct:ClientClass	typeref:typename:CreateEventFn
m_pCreateFn	src/Utils/SDK.hpp	/^	CreateClientClassFn m_pCreateFn;$/;"	m	struct:ClientClass	typeref:typename:CreateClientClassFn
m_pData	src/Utils/SDK.hpp	/^	const uint32_t *m_pData;$/;"	m	class:bf_read	typeref:typename:const uint32_t *
m_pDataIn	src/Utils/SDK.hpp	/^	const uint32_t *m_pDataIn;$/;"	m	class:bf_read	typeref:typename:const uint32_t *
m_pDataTable	src/Utils/SDK.hpp	/^	RecvTable *m_pDataTable;$/;"	m	struct:RecvProp	typeref:typename:RecvTable *
m_pDataTable	src/Utils/SDK.hpp	/^	SendTable *m_pDataTable;                    \/\/ 72$/;"	m	struct:SendProp	typeref:typename:SendTable *
m_pDebugName	src/Utils/SDK.hpp	/^	const char *m_pDebugName;$/;"	m	class:bf_read	typeref:typename:const char *
m_pDecoder	src/Utils/SDK.hpp	/^	void *m_pDecoder;$/;"	m	struct:RecvTable	typeref:typename:void *
m_pElements	src/Utils/SDK.hpp	/^	T *m_pElements;$/;"	m	struct:CUtlVector	typeref:typename:T *
m_pEnt	src/Utils/SDK.hpp	/^	void *m_pEnt;$/;"	m	struct:CGameTrace	typeref:typename:void *
m_pEntTarget	src/Utils/SDK.hpp	/^	int m_pEntTarget;                       \/\/ 24$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:int
m_pEntity	src/Utils/SDK.hpp	/^	void *m_pEntity;     \/\/ 0$/;"	m	struct:CEntInfo	typeref:typename:void *
m_pExcludeDTName	src/Utils/SDK.hpp	/^	char *m_pExcludeDTName;                     \/\/ 40$/;"	m	struct:SendProp	typeref:typename:char *
m_pExtraData	src/Utils/SDK.hpp	/^	const void *m_pExtraData;                   \/\/ 80$/;"	m	struct:SendProp	typeref:typename:const void *
m_pExtraData	src/Utils/SDK.hpp	/^	const void *m_pExtraData;$/;"	m	struct:RecvProp	typeref:typename:const void *
m_pMatchingRecvProp	src/Utils/SDK.hpp	/^	RecvProp *m_pMatchingRecvProp;              \/\/ 4$/;"	m	struct:SendProp	typeref:typename:RecvProp *
m_pMemory	src/Utils/SDK.hpp	/^	T *m_pMemory;$/;"	m	struct:CUtlMemory	typeref:typename:T *
m_pName	src/Utils/SDK.hpp	/^	const char *m_pName;$/;"	m	struct:InterfaceReg	typeref:typename:const char *
m_pNetTableName	src/Utils/SDK.hpp	/^	char *m_pNetTableName;$/;"	m	struct:RecvTable	typeref:typename:char *
m_pNetTableName	src/Utils/SDK.hpp	/^	char *m_pNetTableName;$/;"	m	struct:SendTable	typeref:typename:char *
m_pNetworkName	src/Utils/SDK.hpp	/^	char *m_pNetworkName;$/;"	m	struct:ClientClass	typeref:typename:char *
m_pNetworkName	src/Utils/SDK.hpp	/^	char *m_pNetworkName;$/;"	m	struct:ServerClass	typeref:typename:char *
m_pNetworkable	src/Utils/SDK.hpp	/^	void *m_pNetworkable;       \/\/ 8$/;"	m	struct:CBaseEdict	typeref:typename:void *
m_pNext	src/Utils/SDK.hpp	/^	CEntInfo *m_pNext;   \/\/ 12$/;"	m	struct:CEntInfo	typeref:typename:CEntInfo *
m_pNext	src/Utils/SDK.hpp	/^	CEventAction *m_pNext;       \/\/ 24$/;"	m	struct:CEventAction	typeref:typename:CEventAction *
m_pNext	src/Utils/SDK.hpp	/^	ClientClass *m_pNext;$/;"	m	struct:ClientClass	typeref:typename:ClientClass *
m_pNext	src/Utils/SDK.hpp	/^	ConCommandBase *m_pNext;      \/\/ 4$/;"	m	struct:ConCommandBase	typeref:typename:ConCommandBase *
m_pNext	src/Utils/SDK.hpp	/^	EventQueuePrioritizedEvent_t *m_pNext;  \/\/ 48$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:EventQueuePrioritizedEvent_t *
m_pNext	src/Utils/SDK.hpp	/^	InterfaceReg *m_pNext;$/;"	m	struct:InterfaceReg	typeref:typename:InterfaceReg *
m_pNext	src/Utils/SDK.hpp	/^	ServerClass *m_pNext;$/;"	m	struct:ServerClass	typeref:typename:ServerClass *
m_pOptimizedDataMap	src/Utils/SDK.hpp	/^	void *m_pOptimizedDataMap;    \/\/ 20$/;"	m	struct:datamap_t	typeref:typename:void *
m_pParent	src/Utils/SDK.hpp	/^	ConVar *m_pParent;                                  \/\/ 28$/;"	m	struct:ConVar	typeref:typename:ConVar *
m_pParentArrayPropName	src/Utils/SDK.hpp	/^	char *m_pParentArrayPropName;               \/\/ 44$/;"	m	struct:SendProp	typeref:typename:char *
m_pParentArrayPropName	src/Utils/SDK.hpp	/^	const char *m_pParentArrayPropName;$/;"	m	struct:RecvProp	typeref:typename:const char *
m_pPassEnt	src/Utils/SDK.hpp	/^	const void *m_pPassEnt;$/;"	m	class:CTraceFilterSimple	typeref:typename:const void *
m_pPlugin	src/Utils/SDK.hpp	/^	IServerPluginCallbacks *m_pPlugin;  \/\/ 132$/;"	m	struct:CPlugin	typeref:typename:IServerPluginCallbacks *
m_pPluginModule	src/Utils/SDK.hpp	/^	void *m_pPluginModule;              \/\/ 140$/;"	m	struct:CPlugin	typeref:typename:void *
m_pPrecalc	src/Utils/SDK.hpp	/^	void *m_pPrecalc;$/;"	m	struct:SendTable	typeref:typename:void *
m_pPrev	src/Utils/SDK.hpp	/^	CEntInfo *m_pPrev;   \/\/ 8$/;"	m	struct:CEntInfo	typeref:typename:CEntInfo *
m_pPrev	src/Utils/SDK.hpp	/^	EventQueuePrioritizedEvent_t *m_pPrev;  \/\/ 52$/;"	m	struct:EventQueuePrioritizedEvent_t	typeref:typename:EventQueuePrioritizedEvent_t *
m_pProps	src/Utils/SDK.hpp	/^	RecvProp *m_pProps;$/;"	m	struct:RecvTable	typeref:typename:RecvProp *
m_pProps	src/Utils/SDK.hpp	/^	SendProp *m_pProps;$/;"	m	struct:SendTable	typeref:typename:SendProp *
m_pRecvTable	src/Utils/SDK.hpp	/^	RecvTable *m_pRecvTable;$/;"	m	struct:ClientClass	typeref:typename:RecvTable *
m_pShadowCrouch	src/Features/Hud/VphysHud.cpp	/^	void *m_pShadowCrouch = *reinterpret_cast<void **>((uintptr_t)player + Offsets::m_pShadowCrouch/;"	v	typeref:typename:void *
m_pShadowCrouch	src/Offsets.cpp	/^	int m_pShadowCrouch;$/;"	v	namespace:Offsets	typeref:typename:int
m_pShadowStand	src/Features/Hud/VphysHud.cpp	/^	void *m_pShadowStand = *reinterpret_cast<void **>((uintptr_t)player + Offsets::m_pShadowStand);$/;"	v	typeref:typename:void *
m_pShadowStand	src/Offsets.cpp	/^	int m_pShadowStand;$/;"	v	namespace:Offsets	typeref:typename:int
m_pSurfaceData	src/Offsets.cpp	/^	int m_pSurfaceData;$/;"	v	namespace:Offsets	typeref:typename:int
m_pTable	src/Utils/SDK.hpp	/^	SendTable *m_pTable;$/;"	m	struct:ServerClass	typeref:typename:SendTable *
m_pUnk	src/Utils/SDK.hpp	/^	void *m_pUnk;               \/\/ 12$/;"	m	struct:CBaseEdict	typeref:typename:void *
m_pVarName	src/Utils/SDK.hpp	/^	char *m_pVarName;                           \/\/ 48$/;"	m	struct:SendProp	typeref:typename:char *
m_pVarName	src/Utils/SDK.hpp	/^	char *m_pVarName;$/;"	m	struct:RecvProp	typeref:typename:char *
m_pVerifiedCommands	src/Utils/SDK.hpp	/^	CVerifiedUserCmd *m_pVerifiedCommands;   \/\/ 176$/;"	m	struct:PerUserInput_t	typeref:typename:CVerifiedUserCmd *
m_pWorldAxisTransform	src/Utils/SDK.hpp	/^	const matrix3x4_t *m_pWorldAxisTransform = nullptr;$/;"	m	struct:Ray_t	typeref:typename:const matrix3x4_t *
m_paintedPowerTimer	src/Utils/SDK.hpp	/^	CountdownTimer m_paintedPowerTimer;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:CountdownTimer
m_paintedPowerType	src/Utils/SDK.hpp	/^	PaintPowerType m_paintedPowerType;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:PaintPowerType
m_pendingPacket	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket	typeref:typename:PendingPacket
m_port	lib/SFML/include/SFML/Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http	typeref:typename:unsigned short
m_ppArgv	src/Utils/SDK.hpp	/^	const char *m_ppArgv[COMMAND_MAX_ARGC];$/;"	m	struct:CCommand	typeref:typename:const char * []
m_priority	src/Utils/SDK.hpp	/^	char m_priority;                            \/\/ 56$/;"	m	struct:SendProp	typeref:typename:char
m_pszCommandName	src/Modules/Tier1.hpp	/^	const char *m_pszCommandName;$/;"	m	struct:CBaseAutoCompleteFileList	typeref:typename:const char *
m_pszDefaultValue	src/Utils/SDK.hpp	/^	const char *m_pszDefaultValue;                      \/\/ 32$/;"	m	struct:ConVar	typeref:typename:const char *
m_pszExtension	src/Modules/Tier1.hpp	/^	const char *m_pszExtension;$/;"	m	struct:CBaseAutoCompleteFileList	typeref:typename:const char *
m_pszHelpString	src/Utils/SDK.hpp	/^	const char *m_pszHelpString;  \/\/ 16$/;"	m	struct:ConCommandBase	typeref:typename:const char *
m_pszName	src/Utils/SDK.hpp	/^	const char *m_pszName;        \/\/ 12$/;"	m	struct:ConCommandBase	typeref:typename:const char *
m_pszString	src/Utils/SDK.hpp	/^	char *m_pszString;                                  \/\/ 36$/;"	m	struct:ConVar	typeref:typename:char *
m_pszSubDir	src/Modules/Tier1.hpp	/^	const char *m_pszSubDir;$/;"	m	struct:CBaseAutoCompleteFileList	typeref:typename:const char *
m_ptOrigin	src/Offsets.cpp	/^	int m_ptOrigin;$/;"	v	namespace:Offsets	typeref:typename:int
m_ptr	src/Utils/json11.hpp	/^		std::shared_ptr<JsonValue> m_ptr;$/;"	m	class:json11::Json	typeref:typename:std::shared_ptr<JsonValue>
m_qQuaternionPunch	src/Utils/SDK.hpp	/^	QAngle m_qQuaternionPunch;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:QAngle
m_readPos	lib/SFML/include/SFML/Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_receiveBuffer	lib/SFML/include/SFML/Network/Ftp.hpp	/^    std::string m_receiveBuffer; \/\/\/< Received command data that is yet to be processed$/;"	m	class:sf::Ftp	typeref:typename:std::string
m_rgAxes	src/Utils/SDK.hpp	/^	joy_axis_t m_rgAxes[MAX_JOYSTICK_AXES];  \/\/ ???$/;"	m	struct:PerUserInput_t	typeref:typename:joy_axis_t[]
m_saveName	src/Utils/SDK.hpp	/^	char m_saveName[256];          \/\/ 544$/;"	m	struct:CHostState	typeref:typename:char[256]
m_sendPos	lib/SFML/include/SFML/Network/Packet.hpp	/^    std::size_t       m_sendPos; \/\/\/< Current send position in the packet (for handling parti/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_shutterCloseAngles	src/Utils/SDK.hpp	/^	QAngle m_shutterCloseAngles;$/;"	m	struct:CViewSetup	typeref:typename:QAngle
m_shutterOpenAngles	src/Utils/SDK.hpp	/^	QAngle m_shutterOpenAngles;$/;"	m	struct:CViewSetup	typeref:typename:QAngle
m_size	lib/SFML/include/SFML/System/MemoryInputStream.hpp	/^    Int64       m_size;   \/\/\/< Total size of the data$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_socket	lib/SFML/include/SFML/Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket	typeref:typename:SocketHandle
m_standHullMax	src/Utils/SDK.hpp	/^	Vector m_standHullMax;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_standHullMin	src/Utils/SDK.hpp	/^	Vector m_standHullMin;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_startTime	lib/SFML/include/SFML/System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock	typeref:typename:Time
m_status	lib/SFML/include/SFML/Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:Status
m_status	lib/SFML/include/SFML/Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response	typeref:typename:Status
m_stickNormal	src/Utils/SDK.hpp	/^	Vector m_stickNormal;  \/\/ adhesion gel moment$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_string	lib/SFML/include/SFML/System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String	typeref:typename:std::basic_string<Uint32>
m_surfaceFriction	src/Offsets.cpp	/^	int m_surfaceFriction;$/;"	v	namespace:Offsets	typeref:typename:int
m_szDemoBaseName	src/Modules/EngineDemoRecorder.hpp	/^	char *m_szDemoBaseName = nullptr;$/;"	m	class:EngineDemoRecorder	typeref:typename:char *
m_szDemoBaseName	src/Offsets.cpp	/^	int m_szDemoBaseName;$/;"	v	namespace:Offsets	typeref:typename:int
m_szFileName	src/Offsets.cpp	/^	int m_szFileName;$/;"	v	namespace:Offsets	typeref:typename:int
m_szLevelName	src/Modules/Engine.hpp	/^	char *m_szLevelName = nullptr;$/;"	m	class:Engine	typeref:typename:char *
m_szLevelName	src/Offsets.cpp	/^	int m_szLevelName;$/;"	v	namespace:Offsets	typeref:typename:int
m_szName	src/Utils/SDK.hpp	/^	char m_szName[128];                 \/\/ 0$/;"	m	struct:CPlugin	typeref:typename:char[128]
m_takedamage	src/Offsets.cpp	/^	int m_takedamage;$/;"	v	namespace:Offsets	typeref:typename:int
m_timestamp	src/Utils/SDK.hpp	/^	float m_timestamp;$/;"	m	class:CountdownTimer	typeref:typename:float
m_type	lib/SFML/include/SFML/Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket	typeref:typename:Type
m_up	src/Utils/SDK.hpp	/^	Vector m_up;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_uri	lib/SFML/include/SFML/Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_vEyeOffset	src/Utils/SDK.hpp	/^	Vector m_vEyeOffset;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_vLocalUp	src/Utils/SDK.hpp	/^	Vector m_vLocalUp;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_vPortalForward	src/Offsets.cpp	/^	int m_vPortalForward;$/;"	v	namespace:Offsets	typeref:typename:int
m_vPreUpdateVelocity	src/Utils/SDK.hpp	/^	Vector m_vPreUpdateVelocity;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_vShutterClosePosition	src/Utils/SDK.hpp	/^	Vector m_vShutterClosePosition;$/;"	m	struct:CViewSetup	typeref:typename:Vector
m_vShutterOpenPosition	src/Utils/SDK.hpp	/^	Vector m_vShutterOpenPosition;$/;"	m	struct:CViewSetup	typeref:typename:Vector
m_vStickRotationAxis	src/Utils/SDK.hpp	/^	Vector m_vStickRotationAxis;$/;"	m	class:CPortalPlayerLocalData	typeref:typename:Vector
m_valid	lib/SFML/include/SFML/Network/IpAddress.hpp	/^    bool   m_valid;   \/\/\/< Is the address valid?$/;"	m	class:sf::IpAddress	typeref:typename:bool
m_value	src/Utils/json11.cpp	/^		const T m_value;$/;"	m	class:json11::Value	typeref:typename:const T	file:
m_vecAbsOrigin	src/Utils/SDK.hpp	/^	Vector m_vecAbsOrigin;            \/\/ 156$/;"	m	struct:CMoveData	typeref:typename:Vector
m_vecAbsViewAngles	src/Utils/SDK.hpp	/^	QAngle m_vecAbsViewAngles;        \/\/ 24, 28, 32$/;"	m	struct:CMoveData	typeref:typename:QAngle
m_vecAngles	src/Utils/SDK.hpp	/^	QAngle m_vecAngles;               \/\/ 76, 80, 84$/;"	m	struct:CMoveData	typeref:typename:QAngle
m_vecCameraOffset	src/Utils/SDK.hpp	/^	Vector m_vecCameraOffset;                \/\/ 104, 108, 112$/;"	m	struct:PerUserInput_t	typeref:typename:Vector
m_vecConstraintCenter	src/Utils/SDK.hpp	/^	Vector m_vecConstraintCenter;     \/\/ 128, 132, 136$/;"	m	struct:CMoveData	typeref:typename:Vector
m_vecHullMax	src/Utils/SDK.hpp	/^	Vector m_vecHullMax;  \/\/ 28, 32, 36$/;"	m	struct:CameraThirdData_t	typeref:typename:Vector
m_vecHullMin	src/Utils/SDK.hpp	/^	Vector m_vecHullMin;  \/\/ 16, 20, 24$/;"	m	struct:CameraThirdData_t	typeref:typename:Vector
m_vecLocation	src/Utils/SDK.hpp	/^	Vector m_vecLocation;          \/\/ 8, 12, 16$/;"	m	struct:CHostState	typeref:typename:Vector
m_vecOldAngles	src/Utils/SDK.hpp	/^	QAngle m_vecOldAngles;            \/\/ 88, 92, 96$/;"	m	struct:CMoveData	typeref:typename:QAngle
m_vecVelocity	src/Utils/SDK.hpp	/^	Vector m_vecVelocity;             \/\/ 64, 68, 72$/;"	m	struct:CMoveData	typeref:typename:Vector
m_vecViewAngles	src/Utils/SDK.hpp	/^	QAngle m_vecViewAngles;           \/\/ 12, 16, 20$/;"	m	struct:CMoveData	typeref:typename:QAngle
main	lib/SFML/include/SFML/Main.hpp	/^    #define main /;"	d
mainThread	src/Features/Bot/BotServer.cpp	/^static void mainThread() {$/;"	f	typeref:typename:void	file:
mainThread	src/Features/Tas/TasServer.cpp	/^static void mainThread() {$/;"	f	typeref:typename:void	file:
major	lib/ffmpeg/include/libavcodec/dirac.h	/^    int major;$/;"	m	struct:DiracVersionInfo	typeref:typename:int
manualActive	src/Features/Camera.hpp	/^	bool manualActive = false;$/;"	m	class:Camera	typeref:typename:bool
map	src/Features/ConfigPlus.cpp	/^		char *map; \/\/ also actually used for game name now lol$/;"	m	union:Condition::__anon19445435030a	typeref:typename:char *	file:
map	src/Features/Hud/LPHud.cpp	/^	std::string map;$/;"	m	struct:LPHudCountHistoryInfo	typeref:typename:std::string	file:
map	src/Features/Speedrun/Rules.hpp	/^	std::string map;$/;"	m	struct:SpeedrunRule	typeref:typename:std::string
map	src/Features/Summary.hpp	/^	std::string map;$/;"	m	struct:SummaryItem	typeref:typename:std::string
map	src/Features/Timer/TimerAverage.hpp	/^	std::string map;$/;"	m	struct:TimerAverageItem	typeref:typename:std::string
map	src/Features/Timer/TimerCheckPoints.hpp	/^	std::string map;$/;"	m	struct:TimerCheckPointItem	typeref:typename:std::string
map	src/Features/WorkshopList.cpp	/^	for (const auto &map : workshop->maps) {$/;"	v	typeref:typename:const auto &
mapExists	src/Features/Tas/TasPlayer.cpp	/^static bool mapExists(std::string name) {$/;"	f	typeref:typename:bool	file:
mapKeys	src/Features/Speedrun/Categories.cpp	/^static std::vector<K> mapKeys(std::map<K, V> m) {$/;"	f	typeref:typename:std::vector<K>	file:
mapName	src/Features/Demo/Demo.hpp	/^	char mapName[260];$/;"	m	class:Demo	typeref:typename:char[260]
mapNames	src/Game.cpp	/^std::vector<std::string> Game::mapNames;$/;"	m	class:Game	typeref:typename:std::vector<std::string>
mapNames	src/Game.hpp	/^	static std::vector<std::string> mapNames;$/;"	m	class:Game	typeref:typename:std::vector<std::string>
mapStats	src/Features/Stats/StatsCounter.hpp	/^	std::map<std::string, MapStats> mapStats;$/;"	m	class:StatsCounter	typeref:typename:std::map<std::string,MapStats>
mapname	src/Utils/SDK.hpp	/^	char *mapname;            \/\/ 60$/;"	m	struct:CGlobalVars	typeref:typename:char *
maps	src/Features/WorkshopList.hpp	/^	std::vector<std::string> maps;$/;"	m	class:WorkshopList	typeref:typename:std::vector<std::string>
mapversion	src/Utils/SDK.hpp	/^	int mapversion;           \/\/ 64$/;"	m	struct:CGlobalVars	typeref:typename:int
mask_color	src/Features/Stitcher.cpp	/^	Color mask_color;$/;"	m	struct:StitchRegion	typeref:typename:Color	file:
mastering_display_actual_peak_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational mastering_display_actual_peak_luminance[25][25];$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:AVRational[25][25]
mastering_display_actual_peak_luminance_flag	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t mastering_display_actual_peak_luminance_flag;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
mat	src/Utils/Math.hpp	/^	std::vector<std::vector<double>> mat;$/;"	m	class:Matrix	typeref:typename:std::vector<std::vector<double>>
mat_norendering	src/Modules/Engine.cpp	/^Variable mat_norendering;$/;"	v	typeref:typename:Variable
materialSystem	src/Modules/MaterialSystem.cpp	/^MaterialSystem *materialSystem;$/;"	v	typeref:typename:MaterialSystem *
materials	src/Modules/MaterialSystem.hpp	/^	Interface *materials = nullptr;$/;"	m	class:MaterialSystem	typeref:typename:Interface *
matrix3x4_t	src/Utils/SDK.hpp	/^struct matrix3x4_t {$/;"	s
matsurface	src/Modules/Surface.hpp	/^	Interface *matsurface = nullptr;$/;"	m	class:Surface	typeref:typename:Interface *
max	lib/ffmpeg/include/libavutil/opt.h	/^    double max;                 \/\/\/< maximum valid value for the option$/;"	m	struct:AVOption	typeref:typename:double
maxClients	src/Utils/SDK.hpp	/^	int maxClients;                 \/\/ 20$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
maxEntities	src/Utils/SDK.hpp	/^	int maxEntities;          \/\/ 80$/;"	m	struct:CGlobalVars	typeref:typename:int
maxSpeed	src/Features/Routing/EntityInspector.hpp	/^	float maxSpeed;$/;"	m	struct:InspectionItem	typeref:typename:float
maxSpeed	src/Features/Tas/TasPlayer.hpp	/^	float maxSpeed;$/;"	m	struct:TasPlayerInfo	typeref:typename:float
maxSplitScreenClients	src/Features/Demo/DemoParser.hpp	/^	int maxSplitScreenClients;$/;"	m	class:DemoParser	typeref:typename:int
maxWidth	src/Features/Hud/Hud.hpp	/^	int maxWidth = 0;$/;"	m	class:HudContext	typeref:typename:int
maxWidth	src/Features/Hud/Toasts.cpp	/^	int maxWidth = sar_toast_width.GetInt();$/;"	v	typeref:typename:int
max_analyze_duration	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t max_analyze_duration;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
max_b_frames	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int max_b_frames;$/;"	m	struct:AVCodecContext	typeref:typename:int
max_bitrate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int max_bitrate;$/;"	m	struct:AVCPBProperties	typeref:typename:int
max_chunk_duration	lib/ffmpeg/include/libavformat/avformat.h	/^    int max_chunk_duration;$/;"	m	struct:AVFormatContext	typeref:typename:int
max_chunk_size	lib/ffmpeg/include/libavformat/avformat.h	/^    int max_chunk_size;$/;"	m	struct:AVFormatContext	typeref:typename:int
max_delay	lib/ffmpeg/include/libavformat/avformat.h	/^    int max_delay;$/;"	m	struct:AVFormatContext	typeref:typename:int
max_depth	src/Utils/json11.cpp	/^	static const int max_depth = 200;$/;"	v	namespace:json11	typeref:typename:const int	file:
max_height	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int max_height;$/;"	m	struct:AVHWFramesConstraints	typeref:typename:int
max_height	src/Features/Hud/Minimap.cpp	/^	int max_width, max_height;$/;"	m	struct:MinimapSettings	typeref:typename:int	file:
max_index_size	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int max_index_size;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
max_interleave_delta	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t max_interleave_delta;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
max_lowres	lib/ffmpeg/include/libavcodec/codec.h	/^    uint8_t max_lowres;                     \/\/\/< maximum value for lowres supported by the de/;"	m	struct:AVCodec	typeref:typename:uint8_t
max_luminance	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    AVRational max_luminance;$/;"	m	struct:AVMasteringDisplayMetadata	typeref:typename:AVRational
max_packet_size	lib/ffmpeg/include/libavformat/avio.h	/^    int max_packet_size;$/;"	m	struct:AVIOContext	typeref:typename:int
max_picture_buffer	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int max_picture_buffer;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
max_pixels	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t max_pixels;$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
max_prediction_order	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int max_prediction_order;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
max_probe_packets	lib/ffmpeg/include/libavformat/avformat.h	/^    int max_probe_packets;$/;"	m	struct:AVFormatContext	typeref:typename:int
max_qdiff	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int max_qdiff;$/;"	m	struct:AVCodecContext	typeref:typename:int
max_samples	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t max_samples;$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
max_samples	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int max_samples;$/;"	m	struct:AVFilterLink	typeref:typename:int
max_streams	lib/ffmpeg/include/libavformat/avformat.h	/^    int max_streams;$/;"	m	struct:AVFormatContext	typeref:typename:int
max_ts_probe	lib/ffmpeg/include/libavformat/avformat.h	/^    int max_ts_probe;$/;"	m	struct:AVFormatContext	typeref:typename:int
max_width	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int max_width;$/;"	m	struct:AVHWFramesConstraints	typeref:typename:int
max_width	src/Features/Hud/Minimap.cpp	/^	int max_width, max_height;$/;"	m	struct:MinimapSettings	typeref:typename:int	file:
maxbitlen	src/Utils/lodepng.cpp	/^	unsigned maxbitlen; \/*maximum number of bits a single code can get*\/$/;"	m	struct:HuffmanTree	typeref:typename:unsigned	file:
maxnumcolors	src/Utils/lodepng.cpp	/^	unsigned maxnumcolors;  \/*if more than that amount counted*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned	file:
maxscl	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational maxscl[3];$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational[3]
maxsize	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t maxsize;$/;"	m	struct:AVIOContext	typeref:typename:int64_t
maybeQuote	src/Features/Speedrun/Categories.cpp	/^static std::string maybeQuote(std::string arg) {$/;"	f	typeref:typename:std::string	file:
mb_cmp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mb_cmp;$/;"	m	struct:AVCodecContext	typeref:typename:int
mb_decision	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mb_decision;$/;"	m	struct:AVCodecContext	typeref:typename:int
mb_lmax	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mb_lmax;$/;"	m	struct:AVCodecContext	typeref:typename:int
mb_lmin	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mb_lmin;$/;"	m	struct:AVCodecContext	typeref:typename:int
me_cmp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int me_cmp;$/;"	m	struct:AVCodecContext	typeref:typename:int
me_penalty_compensation	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int me_penalty_compensation;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
me_pre_cmp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int me_pre_cmp;$/;"	m	struct:AVCodecContext	typeref:typename:int
me_range	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int me_range;$/;"	m	struct:AVCodecContext	typeref:typename:int
me_sub_cmp	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int me_sub_cmp;$/;"	m	struct:AVCodecContext	typeref:typename:int
me_subpel_quality	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int me_subpel_quality;$/;"	m	struct:AVCodecContext	typeref:typename:int
mem	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkDeviceMemory mem[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVkFrame	typeref:typename:VkDeviceMemory[]
messageTicks	src/Features/Demo/Demo.hpp	/^	std::vector<int32_t> messageTicks;$/;"	m	class:Demo	typeref:typename:std::vector<int32_t>
metadata	lib/ffmpeg/include/libavformat/avformat.h	/^    AVDictionary *metadata;$/;"	m	struct:AVChapter	typeref:typename:AVDictionary *
metadata	lib/ffmpeg/include/libavformat/avformat.h	/^    AVDictionary *metadata;$/;"	m	struct:AVFormatContext	typeref:typename:AVDictionary *
metadata	lib/ffmpeg/include/libavformat/avformat.h	/^    AVDictionary *metadata;$/;"	m	struct:AVProgram	typeref:typename:AVDictionary *
metadata	lib/ffmpeg/include/libavformat/avformat.h	/^    AVDictionary *metadata;$/;"	m	struct:AVStream	typeref:typename:AVDictionary *
metadata	lib/ffmpeg/include/libavutil/frame.h	/^    AVDictionary *metadata;$/;"	m	struct:AVFrame	typeref:typename:AVDictionary *
metadata	lib/ffmpeg/include/libavutil/frame.h	/^    AVDictionary *metadata;$/;"	m	struct:AVFrameSideData	typeref:typename:AVDictionary *
metadata_header_padding	lib/ffmpeg/include/libavformat/avformat.h	/^    int metadata_header_padding;$/;"	m	struct:AVFormatContext	typeref:typename:int
methods	lib/ffmpeg/include/libavcodec/codec.h	/^    int methods;$/;"	m	struct:AVCodecHWConfig	typeref:typename:int
mhInitialized	src/Utils/Platform.hpp	/^	bool mhInitialized = false;$/;"	v	namespace:__anon75d278770111	typeref:typename:bool
mid	src/Features/Speedrun/Categories.cpp	/^		const char *mid = pair;$/;"	v	typeref:typename:const char *
mime_type	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *mime_type; \/**< mime_type, when known. *\/$/;"	m	struct:AVProbeData	typeref:typename:const char *
mime_type	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *mime_type;$/;"	m	struct:AVInputFormat	typeref:typename:const char *
mime_type	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *mime_type;$/;"	m	struct:AVOutputFormat	typeref:typename:const char *
mime_types	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    const char *const *mime_types;$/;"	m	struct:AVCodecDescriptor	typeref:typename:const char * const *
min	lib/ffmpeg/include/libavutil/opt.h	/^    double min;                 \/\/\/< minimum valid value for the option$/;"	m	struct:AVOption	typeref:typename:double
min_bitrate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int min_bitrate;$/;"	m	struct:AVCPBProperties	typeref:typename:int
min_bitrate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t min_bitrate;$/;"	m	struct:AVCPBProperties	typeref:typename:int64_t
min_distance	lib/ffmpeg/include/libavformat/avformat.h	/^    int min_distance;         \/**< Minimum distance between this and the previous keyframe, use/;"	m	struct:AVIndexEntry	typeref:typename:int
min_height	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int min_height;$/;"	m	struct:AVHWFramesConstraints	typeref:typename:int
min_luminance	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    AVRational min_luminance;$/;"	m	struct:AVMasteringDisplayMetadata	typeref:typename:AVRational
min_packet_size	lib/ffmpeg/include/libavformat/avio.h	/^    int min_packet_size;$/;"	m	struct:AVIOContext	typeref:typename:int
min_prediction_order	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int min_prediction_order;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
min_samples	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int min_samples;$/;"	m	struct:AVFilterLink	typeref:typename:int
min_width	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int min_width;$/;"	m	struct:AVHWFramesConstraints	typeref:typename:int
minimapHud	src/Features/Hud/Minimap.cpp	/^static MinimapHud minimapHud;$/;"	v	typeref:typename:MinimapHud	file:
minor	lib/ffmpeg/include/libavcodec/dirac.h	/^    int minor;$/;"	m	struct:DiracVersionInfo	typeref:typename:int
minute	src/Utils/lodepng.hpp	/^	unsigned minute; \/*0-59*\/$/;"	m	struct:LodePNGTime	typeref:typename:unsigned
misc_bits	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int misc_bits;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
modelName	src/Features/Demo/GhostEntity.hpp	/^	std::string modelName;$/;"	m	class:GhostEntity	typeref:typename:std::string
modelName	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::string modelName;$/;"	m	class:NetworkManager	typeref:typename:std::string
modification_timestamp	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t modification_timestamp;       \/**< Time of last modification in microseconds since /;"	m	struct:AVIODirEntry	typeref:typename:int64_t
modrm	lib/minhook/hde/hde32.h	/^    uint8_t modrm;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
modrm	lib/minhook/hde/hde64.h	/^    uint8_t modrm;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
modrm_mod	lib/minhook/hde/hde32.h	/^    uint8_t modrm_mod;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
modrm_mod	lib/minhook/hde/hde64.h	/^    uint8_t modrm_mod;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
modrm_reg	lib/minhook/hde/hde32.h	/^    uint8_t modrm_reg;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
modrm_reg	lib/minhook/hde/hde64.h	/^    uint8_t modrm_reg;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
modrm_rm	lib/minhook/hde/hde32.h	/^    uint8_t modrm_rm;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
modrm_rm	lib/minhook/hde/hde64.h	/^    uint8_t modrm_rm;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
moduleList	src/Utils/Memory.cpp	/^std::vector<Memory::ModuleInfo> Memory::moduleList;$/;"	m	class:Memory	typeref:typename:std::vector<Memory::ModuleInfo>
modules	src/SAR.hpp	/^	Modules *modules;$/;"	m	class:SAR	typeref:typename:Modules *
month	src/Utils/lodepng.hpp	/^	unsigned month;  \/*1-12*\/$/;"	m	struct:LodePNGTime	typeref:typename:unsigned
more	lib/curl/include/curl/curl.h	/^  struct curl_httppost *more;       \/* if one field name has more than one$/;"	m	struct:curl_httppost	typeref:struct:curl_httppost *
motion_scale	lib/ffmpeg/include/libavutil/motion_vector.h	/^    uint16_t motion_scale;$/;"	m	struct:AVMotionVector	typeref:typename:uint16_t
motion_x	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int32_t motion_x, motion_y;$/;"	m	struct:AVMotionVector	typeref:typename:int32_t
motion_y	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int32_t motion_x, motion_y;$/;"	m	struct:AVMotionVector	typeref:typename:int32_t
mouseDelta	src/Features/Hud/StrafeQuality.cpp	/^	int mouseDelta;$/;"	m	struct:TickInfo	typeref:typename:int	file:
mouseHoldPos	src/Features/Camera.hpp	/^	int mouseHoldPos[2] = {0, 0};$/;"	m	class:Camera	typeref:typename:int[2]
mousedx	src/Utils/SDK.hpp	/^	short mousedx;          \/\/ 56$/;"	m	struct:CUserCmd	typeref:typename:short
mousedy	src/Utils/SDK.hpp	/^	short mousedy;          \/\/ 58$/;"	m	struct:CUserCmd	typeref:typename:short
mousex	src/Features/Stitcher.cpp	/^	int mousex;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
mousey	src/Features/Stitcher.cpp	/^	int mousey;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
moveAnalog	src/Features/Tas/TasController.hpp	/^	Vector moveAnalog = {0, 0};$/;"	m	class:TasController	typeref:typename:Vector
moveAnalog	src/Features/Tas/TasPlayer.hpp	/^	Vector moveAnalog = {0, 0};$/;"	m	struct:TasFramebulk	typeref:typename:Vector
movement	src/Features/Hud/InputHud.hpp	/^		Vector movement{0, 0};$/;"	m	struct:InputHud::__anon1a84afe10108	typeref:typename:Vector
movieframe	src/Utils/SDK.hpp	/^	int movieframe;$/;"	m	struct:MovieInfo_t	typeref:typename:int
moviename	src/Utils/SDK.hpp	/^	char moviename[256];$/;"	m	struct:MovieInfo_t	typeref:typename:char[256]
mpeg_quant	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mpeg_quant;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
msg	lib/curl/include/curl/multi.h	/^  CURLMSG msg;       \/* what this message means *\/$/;"	m	struct:CURLMsg	typeref:typename:CURLMSG
msg	src/Features/Demo/NetworkGhostPlayer.cpp	/^	std::string msg = args[1];$/;"	v	typeref:typename:std::string
msg	src/Features/Tas/TasParser.hpp	/^	std::string msg;$/;"	m	struct:TasParserException	typeref:typename:std::string
msgStopRender	src/Features/Renderer.cpp	/^static inline void msgStopRender(bool error) {$/;"	f	typeref:typename:void	file:
mutex	src/Features/Demo/NetworkGhostPlayer.cpp	/^std::mutex mutex;$/;"	v	typeref:typename:std::mutex
mux_ts_offset	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t mux_ts_offset;$/;"	m	struct:AVStream	typeref:typename:int64_t
mv	src/Offsets.cpp	/^	int mv;$/;"	v	namespace:Offsets	typeref:typename:int
mv0_threshold	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mv0_threshold;$/;"	m	struct:AVCodecContext	typeref:typename:int
mv_bits	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int mv_bits;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
mv_blocks	lib/ffmpeg/include/libavcodec/xvmc.h	/^    XvMCMacroBlock* mv_blocks;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:XvMCMacroBlock *
myfree	src/Utils/lodepng.cpp	/^static void myfree(void *ptr) {$/;"	f	typeref:typename:void	file:
mymalloc	src/Utils/lodepng.cpp	/^static void *mymalloc(size_t size) {$/;"	f	typeref:typename:void *	file:
myrealloc	src/Utils/lodepng.cpp	/^static void *myrealloc(void *ptr, size_t new_size) {$/;"	f	typeref:typename:void *	file:
nIP	lib/minhook/hook.c	/^    UINT   nIP : 4;             \/\/ Count of the instruction boundaries.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT:4	file:
nIP	lib/minhook/trampoline.h	/^    UINT   nIP;             \/\/ [Out] Number of the instruction boundaries.$/;"	m	struct:_TRAMPOLINE	typeref:typename:UINT
nSlot	src/Features/Stats/Stats.cpp	/^	auto nSlot = GET_SLOT();$/;"	v	typeref:typename:auto
nTimestampNetworkingBase	src/Utils/SDK.hpp	/^	int nTimestampNetworkingBase;   \/\/ 52$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
nTimestampRandomizeWindow	src/Utils/SDK.hpp	/^	int nTimestampRandomizeWindow;  \/\/ 56$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
n_difchan	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              n_difchan;             \/* number of DIF channels per frame *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
name	lib/curl/include/curl/curl.h	/^  char *name;                       \/* pointer to allocated name *\/$/;"	m	struct:curl_httppost	typeref:typename:char *
name	lib/curl/include/curl/curl.h	/^  char *name;$/;"	m	struct:curl_hstsentry	typeref:typename:char *
name	lib/curl/include/curl/curl.h	/^  const char *name;$/;"	m	struct:curl_ssl_backend	typeref:typename:const char *
name	lib/curl/include/curl/options.h	/^  const char *name;$/;"	m	struct:curl_easyoption	typeref:typename:const char *
name	lib/ffmpeg/include/libavcodec/avcodec.h	/^    const char *name;$/;"	m	struct:AVHWAccel	typeref:typename:const char *
name	lib/ffmpeg/include/libavcodec/bsf.h	/^    const char *name;$/;"	m	struct:AVBitStreamFilter	typeref:typename:const char *
name	lib/ffmpeg/include/libavcodec/codec.h	/^    const char *name; \/\/\/< short name for the profile$/;"	m	struct:AVProfile	typeref:typename:const char *
name	lib/ffmpeg/include/libavcodec/codec.h	/^    const char *name;$/;"	m	struct:AVCodec	typeref:typename:const char *
name	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    const char      *name;$/;"	m	struct:AVCodecDescriptor	typeref:typename:const char *
name	lib/ffmpeg/include/libavfilter/avfilter.h	/^    char *name;                     \/\/\/< name of this filter instance$/;"	m	struct:AVFilterContext	typeref:typename:char *
name	lib/ffmpeg/include/libavfilter/avfilter.h	/^    char *name;$/;"	m	struct:AVFilterInOut	typeref:typename:char *
name	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const char *name;$/;"	m	struct:AVFilter	typeref:typename:const char *
name	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *name;$/;"	m	struct:AVInputFormat	typeref:typename:const char *
name	lib/ffmpeg/include/libavformat/avformat.h	/^    const char *name;$/;"	m	struct:AVOutputFormat	typeref:typename:const char *
name	lib/ffmpeg/include/libavformat/avio.h	/^    char *name;                           \/**< Filename *\/$/;"	m	struct:AVIODirEntry	typeref:typename:char *
name	lib/ffmpeg/include/libavutil/opt.h	/^    const char *name;$/;"	m	struct:AVOption	typeref:typename:const char *
name	lib/ffmpeg/include/libavutil/pixdesc.h	/^    const char *name;$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:const char *
name	src/Features/ConfigPlus.cpp	/^		for (auto &name : g_persistentSvars) {$/;"	v	typeref:typename:auto &
name	src/Features/ConfigPlus.cpp	/^	char *name = strdup(args[1]);  \/\/ We do this so that the ConCommand has a persistent handle t/;"	v	typeref:typename:char *
name	src/Features/ConfigPlus.cpp	/^	char *name;$/;"	m	struct:AliasInfo	typeref:typename:char *	file:
name	src/Features/Demo/DemoParser.cpp	/^		const char *name = demoName;$/;"	v	typeref:typename:const char *
name	src/Features/Demo/DemoParser.cpp	/^	auto name = std::string();$/;"	v	typeref:typename:auto
name	src/Features/Demo/DemoParser.cpp	/^	std::string name;$/;"	v	typeref:typename:std::string
name	src/Features/Demo/GhostEntity.hpp	/^	std::string name;$/;"	m	class:GhostEntity	typeref:typename:std::string
name	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::string name;$/;"	m	class:NetworkManager	typeref:typename:std::string
name	src/Features/EntityList.cpp	/^		auto name = server->GetEntityName(info->m_pEntity);$/;"	v	typeref:typename:auto
name	src/Features/Hud/Hud.cpp	/^	auto name = std::string("sar_hud_") + std::string(args[1]);$/;"	v	typeref:typename:auto
name	src/Features/Hud/Hud.hpp	/^	const char *name;$/;"	m	class:HudElement	typeref:typename:const char *
name	src/Features/Hud/InputHud.hpp	/^		std::string name;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:std::string
name	src/Features/Listener.cpp	/^			auto name = *(char **)(m_GameEvents + CGameEventDescriptor_Size * i + CGameEventManager_m_Gam/;"	v	typeref:typename:auto
name	src/Features/Speedrun/Categories.cpp	/^	std::string name;$/;"	m	struct:ScheduledRule	typeref:typename:std::string	file:
name	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::string name;$/;"	m	struct:Segment	typeref:typename:std::string	file:
name	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::string name;$/;"	m	struct:SplitInfo	typeref:typename:std::string	file:
name	src/Features/Tas/TasTool.hpp	/^	const char *name;$/;"	m	class:TasTool	typeref:typename:const char *
name	src/Modules/EngineDemoPlayer.cpp	/^	std::string name = args[1];$/;"	v	typeref:typename:std::string
name	src/Modules/Surface.cpp	/^		const char *name = surface->GetFontName(surface->matsurface->ThisPtr(), id);$/;"	v	typeref:typename:const char *
name	src/SAR.cpp	/^	auto name = Variable("name");$/;"	v	typeref:typename:auto
name	src/Utils/Memory.hpp	/^		char name[MAX_PATH];$/;"	m	struct:Memory::ModuleInfo	typeref:typename:char[]
name	src/Utils/SDK.hpp	/^	char name[32];$/;"	m	struct:cmdalias_t	typeref:typename:char[32]
name	src/Utils/SDK.hpp	/^	const char *name;$/;"	m	struct:csurface_t	typeref:typename:const char *
namelen	lib/curl/include/curl/curl.h	/^  size_t namelen;$/;"	m	struct:curl_hstsentry	typeref:typename:size_t
namelength	lib/curl/include/curl/curl.h	/^  long namelength;                  \/* length of name length *\/$/;"	m	struct:curl_httppost	typeref:typename:long
nbDemoTicks	src/Features/Demo/DemoGhostEntity.hpp	/^	size_t nbDemoTicks;$/;"	m	class:DemoGhostEntity	typeref:typename:size_t
nbDemos	src/Features/Demo/DemoGhostPlayer.hpp	/^	int nbDemos;$/;"	m	class:DemoGhostPlayer	typeref:typename:int
nbReset	src/Features/Stats/StatsCounter.hpp	/^	int nbReset;$/;"	m	class:StatsCounter	typeref:typename:int
nb_attributes	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    int           nb_attributes;$/;"	m	struct:AVVAAPIFramesContext	typeref:typename:int
nb_blocks	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    unsigned int nb_blocks;$/;"	m	struct:AVVideoEncParams	typeref:typename:unsigned int
nb_chapters	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int nb_chapters;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
nb_coded_side_data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int            nb_coded_side_data;$/;"	m	struct:AVCodecContext	typeref:typename:int
nb_colors	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int nb_colors; \/\/\/< number of colors in pict, undefined when pict is not set$/;"	m	struct:AVSubtitleRect	typeref:typename:int
nb_comp_queues	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int nb_comp_queues;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
nb_components	lib/ffmpeg/include/libavutil/opt.h	/^    int nb_components;$/;"	m	struct:AVOptionRanges	typeref:typename:int
nb_components	lib/ffmpeg/include/libavutil/pixdesc.h	/^    uint8_t nb_components;  \/\/\/< The number of components each pixel has, (1-4)$/;"	m	struct:AVPixFmtDescriptor	typeref:typename:uint8_t
nb_decoded_frames	lib/ffmpeg/include/libavformat/avformat.h	/^    int nb_decoded_frames;$/;"	m	struct:AVStream	typeref:typename:int
nb_devices	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int nb_devices;                      \/**< number of autodetected devices *\/$/;"	m	struct:AVDeviceInfoList	typeref:typename:int
nb_enabled_dev_extensions	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int nb_enabled_dev_extensions;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
nb_enabled_inst_extensions	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int nb_enabled_inst_extensions;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
nb_ext_buffers	lib/ffmpeg/include/libavcodec/qsv.h	/^    int         nb_ext_buffers;$/;"	m	struct:AVQSVContext	typeref:typename:int
nb_extended_buf	lib/ffmpeg/include/libavutil/frame.h	/^    int        nb_extended_buf;$/;"	m	struct:AVFrame	typeref:typename:int
nb_filters	lib/ffmpeg/include/libavfilter/avfilter.h	/^    unsigned nb_filters;$/;"	m	struct:AVFilterGraph	typeref:typename:unsigned
nb_frames	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t nb_frames;                 \/\/\/< number of frames in this stream if known or 0$/;"	m	struct:AVStream	typeref:typename:int64_t
nb_graphics_queues	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int nb_graphics_queues;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
nb_index_entries	lib/ffmpeg/include/libavformat/avformat.h	/^    int nb_index_entries;$/;"	m	struct:AVStream	typeref:typename:int
nb_inputs	lib/ffmpeg/include/libavfilter/avfilter.h	/^    unsigned    nb_inputs;          \/\/\/< number of input pads$/;"	m	struct:AVFilterContext	typeref:typename:unsigned
nb_layers	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    int nb_layers;$/;"	m	struct:AVDRMFrameDescriptor	typeref:typename:int
nb_objects	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    int nb_objects;$/;"	m	struct:AVDRMFrameDescriptor	typeref:typename:int
nb_opaque_surfaces	lib/ffmpeg/include/libavcodec/qsv.h	/^    int nb_opaque_surfaces;$/;"	m	struct:AVQSVContext	typeref:typename:int
nb_outputs	lib/ffmpeg/include/libavfilter/avfilter.h	/^    unsigned    nb_outputs;         \/\/\/< number of output pads$/;"	m	struct:AVFilterContext	typeref:typename:unsigned
nb_planes	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    int nb_planes;$/;"	m	struct:AVDRMLayerDescriptor	typeref:typename:int
nb_planes	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^    int nb_planes;$/;"	m	struct:AVOpenCLFrameDescriptor	typeref:typename:int
nb_programs	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int nb_programs;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
nb_ranges	lib/ffmpeg/include/libavutil/opt.h	/^    int nb_ranges;$/;"	m	struct:AVOptionRanges	typeref:typename:int
nb_samples	lib/ffmpeg/include/libavutil/frame.h	/^    int nb_samples;$/;"	m	struct:AVFrame	typeref:typename:int
nb_side_data	lib/ffmpeg/include/libavformat/avformat.h	/^    int            nb_side_data;$/;"	m	struct:AVStream	typeref:typename:int
nb_side_data	lib/ffmpeg/include/libavutil/frame.h	/^    int            nb_side_data;$/;"	m	struct:AVFrame	typeref:typename:int
nb_stream_indexes	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int   nb_stream_indexes;$/;"	m	struct:AVProgram	typeref:typename:unsigned int
nb_streams	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int nb_streams;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
nb_surfaces	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^    int              nb_surfaces;$/;"	m	struct:AVDXVA2FramesContext	typeref:typename:int
nb_surfaces	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^    int            nb_surfaces;$/;"	m	struct:AVQSVFramesContext	typeref:typename:int
nb_surfaces	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    int           nb_surfaces;$/;"	m	struct:AVVAAPIFramesContext	typeref:typename:int
nb_threads	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int nb_threads;$/;"	m	struct:AVFilterContext	typeref:typename:int
nb_threads	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int nb_threads;$/;"	m	struct:AVFilterGraph	typeref:typename:int
nb_tx_queues	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int nb_tx_queues;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
needToRecordInitialVals	src/Modules/EngineDemoRecorder.cpp	/^bool needToRecordInitialVals = false;$/;"	v	typeref:typename:bool
needToUpdate	src/Features/FovChanger.hpp	/^	bool needToUpdate = false;$/;"	m	class:FovChanger	typeref:typename:bool
need_parsing	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVStreamParseType need_parsing;$/;"	m	struct:AVStream	typeref:enum:AVStreamParseType
netResetCoopProgress	src/Modules/Server.cpp	/^static void netResetCoopProgress(const void *data, size_t size) {$/;"	f	typeref:typename:void	file:
net_showmsg	src/Modules/Engine.cpp	/^Variable net_showmsg;$/;"	v	typeref:typename:Variable
net_time	src/Modules/Engine.hpp	/^	double *net_time = nullptr;$/;"	m	class:Engine	typeref:typename:double *
net_time	src/Offsets.cpp	/^	int net_time;$/;"	v	namespace:Offsets	typeref:typename:int
network	src/Features/Demo/GhostEntity.hpp	/^	bool network;$/;"	m	class:GhostEntity	typeref:typename:bool
networkManager	src/Features/Demo/NetworkGhostPlayer.cpp	/^NetworkManager networkManager;$/;"	v	typeref:typename:NetworkManager
networkProtocol	src/Features/Demo/Demo.hpp	/^	int32_t networkProtocol;$/;"	m	class:Demo	typeref:typename:int32_t
networkThread	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::thread networkThread;$/;"	m	class:NetworkManager	typeref:typename:std::thread
network_protocol	src/Utils/SDK.hpp	/^	int network_protocol;           \/\/ 40$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
newIPs	lib/minhook/hook.c	/^    UINT8  newIPs[8];           \/\/ Instruction boundaries of the trampoline function.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT8[8]	file:
newIPs	lib/minhook/trampoline.h	/^    UINT8  newIPs[8];       \/\/ [Out] Instruction boundaries of the trampoline function.$/;"	m	struct:_TRAMPOLINE	typeref:typename:UINT8[8]
newPos	src/Features/Demo/GhostEntity.hpp	/^	DataGhost newPos;$/;"	m	class:GhostEntity	typeref:typename:DataGhost
next	lib/SFML/include/SFML/System/Utf.inl	/^In Utf<16>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
next	lib/SFML/include/SFML/System/Utf.inl	/^In Utf<32>::next(In begin, In \/*end*\/)$/;"	f	class:Utf	typeref:typename:In
next	lib/SFML/include/SFML/System/Utf.inl	/^In Utf<8>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
next	lib/curl/include/curl/curl.h	/^  struct curl_httppost *next;       \/* next entry in the list *\/$/;"	m	struct:curl_httppost	typeref:struct:curl_httppost *
next	lib/curl/include/curl/curl.h	/^  struct curl_slist *next;$/;"	m	struct:curl_slist	typeref:struct:curl_slist *
next	lib/ffmpeg/include/libavcodec/avcodec.h	/^    struct AVBitStreamFilterContext *next;$/;"	m	struct:AVBitStreamFilterContext	typeref:struct:AVBitStreamFilterContext *
next	lib/ffmpeg/include/libavcodec/avcodec.h	/^    struct AVCodecParser *next;$/;"	m	struct:AVCodecParser	typeref:struct:AVCodecParser *
next	lib/ffmpeg/include/libavcodec/codec.h	/^    struct AVCodec *next;$/;"	m	struct:AVCodec	typeref:struct:AVCodec *
next	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilter *next;$/;"	m	struct:AVFilter	typeref:struct:AVFilter *
next	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilterInOut *next;$/;"	m	struct:AVFilterInOut	typeref:struct:AVFilterInOut *
next	lib/ffmpeg/include/libavformat/avformat.h	/^    ff_const59 struct AVInputFormat *next;$/;"	m	struct:AVInputFormat	typeref:struct:AVInputFormat *
next	lib/ffmpeg/include/libavformat/avformat.h	/^    ff_const59 struct AVOutputFormat *next;$/;"	m	struct:AVOutputFormat	typeref:struct:AVOutputFormat *
next	lib/ffmpeg/include/libavformat/avformat.h	/^    struct AVPacketList *next;$/;"	m	struct:AVPacketList	typeref:struct:AVPacketList *
next	lib/ffmpeg/include/libavutil/encryption_info.h	/^    struct AVEncryptionInitInfo *next;$/;"	m	struct:AVEncryptionInitInfo	typeref:struct:AVEncryptionInitInfo *
next	src/Utils/SDK.hpp	/^	cmdalias_t *next;$/;"	m	struct:cmdalias_t	typeref:typename:cmdalias_t *
next	src/Utils/lodepng.cpp	/^	ColorTree *next; \/*null, or array of 256 pointers to ColorTree of next level*\/$/;"	m	struct:ColorTree	typeref:typename:ColorTree *	file:
nextBlendIdx	src/Features/Renderer.cpp	/^	int nextBlendIdx;       \/\/ How many frames in this blend have we seen so far?$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
nextPts	src/Features/Renderer.cpp	/^	int nextPts;$/;"	m	struct:Stream	typeref:typename:int	file:
next_frame_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t next_frame_offset; \/* offset of the next frame *\/$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
next_free_data_block_num	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             next_free_data_block_num;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
nghttp2_ver_num	lib/curl/include/curl/curl.h	/^  unsigned int nghttp2_ver_num; \/* Numeric nghttp2 version$/;"	m	struct:curl_version_info_data	typeref:typename:unsigned int
nghttp2_version	lib/curl/include/curl/curl.h	/^  const char *nghttp2_version; \/* human readable string. *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
noPitchLock	src/Features/Tas/TasTools/StrafeTool.hpp	/^	bool noPitchLock = false;$/;"	m	struct:AutoStrafeParams	typeref:typename:bool
noexcept	src/Utils/json11.hpp	/^#			define noexcept /;"	d
noise_reduction	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int noise_reduction;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
normal	src/Utils/SDK.hpp	/^	Vector normal;$/;"	m	struct:cplane_t	typeref:typename:Vector
now	src/Features/Demo/NetworkGhostPlayer.cpp	/^	auto now = NOW_STEADY();$/;"	v	typeref:typename:auto
now	src/Features/Hud/Toasts.cpp	/^	auto now = NOW_STEADY();$/;"	v	typeref:typename:auto
noz	src/Features/OverlayRender.cpp	/^	bool noz;$/;"	m	struct:OverlayGroup	typeref:typename:bool	file:
nsse_weight	lib/ffmpeg/include/libavcodec/avcodec.h	/^     int nsse_weight;$/;"	m	struct:AVCodecContext	typeref:typename:int
null	src/Utils/json11.cpp	/^		const std::shared_ptr<JsonValue> null = make_shared<JsonNull>();$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
num	lib/ffmpeg/include/libavutil/rational.h	/^    int num; \/\/\/< Numerator$/;"	m	struct:AVRational	typeref:typename:int
num	src/Features/Tas/TasParser.cpp	/^	unsigned num;$/;"	m	struct:Line	typeref:typename:unsigned	file:
num	src/Modules/EngineDemoPlayer.cpp	/^			long num = strtol(part.c_str(), &endptr, 10);$/;"	v	typeref:typename:long
num_bezier_curve_anchors	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_bezier_curve_anchors;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint8_t
num_cols_mastering_display_actual_peak_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_cols_mastering_display_actual_peak_luminance;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
num_cols_targeted_system_display_actual_peak_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_cols_targeted_system_display_actual_peak_luminance;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
num_distribution_maxrgb_percentiles	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_distribution_maxrgb_percentiles;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint8_t
num_key_ids	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t num_key_ids;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint32_t
num_of_certs	lib/curl/include/curl/curl.h	/^  int num_of_certs;             \/* number of certificates with information *\/$/;"	m	struct:curl_certinfo	typeref:typename:int
num_rects	lib/ffmpeg/include/libavcodec/avcodec.h	/^    unsigned num_rects;$/;"	m	struct:AVSubtitle	typeref:typename:unsigned
num_rows_mastering_display_actual_peak_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_rows_mastering_display_actual_peak_luminance;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
num_rows_targeted_system_display_actual_peak_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_rows_targeted_system_display_actual_peak_luminance;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
num_windows	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t num_windows;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
number_value	src/Utils/json11.cpp	/^		double number_value() const override { return m_value; }$/;"	f	class:json11::JsonDouble	typeref:typename:double	file:
number_value	src/Utils/json11.cpp	/^		double number_value() const override { return m_value; }$/;"	f	class:json11::JsonInt	typeref:typename:double	file:
number_value	src/Utils/json11.cpp	/^	double Json::number_value() const { return m_ptr->number_value(); }$/;"	f	class:json11::Json	typeref:typename:double
number_value	src/Utils/json11.cpp	/^	double JsonValue::number_value() const { return 0; }$/;"	f	class:json11::JsonValue	typeref:typename:double
numcodes	src/Utils/lodepng.cpp	/^	unsigned numcodes;  \/*number of symbols in the alphabet = number of codes*\/$/;"	m	struct:HuffmanTree	typeref:typename:unsigned	file:
numcolors	src/Utils/lodepng.cpp	/^	unsigned numcolors;$/;"	m	struct:ColorProfile	typeref:typename:unsigned	file:
numcolors_done	src/Utils/lodepng.cpp	/^	unsigned char numcolors_done;$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
nums	src/Features/Camera.cpp	/^			float nums[7] = {$/;"	v	typeref:typename:float[7]
object	src/Utils/json11.hpp	/^		typedef std::map<std::string, Json> object;$/;"	t	class:json11::Json	typeref:typename:std::map<std::string,Json>
object_index	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    int object_index;$/;"	m	struct:AVDRMPlaneDescriptor	typeref:typename:int
object_items	src/Utils/json11.cpp	/^		const Json::object &object_items() const override { return m_value; }$/;"	f	class:json11::JsonObject	typeref:typename:const Json::object &	file:
object_items	src/Utils/json11.cpp	/^	const map<string, Json> &Json::object_items() const { return m_ptr->object_items(); }$/;"	f	class:json11::Json	typeref:typename:const map<string,Json> &
object_items	src/Utils/json11.cpp	/^	const map<string, Json> &JsonValue::object_items() const { return statics().empty_map; }$/;"	f	class:json11::JsonValue	typeref:typename:const map<string,Json> &
objects	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    AVDRMObjectDescriptor objects[AV_DRM_MAX_PLANES];$/;"	m	struct:AVDRMFrameDescriptor	typeref:typename:AVDRMObjectDescriptor[]
offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t offset;      \/\/\/< byte offset from starting packet start$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
offset	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    ptrdiff_t offset;$/;"	m	struct:AVDRMPlaneDescriptor	typeref:typename:ptrdiff_t
offset	lib/ffmpeg/include/libavutil/opt.h	/^    int offset;$/;"	m	struct:AVOption	typeref:typename:int
offset	lib/ffmpeg/include/libavutil/pixdesc.h	/^    int offset;$/;"	m	struct:AVComponentDescriptor	typeref:typename:int
offset	src/Features/Demo/DemoGhostEntity.hpp	/^	int offset;$/;"	m	class:DemoGhostEntity	typeref:typename:int
offset	src/Features/OffsetFinder.cpp	/^	auto offset = 0;$/;"	v	typeref:typename:auto
offsetFinder	src/Features/OffsetFinder.cpp	/^OffsetFinder *offsetFinder;$/;"	v	typeref:typename:OffsetFinder *
offset_plus1	lib/ffmpeg/include/libavutil/pixdesc.h	/^    attribute_deprecated int offset_plus1;$/;"	m	struct:AVComponentDescriptor	typeref:typename:attribute_deprecated int
offsets	src/Utils/Memory.hpp	/^		std::vector<int> offsets;$/;"	m	struct:Memory::Pattern	typeref:typename:std::vector<int>
oformat	lib/ffmpeg/include/libavformat/avformat.h	/^    ff_const59 struct AVOutputFormat *oformat;$/;"	m	struct:AVFormatContext	typeref:struct:AVOutputFormat *
ok	src/Features/Demo/DemoGhostPlayer.cpp	/^	bool ok = true;$/;"	v	typeref:typename:bool
ok	src/Modules/EngineDemoPlayer.cpp	/^	bool ok = parser.Parse(dir + name, &demo);$/;"	v	typeref:typename:bool
oldButtons	src/Features/Tas/TasPlayer.hpp	/^	int oldButtons;$/;"	m	struct:TasPlayerInfo	typeref:typename:int
oldFpsMax	src/Features/Session.hpp	/^	int oldFpsMax;$/;"	m	class:Session	typeref:typename:int
oldGroundedState	src/Features/Demo/GhostRenderer.hpp	/^	bool oldGroundedState;$/;"	m	class:GhostRenderer	typeref:typename:bool
oldIPs	lib/minhook/hook.c	/^    UINT8  oldIPs[8];           \/\/ Instruction boundaries of the target function.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT8[8]	file:
oldIPs	lib/minhook/trampoline.h	/^    UINT8  oldIPs[8];       \/\/ [Out] Instruction boundaries of the target function.$/;"	m	struct:_TRAMPOLINE	typeref:typename:UINT8[8]
oldPos	src/Features/Demo/GhostEntity.hpp	/^	DataGhost oldPos;$/;"	m	class:GhostEntity	typeref:typename:DataGhost
onSpeedPaint	src/Features/Tas/TasPlayer.hpp	/^	bool onSpeedPaint;$/;"	m	struct:TasPlayerInfo	typeref:typename:bool
on_ground	src/Features/Hud/VelocityGraph.cpp	/^	bool on_ground;$/;"	m	struct:VelocityData	typeref:typename:bool	file:
onlyAfter	src/Features/Speedrun/Rules.hpp	/^	std::optional<std::string> onlyAfter;$/;"	m	struct:SpeedrunRule	typeref:typename:std::optional<std::string>
opacity	src/Features/Hud/Toasts.cpp	/^	uint8_t opacity;$/;"	m	struct:Toast	typeref:typename:uint8_t	file:
opaque	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void *opaque;$/;"	m	struct:AVCodecContext	typeref:typename:void *
opaque	lib/ffmpeg/include/libavfilter/avfilter.h	/^    void *opaque;$/;"	m	struct:AVFilterGraph	typeref:typename:void *
opaque	lib/ffmpeg/include/libavformat/avformat.h	/^    void *opaque;$/;"	m	struct:AVFormatContext	typeref:typename:void *
opaque	lib/ffmpeg/include/libavformat/avio.h	/^    void *opaque;           \/**< A private pointer, passed to the read\/write\/seek\/...$/;"	m	struct:AVIOContext	typeref:typename:void *
opaque	lib/ffmpeg/include/libavformat/avio.h	/^    void *opaque;$/;"	m	struct:AVIOInterruptCB	typeref:typename:void *
opaque	lib/ffmpeg/include/libavutil/frame.h	/^    void *opaque;$/;"	m	struct:AVFrame	typeref:typename:void *
opaque_alloc	lib/ffmpeg/include/libavcodec/qsv.h	/^    int opaque_alloc;$/;"	m	struct:AVQSVContext	typeref:typename:int
opaque_alloc_type	lib/ffmpeg/include/libavcodec/qsv.h	/^    int opaque_alloc_type;$/;"	m	struct:AVQSVContext	typeref:typename:int
opaque_ref	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef *opaque_ref;$/;"	m	struct:AVFrame	typeref:typename:AVBufferRef *
opaque_surfaces	lib/ffmpeg/include/libavcodec/qsv.h	/^    AVBufferRef *opaque_surfaces;$/;"	m	struct:AVQSVContext	typeref:typename:AVBufferRef *
opcode	lib/minhook/hde/hde32.h	/^    uint8_t opcode;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
opcode	lib/minhook/hde/hde64.h	/^    uint8_t opcode;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
opcode	lib/minhook/trampoline.h	/^    UINT8  opcode;      \/\/ 7* 0E:         J** +16$/;"	m	struct:_JCC_ABS	typeref:typename:UINT8
opcode	lib/minhook/trampoline.h	/^    UINT8  opcode;      \/\/ E9\/E8 xxxxxxxx: JMP\/CALL +5+xxxxxxxx$/;"	m	struct:_JMP_REL	typeref:typename:UINT8
opcode	lib/minhook/trampoline.h	/^    UINT8  opcode;      \/\/ EB xx: JMP +2+xx$/;"	m	struct:_JMP_REL_SHORT	typeref:typename:UINT8
opcode0	lib/minhook/trampoline.h	/^    UINT8  opcode0;     \/\/ 0F8* xxxxxxxx: J** +6+xxxxxxxx$/;"	m	struct:_JCC_REL	typeref:typename:UINT8
opcode0	lib/minhook/trampoline.h	/^    UINT8  opcode0;     \/\/ FF15 00000002: CALL [+6]$/;"	m	struct:_CALL_ABS	typeref:typename:UINT8
opcode0	lib/minhook/trampoline.h	/^    UINT8  opcode0;     \/\/ FF25 00000000: JMP [+6]$/;"	m	struct:_JMP_ABS	typeref:typename:UINT8
opcode1	lib/minhook/trampoline.h	/^    UINT8  opcode1;$/;"	m	struct:_CALL_ABS	typeref:typename:UINT8
opcode1	lib/minhook/trampoline.h	/^    UINT8  opcode1;$/;"	m	struct:_JCC_REL	typeref:typename:UINT8
opcode1	lib/minhook/trampoline.h	/^    UINT8  opcode1;$/;"	m	struct:_JMP_ABS	typeref:typename:UINT8
opcode2	lib/minhook/hde/hde32.h	/^    uint8_t opcode2;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
opcode2	lib/minhook/hde/hde64.h	/^    uint8_t opcode2;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
openAudio	src/Features/Renderer.cpp	/^static bool openAudio(AVFormatContext *outputCtx, Stream *s, AVDictionary **options) {$/;"	f	typeref:typename:bool	file:
openVideo	src/Features/Renderer.cpp	/^static bool openVideo(AVFormatContext *outputCtx, Stream *s, AVDictionary **options) {$/;"	f	typeref:typename:bool	file:
open_cb	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*open_cb)(struct AVFormatContext *s, AVIOContext **p, const char *url, int flags, const/;"	m	struct:AVFormatContext	typeref:typename:attribute_deprecated int (*)(struct AVFormatContext * s,AVIOContext ** p,const char * url,int flags,const AVIOInterruptCB * int_cb,AVDictionary ** options)
operand	lib/minhook/trampoline.h	/^    UINT32 operand;     \/\/ Relative destination address$/;"	m	struct:_JCC_REL	typeref:typename:UINT32
operand	lib/minhook/trampoline.h	/^    UINT32 operand;     \/\/ Relative destination address$/;"	m	struct:_JMP_REL	typeref:typename:UINT32
operand	lib/minhook/trampoline.h	/^    UINT8  operand;$/;"	m	struct:_JMP_REL_SHORT	typeref:typename:UINT8
operator !	src/Command.cpp	/^bool Command::operator!() {$/;"	f	class:Command	typeref:typename:bool
operator !	src/Variable.cpp	/^bool Variable::operator!() {$/;"	f	class:Variable	typeref:typename:bool
operator !=	lib/SFML/include/SFML/System/Vector2.inl	/^inline bool operator !=(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator !=	lib/SFML/include/SFML/System/Vector3.inl	/^inline bool operator !=(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator !=	src/Utils/SDK.hpp	/^	inline bool operator!=(const Color col) const {$/;"	f	struct:Color	typeref:typename:bool
operator !=	src/Utils/SDK.hpp	/^	inline bool operator!=(const Vector vec) const {$/;"	f	struct:Vector	typeref:typename:bool
operator !=	src/Utils/json11.hpp	/^		bool operator!=(const Json &rhs) const { return !(*this == rhs); }$/;"	f	class:json11::Json	typeref:typename:bool
operator ()	src/Utils/Math.hpp	/^	const double &operator()(const unsigned int x, const unsigned int y) const { return mat[x][y]; /;"	f	class:Matrix	typeref:typename:const double &
operator ()	src/Utils/Math.hpp	/^	double &operator()(const unsigned int x, const unsigned int y) { return mat[x][y]; }$/;"	f	class:Matrix	typeref:typename:double &
operator *	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^T& ThreadLocalPtr<T>::operator *() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T &
operator *	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator *(T left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator *	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator *(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator *	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator *(T left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator *	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator *(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator *	src/Utils/Math.cpp	/^Matrix Matrix::operator*(const Matrix &rhs) {$/;"	f	class:Matrix	typeref:typename:Matrix
operator *	src/Utils/Math.cpp	/^Vector Matrix::operator*(const Vector &rhs) {$/;"	f	class:Matrix	typeref:typename:Vector
operator *	src/Utils/SDK.hpp	/^	inline Vector operator*(float fl) const {$/;"	f	struct:Vector	typeref:typename:Vector
operator *=	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator *=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator *=	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator *=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator *=	src/Utils/Math.cpp	/^Matrix &Matrix::operator*=(const Matrix &rhs) {$/;"	f	class:Matrix	typeref:typename:Matrix &
operator *=	src/Utils/Math.cpp	/^Vector Matrix::operator*=(const Vector &rhs) {$/;"	f	class:Matrix	typeref:typename:Vector
operator *=	src/Utils/SDK.hpp	/^	inline Vector &operator*=(float fl) {$/;"	f	struct:Vector	typeref:typename:Vector &
operator +	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator +	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator +	src/Utils/Math.cpp	/^Matrix Matrix::operator+(const Matrix &rhs) {$/;"	f	class:Matrix	typeref:typename:Matrix
operator +	src/Utils/SDK.hpp	/^	inline Vector operator+(const Vector vec) const {$/;"	f	struct:Vector	typeref:typename:Vector
operator +=	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator +=	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator +=	src/Utils/Math.cpp	/^Matrix &Matrix::operator+=(const Matrix &rhs) {$/;"	f	class:Matrix	typeref:typename:Matrix &
operator +=	src/Utils/SDK.hpp	/^	inline Vector &operator+=(Vector &vec) {$/;"	f	struct:Vector	typeref:typename:Vector &
operator -	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left)$/;"	f	typeref:typename:Vector3<T>
operator -	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator -	src/Utils/SDK.hpp	/^	inline Vector operator-() const {$/;"	f	struct:Vector	typeref:typename:Vector
operator -	src/Utils/SDK.hpp	/^	inline Vector operator-(const Vector vec) const {$/;"	f	struct:Vector	typeref:typename:Vector
operator -=	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator -=	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator -=	src/Utils/SDK.hpp	/^	inline Vector &operator-=(Vector &vec) {$/;"	f	struct:Vector	typeref:typename:Vector &
operator ->	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^T* ThreadLocalPtr<T>::operator ->() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T *
operator /	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T> operator \/(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator /	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T> operator \/(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator /	src/Utils/SDK.hpp	/^	inline Vector operator\/(float fl) const {$/;"	f	struct:Vector	typeref:typename:Vector
operator /=	lib/SFML/include/SFML/System/Vector2.inl	/^inline Vector2<T>& operator \/=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator /=	lib/SFML/include/SFML/System/Vector3.inl	/^inline Vector3<T>& operator \/=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator <	src/Utils/json11.cpp	/^		bool operator<(NullStruct) const { return false; }$/;"	f	struct:json11::NullStruct	typeref:typename:bool	file:
operator <	src/Utils/json11.cpp	/^	bool Json::operator<(const Json &other) const {$/;"	f	class:json11::Json	typeref:typename:bool
operator <<	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator<<(sf::Packet &packet, const Color &col) {$/;"	f	typeref:typename:sf::Packet &
operator <<	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator<<(sf::Packet &packet, const DataGhost &dataGhost) {$/;"	f	typeref:typename:sf::Packet &
operator <<	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator<<(sf::Packet &packet, const HEADER &header) {$/;"	f	typeref:typename:sf::Packet &
operator <<	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator<<(sf::Packet &packet, const QAngle &angle) {$/;"	f	typeref:typename:sf::Packet &
operator <<	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator<<(sf::Packet &packet, const Vector &vec) {$/;"	f	typeref:typename:sf::Packet &
operator <=	src/Utils/json11.hpp	/^		bool operator<=(const Json &rhs) const { return !(rhs < *this); }$/;"	f	class:json11::Json	typeref:typename:bool
operator =	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(T* value)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(const ThreadLocalPtr<T>& right)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	src/Utils/Math.cpp	/^Matrix &Matrix::operator=(const Matrix &rhs) {$/;"	f	class:Matrix	typeref:typename:Matrix &
operator =	src/Utils/lodepng.cpp	/^	State &State::operator=(const State &other) {$/;"	f	class:lodepng::State	typeref:typename:State &
operator ==	lib/SFML/include/SFML/System/Vector2.inl	/^inline bool operator ==(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator ==	lib/SFML/include/SFML/System/Vector3.inl	/^inline bool operator ==(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator ==	src/Utils/SDK.hpp	/^	inline bool operator==(const Color col) const {$/;"	f	struct:Color	typeref:typename:bool
operator ==	src/Utils/SDK.hpp	/^	inline bool operator==(const Vector vec) const {$/;"	f	struct:Vector	typeref:typename:bool
operator ==	src/Utils/json11.cpp	/^		bool operator==(NullStruct) const { return true; }$/;"	f	struct:json11::NullStruct	typeref:typename:bool	file:
operator ==	src/Utils/json11.cpp	/^	bool Json::operator==(const Json &other) const {$/;"	f	class:json11::Json	typeref:typename:bool
operator >	src/Utils/json11.hpp	/^		bool operator>(const Json &rhs) const { return (rhs < *this); }$/;"	f	class:json11::Json	typeref:typename:bool
operator >=	src/Utils/json11.hpp	/^		bool operator>=(const Json &rhs) const { return !(*this < rhs); }$/;"	f	class:json11::Json	typeref:typename:bool
operator >>	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator>>(sf::Packet &packet, Color &col) {$/;"	f	typeref:typename:sf::Packet &
operator >>	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator>>(sf::Packet &packet, DataGhost &dataGhost) {$/;"	f	typeref:typename:sf::Packet &
operator >>	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator>>(sf::Packet &packet, HEADER &header) {$/;"	f	typeref:typename:sf::Packet &
operator >>	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator>>(sf::Packet &packet, QAngle &angle) {$/;"	f	typeref:typename:sf::Packet &
operator >>	src/Features/Demo/NetworkGhostPlayer.cpp	/^sf::Packet &operator>>(sf::Packet &packet, Vector &vec) {$/;"	f	typeref:typename:sf::Packet &
operator T*	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>::operator T*() const$/;"	f	class:sf::ThreadLocalPtr
operator []	src/Utils/SDK.hpp	/^	const char *operator[](int nIndex) const {$/;"	f	struct:CCommand	typeref:typename:const char *
operator []	src/Utils/SDK.hpp	/^	inline float &operator[](int i) {$/;"	f	struct:Vector	typeref:typename:float &
operator []	src/Utils/SDK.hpp	/^	inline float operator[](int i) const {$/;"	f	struct:Vector	typeref:typename:float
operator []	src/Utils/json11.cpp	/^	const Json &Json::operator[](const string &key) const { return (*m_ptr)[key]; }$/;"	f	class:json11::Json	typeref:typename:const Json &
operator []	src/Utils/json11.cpp	/^	const Json &Json::operator[](size_t i) const { return (*m_ptr)[i]; }$/;"	f	class:json11::Json	typeref:typename:const Json &
operator []	src/Utils/json11.cpp	/^	const Json &JsonArray::operator[](size_t i) const {$/;"	f	class:json11::JsonArray	typeref:typename:const Json &
operator []	src/Utils/json11.cpp	/^	const Json &JsonObject::operator[](const string &key) const {$/;"	f	class:json11::JsonObject	typeref:typename:const Json &
operator []	src/Utils/json11.cpp	/^	const Json &JsonValue::operator[](const string &) const { return static_null(); }$/;"	f	class:json11::JsonValue	typeref:typename:const Json &
operator []	src/Utils/json11.cpp	/^	const Json &JsonValue::operator[](size_t) const { return static_null(); }$/;"	f	class:json11::JsonValue	typeref:typename:const Json &
operator std::string	src/Features/Camera.hpp	/^	operator std::string() const {$/;"	f	struct:CameraState
option	lib/curl/include/curl/curl.h	/^  CURLformoption option;$/;"	m	struct:curl_forms	typeref:typename:CURLformoption
option	lib/ffmpeg/include/libavutil/log.h	/^    const struct AVOption *option;$/;"	m	struct:AVClass	typeref:typename:const struct AVOption *
orderIndex	src/Features/Hud/Hud.hpp	/^	int orderIndex;$/;"	m	class:HudElement	typeref:typename:int
origCode	src/Hook.hpp	/^	uint8_t origCode[5];$/;"	m	class:Hook	typeref:typename:uint8_t[5]
orig_buffer_size	lib/ffmpeg/include/libavformat/avio.h	/^    int orig_buffer_size;$/;"	m	struct:AVIOContext	typeref:typename:int
orig_display_func	src/Modules/Tier1.hpp	/^	IConsoleDisplayFunc *orig_display_func = nullptr;$/;"	m	class:Tier1	typeref:typename:IConsoleDisplayFunc *
origin	src/Cheats.cpp	/^	Vector origin;$/;"	v	typeref:typename:Vector
origin	src/Features/Camera.hpp	/^	Vector origin = Vector();$/;"	m	struct:CameraState	typeref:typename:Vector
origin	src/Features/Routing/EntityInspector.hpp	/^	Vector origin;$/;"	m	struct:InspectionItem	typeref:typename:Vector
origin	src/Features/Teleporter.hpp	/^	Vector origin;$/;"	m	struct:TeleportLocation	typeref:typename:Vector
origin	src/Utils/SDK.hpp	/^	Vector origin;$/;"	m	struct:CViewSetup	typeref:typename:Vector
original	src/Utils/Memory.hpp	/^		unsigned char *original;$/;"	m	class:Memory::Patch	typeref:typename:unsigned char *
originalCallbacks	src/Variable.hpp	/^	CUtlVector<FnChangeCallback_t> originalCallbacks;$/;"	m	class:Variable	typeref:typename:CUtlVector<FnChangeCallback_t>
originalFlags	src/Variable.hpp	/^	int originalFlags;$/;"	m	class:Variable	typeref:typename:int
originalFnChangeCallback	src/Variable.hpp	/^		FnChangeCallback_t originalFnChangeCallback;$/;"	m	union:Variable::__anonf94d2df8010a	typeref:typename:FnChangeCallback_t
originalSize	src/Variable.hpp	/^		int originalSize;$/;"	m	union:Variable::__anonf94d2df8010a	typeref:typename:int
out	src/Features/ConfigPlus.cpp	/^	std::string out = g_svarListenerOutput;$/;"	v	typeref:typename:std::string
outCtx	src/Features/Renderer.cpp	/^	AVFormatContext *outCtx;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:AVFormatContext *	file:
out_channel_layouts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    struct AVFilterChannelLayouts *out_channel_layouts;$/;"	m	struct:AVFilterLink	typeref:struct:AVFilterChannelLayouts *
out_formats	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterFormats *out_formats;$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterFormats *
out_samplerates	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterFormats *out_samplerates;$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterFormats *
output	src/Modules/Surface.cpp	/^		std::string output = std::to_string(i - defaultFontID) + ". ";$/;"	v	typeref:typename:std::string
outputMode	src/Features/Demo/DemoParser.hpp	/^	int outputMode;$/;"	m	class:DemoParser	typeref:typename:int
output_callback	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^    VTDecompressionOutputCallback output_callback;$/;"	m	struct:AVVideotoolboxContext	typeref:typename:VTDecompressionOutputCallback
output_pads	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterPad   *output_pads;     \/\/\/< array of output pads$/;"	m	struct:AVFilterContext	typeref:typename:AVFilterPad *
output_picture_number	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int output_picture_number;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
output_ts_offset	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t output_ts_offset;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
outputs	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterLink **outputs;         \/\/\/< array of pointers to output links$/;"	m	struct:AVFilterContext	typeref:typename:AVFilterLink **
outputs	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const AVFilterPad *outputs;$/;"	m	struct:AVFilter	typeref:typename:const AVFilterPad *
overlap_process_option	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    enum AVHDRPlusOverlapProcessOption overlap_process_option;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:enum:AVHDRPlusOverlapProcessOption
override_count	src/Utils/SDK.hpp	/^	int override_count;                        \/\/ 40\/44$/;"	m	struct:typedescription_t	typeref:typename:int
override_field	src/Utils/SDK.hpp	/^	struct typedescription_t *override_field;  \/\/ 36\/40$/;"	m	struct:typedescription_t	typeref:struct:typedescription_t *
p	lib/ffmpeg/include/libavutil/blowfish.h	/^    uint32_t p[AV_BF_ROUNDS + 2];$/;"	m	struct:AVBlowfish	typeref:typename:uint32_t[]
p	src/Features/Hud/Hud.cpp	/^		int p = getPrecision();$/;"	v	typeref:typename:int
p	src/Features/Hud/Hud.cpp	/^		int p = getPrecision(true);$/;"	v	typeref:typename:int
p	src/Features/Hud/Hud.cpp	/^	int p = getPrecision();$/;"	v	typeref:typename:int
pDetour	lib/minhook/hook.c	/^    LPVOID pDetour;             \/\/ Address of the detour or relay function.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:LPVOID	file:
pDetour	lib/minhook/trampoline.h	/^    LPVOID pDetour;         \/\/ [In] Address of the detour function.$/;"	m	struct:_TRAMPOLINE	typeref:typename:LPVOID
pEdicts	src/Utils/SDK.hpp	/^	edict_t *pEdicts;         \/\/ 88$/;"	m	struct:CGlobalVars	typeref:typename:edict_t *
pFont	src/Utils/SDK.hpp	/^		void *pFont;$/;"	m	struct:CFontAmalgam::TFontRange	typeref:typename:void *
pFree	lib/minhook/buffer.c	/^    PMEMORY_SLOT pFree;         \/\/ First element of the free slot list.$/;"	m	struct:_MEMORY_BLOCK	typeref:typename:PMEMORY_SLOT	file:
pItems	lib/minhook/hook.c	/^    LPDWORD pItems;         \/\/ Data heap$/;"	m	struct:_FROZEN_THREADS	typeref:typename:LPDWORD	file:
pItems	lib/minhook/hook.c	/^    PHOOK_ENTRY pItems;     \/\/ Data heap$/;"	m	struct:__anoncf0f1fd10108	typeref:typename:PHOOK_ENTRY	file:
pNext	lib/minhook/buffer.c	/^        struct _MEMORY_SLOT *pNext;$/;"	m	union:_MEMORY_SLOT::__anonfe6e4e1a010a	typeref:struct:_MEMORY_SLOT *	file:
pNext	lib/minhook/buffer.c	/^    struct _MEMORY_BLOCK *pNext;$/;"	m	struct:_MEMORY_BLOCK	typeref:struct:_MEMORY_BLOCK *	file:
pRelay	lib/minhook/trampoline.h	/^    LPVOID pRelay;          \/\/ [Out] Address of the relay function.$/;"	m	struct:_TRAMPOLINE	typeref:typename:LPVOID
pSaveData	src/Utils/SDK.hpp	/^	void *pSaveData;                \/\/ 44$/;"	m	struct:CGlobalVarsBase	typeref:typename:void *
pSaveRestoreOps	src/Utils/SDK.hpp	/^	void *pSaveRestoreOps;     \/\/ 20$/;"	m	struct:typedescription_t	typeref:typename:void *
pTarget	lib/minhook/hook.c	/^    LPVOID pTarget;             \/\/ Address of the target function.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:LPVOID	file:
pTarget	lib/minhook/trampoline.h	/^    LPVOID pTarget;         \/\/ [In] Address of the target function.$/;"	m	struct:_TRAMPOLINE	typeref:typename:LPVOID
pTrampoline	lib/minhook/hook.c	/^    LPVOID pTrampoline;         \/\/ Address of the trampoline function.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:LPVOID	file:
pTrampoline	lib/minhook/trampoline.h	/^    LPVOID pTrampoline;     \/\/ [In] Buffer address for the trampoline and relay function.$/;"	m	struct:_TRAMPOLINE	typeref:typename:LPVOID
p_66	lib/minhook/hde/hde32.h	/^    uint8_t p_66;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
p_66	lib/minhook/hde/hde64.h	/^    uint8_t p_66;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
p_67	lib/minhook/hde/hde32.h	/^    uint8_t p_67;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
p_67	lib/minhook/hde/hde64.h	/^    uint8_t p_67;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
p_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int p_count;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
p_future_surface	lib/ffmpeg/include/libavcodec/xvmc.h	/^    XvMCSurface*    p_future_surface;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:XvMCSurface *
p_lock	lib/minhook/hde/hde32.h	/^    uint8_t p_lock;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
p_lock	lib/minhook/hde/hde64.h	/^    uint8_t p_lock;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
p_masking	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float p_masking;$/;"	m	struct:AVCodecContext	typeref:typename:float
p_past_surface	lib/ffmpeg/include/libavcodec/xvmc.h	/^    XvMCSurface*    p_past_surface;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:XvMCSurface *
p_rep	lib/minhook/hde/hde32.h	/^    uint8_t p_rep;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
p_rep	lib/minhook/hde/hde64.h	/^    uint8_t p_rep;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
p_seg	lib/minhook/hde/hde32.h	/^    uint8_t p_seg;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
p_seg	lib/minhook/hde/hde64.h	/^    uint8_t p_seg;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
p_surface	lib/ffmpeg/include/libavcodec/xvmc.h	/^    XvMCSurface*    p_surface;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:XvMCSurface *
p_tex_bits	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int p_tex_bits;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
packet_scale	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    AVRational packet_scale;$/;"	m	struct:CIDEntry	typeref:typename:AVRational
packet_size	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int packet_size;$/;"	m	struct:AVFormatContext	typeref:typename:unsigned int
pad	src/Utils/SDK.hpp	/^	unsigned char pad[2];$/;"	m	struct:cplane_t	typeref:typename:unsigned char[2]
pad_idx	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int pad_idx;$/;"	m	struct:AVFilterInOut	typeref:typename:int
padding	lib/ffmpeg/include/libavutil/spherical.h	/^    uint32_t padding;$/;"	m	struct:AVSphericalMapping	typeref:typename:uint32_t
paethPredictor	src/Utils/lodepng.cpp	/^static unsigned char paethPredictor(short a, short b, short c) {$/;"	f	typeref:typename:unsigned char	file:
page	src/Features/EntityList.cpp	/^	auto page = (args.ArgC() == 2) ? std::atoi(args[1]) : 1;$/;"	v	typeref:typename:auto
pages	src/Features/EntityList.cpp	/^	auto pages = Offsets::NUM_ENT_ENTRIES \/ 512;$/;"	v	typeref:typename:auto
paintStitchView	src/Features/Stitcher.cpp	/^static void paintStitchView() {$/;"	f	typeref:typename:void	file:
pair	src/Features/Speedrun/Categories.cpp	/^		const char *pair = args[i];$/;"	v	typeref:typename:const char *
palette	src/Utils/lodepng.cpp	/^	unsigned char *palette; \/*size 1024. Remember up to the first 256 RGBA colors*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned char *	file:
palette	src/Utils/lodepng.hpp	/^	unsigned char *palette; \/*palette in RGBARGBA... order*\/$/;"	m	struct:LodePNGColorMode	typeref:typename:unsigned char *
palette_has_changed	lib/ffmpeg/include/libavutil/frame.h	/^    int palette_has_changed;$/;"	m	struct:AVFrame	typeref:typename:int
palettesize	src/Utils/lodepng.hpp	/^	size_t palettesize;     \/*palette size in number of colors (amount of bytes is 4 * palettesize/;"	m	struct:LodePNGColorMode	typeref:typename:size_t
par_in	lib/ffmpeg/include/libavcodec/bsf.h	/^    AVCodecParameters *par_in;$/;"	m	struct:AVBSFContext	typeref:typename:AVCodecParameters *
par_out	lib/ffmpeg/include/libavcodec/bsf.h	/^    AVCodecParameters *par_out;$/;"	m	struct:AVBSFContext	typeref:typename:AVCodecParameters *
param	src/Features/Hud/InputHud.cpp	/^		std::string param = fullArg.substr(0, separator);$/;"	v	typeref:typename:std::string
param	src/Features/Tas/TasPlayer.hpp	/^	std::string param;$/;"	m	struct:TasStartInfo	typeref:typename:std::string
parameter	src/Features/Speedrun/Rules.hpp	/^	std::string parameter;$/;"	m	struct:EntityInputRule	typeref:typename:std::string
parameterOutput	src/Features/Hud/InputHud.cpp	/^	std::vector<std::string> parameterOutput;$/;"	v	typeref:typename:std::vector<std::string>
parameterValue	src/Features/Hud/InputHud.cpp	/^			auto parameterValue = inputHud.GetParameterValue(std::string(elementName), fullArg.c_str());$/;"	v	typeref:typename:auto
params	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVHDRPlusColorTransformParams params[3];$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:AVHDRPlusColorTransformParams[3]
params	src/Features/Speedrun/Categories.cpp	/^	std::map<std::string, std::string> params;$/;"	v	typeref:typename:std::map<std::string,std::string>
params	src/Features/Speedrun/CategoryCreator.cpp	/^		auto params = g_placementOptions;$/;"	v	typeref:typename:auto
params	src/Features/Speedrun/CategoryCreator.cpp	/^	auto params = parseParams(args.ArgC() - 2, args.m_ppArgv + 2);$/;"	v	typeref:typename:auto
params	src/Features/Speedrun/CategoryCreator.cpp	/^	auto params = parseParams(args.ArgC() - 3, args.m_ppArgv + 3);$/;"	v	typeref:typename:auto
params	src/Features/Tas/TasTool.hpp	/^	std::shared_ptr<TasToolParams> params = nullptr;$/;"	m	class:TasTool	typeref:typename:std::shared_ptr<TasToolParams>
params	src/Features/Tas/TasTool.hpp	/^	std::shared_ptr<TasToolParams> params;$/;"	m	class:TasToolCommand	typeref:typename:std::shared_ptr<TasToolParams>
parent	src/Features/Tas/TasParser.cpp	/^	std::shared_ptr<LoopInfo> parent;$/;"	m	struct:LoopInfo	typeref:typename:std::shared_ptr<LoopInfo>	file:
parent_log_context_offset	lib/ffmpeg/include/libavutil/log.h	/^    int parent_log_context_offset;$/;"	m	struct:AVClass	typeref:typename:int
parse	src/Utils/json11.cpp	/^	Json Json::parse(const string &in, string &err, JsonParse strategy) {$/;"	f	class:json11::Json	typeref:typename:Json
parse	src/Utils/json11.hpp	/^		static Json parse(const char *in, std::string &err, JsonParse strategy = JsonParse::STANDARD) /;"	f	class:json11::Json	typeref:typename:Json
parseFramebulk	src/Features/Tas/TasParser.cpp	/^static TasFramebulk parseFramebulk(int slot, int last_tick, const TasFramebulk &base, const Line/;"	f	typeref:typename:TasFramebulk	file:
parseFramebulkTick	src/Features/Tas/TasParser.cpp	/^static int parseFramebulkTick(int last_tick, const Line &line, size_t *tokens_out) {$/;"	f	typeref:typename:int	file:
parseFramebulks	src/Features/Tas/TasParser.cpp	/^static std::vector<TasFramebulk> parseFramebulks(int slot, const char *filepath, const Line *lin/;"	f	typeref:typename:std::vector<TasFramebulk>	file:
parseHeader	src/Features/Tas/TasParser.cpp	/^static void parseHeader(const Line &l) {$/;"	f	typeref:typename:void	file:
parseIdx	src/Features/Hud/Hud.cpp	/^long parseIdx(const char *idxStr) {$/;"	f	typeref:typename:long
parseParams	src/Features/Speedrun/CategoryCreator.cpp	/^static std::optional<std::map<std::string, std::string>> parseParams(size_t argc, const char *co/;"	f	typeref:typename:std::optional<std::map<std::string,std::string>>	file:
parseToolCmd	src/Features/Tas/TasParser.cpp	/^static std::optional<TasToolCommand> parseToolCmd(int slot, const std::vector<std::string> &toks/;"	f	typeref:typename:std::optional<TasToolCommand>	file:
parseVector	src/Features/Tas/TasParser.cpp	/^static Vector parseVector(const Line &line, size_t idx) {$/;"	f	typeref:typename:Vector	file:
parse_json	src/Utils/json11.cpp	/^			Json parse_json(int depth) {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:Json	file:
parse_multi	src/Utils/json11.cpp	/^	vector<Json> Json::parse_multi(const string &in, std::string::size_type &parser_stop_pos, strin/;"	f	class:json11::Json	typeref:typename:vector<Json>
parse_multi	src/Utils/json11.hpp	/^		static inline std::vector<Json> parse_multi($/;"	f	class:json11::Json	typeref:typename:std::vector<Json>
parse_number	src/Utils/json11.cpp	/^			Json parse_number() {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:Json	file:
parse_string	src/Utils/json11.cpp	/^			string parse_string() {$/;"	f	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:string	file:
parser	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVCodecParserContext *parser;$/;"	m	struct:AVBitStreamFilterContext	typeref:typename:AVCodecParserContext *
parser	lib/ffmpeg/include/libavcodec/avcodec.h	/^    struct AVCodecParser *parser;$/;"	m	struct:AVCodecParserContext	typeref:struct:AVCodecParser *
parser	lib/ffmpeg/include/libavformat/avformat.h	/^    struct AVCodecParserContext *parser;$/;"	m	struct:AVStream	typeref:struct:AVCodecParserContext *
parser	src/Features/Demo/DemoParser.cpp	/^	DemoParser parser;$/;"	v	typeref:typename:DemoParser
parser	src/Modules/EngineDemoPlayer.cpp	/^	DemoParser parser;$/;"	v	typeref:typename:DemoParser
parser_close	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void (*parser_close)(AVCodecParserContext *s);$/;"	m	struct:AVCodecParser	typeref:typename:void (*)(AVCodecParserContext * s)
parser_init	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*parser_init)(AVCodecParserContext *s);$/;"	m	struct:AVCodecParser	typeref:typename:int (*)(AVCodecParserContext * s)
parser_parse	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*parser_parse)(AVCodecParserContext *s,$/;"	m	struct:AVCodecParser	typeref:typename:int (*)(AVCodecParserContext * s,AVCodecContext * avctx,const uint8_t ** poutbuf,int * poutbuf_size,const uint8_t * buf,int buf_size)
part	src/Modules/EngineDemoPlayer.cpp	/^			auto part = name.substr(idx + 1, name.size() - idx - 1);$/;"	v	typeref:typename:auto
partial_buf	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFrame *partial_buf;$/;"	m	struct:AVFilterLink	typeref:typename:AVFrame *
partial_buf_size	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int partial_buf_size;$/;"	m	struct:AVFilterLink	typeref:typename:int
patchAbove	lib/minhook/hook.c	/^    UINT8  patchAbove  : 1;     \/\/ Uses the hot patch area.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT8:1	file:
patchAbove	lib/minhook/trampoline.h	/^    BOOL   patchAbove;      \/\/ [Out] Should use the hot patch area?$/;"	m	struct:_TRAMPOLINE	typeref:typename:BOOL
path	src/Features/Hud/Minimap.cpp	/^	std::string path = args[1];$/;"	v	typeref:typename:std::string
path	src/Features/Stats/Stats.cpp	/^	std::string path = args.ArgC() == 1 ? sar_statcounter_filePath.GetString() : args[1];$/;"	v	typeref:typename:std::string
path	src/Features/WorkshopList.hpp	/^	std::string path;$/;"	m	class:WorkshopList	typeref:typename:std::string
path	src/Utils/Memory.hpp	/^		char path[MAX_PATH];$/;"	m	struct:Memory::ModuleInfo	typeref:typename:char[]
pauseTick	src/Features/Tas/TasPlayer.hpp	/^	int pauseTick = 0;  \/\/ the tick TasPlayer should pause the game at, used for frame advancing.$/;"	m	class:TasPlayer	typeref:typename:int
pauseTick	src/Modules/Engine.hpp	/^	int pauseTick;$/;"	m	class:Engine	typeref:typename:int
pauseTimer	src/Features/Timer/PauseTimer.cpp	/^PauseTimer *pauseTimer;$/;"	v	typeref:typename:PauseTimer *
paused	src/Features/Tas/TasPlayer.hpp	/^	bool paused = false;$/;"	m	class:TasPlayer	typeref:typename:bool
pb	lib/ffmpeg/include/libavformat/avformat.h	/^    AVIOContext *pb;$/;"	m	struct:AVFormatContext	typeref:typename:AVIOContext *
pcr_pid	lib/ffmpeg/include/libavformat/avformat.h	/^    int pcr_pid;$/;"	m	struct:AVProgram	typeref:typename:int
peak	src/Features/Stats/VelocityStats.hpp	/^	float peak;$/;"	m	class:VelocityStats	typeref:typename:float
percentage	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t percentage;$/;"	m	struct:AVHDRPlusPercentile	typeref:typename:uint8_t
percentile	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational percentile;$/;"	m	struct:AVHDRPlusPercentile	typeref:typename:AVRational
perm	lib/curl/include/curl/curl.h	/^    char *perm;$/;"	m	struct:curl_fileinfo::__anon5737ba340308	typeref:typename:char *
perm	lib/curl/include/curl/curl.h	/^  unsigned int perm;$/;"	m	struct:curl_fileinfo	typeref:typename:unsigned int
persistAcrossLoads	src/Features/SegmentedTools.cpp	/^	bool persistAcrossLoads;$/;"	m	struct:WaitEntry	typeref:typename:bool	file:
phys_defined	src/Utils/lodepng.hpp	/^	unsigned phys_defined; \/*if 0, there is no pHYs chunk and the values below are undefined, if 1/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
phys_dev	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkPhysicalDevice phys_dev;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:VkPhysicalDevice
phys_unit	src/Utils/lodepng.hpp	/^	unsigned phys_unit;    \/*may be 0 (unknown unit) or 1 (metre)*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
phys_x	src/Utils/lodepng.hpp	/^	unsigned phys_x;       \/*pixels per unit in x direction*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
phys_y	src/Utils/lodepng.hpp	/^	unsigned phys_y;       \/*pixels per unit in y direction*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
physicsbone	src/Utils/SDK.hpp	/^	short physicsbone;$/;"	m	struct:CGameTrace	typeref:typename:short
pickColor	src/Features/Stitcher.cpp	/^static Color pickColor() {$/;"	f	typeref:typename:Color	file:
pict	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVPicture pict;$/;"	m	struct:AVSubtitleRect	typeref:typename:attribute_deprecated AVPicture
pict_type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int pict_type; \/* XXX: Put it back in AVCodecContext. *\/$/;"	m	struct:AVCodecParserContext	typeref:typename:int
pict_type	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVPictureType pict_type;$/;"	m	struct:AVFrame	typeref:enum:AVPictureType
picture_structure	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVPictureStructure picture_structure;$/;"	m	struct:AVCodecParserContext	typeref:enum:AVPictureStructure
picture_structure	lib/ffmpeg/include/libavcodec/xvmc.h	/^    unsigned int    picture_structure;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:unsigned int
pingClock	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::Clock pingClock;$/;"	m	class:NetworkManager	typeref:typename:sf::Clock
pitch	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    ptrdiff_t pitch;$/;"	m	struct:AVDRMPlaneDescriptor	typeref:typename:ptrdiff_t
pitch	lib/ffmpeg/include/libavutil/spherical.h	/^    int32_t pitch; \/\/\/< Rotation around the right vector [-90, 90].$/;"	m	struct:AVSphericalMapping	typeref:typename:int32_t
pitch	src/Features/Tas/TasTools/SetAngleTool.cpp	/^	float pitch;$/;"	m	struct:SetAngleParams	typeref:typename:float	file:
pixLen	src/Features/Hud/Hud.cpp	/^				int pixLen = surface->GetFontLength(ctx->font, "%s", c.text.c_str());$/;"	v	typeref:typename:int
pix_fmt	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVPixelFormat pix_fmt;$/;"	m	struct:AVCodecContext	typeref:enum:AVPixelFormat
pix_fmt	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVPixelFormat pix_fmt;$/;"	m	struct:AVHWAccel	typeref:enum:AVPixelFormat
pix_fmt	lib/ffmpeg/include/libavcodec/codec.h	/^    enum AVPixelFormat pix_fmt;$/;"	m	struct:AVCodecHWConfig	typeref:enum:AVPixelFormat
pix_fmt	lib/ffmpeg/include/libavcodec/dirac.h	/^    enum AVPixelFormat pix_fmt;$/;"	m	struct:AVDiracSeqHeader	typeref:enum:AVPixelFormat
pix_fmt	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    enum AVPixelFormat pix_fmt;             \/* picture pixel format *\/$/;"	m	struct:AVDVProfile	typeref:enum:AVPixelFormat
pix_fmts	lib/ffmpeg/include/libavcodec/codec.h	/^    const enum AVPixelFormat *pix_fmts;     \/\/\/< array of supported pixel formats, or NULL if/;"	m	struct:AVCodec	typeref:typename:const enum AVPixelFormat *
pixel_fmts	lib/ffmpeg/include/libavfilter/buffersink.h	/^    const enum AVPixelFormat *pixel_fmts; \/\/\/< list of allowed pixel formats, terminated by A/;"	m	struct:AVBufferSinkParams	typeref:typename:const enum AVPixelFormat *
pixel_format	lib/ffmpeg/include/libavdevice/avdevice.h	/^    enum AVPixelFormat pixel_format;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:enum:AVPixelFormat
pixel_range_index	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t pixel_range_index;      \/\/\/< index into dirac_pixel_range_presets[]$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
pkt	lib/ffmpeg/include/libavformat/avformat.h	/^    AVPacket pkt;$/;"	m	struct:AVPacketList	typeref:typename:AVPacket
pkt_dts	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t pkt_dts;$/;"	m	struct:AVFrame	typeref:typename:int64_t
pkt_duration	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t pkt_duration;$/;"	m	struct:AVFrame	typeref:typename:int64_t
pkt_pos	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t pkt_pos;$/;"	m	struct:AVFrame	typeref:typename:int64_t
pkt_pts	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t pkt_pts;$/;"	m	struct:AVFrame	typeref:typename:attribute_deprecated int64_t
pkt_size	lib/ffmpeg/include/libavutil/frame.h	/^    int pkt_size;$/;"	m	struct:AVFrame	typeref:typename:int
pkt_timebase	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVRational pkt_timebase;$/;"	m	struct:AVCodecContext	typeref:typename:AVRational
placementHelper	src/Utils/SDK.hpp	/^	void* placementHelper; \/\/ Placement helper if one was hit$/;"	m	struct:TracePortalPlacementInfo_t	typeref:typename:void *
plane	lib/ffmpeg/include/libavutil/pixdesc.h	/^    int plane;$/;"	m	struct:AVComponentDescriptor	typeref:typename:int
plane	src/Utils/SDK.hpp	/^	cplane_t plane;$/;"	m	struct:CBaseTrace	typeref:typename:cplane_t
planes	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    AVDRMPlaneDescriptor planes[AV_DRM_MAX_PLANES];$/;"	m	struct:AVDRMLayerDescriptor	typeref:typename:AVDRMPlaneDescriptor[]
planes	lib/ffmpeg/include/libavutil/hwcontext_opencl.h	/^    cl_mem planes[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVOpenCLFrameDescriptor	typeref:typename:cl_mem[]
playbackFrames	src/Features/Demo/Demo.hpp	/^	int32_t playbackFrames;$/;"	m	class:Demo	typeref:typename:int32_t
playbackTicks	src/Features/Demo/Demo.hpp	/^	int32_t playbackTicks;$/;"	m	class:Demo	typeref:typename:int32_t
playbackTime	src/Features/Demo/Demo.hpp	/^	float playbackTime;$/;"	m	class:Demo	typeref:typename:float
playback_rate	src/Features/Bot/BotServer.hpp	/^	float playback_rate;$/;"	m	struct:TasStatus	typeref:typename:float
playback_rate	src/Features/Tas/TasServer.hpp	/^	float playback_rate;$/;"	m	struct:TasStatus	typeref:typename:float
playback_state	src/Features/Bot/BotServer.hpp	/^	PlaybackState playback_state;$/;"	m	struct:TasStatus	typeref:typename:PlaybackState
playback_state	src/Features/Tas/TasServer.hpp	/^	PlaybackState playback_state;$/;"	m	struct:TasStatus	typeref:typename:PlaybackState
playback_tick	src/Features/Bot/BotServer.hpp	/^	int playback_tick;$/;"	m	struct:TasStatus	typeref:typename:int
playback_tick	src/Features/Tas/TasServer.hpp	/^	int playback_tick;$/;"	m	struct:TasStatus	typeref:typename:int
playdemo_orig_completion	src/Modules/Engine.cpp	/^static _CommandCompletionCallback playdemo_orig_completion;$/;"	v	typeref:typename:_CommandCompletionCallback	file:
player	src/Cheats.cpp	/^		void *player = client->GetPlayer(slot + 1);$/;"	v	typeref:typename:void *
player	src/Cheats.cpp	/^		void *player = server->GetPlayer(slot + 1);$/;"	v	typeref:typename:void *
player	src/Cheats.cpp	/^	void *player = server->GetPlayer(slot + 1);$/;"	v	typeref:typename:void *
player	src/Features/Hud/Hud.cpp	/^	auto player = client->GetPlayer(ctx->slot + 1);$/;"	v	typeref:typename:auto
player	src/Features/Hud/VphysHud.cpp	/^	void *player = server->GetPlayer(1);$/;"	v	typeref:typename:void *
player	src/Features/Stats/Stats.cpp	/^	auto player = server->GetPlayer(ctx->slot + 1);$/;"	v	typeref:typename:auto
player	src/Features/Stats/Stats.cpp	/^	auto player = server->GetPlayer(nSlot + 1);$/;"	v	typeref:typename:auto
player	src/Modules/Server.cpp	/^	void *player = server->GetPlayer(slot + 1);$/;"	v	typeref:typename:void *
player	src/Offsets.cpp	/^	int player;$/;"	v	namespace:Offsets	typeref:typename:int
playerListUi	src/Features/Demo/NetworkGhostPlayer.cpp	/^PlayerListUi playerListUi;$/;"	v	typeref:typename:PlayerListUi
playerStats	src/Features/Stats/Stats.hpp	/^	std::vector<PlayerStats *> playerStats;$/;"	m	class:Stats	typeref:typename:std::vector<PlayerStats * >
playerTrace	src/Features/PlayerTrace.cpp	/^PlayerTrace *playerTrace;$/;"	v	typeref:typename:PlayerTrace *
plugin	src/SAR.hpp	/^	Plugin *plugin;$/;"	m	class:SAR	typeref:typename:Plugin *
pmt_pid	lib/ffmpeg/include/libavformat/avformat.h	/^    int pmt_pid;$/;"	m	struct:AVProgram	typeref:typename:int
pmt_stream_idx	lib/ffmpeg/include/libavformat/avformat.h	/^    int pmt_stream_idx;$/;"	m	struct:AVStream	typeref:typename:int
pmt_version	lib/ffmpeg/include/libavformat/avformat.h	/^    int pmt_version;$/;"	m	struct:AVProgram	typeref:typename:int
pmt_version	lib/ffmpeg/include/libavformat/avformat.h	/^    int pmt_version;$/;"	m	struct:AVStream	typeref:typename:int
point	src/Features/Tas/TasTools/AutoAimTool.cpp	/^	Vector point;$/;"	m	struct:AutoAimParams	typeref:typename:Vector	file:
pointInBox	src/Features/Speedrun/Rules.cpp	/^static bool pointInBox(Vector point, Vector center, Vector size, double rotation) {$/;"	f	typeref:typename:bool	file:
pool	lib/ffmpeg/include/libavutil/hwcontext.h	/^    AVBufferPool *pool;$/;"	m	struct:AVHWFramesContext	typeref:typename:AVBufferPool *
popRaw32	src/Features/Bot/BotServer.cpp	/^static uint32_t popRaw32(std::deque<uint8_t> &buf) {$/;"	f	typeref:typename:uint32_t	file:
popRaw32	src/Features/Tas/TasServer.cpp	/^static uint32_t popRaw32(std::deque<uint8_t> &buf) {$/;"	f	typeref:typename:uint32_t	file:
portal	src/Features/Speedrun/Rules.hpp	/^	std::optional<PortalColor> portal;$/;"	m	struct:PortalPlacementRule	typeref:typename:std::optional<PortalColor>
portalCount	src/Features/Stats/StatsCounter.hpp	/^	int portalCount;$/;"	m	class:StatsCounter	typeref:typename:int
portalGun	src/Modules/Server.hpp	/^	IHandleEntity *portalGun = nullptr;$/;"	m	class:Server	typeref:typename:IHandleEntity *
portalgunHud	src/Features/Hud/PortalgunHud.cpp	/^PortalgunHud portalgunHud;$/;"	v	typeref:typename:PortalgunHud
portalplacementHud	src/Features/Hud/PortalPlacement.cpp	/^PortalPlacementHud portalplacementHud;$/;"	v	typeref:typename:PortalPlacementHud
portals	src/Features/Teleporter.cpp	/^	bool portals = true;$/;"	v	typeref:typename:bool
portals	src/Features/Teleporter.hpp	/^	} portals[2];$/;"	m	struct:TeleportLocation	typeref:struct:TeleportLocation::__anon6ae777660108[2]
pos	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pos;$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
pos	lib/ffmpeg/include/libavcodec/packet.h	/^    int64_t pos;                            \/\/\/< byte position in stream, -1 if unknown$/;"	m	struct:AVPacket	typeref:typename:int64_t
pos	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t pos;$/;"	m	struct:AVIndexEntry	typeref:typename:int64_t
pos	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t pos;            \/**< position in the file of the current buffer *\/$/;"	m	struct:AVIOContext	typeref:typename:int64_t
pos	src/Features/Camera.cpp	/^		float pos[3] = {0, 0, 0};$/;"	v	typeref:typename:float[3]
pos	src/Features/Hud/Hud.cpp	/^		auto pos = client->GetAbsOrigin(player);$/;"	v	typeref:typename:auto
pos	src/Features/OverlayRender.cpp	/^	Vector pos;$/;"	m	struct:OverlayText	typeref:typename:Vector	file:
pos	src/Features/PlayerTrace.cpp	/^		auto pos = trace->positions[0][i];$/;"	v	typeref:typename:auto
pos	src/Features/PlayerTrace.cpp	/^	Vector pos;$/;"	m	struct:TraceHoverInfo	typeref:typename:Vector	file:
pos	src/Features/Teleporter.hpp	/^		Vector pos;$/;"	m	struct:TeleportLocation::__anon6ae777660108	typeref:typename:Vector
position	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int16_t position[3][2];$/;"	m	struct:AVPanScan	typeref:typename:int16_t[3][2]
position	src/Features/Demo/GhostEntity.hpp	/^	Vector position;$/;"	m	struct:DataGhost	typeref:typename:Vector
position	src/Features/Tas/TasPlayer.hpp	/^	Vector position;$/;"	m	struct:TasPlayerInfo	typeref:typename:Vector
positions	src/Features/PlayerTrace.hpp	/^	std::vector<Vector> positions[2];$/;"	m	struct:Trace	typeref:typename:std::vector<Vector>[2]
postCountdownCommands	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::string postCountdownCommands;$/;"	m	class:NetworkManager	typeref:typename:std::string
postProcessScanlines	src/Utils/lodepng.cpp	/^static unsigned postProcessScanlines(unsigned char *out, unsigned char *in, unsigned w, unsigned/;"	f	typeref:typename:unsigned	file:
pre	src/Features/Updater.cpp	/^	unsigned pre;$/;"	m	struct:SarVersion	typeref:typename:unsigned	file:
preProcess	src/Features/Tas/TasParser.cpp	/^static std::vector<Line> preProcess(const char *filepath, const Line *lines, size_t nlines) {$/;"	f	typeref:typename:std::vector<Line>	file:
preProcessScanlines	src/Utils/lodepng.cpp	/^static unsigned preProcessScanlines(unsigned char **out, size_t *outsize, const unsigned char *i/;"	f	typeref:typename:unsigned	file:
pre_dia_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int pre_dia_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
pre_me	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int pre_me;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
predefined_filters	src/Utils/lodepng.hpp	/^	unsigned char *predefined_filters;$/;"	m	struct:LodePNGEncoderSettings	typeref:typename:unsigned char *
prediction_method	lib/ffmpeg/include/libavcodec/avcodec.h	/^     int prediction_method;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
preferred_downmix_type	lib/ffmpeg/include/libavutil/downmix_info.h	/^    enum AVDownmixType preferred_downmix_type;$/;"	m	struct:AVDownmixInfo	typeref:enum:AVDownmixType
preinit	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*preinit)(AVFilterContext *ctx);$/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext * ctx)
preset	src/Cheats.cpp	/^	const char *preset = args.Arg(1);$/;"	v	typeref:typename:const char *
preset	src/Features/Hud/InputHud.cpp	/^	const char *preset = args.Arg(1);$/;"	v	typeref:typename:const char *
prevState	src/Features/Session.hpp	/^	int prevState;$/;"	m	class:Session	typeref:typename:int
preventOverwrite	src/Modules/EngineDemoRecorder.cpp	/^static void preventOverwrite(const char *filename, int idx) {$/;"	f	typeref:typename:void	file:
prevent_crouch_jump	src/Modules/Client.cpp	/^Variable prevent_crouch_jump;$/;"	v	typeref:typename:Variable
previousMap	src/Features/Session.hpp	/^	std::string previousMap;$/;"	m	class:Session	typeref:typename:std::string
printRuleAction	src/Features/Speedrun/Rules.cpp	/^static const char *printRuleAction(RuleAction action) {$/;"	f	typeref:typename:const char *	file:
printTotal	src/Features/Demo/DemoParser.cpp	/^	auto printTotal = false;$/;"	v	typeref:typename:auto
priority	src/Event.hpp	/^		int32_t priority;$/;"	m	struct:Event::_EventReg	typeref:typename:int32_t
priv	lib/SFML/include/SFML/System/FileInputStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	lib/SFML/include/SFML/System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	lib/SFML/include/SFML/System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	lib/SFML/include/SFML/System/Thread.inl	/^namespace priv$/;"	n	file:
priv	lib/SFML/include/SFML/System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	lib/ffmpeg/include/libavfilter/avfilter.h	/^    void *priv;                     \/\/\/< private data for use by the filter$/;"	m	struct:AVFilterContext	typeref:typename:void *
priv_class	lib/ffmpeg/include/libavcodec/bsf.h	/^    const AVClass *priv_class;$/;"	m	struct:AVBitStreamFilter	typeref:typename:const AVClass *
priv_class	lib/ffmpeg/include/libavcodec/codec.h	/^    const AVClass *priv_class;              \/\/\/< AVClass for the private context$/;"	m	struct:AVCodec	typeref:typename:const AVClass *
priv_class	lib/ffmpeg/include/libavfilter/avfilter.h	/^    const AVClass *priv_class;$/;"	m	struct:AVFilter	typeref:typename:const AVClass *
priv_class	lib/ffmpeg/include/libavformat/avformat.h	/^    const AVClass *priv_class; \/\/\/< AVClass for the private context$/;"	m	struct:AVInputFormat	typeref:typename:const AVClass *
priv_class	lib/ffmpeg/include/libavformat/avformat.h	/^    const AVClass *priv_class; \/\/\/< AVClass for the private context$/;"	m	struct:AVOutputFormat	typeref:typename:const AVClass *
priv_data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void *priv_data;$/;"	m	struct:AVBitStreamFilterContext	typeref:typename:void *
priv_data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void *priv_data;$/;"	m	struct:AVCodecContext	typeref:typename:void *
priv_data	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void *priv_data;$/;"	m	struct:AVCodecParserContext	typeref:typename:void *
priv_data	lib/ffmpeg/include/libavcodec/bsf.h	/^    void *priv_data;$/;"	m	struct:AVBSFContext	typeref:typename:void *
priv_data	lib/ffmpeg/include/libavformat/avformat.h	/^    void *priv_data;$/;"	m	struct:AVFormatContext	typeref:typename:void *
priv_data	lib/ffmpeg/include/libavformat/avformat.h	/^    void *priv_data;$/;"	m	struct:AVStream	typeref:typename:void *
priv_data_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int priv_data_size;$/;"	m	struct:AVCodecParser	typeref:typename:int
priv_data_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int priv_data_size;$/;"	m	struct:AVHWAccel	typeref:typename:int
priv_data_size	lib/ffmpeg/include/libavcodec/bsf.h	/^    int priv_data_size;$/;"	m	struct:AVBitStreamFilter	typeref:typename:int
priv_data_size	lib/ffmpeg/include/libavcodec/codec.h	/^    int priv_data_size;$/;"	m	struct:AVCodec	typeref:typename:int
priv_data_size	lib/ffmpeg/include/libavformat/avformat.h	/^    int priv_data_size;$/;"	m	struct:AVInputFormat	typeref:typename:int
priv_data_size	lib/ffmpeg/include/libavformat/avformat.h	/^    int priv_data_size;$/;"	m	struct:AVOutputFormat	typeref:typename:int
priv_size	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int priv_size;      \/\/\/< size of private data to allocate for the filter$/;"	m	struct:AVFilter	typeref:typename:int
private_ref	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef *private_ref;$/;"	m	struct:AVFrame	typeref:typename:AVBufferRef *
probe_data	lib/ffmpeg/include/libavformat/avformat.h	/^    AVProbeData probe_data;$/;"	m	struct:AVStream	typeref:typename:AVProbeData
probe_packets	lib/ffmpeg/include/libavformat/avformat.h	/^    int probe_packets;$/;"	m	struct:AVStream	typeref:typename:int
probe_score	lib/ffmpeg/include/libavformat/avformat.h	/^    int probe_score;$/;"	m	struct:AVFormatContext	typeref:typename:int
probesize	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t probesize;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
processCommands	src/Features/Bot/BotServer.cpp	/^static bool processCommands(ClientData &cl) {$/;"	f	typeref:typename:bool	file:
processCommands	src/Features/Tas/TasServer.cpp	/^static bool processCommands(ClientData &cl) {$/;"	f	typeref:typename:bool	file:
processConnections	src/Features/Bot/BotServer.cpp	/^static void processConnections() {$/;"	f	typeref:typename:void	file:
processConnections	src/Features/Tas/TasServer.cpp	/^static void processConnections() {$/;"	f	typeref:typename:void	file:
process_command	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*process_command)(AVFilterContext *, const char *cmd, const char *arg, char *res, int r/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext *,const char * cmd,const char * arg,char * res,int res_len,int flags)
processedFramebulks	src/Features/Tas/TasPlayer.hpp	/^	std::vector<TasFramebulk> processedFramebulks[2];$/;"	m	class:TasPlayer	typeref:typename:std::vector<TasFramebulk>[2]
profile	lib/ffmpeg/include/libavcodec/avcodec.h	/^     int profile;$/;"	m	struct:AVCodecContext	typeref:typename:int
profile	lib/ffmpeg/include/libavcodec/codec.h	/^    int profile;$/;"	m	struct:AVProfile	typeref:typename:int
profile	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int profile;$/;"	m	struct:AVCodecParameters	typeref:typename:int
profile	lib/ffmpeg/include/libavcodec/dirac.h	/^    int profile;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:int
profiles	lib/ffmpeg/include/libavcodec/codec.h	/^    const AVProfile *profiles;              \/\/\/< array of recognized profiles, or NULL if unk/;"	m	struct:AVCodec	typeref:typename:const AVProfile *
profiles	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    const struct AVProfile *profiles;$/;"	m	struct:AVCodecDescriptor	typeref:typename:const struct AVProfile *
program_num	lib/ffmpeg/include/libavformat/avformat.h	/^    int program_num;$/;"	m	struct:AVProgram	typeref:typename:int
program_num	lib/ffmpeg/include/libavformat/avformat.h	/^    int program_num;$/;"	m	struct:AVStream	typeref:typename:int
programs	lib/ffmpeg/include/libavformat/avformat.h	/^    AVProgram **programs;$/;"	m	struct:AVFormatContext	typeref:typename:AVProgram **
progressBarCount	src/Modules/VGui.hpp	/^	int progressBarCount = 0;$/;"	m	class:VGui	typeref:typename:int
projection	lib/ffmpeg/include/libavutil/spherical.h	/^    enum AVSphericalProjection projection;$/;"	m	struct:AVSphericalMapping	typeref:enum:AVSphericalProjection
prop_entity	src/Features/Demo/GhostEntity.hpp	/^	void *prop_entity;$/;"	m	class:GhostEntity	typeref:typename:void *
properties	lib/ffmpeg/include/libavcodec/avcodec.h	/^    unsigned properties;$/;"	m	struct:AVCodecContext	typeref:typename:unsigned
props	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    int             props;$/;"	m	struct:AVCodecDescriptor	typeref:typename:int
protocol	lib/curl/include/curl/curl.h	/^  int protocol;$/;"	m	struct:curl_sockaddr	typeref:typename:int
protocol_blacklist	lib/ffmpeg/include/libavformat/avformat.h	/^    char *protocol_blacklist;$/;"	m	struct:AVFormatContext	typeref:typename:char *
protocol_blacklist	lib/ffmpeg/include/libavformat/avio.h	/^    const char *protocol_blacklist;$/;"	m	struct:AVIOContext	typeref:typename:const char *
protocol_whitelist	lib/ffmpeg/include/libavformat/avformat.h	/^    char *protocol_whitelist;$/;"	m	struct:AVFormatContext	typeref:typename:char *
protocol_whitelist	lib/ffmpeg/include/libavformat/avio.h	/^    const char *protocol_whitelist;$/;"	m	struct:AVIOContext	typeref:typename:const char *
protocols	lib/curl/include/curl/curl.h	/^  const char * const *protocols;$/;"	m	struct:curl_version_info_data	typeref:typename:const char * const *
ptr	src/Command.hpp	/^	ConCommand *ptr;$/;"	m	class:Command	typeref:typename:ConCommand *
ptr	src/Plugin.hpp	/^	CPlugin *ptr;$/;"	m	class:Plugin	typeref:typename:CPlugin *
ptr	src/Variable.hpp	/^	ConVar *ptr;$/;"	m	class:Variable	typeref:typename:ConVar *
pts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pts;     \/* pts of the current frame *\/$/;"	m	struct:AVCodecParserContext	typeref:typename:int64_t
pts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pts;    \/\/\/< Same as packet pts, in AV_TIME_BASE$/;"	m	struct:AVSubtitle	typeref:typename:int64_t
pts	lib/ffmpeg/include/libavcodec/packet.h	/^    int64_t pts;$/;"	m	struct:AVPacket	typeref:typename:int64_t
pts	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t pts;$/;"	m	struct:AVFrame	typeref:typename:int64_t
pts_buffer	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t pts_buffer[MAX_REORDER_DELAY+1];$/;"	m	struct:AVStream	typeref:typename:int64_t[]
pts_correction_last_dts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pts_correction_last_dts;       \/\/\/ DTS of the last frame$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
pts_correction_last_pts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pts_correction_last_pts;       \/\/\/ PTS of the last frame$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
pts_correction_num_faulty_dts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pts_correction_num_faulty_dts; \/\/\/ Number of incorrect DTS values so far$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
pts_correction_num_faulty_pts	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t pts_correction_num_faulty_pts; \/\/\/ Number of incorrect PTS values so far$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
pts_dts_delta	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int pts_dts_delta;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
pts_reorder_error	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t pts_reorder_error[MAX_REORDER_DELAY+1];$/;"	m	struct:AVStream	typeref:typename:int64_t[]
pts_reorder_error_count	lib/ffmpeg/include/libavformat/avformat.h	/^    uint8_t pts_reorder_error_count[MAX_REORDER_DELAY+1];$/;"	m	struct:AVStream	typeref:typename:uint8_t[]
pts_wrap_behavior	lib/ffmpeg/include/libavformat/avformat.h	/^    int pts_wrap_behavior;         \/\/\/< behavior on wrap detection$/;"	m	struct:AVProgram	typeref:typename:int
pts_wrap_behavior	lib/ffmpeg/include/libavformat/avformat.h	/^    int pts_wrap_behavior;$/;"	m	struct:AVStream	typeref:typename:int
pts_wrap_bits	lib/ffmpeg/include/libavformat/avformat.h	/^    int pts_wrap_bits; \/**< number of bits in pts (used for wrapping control) *\/$/;"	m	struct:AVStream	typeref:typename:int
pts_wrap_reference	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t pts_wrap_reference;    \/\/\/< reference dts for wrap detection$/;"	m	struct:AVProgram	typeref:typename:int64_t
pts_wrap_reference	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t pts_wrap_reference;$/;"	m	struct:AVStream	typeref:typename:int64_t
purgeOldTicks	src/Features/Hud/StrafeQuality.cpp	/^static inline void purgeOldTicks(int slot) {$/;"	f	typeref:typename:void	file:
q	lib/ffmpeg/include/libavutil/opt.h	/^        AVRational q;$/;"	m	union:AVOption::__anon6e396c26010a	typeref:typename:AVRational
q	src/Features/Hud/VphysHud.cpp	/^	QAngle q;$/;"	v	typeref:typename:QAngle
qblur	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float qblur;      \/\/\/< amount of qscale smoothing over time (0.0-1.0)$/;"	m	struct:AVCodecContext	typeref:typename:float
qcompress	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float qcompress;  \/\/\/< amount of qscale change between easy & hard scenes (0.0-1.0)$/;"	m	struct:AVCodecContext	typeref:typename:float
qmax	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int qmax;$/;"	m	struct:AVCodecContext	typeref:typename:int
qmin	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int qmin;$/;"	m	struct:AVCodecContext	typeref:typename:int
qoffset	lib/ffmpeg/include/libavutil/frame.h	/^    AVRational qoffset;$/;"	m	struct:AVRegionOfInterest	typeref:typename:AVRational
qp	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int32_t qp;$/;"	m	struct:AVVideoEncParams	typeref:typename:int32_t
qp_table_buf	lib/ffmpeg/include/libavutil/frame.h	/^    AVBufferRef *qp_table_buf;$/;"	m	struct:AVFrame	typeref:typename:attribute_deprecated AVBufferRef *
qscale	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int qscale; \/\/ If this is 0 then quality_factor will be used instead.$/;"	m	struct:RcOverride	typeref:typename:int
qscale_table	lib/ffmpeg/include/libavutil/frame.h	/^    int8_t *qscale_table;$/;"	m	struct:AVFrame	typeref:typename:attribute_deprecated int8_t *
qscale_type	lib/ffmpeg/include/libavutil/frame.h	/^    int qscale_type;$/;"	m	struct:AVFrame	typeref:typename:attribute_deprecated int
qstride	lib/ffmpeg/include/libavutil/frame.h	/^    int qstride;$/;"	m	struct:AVFrame	typeref:typename:attribute_deprecated int
quality	lib/ffmpeg/include/libavutil/frame.h	/^    int quality;$/;"	m	struct:AVFrame	typeref:typename:int
quality_factor	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float quality_factor;$/;"	m	struct:RcOverride	typeref:typename:float
query_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*query_codec)(enum AVCodecID id, int std_compliance);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(enum AVCodecID id,int std_compliance)
query_formats	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int (*query_formats)(AVFilterContext *);$/;"	m	struct:AVFilter	typeref:typename:int (*)(AVFilterContext *)
query_ranges	lib/ffmpeg/include/libavutil/log.h	/^    int (*query_ranges)(struct AVOptionRanges **, void *obj, const char *key, int flags);$/;"	m	struct:AVClass	typeref:typename:int (*)(struct AVOptionRanges **,void * obj,const char * key,int flags)
queueEnable	lib/minhook/hook.c	/^    UINT8  queueEnable : 1;     \/\/ Queued for enabling\/disabling when != isEnabled.$/;"	m	struct:_HOOK_ENTRY	typeref:typename:UINT8:1	file:
queue_family_comp_index	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int queue_family_comp_index;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
queue_family_index	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int queue_family_index;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
queue_family_tx_index	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    int queue_family_tx_index;$/;"	m	struct:AVVulkanDeviceContext	typeref:typename:int
quic_version	lib/curl/include/curl/curl.h	/^  const char *quic_version;    \/* human readable quic (+ HTTP\/3) library +$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
quickhudTextureID	src/Features/Hud/Crosshair.hpp	/^	int quickhudTextureID[4];$/;"	m	class:Crosshair	typeref:typename:int[4]
r	src/Cheats.cpp	/^	int r = 255;$/;"	v	typeref:typename:int
r	src/Features/Demo/GhostEntity.cpp	/^	int r, g, b;$/;"	v	typeref:typename:int
r	src/Features/Hud/Hud.cpp	/^				int r, g, b;$/;"	v	typeref:typename:int
r	src/Features/Hud/Hud.cpp	/^	int r, g, b;$/;"	v	typeref:typename:int
r	src/Features/Hud/Toasts.cpp	/^		int r, g, b;$/;"	v	typeref:typename:int
r	src/Features/Hud/Toasts.cpp	/^	uint8_t r, g, b;$/;"	m	struct:TagInfo	typeref:typename:uint8_t	file:
r	src/Utils/SDK.hpp	/^	inline int r() const { return _color[0]; }$/;"	f	struct:Color	typeref:typename:int
r_drawviewmodel	src/Modules/Client.cpp	/^Variable r_drawviewmodel;$/;"	v	typeref:typename:Variable
r_drawviewmodel_value	src/Features/Demo/GhostEntity.cpp	/^static int r_drawviewmodel_value;$/;"	v	typeref:typename:int	file:
r_frame_rate	lib/ffmpeg/include/libavformat/avformat.h	/^    AVRational r_frame_rate;$/;"	m	struct:AVStream	typeref:typename:AVRational
r_portalsopenall	src/Modules/Client.cpp	/^Variable r_portalsopenall;$/;"	v	typeref:typename:Variable
r_portalsopenall_value	src/Features/Demo/GhostEntity.cpp	/^static int r_portalsopenall_value;$/;"	v	typeref:typename:int	file:
r_portaltestents	src/Modules/Client.cpp	/^Variable r_portaltestents;$/;"	v	typeref:typename:Variable
random_seed	src/Utils/SDK.hpp	/^	int random_seed;        \/\/ 52$/;"	m	struct:CUserCmd	typeref:typename:int
range	lib/ffmpeg/include/libavutil/opt.h	/^    AVOptionRange **range;$/;"	m	struct:AVOptionRanges	typeref:typename:AVOptionRange **
rate	lib/ffmpeg/include/libavutil/timecode.h	/^    AVRational rate;    \/\/\/< frame rate in rational form$/;"	m	struct:__anon74cc4c7d0108	typeref:typename:AVRational
ratio	src/Features/Hud/Minimap.cpp	/^	float ratio; \/\/ width\/height$/;"	m	struct:Minimap	typeref:typename:float	file:
raw_codec_id	lib/ffmpeg/include/libavformat/avformat.h	/^    int raw_codec_id;$/;"	m	struct:AVInputFormat	typeref:typename:int
rc_buffer_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int rc_buffer_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
rc_initial_buffer_occupancy	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int rc_initial_buffer_occupancy;$/;"	m	struct:AVCodecContext	typeref:typename:int
rc_max_available_vbv_use	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float rc_max_available_vbv_use;$/;"	m	struct:AVCodecContext	typeref:typename:float
rc_max_rate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t rc_max_rate;$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
rc_min_rate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t rc_min_rate;$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
rc_min_vbv_overflow_use	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float rc_min_vbv_overflow_use;$/;"	m	struct:AVCodecContext	typeref:typename:float
rc_override	lib/ffmpeg/include/libavcodec/avcodec.h	/^    RcOverride *rc_override;$/;"	m	struct:AVCodecContext	typeref:typename:RcOverride *
rc_override_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int rc_override_count;$/;"	m	struct:AVCodecContext	typeref:typename:int
re	lib/ffmpeg/include/libavcodec/avfft.h	/^    FFTSample re, im;$/;"	m	struct:FFTComplex	typeref:typename:FFTSample
re	lib/ffmpeg/include/libavutil/tx.h	/^    double re, im;$/;"	m	struct:AVComplexDouble	typeref:typename:double
re	lib/ffmpeg/include/libavutil/tx.h	/^    float re, im;$/;"	m	struct:AVComplexFloat	typeref:typename:float
re	lib/ffmpeg/include/libavutil/tx.h	/^    int32_t re, im;$/;"	m	struct:AVComplexInt32	typeref:typename:int32_t
readBitFromReversedStream	src/Utils/lodepng.cpp	/^static unsigned char readBitFromReversedStream(size_t *bitpointer, const unsigned char *bitstrea/;"	f	typeref:typename:unsigned char	file:
readBitFromStream	src/Utils/lodepng.cpp	/^static unsigned char readBitFromStream(size_t *bitpointer, const unsigned char *bitstream) {$/;"	f	typeref:typename:unsigned char	file:
readBitsFromReversedStream	src/Utils/lodepng.cpp	/^static unsigned readBitsFromReversedStream(size_t *bitpointer, const unsigned char *bitstream, s/;"	f	typeref:typename:unsigned	file:
readBitsFromStream	src/Utils/lodepng.cpp	/^static unsigned readBitsFromStream(size_t *bitpointer, const unsigned char *bitstream, size_t nb/;"	f	typeref:typename:unsigned	file:
readConsoleCommandInjectAddr	src/Modules/Engine.hpp	/^	uintptr_t readConsoleCommandInjectAddr;$/;"	m	class:Engine	typeref:typename:uintptr_t
readCustomDataInjectAddr	src/Modules/Engine.hpp	/^	uintptr_t readCustomDataInjectAddr;$/;"	m	class:Engine	typeref:typename:uintptr_t
read_close	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_close)(struct AVFormatContext *);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext *)
read_header	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_header)(struct AVFormatContext *);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext *)
read_packet	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_packet)(struct AVFormatContext *, AVPacket *pkt);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext *,AVPacket * pkt)
read_packet	lib/ffmpeg/include/libavformat/avio.h	/^    int (*read_packet)(void *opaque, uint8_t *buf, int buf_size);$/;"	m	struct:AVIOContext	typeref:typename:int (*)(void * opaque,uint8_t * buf,int buf_size)
read_pause	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_pause)(struct AVFormatContext *);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext *)
read_pause	lib/ffmpeg/include/libavformat/avio.h	/^    int (*read_pause)(void *opaque, int pause);$/;"	m	struct:AVIOContext	typeref:typename:int (*)(void * opaque,int pause)
read_play	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_play)(struct AVFormatContext *);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext *)
read_probe	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_probe)(const AVProbeData *);$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(const AVProbeData *)
read_seek	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_seek)(struct AVFormatContext *,$/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext *,int stream_index,int64_t timestamp,int flags)
read_seek	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t (*read_seek)(void *opaque, int stream_index,$/;"	m	struct:AVIOContext	typeref:typename:int64_t (*)(void * opaque,int stream_index,int64_t timestamp,int flags)
read_seek2	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*read_seek2)(struct AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, i/;"	m	struct:AVInputFormat	typeref:typename:int (*)(struct AVFormatContext * s,int stream_index,int64_t min_ts,int64_t ts,int64_t max_ts,int flags)
read_text_chunks	src/Utils/lodepng.hpp	/^	unsigned read_text_chunks; \/*if false but remember_unknown_chunks is true, they're stored in t/;"	m	struct:LodePNGDecoderSettings	typeref:typename:unsigned
read_timestamp	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t (*read_timestamp)(struct AVFormatContext *s, int stream_index,$/;"	m	struct:AVInputFormat	typeref:typename:int64_t (*)(struct AVFormatContext * s,int stream_index,int64_t * pos,int64_t pos_limit)
ready	lib/ffmpeg/include/libavfilter/avfilter.h	/^    unsigned ready;$/;"	m	struct:AVFilterContext	typeref:typename:unsigned
ready	src/Features/Demo/NetworkGhostPlayer.cpp	/^	std::vector<uint32_t> ready;$/;"	m	class:SyncUi	typeref:typename:std::vector<uint32_t>	file:
ready	src/Features/Tas/TasPlayer.hpp	/^	bool ready = false;$/;"	m	class:TasPlayer	typeref:typename:bool
readyToSend	src/Features/NetMessage.cpp	/^static bool readyToSend() {$/;"	f	typeref:typename:bool	file:
realPos	src/Features/Hud/Hud.cpp	/^			auto realPos = viewOffset + eyepos;$/;"	v	typeref:typename:auto
realtime	src/Utils/SDK.hpp	/^	float realtime;                 \/\/ 0$/;"	m	struct:CGlobalVarsBase	typeref:typename:float
receive_frame	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*receive_frame)(struct AVCodecContext *avctx, struct AVFrame *frame);$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext * avctx,struct AVFrame * frame)
receive_packet	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*receive_packet)(struct AVCodecContext *avctx, struct AVPacket *avpkt);$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext * avctx,struct AVPacket * avpkt)
recommended_encoder_configuration	lib/ffmpeg/include/libavformat/avformat.h	/^    char *recommended_encoder_configuration;$/;"	m	struct:AVStream	typeref:typename:attribute_deprecated char *
recordDemoResult	src/Features/Speedrun/SpeedrunTimer.cpp	/^static void recordDemoResult() {$/;"	f	typeref:typename:void	file:
recovery	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int recovery;$/;"	m	struct:__anon77a6dab70108	typeref:typename:int	file:
rects	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVSubtitleRect **rects;$/;"	m	struct:AVSubtitle	typeref:typename:AVSubtitleRect **
refcounted_frames	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int refcounted_frames;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
refs	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int refs;$/;"	m	struct:AVCodecContext	typeref:typename:int
regions	src/Features/Stitcher.cpp	/^	std::vector<StitchRegion> regions;$/;"	m	struct:__anonc8a8a2210208	typeref:typename:std::vector<StitchRegion>	file:
reloadedFix	src/Features/ReloadedFix.cpp	/^ReloadedFix *reloadedFix;$/;"	v	typeref:typename:ReloadedFix *
remaining	src/Features/Hud/Hud.cpp	/^			int remaining = (200 - (1000 - duckJumpTimeMsecs)) \/ 16 + 1;$/;"	v	typeref:typename:int
remaining	src/Features/Hud/Hud.cpp	/^			int remaining = (length - (1000 - duckTimeMsecs)) \/ 16 + 1;$/;"	v	typeref:typename:int
remember_unknown_chunks	src/Utils/lodepng.hpp	/^	unsigned remember_unknown_chunks;$/;"	m	struct:LodePNGDecoderSettings	typeref:typename:unsigned
removePaddingBits	src/Utils/lodepng.cpp	/^static void removePaddingBits(unsigned char *out, const unsigned char *in, size_t olinebits, siz/;"	f	typeref:typename:void	file:
render	lib/ffmpeg/include/libavcodec/vdpau.h	/^    VdpDecoderRender *render;$/;"	m	struct:AVVDPAUContext	typeref:typename:VdpDecoderRender *
render2	lib/ffmpeg/include/libavcodec/vdpau.h	/^    AVVDPAU_Render2 render2;$/;"	m	struct:AVVDPAUContext	typeref:typename:AVVDPAU_Render2
renderTrace	src/Features/Hud/AimPointHud.cpp	/^static void renderTrace(const CGameTrace &tr) {$/;"	f	typeref:typename:void	file:
renderer	src/Features/Demo/GhostEntity.hpp	/^	GhostRenderer renderer;$/;"	m	class:GhostEntity	typeref:typename:GhostRenderer
reordered_opaque	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t reordered_opaque;$/;"	m	struct:AVCodecContext	typeref:typename:int64_t
reordered_opaque	lib/ffmpeg/include/libavutil/frame.h	/^    int64_t reordered_opaque;$/;"	m	struct:AVFrame	typeref:typename:int64_t
repeat_pict	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int repeat_pict; \/* XXX: Put it back in AVCodecContext. *\/$/;"	m	struct:AVCodecParserContext	typeref:typename:int
repeat_pict	lib/ffmpeg/include/libavutil/frame.h	/^    int repeat_pict;$/;"	m	struct:AVFrame	typeref:typename:int
replayName	src/Modules/EngineDemoPlayer.hpp	/^	std::string replayName;$/;"	m	class:EngineDemoPlayer	typeref:typename:std::string
report_id	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    unsigned report_id;$/;"	m	struct:AVD3D11VAContext	typeref:typename:unsigned
report_id	lib/ffmpeg/include/libavcodec/dxva2.h	/^    unsigned report_id;$/;"	m	struct:dxva_context	typeref:typename:unsigned
request	src/Features/AutoSubmit.cpp	/^static std::optional<std::string> request(const char *url) {$/;"	f	typeref:typename:std::optional<std::string>	file:
request	src/Features/Updater.cpp	/^static std::string request(const char *url) {$/;"	f	typeref:typename:std::string	file:
request_channel_layout	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint64_t request_channel_layout;$/;"	m	struct:AVCodecContext	typeref:typename:uint64_t
request_probe	lib/ffmpeg/include/libavformat/avformat.h	/^    int request_probe;$/;"	m	struct:AVStream	typeref:typename:int
request_sample_fmt	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVSampleFormat request_sample_fmt;$/;"	m	struct:AVCodecContext	typeref:enum:AVSampleFormat
request_samples	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int request_samples;$/;"	m	struct:AVFilterLink	typeref:typename:int
requestedStop	src/Modules/EngineDemoRecorder.hpp	/^	bool requestedStop = false;$/;"	m	class:EngineDemoRecorder	typeref:typename:bool
resample_lavr_opts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    attribute_deprecated char *resample_lavr_opts;   \/\/\/< libavresample options to use for th/;"	m	struct:AVFilterGraph	typeref:typename:attribute_deprecated char *
reserved	lib/ffmpeg/include/libavfilter/avfilter.h	/^    char reserved[0xF000];$/;"	m	struct:AVFilterLink	typeref:typename:char[0xF000]
resetCoopProgress	src/Modules/Server.cpp	/^static void resetCoopProgress() {$/;"	f	typeref:typename:void	file:
resetStitcher	src/Features/Stitcher.cpp	/^static void resetStitcher() {$/;"	f	typeref:typename:void	file:
result	lib/curl/include/curl/multi.h	/^    CURLcode result;   \/* return code for transfer *\/$/;"	m	union:CURLMsg::__anon3f8e2429030a	typeref:typename:CURLcode
result	src/Cheats.cpp	/^		auto result = Memory::MultiScan(engine->Name(), TRACE_SHUTDOWN_PATTERN, TRACE_SHUTDOWN_OFFSET1/;"	v	typeref:typename:auto
result	src/Features/Hud/Hud.cpp	/^	auto result = std::find_if(elements->begin(), elements->end(), [name](const HudElement *a) {$/;"	v	typeref:typename:auto
result	src/Features/Stats/Stats.cpp	/^	bool result = false;$/;"	v	typeref:typename:bool
result	src/SAR.cpp	/^	auto result = cvars->Dump(file);$/;"	v	typeref:typename:auto
result	src/SAR.cpp	/^	auto result = cvars->DumpDoc(file);$/;"	v	typeref:typename:auto
revents	lib/curl/include/curl/multi.h	/^  short revents; \/* not supported yet *\/$/;"	m	struct:curl_waitfd	typeref:typename:short
rex	lib/minhook/hde/hde64.h	/^    uint8_t rex;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
rex_b	lib/minhook/hde/hde64.h	/^    uint8_t rex_b;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
rex_r	lib/minhook/hde/hde64.h	/^    uint8_t rex_r;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
rex_w	lib/minhook/hde/hde64.h	/^    uint8_t rex_w;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
rex_x	lib/minhook/hde/hde64.h	/^    uint8_t rex_x;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
rfps_duration_sum	lib/ffmpeg/include/libavformat/avformat.h	/^        int64_t rfps_duration_sum;$/;"	m	struct:AVStream::__anonb574a3de0108	typeref:typename:int64_t
rgba16ToPixel	src/Utils/lodepng.cpp	/^static unsigned rgba16ToPixel(unsigned char *out, size_t i, const LodePNGColorMode *mode, unsign/;"	f	typeref:typename:unsigned	file:
rgba8ToPixel	src/Utils/lodepng.cpp	/^static unsigned rgba8ToPixel(unsigned char *out, size_t i, const LodePNGColorMode *mode, ColorTr/;"	f	typeref:typename:unsigned	file:
rgbaVal	src/Utils/SDK.hpp	/^		Color rgbaVal;$/;"	m	union:variant_t::__anon21a65a74090a	typeref:typename:Color
right	lib/ffmpeg/include/libavutil/frame.h	/^    int right;$/;"	m	struct:AVRegionOfInterest	typeref:typename:int
right	src/Features/Hud/Minimap.cpp	/^	float top, left, bottom, right;$/;"	m	struct:Minimap	typeref:typename:float	file:
rndx	lib/ffmpeg/include/libavutil/fifo.h	/^    uint32_t rndx, wndx;$/;"	m	struct:AVFifoBuffer	typeref:typename:uint32_t
roll	lib/ffmpeg/include/libavutil/spherical.h	/^    int32_t roll;  \/\/\/< Rotation around the forward vector [-180, 180].$/;"	m	struct:AVSphericalMapping	typeref:typename:int32_t
rotation	src/Features/Speedrun/Rules.hpp	/^	double rotation;$/;"	m	struct:PortalPlacementRule	typeref:typename:double
rotation	src/Features/Speedrun/Rules.hpp	/^	double rotation;$/;"	m	struct:ZoneTriggerRule	typeref:typename:double
rotation_angle	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t rotation_angle;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint8_t
round_keys	lib/ffmpeg/include/libavutil/des.h	/^    uint64_t round_keys[3][16];$/;"	m	struct:AVDES	typeref:typename:uint64_t[3][16]
rows	src/Utils/Math.hpp	/^	unsigned int rows;$/;"	m	class:Matrix	typeref:typename:unsigned int
rptr	lib/ffmpeg/include/libavutil/fifo.h	/^    uint8_t *rptr, *wptr, *end;$/;"	m	struct:AVFifoBuffer	typeref:typename:uint8_t *
rpu_present_flag	lib/ffmpeg/include/libavutil/dovi_meta.h	/^    uint8_t rpu_present_flag;$/;"	m	struct:AVDOVIDecoderConfigurationRecord	typeref:typename:uint8_t
rtp_callback	lib/ffmpeg/include/libavcodec/avcodec.h	/^    void (*rtp_callback)(struct AVCodecContext *avctx, void *data, int size, int mb_nb);$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated void (*)(struct AVCodecContext * avctx,void * data,int size,int mb_nb)
rtp_payload_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int rtp_payload_size;   \/* The size of the RTP payload: the coder will  *\/$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
rule	src/Features/Speedrun/Categories.cpp	/^		auto rule = SpeedrunTimer::GetRule(args[1]);$/;"	v	typeref:typename:auto
rule	src/Features/Speedrun/Categories.cpp	/^		for (auto rule : g_rules) {$/;"	v	typeref:typename:auto
rule	src/Features/Speedrun/Categories.cpp	/^	SpeedrunRule *rule;$/;"	m	struct:ScheduledRule	typeref:typename:SpeedrunRule *	file:
rule	src/Features/Speedrun/Categories.cpp	/^	auto rule = SpeedrunTimer::GetRule(ruleName);$/;"	v	typeref:typename:auto
rule	src/Features/Speedrun/Rules.hpp	/^	_RuleTypes rule;$/;"	m	struct:SpeedrunRule	typeref:typename:_RuleTypes
rule	src/Features/Speedrun/SpeedrunTimer.cpp	/^		auto rule = SpeedrunTimer::GetRule(ruleName);$/;"	v	typeref:typename:auto
ruleName	src/Features/Speedrun/Categories.cpp	/^	for (std::string ruleName : g_categories[g_currentCategory].rules) {$/;"	v	typeref:typename:std::string
ruleName	src/Features/Speedrun/Categories.cpp	/^	std::string ruleName = args[1];$/;"	v	typeref:typename:std::string
ruleName	src/Features/Speedrun/CategoryCreator.cpp	/^	std::string ruleName = g_creatorCategory + " - " + args[1];$/;"	v	typeref:typename:std::string
ruleName	src/Features/Speedrun/SpeedrunTimer.cpp	/^	for (std::string ruleName : SpeedrunTimer::GetCategoryRules()) {$/;"	v	typeref:typename:std::string
ruleType	src/Features/Speedrun/CategoryCreator.cpp	/^	std::string ruleType = args[2];$/;"	v	typeref:typename:std::string
rulerManager	src/Features/Routing/Ruler.cpp	/^RulerManager rulerManager;$/;"	v	typeref:typename:RulerManager
rulers	src/Features/Routing/Ruler.hpp	/^	std::vector<Ruler> rulers;$/;"	m	class:RulerManager	typeref:typename:std::vector<Ruler>
rules	src/Features/Speedrun/Categories.hpp	/^	std::vector<std::string> rules;$/;"	m	struct:SpeedrunCategory	typeref:typename:std::vector<std::string>
run	lib/SFML/include/SFML/System/Thread.inl	/^    virtual void run() {(m_object->*m_function)();}$/;"	f	struct:priv::ThreadMemberFunc	typeref:typename:void	file:
run	lib/SFML/include/SFML/System/Thread.inl	/^    virtual void run() {m_function(m_arg);}$/;"	f	struct:priv::ThreadFunctorWithArg	typeref:typename:void	file:
run	lib/SFML/include/SFML/System/Thread.inl	/^    virtual void run() {m_functor();}$/;"	f	struct:priv::ThreadFunctor	typeref:typename:void	file:
run	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *run_bits, *run;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
run	src/Features/ConfigPlus.cpp	/^	std::string run;$/;"	m	struct:AliasInfo	typeref:typename:std::string	file:
run	src/Features/Speedrun/SpeedrunTimer.cpp	/^	for (auto &run : g_runs) {$/;"	v	typeref:typename:auto &
run	src/Features/Stats/Sync.hpp	/^	bool run;$/;"	m	class:Sync	typeref:typename:bool
runThread	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::atomic<bool> runThread;$/;"	m	class:NetworkManager	typeref:typename:std::atomic<bool>
run_bits	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint8_t *run_bits, *run;$/;"	m	struct:CIDEntry	typeref:typename:const uint8_t *
run_codes	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    const uint16_t *run_codes;$/;"	m	struct:CIDEntry	typeref:typename:const uint16_t *
s	lib/ffmpeg/include/libavutil/blowfish.h	/^    uint32_t s[4][256];$/;"	m	struct:AVBlowfish	typeref:typename:uint32_t[4][256]
s_ClientDemoPlayer	src/Modules/EngineDemoPlayer.hpp	/^	Interface *s_ClientDemoPlayer = nullptr;$/;"	m	class:EngineDemoPlayer	typeref:typename:Interface *
s_ClientDemoRecorder	src/Modules/EngineDemoRecorder.hpp	/^	Interface *s_ClientDemoRecorder = nullptr;$/;"	m	class:EngineDemoRecorder	typeref:typename:Interface *
s_CommandBuffer	src/Modules/Engine.hpp	/^	void *s_CommandBuffer = nullptr;$/;"	m	class:Engine	typeref:typename:void *
s_CommandBuffer	src/Offsets.cpp	/^	int s_CommandBuffer;$/;"	v	namespace:Offsets	typeref:typename:int
s_EntityList	src/Modules/Client.hpp	/^	Interface *s_EntityList = nullptr;$/;"	m	class:Client	typeref:typename:Interface *
s_GameEventManager	src/Features/Listener.cpp	/^	auto s_GameEventManager = reinterpret_cast<uintptr_t>(engine->s_GameEventManager->ThisPtr());$/;"	v	typeref:typename:auto
s_GameEventManager	src/Modules/Engine.hpp	/^	Interface *s_GameEventManager = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
s_ServerPlugin	src/Modules/Engine.hpp	/^	Interface *s_ServerPlugin = nullptr;$/;"	m	class:Engine	typeref:typename:Interface *
s_pInterfaceRegs	src/Utils/SDK.cpp	/^InterfaceReg *InterfaceReg::s_pInterfaceRegs = nullptr;$/;"	m	class:InterfaceReg	typeref:typename:InterfaceReg *
s_pInterfaceRegs	src/Utils/SDK.hpp	/^	static InterfaceReg *s_pInterfaceRegs;$/;"	m	struct:InterfaceReg	typeref:typename:InterfaceReg *
saddr	src/Features/Bot/BotServer.cpp	/^	struct sockaddr_in6 saddr{$/;"	s	function:mainThread	file:
saddr	src/Features/Tas/TasServer.cpp	/^	struct sockaddr_in6 saddr{$/;"	s	function:mainThread	file:
same	src/Features/Speedrun/Categories.cpp	/^			bool same = g_currentCategory == args[1];$/;"	v	typeref:typename:bool
sameMap	src/Features/Demo/GhostEntity.hpp	/^	bool sameMap;$/;"	m	class:GhostEntity	typeref:typename:bool
same_map	src/Features/Demo/GhostEntity.cpp	/^	bool same_map = false;$/;"	v	typeref:typename:bool
sample_aspect_ratio	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVCodecContext	typeref:typename:AVRational
sample_aspect_ratio	lib/ffmpeg/include/libavcodec/codec_par.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVCodecParameters	typeref:typename:AVRational
sample_aspect_ratio	lib/ffmpeg/include/libavcodec/dirac.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:AVRational
sample_aspect_ratio	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVRational sample_aspect_ratio; \/\/\/< agreed upon sample aspect ratio$/;"	m	struct:AVFilterLink	typeref:typename:AVRational
sample_aspect_ratio	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:AVRational
sample_aspect_ratio	lib/ffmpeg/include/libavformat/avformat.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVStream	typeref:typename:AVRational
sample_aspect_ratio	lib/ffmpeg/include/libavutil/frame.h	/^    AVRational sample_aspect_ratio;$/;"	m	struct:AVFrame	typeref:typename:AVRational
sample_fmt	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVSampleFormat sample_fmt;  \/\/\/< sample format$/;"	m	struct:AVCodecContext	typeref:enum:AVSampleFormat
sample_fmts	lib/ffmpeg/include/libavcodec/codec.h	/^    const enum AVSampleFormat *sample_fmts; \/\/\/< array of supported sample formats, or NULL i/;"	m	struct:AVCodec	typeref:typename:const enum AVSampleFormat *
sample_fmts	lib/ffmpeg/include/libavfilter/buffersink.h	/^    const enum AVSampleFormat *sample_fmts; \/\/\/< list of allowed sample formats, terminated b/;"	m	struct:AVABufferSinkParams	typeref:typename:const enum AVSampleFormat *
sample_format	lib/ffmpeg/include/libavdevice/avdevice.h	/^    enum AVSampleFormat sample_format;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:enum:AVSampleFormat
sample_rate	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int sample_rate; \/\/\/< samples per second$/;"	m	struct:AVCodecContext	typeref:typename:int
sample_rate	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int      sample_rate;$/;"	m	struct:AVCodecParameters	typeref:typename:int
sample_rate	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int sample_rate;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int
sample_rate	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int sample_rate;            \/\/\/< samples per second$/;"	m	struct:AVFilterLink	typeref:typename:int
sample_rate	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    int sample_rate;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:int
sample_rate	lib/ffmpeg/include/libavutil/frame.h	/^    int sample_rate;$/;"	m	struct:AVFrame	typeref:typename:int
sample_rates	lib/ffmpeg/include/libavfilter/buffersink.h	/^    int *sample_rates;                      \/\/\/< list of allowed sample rates, terminated by /;"	m	struct:AVABufferSinkParams	typeref:typename:int *
samplerate	src/Features/Renderer.cpp	/^	int samplerate;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
sar	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    AVRational       sar[2];                \/* sample aspect ratios for 4:3 and 16:9 *\/$/;"	m	struct:AVDVProfile	typeref:typename:AVRational[2]
sar	src/SAR.cpp	/^SAR sar;$/;"	v	typeref:typename:SAR
sar.so	Makefile	/^sar.so: src\/Version.hpp $(OBJS)$/;"	t
sarChecksum	src/Checksum.cpp	/^static uint32_t sarChecksum;$/;"	v	typeref:typename:uint32_t	file:
sar_aim_point_hud	src/Features/Hud/AimPointHud.cpp	/^Variable sar_aim_point_hud("sar_aim_point_hud", "0", "Overlays a marker with coordinates at the /;"	v	typeref:typename:Variable
sar_aircontrol	src/Cheats.cpp	/^Variable sar_aircontrol("sar_aircontrol", "0", 0, 2, "Enables more air-control on the server.\\n/;"	v	typeref:typename:Variable
sar_autojump	src/Cheats.cpp	/^Variable sar_autojump("sar_autojump", "0", "Enables automatic jumping on the server.\\n");$/;"	v	typeref:typename:Variable
sar_autorecord	src/Cheats.cpp	/^Variable sar_autorecord("sar_autorecord", "0", -1, 1, "Enables or disables automatic demo record/;"	v	typeref:typename:Variable
sar_bot_server	src/Features/Bot/BotServer.cpp	/^Variable sar_bot_server("sar_bot_server", "0", "Enable the remote bot interface.\\n");$/;"	v	typeref:typename:Variable
sar_cam_control	src/Features/Camera.cpp	/^Variable sar_cam_control("sar_cam_control", "0", 0, 3,$/;"	v	typeref:typename:Variable
sar_cam_drive	src/Features/Camera.cpp	/^Variable sar_cam_drive("sar_cam_drive", "1", 0, 1,$/;"	v	typeref:typename:Variable
sar_cam_force_eye_pos	src/Features/Camera.cpp	/^Variable sar_cam_force_eye_pos("sar_cam_force_eye_pos", "0", 0, 1,$/;"	v	typeref:typename:Variable
sar_cam_ortho	src/Features/Camera.cpp	/^Variable sar_cam_ortho("sar_cam_ortho", "0", 0, 1, "Enables or disables camera orthographic proj/;"	v	typeref:typename:Variable
sar_cam_ortho_nearz	src/Features/Camera.cpp	/^Variable sar_cam_ortho_nearz("sar_cam_ortho_nearz", "1", -10000, 10000, "Changes the near Z plan/;"	v	typeref:typename:Variable
sar_cam_ortho_scale	src/Features/Camera.cpp	/^Variable sar_cam_ortho_scale("sar_cam_ortho_scale", "1", 0.001, "Changes the scale of orthograph/;"	v	typeref:typename:Variable
sar_cam_path_interp	src/Features/Camera.cpp	/^Variable sar_cam_path_interp("sar_cam_path_interp", "2", 0, 2, $/;"	v	typeref:typename:Variable
sar_challenge_autostop	src/Cheats.cpp	/^Variable sar_challenge_autostop("sar_challenge_autostop", "0", 0, 3, "Automatically stops record/;"	v	typeref:typename:Variable
sar_cm_rightwarp	src/Modules/Engine.cpp	/^Variable sar_cm_rightwarp("sar_cm_rightwarp", "0", "Fix CM wrongwarp.\\n");$/;"	v	typeref:typename:Variable
sar_con_filter	src/Modules/Tier1.cpp	/^static Variable sar_con_filter("sar_con_filter", "0", "Enable the console filter\\n");$/;"	v	typeref:typename:Variable	file:
sar_con_filter_default	src/Modules/Tier1.cpp	/^static Variable sar_con_filter_default("sar_con_filter_default", "0", "Whether to allow text thr/;"	v	typeref:typename:Variable	file:
sar_con_filter_suppress_blank_lines	src/Modules/Tier1.cpp	/^static Variable sar_con_filter_suppress_blank_lines("sar_con_filter_suppress_blank_lines", "0", /;"	v	typeref:typename:Variable	file:
sar_crosshair_P1	src/Features/Hud/Crosshair.cpp	/^Variable sar_crosshair_P1("sar_crosshair_P1", "0", "Use the P1 crosshair style.\\n");$/;"	v	typeref:typename:Variable
sar_crosshair_mode	src/Features/Hud/Crosshair.cpp	/^Variable sar_crosshair_mode("sar_crosshair_mode", "0", 0, 2,$/;"	v	typeref:typename:Variable
sar_debug_listener	src/Features/Listener.cpp	/^Variable sar_debug_listener("sar_debug_listener", "0", "Prints event data of registered listener/;"	v	typeref:typename:Variable
sar_demo_blacklist	src/Modules/EngineDemoPlayer.cpp	/^Variable sar_demo_blacklist("sar_demo_blacklist", "0", "Stop a set of commands from being run by/;"	v	typeref:typename:Variable
sar_demo_blacklist_all	src/Modules/EngineDemoPlayer.cpp	/^Variable sar_demo_blacklist_all("sar_demo_blacklist_all", "0", "Stop all commands from being run/;"	v	typeref:typename:Variable
sar_demo_overwrite_bak	src/Modules/EngineDemoRecorder.cpp	/^Variable sar_demo_overwrite_bak("sar_demo_overwrite_bak", "0", 0, "Rename demos to (name)_bak if/;"	v	typeref:typename:Variable
sar_demo_remove_broken	src/Modules/EngineDemoPlayer.cpp	/^static Variable sar_demo_remove_broken("sar_demo_remove_broken", "1", "Whether to remove broken /;"	v	typeref:typename:Variable	file:
sar_disable_challenge_stats_hud	src/Cheats.cpp	/^Variable sar_disable_challenge_stats_hud("sar_disable_challenge_stats_hud", "0", "Disables openi/;"	v	typeref:typename:Variable
sar_disable_coop_score_hud	src/Modules/Client.cpp	/^Variable sar_disable_coop_score_hud("sar_disable_coop_score_hud", "0", "Disables the coop score /;"	v	typeref:typename:Variable
sar_disable_no_focus_sleep	src/Cheats.cpp	/^Variable sar_disable_no_focus_sleep("sar_disable_no_focus_sleep", "0", "Does not yield the CPU w/;"	v	typeref:typename:Variable
sar_disable_progress_bar_update	src/Cheats.cpp	/^Variable sar_disable_progress_bar_update("sar_disable_progress_bar_update", "0", 0, 2, "Disables/;"	v	typeref:typename:Variable
sar_disable_save_status_hud	src/Modules/Client.cpp	/^Variable sar_disable_save_status_hud("sar_disable_save_status_hud", "0", "Disables the saving\/s/;"	v	typeref:typename:Variable
sar_disable_steam_pause	src/Cheats.cpp	/^Variable sar_disable_steam_pause("sar_disable_steam_pause", "0", "Prevents pauses from steam ove/;"	v	typeref:typename:Variable
sar_duckjump	src/Cheats.cpp	/^Variable sar_duckjump("sar_duckjump", "0", "Allows duck-jumping even when fully crouched, simila/;"	v	typeref:typename:Variable
sar_ei_hud	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud("sar_ei_hud", "0", 0, "Draws entity inspection data.\\n");$/;"	v	typeref:typename:Variable
sar_ei_hud_font_color	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud_font_color("sar_ei_hud_font_color", "255 255 255 255", "RGBA font color of e/;"	v	typeref:typename:Variable
sar_ei_hud_font_color2	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud_font_color2("sar_ei_hud_font_color2", "153 23 9 255", "RGBA font color of en/;"	v	typeref:typename:Variable
sar_ei_hud_font_index	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud_font_index("sar_ei_hud_font_index", "1", 0, "Font index of entity inspection/;"	v	typeref:typename:Variable
sar_ei_hud_x	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud_x("sar_ei_hud_x", "0", 0, "X offset of entity inspection HUD.\\n");$/;"	v	typeref:typename:Variable
sar_ei_hud_y	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud_y("sar_ei_hud_y", "0", 0, "Y offset of entity inspection HUD.\\n");$/;"	v	typeref:typename:Variable
sar_ei_hud_z	src/Features/Hud/InspectionHud.cpp	/^Variable sar_ei_hud_z("sar_ei_hud_z", "0", 0, "Z offset of entity inspection HUD.\\n");$/;"	v	typeref:typename:Variable
sar_fix_reloaded_cheats	src/Features/ReloadedFix.cpp	/^Variable sar_fix_reloaded_cheats($/;"	v	typeref:typename:Variable
sar_hud_bg	src/Modules/VGui.cpp	/^Variable sar_hud_bg("sar_hud_bg", "0", "Enable the SAR HUD background.\\n");$/;"	v	typeref:typename:Variable
sar_hud_font_color	src/Features/Hud/Hud.cpp	/^Variable sar_hud_font_color("sar_hud_font_color", "255 255 255 255", "RGBA font color of HUD.\\n/;"	v	typeref:typename:Variable
sar_hud_font_index	src/Features/Hud/Hud.cpp	/^Variable sar_hud_font_index("sar_hud_font_index", "0", 0, "Font index of HUD.\\n");$/;"	v	typeref:typename:Variable
sar_hud_orange_only	src/Modules/VGui.cpp	/^Variable sar_hud_orange_only("sar_hud_orange_only", "0", "Only display the SAR HUD for orange, f/;"	v	typeref:typename:Variable
sar_hud_precision	src/Features/Hud/Hud.cpp	/^Variable sar_hud_precision("sar_hud_precision", "3", 0, "Precision of HUD numbers.\\n");$/;"	v	typeref:typename:Variable
sar_hud_spacing	src/Features/Hud/Hud.cpp	/^Variable sar_hud_spacing("sar_hud_spacing", "1", 0, "Spacing between elements of HUD.\\n");$/;"	v	typeref:typename:Variable
sar_hud_strafesync_color	src/Features/Hud/StrafeSyncHud.cpp	/^Variable sar_hud_strafesync_color("sar_hud_strafesync_color", "0 150 250 255", 0, "RGBA font col/;"	v	typeref:typename:Variable
sar_hud_strafesync_font_index	src/Features/Hud/StrafeSyncHud.cpp	/^Variable sar_hud_strafesync_font_index("sar_hud_strafesync_font_index", "1", 0, "Font index of s/;"	v	typeref:typename:Variable
sar_hud_strafesync_offset_x	src/Features/Hud/StrafeSyncHud.cpp	/^Variable sar_hud_strafesync_offset_x("sar_hud_strafesync_offset_x", "0", 0, "X offset of strafes/;"	v	typeref:typename:Variable
sar_hud_strafesync_offset_y	src/Features/Hud/StrafeSyncHud.cpp	/^Variable sar_hud_strafesync_offset_y("sar_hud_strafesync_offset_y", "1000", 0, "Y offset of stra/;"	v	typeref:typename:Variable
sar_hud_strafesync_split_offset_y	src/Features/Hud/StrafeSyncHud.cpp	/^Variable sar_hud_strafesync_split_offset_y("sar_hud_strafesync_split_offset_y", "1050", 0, "Y of/;"	v	typeref:typename:Variable
sar_hud_text	src/Features/Hud/Hud.cpp	/^Variable sar_hud_text("sar_hud_text", "", "DEPRECATED: Use sar_hud_set_text.", 0);$/;"	v	typeref:typename:Variable
sar_hud_text_callback	src/Features/Hud/Hud.cpp	/^void sar_hud_text_callback(void *var, const char *pOldVal, float fOldVal) {$/;"	f	typeref:typename:void
sar_hud_text_vals	src/Features/Hud/Hud.cpp	/^static std::map<long, TextLine> sar_hud_text_vals;$/;"	v	typeref:typename:std::map<long,TextLine>	file:
sar_hud_velocity_precision	src/Features/Hud/Hud.cpp	/^Variable sar_hud_velocity_precision("sar_hud_velocity_precision", "2", 0, "Precision of velocity/;"	v	typeref:typename:Variable
sar_hud_x	src/Features/Hud/Hud.cpp	/^Variable sar_hud_x("sar_hud_x", "2", 0, "X padding of HUD.\\n");$/;"	v	typeref:typename:Variable
sar_hud_y	src/Features/Hud/Hud.cpp	/^Variable sar_hud_y("sar_hud_y", "2", 0, "Y padding of HUD.\\n");$/;"	v	typeref:typename:Variable
sar_ihud	src/Features/Hud/InputHud.cpp	/^Variable sar_ihud("sar_ihud", "0", 0, 1, "Enabled or disables movement inputs HUD of client.\\n"/;"	v	typeref:typename:Variable
sar_ihud_grid_padding	src/Features/Hud/InputHud.cpp	/^Variable sar_ihud_grid_padding("sar_ihud_grid_padding", "2", 0, "Padding between grid squares of/;"	v	typeref:typename:Variable
sar_ihud_grid_size	src/Features/Hud/InputHud.cpp	/^Variable sar_ihud_grid_size("sar_ihud_grid_size", "60", 0, "Grid square size of input HUD.\\n");$/;"	v	typeref:typename:Variable
sar_ihud_x	src/Features/Hud/InputHud.cpp	/^Variable sar_ihud_x("sar_ihud_x", "2", "X position of input HUD.\\n", 0);$/;"	v	typeref:typename:Variable
sar_ihud_y	src/Features/Hud/InputHud.cpp	/^Variable sar_ihud_y("sar_ihud_y", "2", "Y position of input HUD.\\n", 0);$/;"	v	typeref:typename:Variable
sar_inspection_save_every_tick	src/Features/Routing/EntityInspector.cpp	/^Variable sar_inspection_save_every_tick("sar_inspection_save_every_tick", "0", "Saves inspection/;"	v	typeref:typename:Variable
sar_jumpboost	src/Cheats.cpp	/^Variable sar_jumpboost("sar_jumpboost", "0", 0,$/;"	v	typeref:typename:Variable
sar_load_delay	src/Features/Session.cpp	/^Variable sar_load_delay("sar_load_delay", "0", 0, "Delay for this number of milliseconds at the /;"	v	typeref:typename:Variable
sar_loads_norender	src/Features/Session.cpp	/^Variable sar_loads_norender("sar_loads_norender", "0", 0, 1, "Temporarily set mat_noredering to /;"	v	typeref:typename:Variable
sar_loads_uncap	src/Features/Session.cpp	/^Variable sar_loads_uncap("sar_loads_uncap", "0", 0, 1, "Temporarily set fps_max to 0 during load/;"	v	typeref:typename:Variable
sar_lphud	src/Features/Hud/LPHud.cpp	/^Variable sar_lphud("sar_lphud", "0", "Enables or disables the portals display on screen.\\n");$/;"	v	typeref:typename:Variable
sar_lphud_font	src/Features/Hud/LPHud.cpp	/^Variable sar_lphud_font("sar_lphud_font", "92", 0, "Change font of portal counter.\\n");$/;"	v	typeref:typename:Variable
sar_lphud_reset_on_changelevel	src/Features/Hud/LPHud.cpp	/^Variable sar_lphud_reset_on_changelevel("sar_lphud_reset_on_changelevel", "0", "Reset the lp cou/;"	v	typeref:typename:Variable
sar_lphud_x	src/Features/Hud/LPHud.cpp	/^Variable sar_lphud_x("sar_lphud_x", "-10", "x pos of lp counter.\\n", 0);$/;"	v	typeref:typename:Variable
sar_lphud_y	src/Features/Hud/LPHud.cpp	/^Variable sar_lphud_y("sar_lphud_y", "-10", "y pos of lp counter.\\n", 0);$/;"	v	typeref:typename:Variable
sar_minimap_max_height	src/Features/Hud/Minimap.cpp	/^Variable sar_minimap_max_height("sar_minimap_max_height", "1000", "The maximum height of the min/;"	v	typeref:typename:Variable
sar_minimap_max_width	src/Features/Hud/Minimap.cpp	/^Variable sar_minimap_max_width("sar_minimap_max_width", "500", "The maximum width of the minimap/;"	v	typeref:typename:Variable
sar_minimap_player_color	src/Features/Hud/Minimap.cpp	/^Variable sar_minimap_player_color("sar_minimap_player_color", "255 0 0 255", "The color of the c/;"	v	typeref:typename:Variable
sar_minimap_x	src/Features/Hud/Minimap.cpp	/^Variable sar_minimap_x("sar_minimap_x", "-10", "The X position of the minimap.\\n", 0);$/;"	v	typeref:typename:Variable
sar_minimap_y	src/Features/Hud/Minimap.cpp	/^Variable sar_minimap_y("sar_minimap_y", "10", "The Y position of the minimap.\\n", 0);$/;"	v	typeref:typename:Variable
sar_pause_at	src/Modules/Engine.cpp	/^Variable sar_pause_at("sar_pause_at", "-1", -1, "Pause at the specified tick. -1 to deactivate i/;"	v	typeref:typename:Variable
sar_pause_for	src/Modules/Engine.cpp	/^Variable sar_pause_for("sar_pause_for", "0", 0, "Pause for this amount of ticks.\\n");$/;"	v	typeref:typename:Variable
sar_portalgun_hud	src/Features/Hud/PortalgunHud.cpp	/^Variable sar_portalgun_hud("sar_portalgun_hud", "0", "Enables the portalgun HUD.\\n");$/;"	v	typeref:typename:Variable
sar_portalgun_hud_x	src/Features/Hud/PortalgunHud.cpp	/^Variable sar_portalgun_hud_x("sar_portalgun_hud_x", "5", 0, "The x position of the portalgun HUD/;"	v	typeref:typename:Variable
sar_portalgun_hud_y	src/Features/Hud/PortalgunHud.cpp	/^Variable sar_portalgun_hud_y("sar_portalgun_hud_y", "5", 0, "The y position of the portalgun HUD/;"	v	typeref:typename:Variable
sar_pp_hud	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud("sar_pp_hud", "0", 0, "Enables or disables the portals placement HUD.\\n");$/;"	v	typeref:typename:Variable
sar_pp_hud_font	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud_font("sar_pp_hud_font", "0", 0, "Change font of portal placement hud.\\n");$/;"	v	typeref:typename:Variable
sar_pp_hud_opacity	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud_opacity("sar_pp_hud_opacity", "100", 0, 255, "Opacity of portal previews.\\n/;"	v	typeref:typename:Variable
sar_pp_hud_show_blue	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud_show_blue("sar_pp_hud_show_blue", "0", 0, "Enables or disables blue portal p/;"	v	typeref:typename:Variable
sar_pp_hud_show_orange	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud_show_orange("sar_pp_hud_show_orange", "0", 0, "Enables or disables orange po/;"	v	typeref:typename:Variable
sar_pp_hud_x	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud_x("sar_pp_hud_x", "5", "x pos of portal placement hud.\\n", 0);$/;"	v	typeref:typename:Variable
sar_pp_hud_y	src/Features/Hud/PortalPlacement.cpp	/^Variable sar_pp_hud_y("sar_pp_hud_y", "5", "y pos of portal placement hud.\\n", 0);$/;"	v	typeref:typename:Variable
sar_prevent_mat_snapshot_recompute	src/Cheats.cpp	/^Variable sar_prevent_mat_snapshot_recompute("sar_prevent_mat_snapshot_recompute", "0", "Shortens/;"	v	typeref:typename:Variable
sar_quickhud_mode	src/Features/Hud/Crosshair.cpp	/^Variable sar_quickhud_mode("sar_quickhud_mode", "0", 0, 2,$/;"	v	typeref:typename:Variable
sar_record_at	src/Modules/Engine.cpp	/^Variable sar_record_at("sar_record_at", "-1", -1, "Start recording a demo at the tick specified./;"	v	typeref:typename:Variable
sar_record_at_demo_name	src/Modules/Engine.cpp	/^Variable sar_record_at_demo_name("sar_record_at_demo_name", "chamber", "Name of the demo automat/;"	v	typeref:typename:Variable
sar_record_at_increment	src/Modules/Engine.cpp	/^Variable sar_record_at_increment("sar_record_at_increment", "0", "Increment automatically the de/;"	v	typeref:typename:Variable
sar_record_mkdir	src/Modules/EngineDemoRecorder.cpp	/^Variable sar_record_mkdir("sar_record_mkdir", "1", "Automatically create directories for demos i/;"	v	typeref:typename:Variable
sar_record_prefix	src/Modules/EngineDemoRecorder.cpp	/^Variable sar_record_prefix("sar_record_prefix", "", "A string to prepend to recorded demo names./;"	v	typeref:typename:Variable
sar_render_abitrate	src/Features/Renderer.cpp	/^static Variable sar_render_abitrate("sar_render_abitrate", "160", 1, "Audio bitrate used in rend/;"	v	typeref:typename:Variable	file:
sar_render_acodec	src/Features/Renderer.cpp	/^static Variable sar_render_acodec("sar_render_acodec", "aac", "Audio codec used in renders (aac,/;"	v	typeref:typename:Variable	file:
sar_render_autostart	src/Features/Renderer.cpp	/^static Variable sar_render_autostart("sar_render_autostart", "0", "Whether to automatically star/;"	v	typeref:typename:Variable	file:
sar_render_autostart_extension	src/Features/Renderer.cpp	/^static Variable sar_render_autostart_extension("sar_render_autostart_extension", "mp4", "The fil/;"	v	typeref:typename:Variable	file:
sar_render_autostop	src/Features/Renderer.cpp	/^static Variable sar_render_autostop("sar_render_autostop", "1", "Whether to automatically stop w/;"	v	typeref:typename:Variable	file:
sar_render_blend	src/Features/Renderer.cpp	/^static Variable sar_render_blend("sar_render_blend", "0", 0, "How many frames to blend for each /;"	v	typeref:typename:Variable	file:
sar_render_fps	src/Features/Renderer.cpp	/^static Variable sar_render_fps("sar_render_fps", "60", 1, "Render output FPS\\n");$/;"	v	typeref:typename:Variable	file:
sar_render_merge	src/Features/Renderer.cpp	/^static Variable sar_render_merge("sar_render_merge", "0", "When set, merge all the renders until/;"	v	typeref:typename:Variable	file:
sar_render_quality	src/Features/Renderer.cpp	/^static Variable sar_render_quality("sar_render_quality", "35", 0, 50, "Render output quality, hi/;"	v	typeref:typename:Variable	file:
sar_render_sample_rate	src/Features/Renderer.cpp	/^static Variable sar_render_sample_rate("sar_render_sample_rate", "44100", 1000, "Audio output sa/;"	v	typeref:typename:Variable	file:
sar_render_shutter_angle	src/Features/Renderer.cpp	/^static Variable sar_render_shutter_angle("sar_render_shutter_angle", "180", 30, 360, "The shutte/;"	v	typeref:typename:Variable	file:
sar_render_skip_coop_videos	src/Features/Renderer.cpp	/^static Variable sar_render_skip_coop_videos("sar_render_skip_coop_videos", "1", "When set, don't/;"	v	typeref:typename:Variable	file:
sar_render_vbitrate	src/Features/Renderer.cpp	/^static Variable sar_render_vbitrate("sar_render_vbitrate", "40000", 1, "Video bitrate used in re/;"	v	typeref:typename:Variable	file:
sar_render_vcodec	src/Features/Renderer.cpp	/^static Variable sar_render_vcodec("sar_render_vcodec", "h264", "Video codec used in renders (h26/;"	v	typeref:typename:Variable	file:
sar_ruler_creator	src/Features/Routing/Ruler.cpp	/^Variable sar_ruler_creator("sar_ruler_creator", "0", 0, 2, $/;"	v	typeref:typename:Variable
sar_ruler_draw	src/Features/Routing/Ruler.cpp	/^Variable sar_ruler_draw("sar_ruler_draw", "1", 0, 4, $/;"	v	typeref:typename:Variable
sar_ruler_grid_align	src/Features/Routing/Ruler.cpp	/^Variable sar_ruler_grid_align("sar_ruler_grid_align", "1", 0, 1024, "Aligns ruler creation point/;"	v	typeref:typename:Variable
sar_ruler_max_trace_dist	src/Features/Routing/Ruler.cpp	/^Variable sar_ruler_max_trace_dist("sar_ruler_max_trace_dist", "16384", 0, 16384, "Sets maximum t/;"	v	typeref:typename:Variable
sar_scrollspeed	src/Features/Hud/ScrollSpeed.cpp	/^Variable sar_scrollspeed("sar_scrollspeed", "0", "Show a HUD indicating your scroll speed.");$/;"	v	typeref:typename:Variable
sar_seamshot_finder	src/Features/Routing/SeamshotFind.cpp	/^Variable sar_seamshot_finder("sar_seamshot_finder", "0", 0, 1, "Enables or disables seamshot fin/;"	v	typeref:typename:Variable
sar_show_entinp	src/Cheats.cpp	/^Variable sar_show_entinp("sar_show_entinp", "0", "Print all entity inputs to console.\\n");$/;"	v	typeref:typename:Variable
sar_speedrun_autostop	src/Features/Speedrun/SpeedrunTimer.cpp	/^Variable sar_speedrun_autostop("sar_speedrun_autostop", "0", 0, 2, "Automatically stop recording/;"	v	typeref:typename:Variable
sar_speedrun_draw_triggers	src/Features/Speedrun/Categories.cpp	/^Variable sar_speedrun_draw_triggers("sar_speedrun_draw_triggers", "0", "Draw the triggers associ/;"	v	typeref:typename:Variable
sar_speedrun_offset	src/Features/Speedrun/SpeedrunTimer.cpp	/^Variable sar_speedrun_offset("sar_speedrun_offset", "0", 0, "Start speedruns with this many tick/;"	v	typeref:typename:Variable
sar_speedrun_smartsplit	src/Features/Speedrun/SpeedrunTimer.cpp	/^Variable sar_speedrun_smartsplit("sar_speedrun_smartsplit", "1", "Only split the speedrun timer /;"	v	typeref:typename:Variable
sar_speedrun_start_on_load	src/Features/Speedrun/SpeedrunTimer.cpp	/^Variable sar_speedrun_start_on_load("sar_speedrun_start_on_load", "0", 0, 2, "Automatically star/;"	v	typeref:typename:Variable
sar_speedrun_stop_in_menu	src/Features/Speedrun/SpeedrunTimer.cpp	/^Variable sar_speedrun_stop_in_menu("sar_speedrun_stop_in_menu", "0", "Automatically stop the spe/;"	v	typeref:typename:Variable
sar_speedrun_time_pauses	src/Features/Speedrun/SpeedrunTimer.cpp	/^Variable sar_speedrun_time_pauses("sar_speedrun_time_pauses", "0", "Include time spent paused in/;"	v	typeref:typename:Variable
sar_sr_hud	src/Features/Hud/SpeedrunHud.cpp	/^Variable sar_sr_hud("sar_sr_hud", "0", 0, "Draws speedrun timer.\\n");$/;"	v	typeref:typename:Variable
sar_sr_hud_font_color	src/Features/Hud/SpeedrunHud.cpp	/^Variable sar_sr_hud_font_color("sar_sr_hud_font_color", "255 255 255 255", "RGBA font color of s/;"	v	typeref:typename:Variable
sar_sr_hud_font_index	src/Features/Hud/SpeedrunHud.cpp	/^Variable sar_sr_hud_font_index("sar_sr_hud_font_index", "70", 0, "Font index of speedrun timer H/;"	v	typeref:typename:Variable
sar_sr_hud_x	src/Features/Hud/SpeedrunHud.cpp	/^Variable sar_sr_hud_x("sar_sr_hud_x", "0", "X offset of speedrun timer HUD.\\n", 0);$/;"	v	typeref:typename:Variable
sar_sr_hud_y	src/Features/Hud/SpeedrunHud.cpp	/^Variable sar_sr_hud_y("sar_sr_hud_y", "100", "Y offset of speedrun timer HUD.\\n", 0);$/;"	v	typeref:typename:Variable
sar_statcounter_filePath	src/Features/Stats/StatsCounter.cpp	/^Variable sar_statcounter_filePath("sar_statcounter_filePath", "Stats\/phunkpaiDWPS.csv", "Path t/;"	v	typeref:typename:Variable
sar_stats_auto_reset	src/Features/Stats/Stats.cpp	/^Variable sar_stats_auto_reset("sar_stats_auto_reset", "0", 0,$/;"	v	typeref:typename:Variable
sar_stats_jumps_xy	src/Features/Stats/Stats.cpp	/^Variable sar_stats_jumps_xy("sar_stats_jumps_xy", "0", "Saves jump distance as 2D vector.\\n");$/;"	v	typeref:typename:Variable
sar_stats_velocity_peak_xy	src/Features/Stats/Stats.cpp	/^Variable sar_stats_velocity_peak_xy("sar_stats_velocity_peak_xy", "0", "Saves velocity peak as 2/;"	v	typeref:typename:Variable
sar_stitcher	src/Features/Stitcher.cpp	/^Variable sar_stitcher("sar_stitcher", "0", "Enable the image stitcher.\\n");$/;"	v	typeref:typename:Variable
sar_strafe_quality	src/Features/Hud/StrafeQuality.cpp	/^static Variable sar_strafe_quality("sar_strafe_quality", "0", "Enables or disables the strafe qu/;"	v	typeref:typename:Variable	file:
sar_strafe_quality_height	src/Features/Hud/StrafeQuality.cpp	/^static Variable sar_strafe_quality_height("sar_strafe_quality_height", "50", 10, "The height of /;"	v	typeref:typename:Variable	file:
sar_strafe_quality_ticks	src/Features/Hud/StrafeQuality.cpp	/^static Variable sar_strafe_quality_ticks("sar_strafe_quality_ticks", "40", 10, "The number of ti/;"	v	typeref:typename:Variable	file:
sar_strafe_quality_width	src/Features/Hud/StrafeQuality.cpp	/^static Variable sar_strafe_quality_width("sar_strafe_quality_width", "300", 10, "The width of th/;"	v	typeref:typename:Variable	file:
sar_strafesync	src/Features/Stats/Sync.cpp	/^Variable sar_strafesync("sar_strafesync", "0", "Shows strafe sync stats.\\n");$/;"	v	typeref:typename:Variable
sar_strafesync_noground	src/Features/Stats/Sync.cpp	/^Variable sar_strafesync_noground("sar_strafesync_noground", "1",$/;"	v	typeref:typename:Variable
sar_strafesync_session_time	src/Features/Stats/Sync.cpp	/^Variable sar_strafesync_session_time("sar_strafesync_session_time", "0", 0,$/;"	v	typeref:typename:Variable
sar_sum_during_session	src/Features/Summary.cpp	/^Variable sar_sum_during_session("sar_sum_during_session", "1", "Updates the summary counter auto/;"	v	typeref:typename:Variable
sar_tas_autosave_raw	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_autosave_raw("sar_tas_autosave_raw", "0", "Enables automatic saving of raw, pro/;"	v	typeref:typename:Variable
sar_tas_debug	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_debug("sar_tas_debug", "0", 0, 2, "Debug TAS informations. 0 - none, 1 - basic,/;"	v	typeref:typename:Variable
sar_tas_dump_usercmd	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_dump_usercmd("sar_tas_dump_usercmd", "0", "Dump TAS-generated usercmds to a fil/;"	v	typeref:typename:Variable
sar_tas_interpolate	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_interpolate("sar_tas_interpolate", "0", "Preserve client interpolation in TAS p/;"	v	typeref:typename:Variable
sar_tas_pauseat	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_pauseat("sar_tas_pauseat", "0", 0, "Pauses the TAS playback on specified tick.\\/;"	v	typeref:typename:Variable
sar_tas_playback_rate	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_playback_rate("sar_tas_playback_rate", "1.0", 0.02, "The rate at which to play /;"	v	typeref:typename:Variable
sar_tas_real_controller_debug	src/Features/Tas/TasController.cpp	/^Variable sar_tas_real_controller_debug("sar_tas_real_controller_debug", "0", 0, 4, "Debugs contr/;"	v	typeref:typename:Variable
sar_tas_restore_fps	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_restore_fps("sar_tas_restore_fps", "1", "Restore fps_max and host_framerate aft/;"	v	typeref:typename:Variable
sar_tas_server	src/Features/Tas/TasServer.cpp	/^Variable sar_tas_server("sar_tas_server", "0", "Enable the remote TAS server.\\n");$/;"	v	typeref:typename:Variable
sar_tas_skipto	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_skipto("sar_tas_skipto", "0", 0, "Fast-forwards the TAS playback until given pl/;"	v	typeref:typename:Variable
sar_tas_tools_enabled	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_tools_enabled("sar_tas_tools_enabled", "1", "Enables tool processing for TAS sc/;"	v	typeref:typename:Variable
sar_tas_tools_force	src/Features/Tas/TasPlayer.cpp	/^Variable sar_tas_tools_force("sar_tas_tools_force", "0", "Force tool playback for TAS scripts; p/;"	v	typeref:typename:Variable
sar_tick_debug	src/Modules/Engine.cpp	/^Variable sar_tick_debug("sar_tick_debug", "0", 0, 3, "Output debugging information to the consol/;"	v	typeref:typename:Variable
sar_time_demo_dev	src/Features/Demo/DemoParser.cpp	/^Variable sar_time_demo_dev("sar_time_demo_dev", "0", 0,$/;"	v	typeref:typename:Variable
sar_timer_always_running	src/Features/Timer/Timer.cpp	/^Variable sar_timer_always_running("sar_timer_always_running", "1", "Timer will save current valu/;"	v	typeref:typename:Variable
sar_timer_time_pauses	src/Features/Timer/Timer.cpp	/^Variable sar_timer_time_pauses("sar_timer_time_pauses", "1", "Timer adds non-simulated ticks whe/;"	v	typeref:typename:Variable
sar_toast_align	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_align("sar_toast_align", "0", 0, 2, "The side to align toasts to horizontally/;"	v	typeref:typename:Variable
sar_toast_anchor	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_anchor("sar_toast_anchor", "1", 0, 1, "Where to put new toasts. 0 = bottom, 1/;"	v	typeref:typename:Variable
sar_toast_background	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_background("sar_toast_background", "1", 0, 2, "Sets the background highlight /;"	v	typeref:typename:Variable
sar_toast_compact	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_compact("sar_toast_compact", "0", "Enables a compact form of the toasts HUD.\\/;"	v	typeref:typename:Variable
sar_toast_disable	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_disable("sar_toast_disable", "0", "Disable all toasts from showing.\\n");$/;"	v	typeref:typename:Variable
sar_toast_font	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_font("sar_toast_font", "6", 0, "The font index to use for toasts.\\n");$/;"	v	typeref:typename:Variable
sar_toast_net_disable	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_net_disable("sar_toast_net_disable", "0", "Disable network toasts.\\n");$/;"	v	typeref:typename:Variable
sar_toast_width	src/Features/Hud/Toasts.cpp	/^Variable sar_toast_width("sar_toast_width", "250", 2 * SIDE_PAD + 10, "The maximum width for toa/;"	v	typeref:typename:Variable
sar_trace_autoclear	src/Features/PlayerTrace.cpp	/^Variable sar_trace_autoclear("sar_trace_autoclear", "1", "Automatically clear the trace on sessi/;"	v	typeref:typename:Variable
sar_trace_bbox_at	src/Features/PlayerTrace.cpp	/^Variable sar_trace_bbox_at("sar_trace_bbox_at", "-1", -1, "Display a player-sized bbox at the gi/;"	v	typeref:typename:Variable
sar_trace_bbox_use_hover	src/Features/PlayerTrace.cpp	/^Variable sar_trace_bbox_use_hover("sar_trace_bbox_use_hover", "0", 0, "Move trace bbox to hovere/;"	v	typeref:typename:Variable
sar_trace_draw	src/Features/PlayerTrace.cpp	/^Variable sar_trace_draw("sar_trace_draw", "0", "Display the recorded player trace. Requires chea/;"	v	typeref:typename:Variable
sar_trace_draw_speed_deltas	src/Features/PlayerTrace.cpp	/^Variable sar_trace_draw_speed_deltas("sar_trace_draw_speed_deltas", "1", "Display the speed delt/;"	v	typeref:typename:Variable
sar_trace_draw_through_walls	src/Features/PlayerTrace.cpp	/^Variable sar_trace_draw_through_walls("sar_trace_draw_through_walls", "1", "Display the player t/;"	v	typeref:typename:Variable
sar_trace_draw_time	src/Features/PlayerTrace.cpp	/^Variable sar_trace_draw_time("sar_trace_draw_time", "3", 0, 3, $/;"	v	typeref:typename:Variable
sar_trace_font	src/Features/PlayerTrace.cpp	/^Variable sar_trace_font("sar_trace_font", "0", 0, "Font index to display player trace info in\\n/;"	v	typeref:typename:Variable
sar_trace_record	src/Features/PlayerTrace.cpp	/^Variable sar_trace_record("sar_trace_record", "0", 0, "Record the trace to a slot. Set to 0 for /;"	v	typeref:typename:Variable
sar_velocitygraph	src/Features/Hud/VelocityGraph.cpp	/^Variable sar_velocitygraph("sar_velocitygraph", "0", "Shows velocity graph.\\n");$/;"	v	typeref:typename:Variable
sar_velocitygraph_background	src/Features/Hud/VelocityGraph.cpp	/^Variable sar_velocitygraph_background("sar_velocitygraph_background", "0", "Background of veloci/;"	v	typeref:typename:Variable
sar_velocitygraph_font_index	src/Features/Hud/VelocityGraph.cpp	/^Variable sar_velocitygraph_font_index("sar_velocitygraph_font_index", "21", 0, "Font index of ve/;"	v	typeref:typename:Variable
sar_velocitygraph_rainbow	src/Features/Hud/VelocityGraph.cpp	/^Variable sar_velocitygraph_rainbow("sar_velocitygraph_rainbow", "0", "Rainbow mode of velocity g/;"	v	typeref:typename:Variable
sar_velocitygraph_show_speed_on_graph	src/Features/Hud/VelocityGraph.cpp	/^Variable sar_velocitygraph_show_speed_on_graph("sar_velocitygraph_show_speed_on_graph", "1", "Sh/;"	v	typeref:typename:Variable
sar_vphys_hud	src/Features/Hud/VphysHud.cpp	/^Variable sar_vphys_hud("sar_vphys_hud", "0", 0, "Enables or disables the vphys HUD.\\n");$/;"	v	typeref:typename:Variable
sar_vphys_hud_x	src/Features/Hud/VphysHud.cpp	/^Variable sar_vphys_hud_x("sar_vphys_hud_x", "0", 0, "The x position of the vphys HUD.\\n");$/;"	v	typeref:typename:Variable
sar_vphys_hud_y	src/Features/Hud/VphysHud.cpp	/^Variable sar_vphys_hud_y("sar_vphys_hud_y", "0", 0, "The y position of the vphys HUD.\\n");$/;"	v	typeref:typename:Variable
save_file	src/Utils/lodepng.cpp	/^	void save_file(const std::vector<unsigned char> &buffer, const std::string &filename) {$/;"	f	namespace:lodepng	typeref:typename:void
saved	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int saved;$/;"	m	struct:__anon77a6dab70108	typeref:typename:int	file:
savedVerticalVelocity	src/Modules/Server.hpp	/^	float savedVerticalVelocity = 0.0f;$/;"	m	class:Server	typeref:typename:float
scale_sws_opts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    char *scale_sws_opts; \/\/\/< sws options to use for the auto-inserted scale filters$/;"	m	struct:AVFilterGraph	typeref:typename:char *
scenechange_threshold	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int scenechange_threshold;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
scheme	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t scheme;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint32_t
scheme	src/Modules/Scheme.cpp	/^Scheme *scheme;$/;"	v	typeref:typename:Scheme *
sclass	src/Features/ClassDumper.cpp	/^	for (auto sclass = server->GetAllServerClasses(); sclass; sclass = sclass->m_pNext) {$/;"	v	typeref:typename:auto
scr_pos	src/Features/OverlayRender.cpp	/^			Vector scr_pos;$/;"	v	typeref:typename:Vector
screenHeight	src/Features/Hud/Toasts.cpp	/^	int screenWidth, screenHeight;$/;"	v	typeref:typename:int
screenWidth	src/Features/Hud/Toasts.cpp	/^	int screenWidth, screenHeight;$/;"	v	typeref:typename:int
scrollSpeedHud	src/Features/Hud/ScrollSpeed.cpp	/^ScrollSpeedHud scrollSpeedHud;$/;"	v	typeref:typename:ScrollSpeedHud
seamshotFind	src/Features/Routing/SeamshotFind.cpp	/^SeamshotFind *seamshotFind;$/;"	v	typeref:typename:SeamshotFind *
searchCodeIndex	src/Utils/lodepng.cpp	/^static size_t searchCodeIndex(const unsigned *array, size_t array_size, size_t value) {$/;"	f	typeref:typename:size_t	file:
second	src/Utils/lodepng.hpp	/^	unsigned second; \/*0-60 (to allow for leap seconds)*\/$/;"	m	struct:LodePNGTime	typeref:typename:unsigned
secondsSpent	src/Features/Stats/StatsCounter.hpp	/^	float secondsSpent;$/;"	m	struct:MapStats	typeref:typename:float
seek	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t (*seek)(void *opaque, int64_t offset, int whence);$/;"	m	struct:AVIOContext	typeref:typename:int64_t (*)(void * opaque,int64_t offset,int whence)
seek2any	lib/ffmpeg/include/libavformat/avformat.h	/^    int seek2any;$/;"	m	struct:AVFormatContext	typeref:typename:int
seek_count	lib/ffmpeg/include/libavformat/avio.h	/^    int seek_count;$/;"	m	struct:AVIOContext	typeref:typename:int
seek_preroll	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int seek_preroll;$/;"	m	struct:AVCodecContext	typeref:typename:int
seek_preroll	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int seek_preroll;$/;"	m	struct:AVCodecParameters	typeref:typename:int
seekable	lib/ffmpeg/include/libavformat/avio.h	/^    int seekable;$/;"	m	struct:AVIOContext	typeref:typename:int
seg	src/Features/Speedrun/SpeedrunTimer.cpp	/^			for (Segment seg : split.segments) {$/;"	v	typeref:typename:Segment
seg	src/Features/Speedrun/SpeedrunTimer.cpp	/^		for (Segment seg : g_speedrun.currentSplit) {$/;"	v	typeref:typename:Segment
segTicks	src/Features/Speedrun/SpeedrunTimer.cpp	/^		int segTicks = SpeedrunTimer::GetSegmentTicks();$/;"	v	typeref:typename:int
segmentEndTick	src/Features/Renderer.cpp	/^int Renderer::segmentEndTick = -1;$/;"	m	class:Renderer	typeref:typename:int
segmentTicks	src/Features/Demo/Demo.hpp	/^	int32_t segmentTicks;$/;"	m	class:Demo	typeref:typename:int32_t
segments	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::vector<Segment> segments;$/;"	m	struct:SplitInfo	typeref:typename:std::vector<Segment>	file:
select_active	src/Features/Stitcher.cpp	/^	bool select_active;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:bool	file:
select_done	src/Features/Stitcher.cpp	/^	bool select_done;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:bool	file:
select_edge	src/Features/Stitcher.cpp	/^	int select_edge; \/\/ 0 = top, 1 = right, 2 = bottom, 3 = left$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
select_x0	src/Features/Stitcher.cpp	/^	int select_x0;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
select_x1	src/Features/Stitcher.cpp	/^	int select_x1;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
select_y0	src/Features/Stitcher.cpp	/^	int select_y0;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
select_y1	src/Features/Stitcher.cpp	/^	int select_y1;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
selected	src/Features/Hud/VphysHud.cpp	/^	void *selected = hitbox ? m_pShadowCrouch : m_pShadowStand;$/;"	v	typeref:typename:void *
selector	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::SocketSelector selector;$/;"	m	class:NetworkManager	typeref:typename:sf::SocketSelector
self_size	lib/ffmpeg/include/libavutil/frame.h	/^    uint32_t self_size;$/;"	m	struct:AVRegionOfInterest	typeref:typename:uint32_t
sem	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkSemaphore sem[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVkFrame	typeref:typename:VkSemaphore[]
semimajor_axis_external_ellipse	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint16_t semimajor_axis_external_ellipse;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint16_t
semimajor_axis_internal_ellipse	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint16_t semimajor_axis_internal_ellipse;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint16_t
semiminor_axis_external_ellipse	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint16_t semiminor_axis_external_ellipse;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint16_t
sendAll	src/Features/Bot/BotServer.cpp	/^static void sendAll(const std::vector<uint8_t> &buf) {$/;"	f	typeref:typename:void	file:
sendAll	src/Features/Tas/TasServer.cpp	/^static void sendAll(const std::vector<uint8_t> &buf) {$/;"	f	typeref:typename:void	file:
sendCoopPacket	src/Features/Speedrun/SpeedrunTimer.cpp	/^static void sendCoopPacket(PacketType t, std::string *splitName = NULL, int newSplit = -1) {$/;"	f	typeref:typename:void	file:
send_frame	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*send_frame)(struct AVCodecContext *avctx, const struct AVFrame *frame);$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext * avctx,const struct AVFrame * frame)
separator	src/Features/Hud/InputHud.cpp	/^		auto separator = fullArg.find('=');$/;"	v	typeref:typename:auto
seqs	src/Features/ConfigPlus.cpp	/^std::vector<Seq> seqs;$/;"	v	typeref:typename:std::vector<Seq>
server	src/Event.hpp	/^		bool server;$/;"	m	struct:Event::EventData	typeref:typename:bool
server	src/Modules/Server.cpp	/^Server *server;$/;"	v	typeref:typename:Server *
serverClassesFile	src/Features/ClassDumper.hpp	/^	std::string serverClassesFile;$/;"	m	class:ClassDumper	typeref:typename:std::string
serverCount	src/Utils/SDK.hpp	/^	int serverCount;          \/\/ 84$/;"	m	struct:CGlobalVars	typeref:typename:int
serverDataMapFile	src/Features/DataMapDumper.hpp	/^	std::string serverDataMapFile;$/;"	m	class:DataMapDumper	typeref:typename:std::string
serverIP	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::IpAddress serverIP;$/;"	m	class:NetworkManager	typeref:typename:sf::IpAddress
serverName	src/Features/Demo/Demo.hpp	/^	char serverName[260];$/;"	m	class:Demo	typeref:typename:char[260]
serverPort	src/Features/Demo/NetworkGhostPlayer.hpp	/^	unsigned short int serverPort;$/;"	m	class:NetworkManager	typeref:typename:unsigned short int
serverResult	src/Features/DataMapDumper.hpp	/^	std::vector<std::vector<uintptr_t>> serverResult;$/;"	m	class:DataMapDumper	typeref:typename:std::vector<std::vector<uintptr_t>>
session	lib/ffmpeg/include/libavcodec/qsv.h	/^    mfxSession session;$/;"	m	struct:AVQSVContext	typeref:typename:mfxSession
session	lib/ffmpeg/include/libavcodec/videotoolbox.h	/^    VTDecompressionSessionRef session;$/;"	m	struct:AVVideotoolboxContext	typeref:typename:VTDecompressionSessionRef
session	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^    mfxSession session;$/;"	m	struct:AVQSVDeviceContext	typeref:typename:mfxSession
session	src/Features/Routing/EntityInspector.hpp	/^	int session;$/;"	m	struct:InspectionItem	typeref:typename:int
session	src/Features/Session.cpp	/^Session *session;$/;"	v	typeref:typename:Session *
sessions	src/Features/Summary.cpp	/^	auto sessions = summary->items.size();$/;"	v	typeref:typename:auto
setAircontrol	src/Modules/Server.cpp	/^static void setAircontrol(int val) {$/;"	f	typeref:typename:void	file:
setAngleTool	src/Features/Tas/TasTools/SetAngleTool.cpp	/^SetAngleTool setAngleTool[2] = {{0}, {1}};$/;"	v	typeref:typename:SetAngleTool[2]
setBitOfReversedStream	src/Utils/lodepng.cpp	/^static void setBitOfReversedStream(size_t *bitpointer, unsigned char *bitstream, unsigned char b/;"	f	typeref:typename:void	file:
setBitOfReversedStream0	src/Utils/lodepng.cpp	/^static void setBitOfReversedStream0(size_t *bitpointer, unsigned char *bitstream, unsigned char /;"	f	typeref:typename:void	file:
setPrimitiveType	src/Features/OverlayRender.cpp	/^static void setPrimitiveType(uint8_t type) {$/;"	f	typeref:typename:void	file:
setTimerAction	src/Features/Speedrun/SpeedrunTimer.cpp	/^static void setTimerAction(TimerAction action) {$/;"	f	typeref:typename:void	file:
set_color	src/Features/Demo/GhostEntity.hpp	/^	static Color set_color;$/;"	m	class:GhostEntity	typeref:typename:Color
severity	src/Utils/SDK.hpp	/^	LoggingSeverity severity;$/;"	m	struct:LoggingContext	typeref:typename:LoggingSeverity
sf	lib/SFML/include/SFML/Config.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/Ftp.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/Http.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/IpAddress.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/Packet.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/Socket.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/SocketHandle.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/SocketSelector.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/TcpListener.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/TcpSocket.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/Network/UdpSocket.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Clock.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Err.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/FileInputStream.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/InputStream.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Lock.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/MemoryInputStream.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Mutex.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/NativeActivity.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/NonCopyable.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Sleep.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/String.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Thread.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/ThreadLocal.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/ThreadLocalPtr.inl	/^namespace sf$/;"	n	file:
sf	lib/SFML/include/SFML/System/Time.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Utf.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Vector2.hpp	/^namespace sf$/;"	n
sf	lib/SFML/include/SFML/System/Vector3.hpp	/^namespace sf$/;"	n
shape	src/Utils/json11.hpp	/^		typedef std::initializer_list<std::pair<std::string, Type>> shape;$/;"	t	class:json11::Json	typeref:typename:std::initializer_list<std::pair<std::string,Type>>
shift	lib/ffmpeg/include/libavutil/pixdesc.h	/^    int shift;$/;"	m	struct:AVComponentDescriptor	typeref:typename:int
short_seek_get	lib/ffmpeg/include/libavformat/avio.h	/^    int (*short_seek_get)(void *opaque);$/;"	m	struct:AVIOContext	typeref:typename:int (*)(void * opaque)
short_seek_threshold	lib/ffmpeg/include/libavformat/avio.h	/^    int short_seek_threshold;$/;"	m	struct:AVIOContext	typeref:typename:int
shouldDraw	src/Features/Hud/AimPointHud.cpp	/^static bool shouldDraw() {$/;"	f	typeref:typename:bool	file:
shouldFollowLine	src/Features/Tas/TasTools/StrafeTool.hpp	/^	bool shouldFollowLine = false;$/;"	m	class:AutoStrafeTool	typeref:typename:bool
shouldPauseForSync	src/Modules/Engine.hpp	/^	bool shouldPauseForSync = false;$/;"	m	class:Engine	typeref:typename:bool
shouldSuppressPause	src/Modules/Engine.hpp	/^	bool shouldSuppressPause = false;$/;"	m	class:Engine	typeref:typename:bool
should_run	src/Features/ConfigPlus.cpp	/^	bool should_run = EvalCondition(cond);$/;"	v	typeref:typename:bool
showfilename	lib/curl/include/curl/curl.h	/^  char *showfilename;               \/* The file name to show. If not set, the$/;"	m	struct:curl_httppost	typeref:typename:char *
sib	lib/minhook/hde/hde32.h	/^    uint8_t sib;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
sib	lib/minhook/hde/hde64.h	/^    uint8_t sib;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
sib_base	lib/minhook/hde/hde32.h	/^    uint8_t sib_base;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
sib_base	lib/minhook/hde/hde64.h	/^    uint8_t sib_base;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
sib_index	lib/minhook/hde/hde32.h	/^    uint8_t sib_index;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
sib_index	lib/minhook/hde/hde64.h	/^    uint8_t sib_index;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
sib_scale	lib/minhook/hde/hde32.h	/^    uint8_t sib_scale;$/;"	m	struct:__anon296988db0108	typeref:typename:uint8_t
sib_scale	lib/minhook/hde/hde64.h	/^    uint8_t sib_scale;$/;"	m	struct:__anon296b36800108	typeref:typename:uint8_t
sidePadding	src/Features/Hud/Toasts.cpp	/^	int sidePadding = compact ? COMPACT_SIDE_PAD : SIDE_PAD;$/;"	v	typeref:typename:int
side_data	lib/ffmpeg/include/libavcodec/packet.h	/^    AVPacketSideData *side_data;$/;"	m	struct:AVPacket	typeref:typename:AVPacketSideData *
side_data	lib/ffmpeg/include/libavformat/avformat.h	/^    AVPacketSideData *side_data;$/;"	m	struct:AVStream	typeref:typename:AVPacketSideData *
side_data	lib/ffmpeg/include/libavutil/frame.h	/^    AVFrameSideData **side_data;$/;"	m	struct:AVFrame	typeref:typename:AVFrameSideData **
side_data_elems	lib/ffmpeg/include/libavcodec/packet.h	/^    int side_data_elems;$/;"	m	struct:AVPacket	typeref:typename:int
side_data_only_packets	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int side_data_only_packets;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
sidemove	src/Utils/SDK.hpp	/^	float sidemove;         \/\/ 28$/;"	m	struct:CUserCmd	typeref:typename:float
signOnLength	src/Features/Demo/Demo.hpp	/^	int32_t signOnLength;$/;"	m	class:Demo	typeref:typename:int32_t
signature	src/Utils/Memory.hpp	/^		const char *signature;$/;"	m	struct:Memory::Pattern	typeref:typename:const char *
signbits	src/Utils/SDK.hpp	/^	unsigned char signbits;$/;"	m	struct:cplane_t	typeref:typename:unsigned char
signonState	src/Features/Session.hpp	/^	int signonState;$/;"	m	class:Session	typeref:typename:int
simTicksThisFrame	src/Utils/SDK.hpp	/^	int simTicksThisFrame;          \/\/ 36$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
simulating	src/Event.hpp	/^		bool simulating;$/;"	m	struct:Event::EventData	typeref:typename:bool
sink_links	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterLink **sink_links;$/;"	m	struct:AVFilterGraph	typeref:typename:AVFilterLink **
sink_links_count	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int sink_links_count;$/;"	m	struct:AVFilterGraph	typeref:typename:int
sixteenbit	src/Utils/lodepng.cpp	/^	unsigned char sixteenbit; \/*needs more than 8 bits per channel*\/$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
sixteenbit_done	src/Utils/lodepng.cpp	/^	unsigned char sixteenbit_done;$/;"	m	struct:ColorProfile	typeref:typename:unsigned char	file:
size	lib/curl/include/curl/curl.h	/^  curl_off_t size;$/;"	m	struct:curl_fileinfo	typeref:typename:curl_off_t
size	lib/ffmpeg/include/libavcodec/packet.h	/^    int      size;$/;"	m	struct:AVPacketSideData	typeref:typename:int
size	lib/ffmpeg/include/libavcodec/packet.h	/^    int   size;$/;"	m	struct:AVPacket	typeref:typename:int
size	lib/ffmpeg/include/libavformat/avformat.h	/^    int size:30; \/\/Yeah, trying to keep the size of this small to reduce memory requirements (/;"	m	struct:AVIndexEntry	typeref:typename:int:30
size	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t size;                         \/**< File size in bytes, -1 if unknown. *\/$/;"	m	struct:AVIODirEntry	typeref:typename:int64_t
size	lib/ffmpeg/include/libavutil/buffer.h	/^    int      size;$/;"	m	struct:AVBufferRef	typeref:typename:int
size	lib/ffmpeg/include/libavutil/frame.h	/^    int      size;$/;"	m	struct:AVFrameSideData	typeref:typename:int
size	lib/ffmpeg/include/libavutil/hwcontext_drm.h	/^    size_t size;$/;"	m	struct:AVDRMObjectDescriptor	typeref:typename:size_t
size	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    size_t size[AV_NUM_DATA_POINTERS];$/;"	m	struct:AVVkFrame	typeref:typename:size_t[]
size	lib/minhook/hook.c	/^    UINT        size;       \/\/ Actual number of data items$/;"	m	struct:__anoncf0f1fd10108	typeref:typename:UINT	file:
size	lib/minhook/hook.c	/^    UINT    size;           \/\/ Actual number of data items$/;"	m	struct:_FROZEN_THREADS	typeref:typename:UINT	file:
size	src/Features/ConfigPlus.cpp	/^			size_t size = strlen(args[i]) + 6;$/;"	v	typeref:typename:size_t
size	src/Features/ConfigPlus.cpp	/^	int size = g_svars.size();$/;"	v	typeref:typename:int
size	src/Features/PlayerTrace.cpp	/^	size_t size = trace->positions[0].size();$/;"	v	typeref:typename:size_t
size	src/Features/SegmentedTools.cpp	/^		size_t size = cmdstr.size() + 6;$/;"	v	typeref:typename:size_t
size	src/Features/Speedrun/CategoryCreator.cpp	/^		Vector size = start - end;$/;"	v	typeref:typename:Vector
size	src/Features/Speedrun/Rules.hpp	/^	Vector size;$/;"	m	struct:PortalPlacementRule	typeref:typename:Vector
size	src/Features/Speedrun/Rules.hpp	/^	Vector size;$/;"	m	struct:ZoneTriggerRule	typeref:typename:Vector
size	src/Utils/Memory.hpp	/^		size_t size;$/;"	m	class:Memory::Patch	typeref:typename:size_t
size	src/Utils/Memory.hpp	/^		uintptr_t size;$/;"	m	struct:Memory::ModuleInfo	typeref:typename:uintptr_t
size	src/Utils/lodepng.cpp	/^	size_t size;      \/*size in number of unsigned longs*\/$/;"	m	struct:uivector	typeref:typename:size_t	file:
size	src/Utils/lodepng.cpp	/^	size_t size;      \/*used size*\/$/;"	m	struct:ucvector	typeref:typename:size_t	file:
skip_alpha	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int skip_alpha;$/;"	m	struct:AVCodecContext	typeref:typename:int
skip_bottom	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int skip_bottom;$/;"	m	struct:AVCodecContext	typeref:typename:int
skip_byte_block	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t skip_byte_block;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint32_t
skip_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int skip_count;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int
skip_estimate_duration_from_pts	lib/ffmpeg/include/libavformat/avformat.h	/^    int skip_estimate_duration_from_pts;$/;"	m	struct:AVFormatContext	typeref:typename:int
skip_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVDiscard skip_frame;$/;"	m	struct:AVCodecContext	typeref:enum:AVDiscard
skip_idct	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVDiscard skip_idct;$/;"	m	struct:AVCodecContext	typeref:enum:AVDiscard
skip_initial_bytes	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t skip_initial_bytes;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
skip_loop_filter	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVDiscard skip_loop_filter;$/;"	m	struct:AVCodecContext	typeref:enum:AVDiscard
skip_samples	lib/ffmpeg/include/libavformat/avformat.h	/^    int skip_samples;$/;"	m	struct:AVStream	typeref:typename:int
skip_to_keyframe	lib/ffmpeg/include/libavformat/avformat.h	/^    int skip_to_keyframe;$/;"	m	struct:AVStream	typeref:typename:int
skip_top	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int skip_top;$/;"	m	struct:AVCodecContext	typeref:typename:int
slice_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int slice_count;$/;"	m	struct:AVCodecContext	typeref:typename:int
slice_flags	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int slice_flags;$/;"	m	struct:AVCodecContext	typeref:typename:int
slice_offset	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int *slice_offset;$/;"	m	struct:AVCodecContext	typeref:typename:int *
slices	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int slices;$/;"	m	struct:AVCodecContext	typeref:typename:int
slot	src/Cheats.cpp	/^	int slot = args.ArgC() >= 2 ? atoi(args[1]) : 0;$/;"	v	typeref:typename:int
slot	src/Event.hpp	/^		int slot;$/;"	m	struct:Event::EventData	typeref:typename:int
slot	src/Features/Hud/Hud.hpp	/^	int slot = 0;$/;"	m	class:HudContext	typeref:typename:int
slot	src/Features/PlayerTrace.cpp	/^	int slot = (args.ArgC()>=3 && engine->IsCoop()) ? std::atoi(args[2]) : 0;$/;"	v	typeref:typename:int
slot	src/Features/Speedrun/Rules.hpp	/^	std::optional<int> slot;$/;"	m	struct:SpeedrunRule	typeref:typename:std::optional<int>
slot	src/Features/Tas/TasPlayer.cpp	/^		int slot = g_replayTas[0].size() == 0 ? 1 : 0;$/;"	v	typeref:typename:int
slot	src/Features/Tas/TasPlayer.hpp	/^	int slot;$/;"	m	struct:TasPlayerInfo	typeref:typename:int
slot	src/Features/Tas/TasTool.hpp	/^	int slot;$/;"	m	class:TasTool	typeref:typename:int
slot	src/Modules/Server.cpp	/^	int slot = args.ArgC() == 2 ? atoi(args[1]) : 0;$/;"	v	typeref:typename:int
snd_linear_count	src/Offsets.cpp	/^	int snd_linear_count;$/;"	v	namespace:Offsets	typeref:typename:int
snd_p	src/Offsets.cpp	/^	int snd_p;$/;"	v	namespace:Offsets	typeref:typename:int
snd_surround_speakers	src/Features/Renderer.cpp	/^static Variable snd_surround_speakers;$/;"	v	typeref:typename:Variable	file:
snd_vol	src/Offsets.cpp	/^	int snd_vol;$/;"	v	namespace:Offsets	typeref:typename:int
snprintf	src/Utils/json11.hpp	/^#			define snprintf /;"	d
sock	src/Features/Bot/BotServer.cpp	/^	SOCKET sock;$/;"	m	struct:ClientData	typeref:typename:SOCKET	file:
sock	src/Features/Tas/TasServer.cpp	/^	SOCKET sock;$/;"	m	struct:ClientData	typeref:typename:SOCKET	file:
socktype	lib/curl/include/curl/curl.h	/^  int socktype;$/;"	m	struct:curl_sockaddr	typeref:typename:int
sort_coins	src/Utils/lodepng.cpp	/^static void sort_coins(Coin *data, size_t amount) {$/;"	f	typeref:typename:void	file:
source	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int32_t source;$/;"	m	struct:AVMotionVector	typeref:typename:int32_t
source	src/Features/Stats/JumpStats.hpp	/^	Vector source;$/;"	m	class:JumpStats	typeref:typename:Vector
spacing	src/Features/Hud/Hud.hpp	/^	int spacing = 0;$/;"	m	class:HudContext	typeref:typename:int
spatial_cplx_masking	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float spatial_cplx_masking;$/;"	m	struct:AVCodecContext	typeref:typename:float
spawnTick	src/Features/TimescaleDetect.hpp	/^	int spawnTick;$/;"	m	class:TimescaleDetect	typeref:typename:int
spectator	src/Features/Demo/GhostEntity.hpp	/^	bool spectator;$/;"	m	class:GhostEntity	typeref:typename:bool
spectator	src/Features/Demo/NetworkGhostPlayer.hpp	/^	bool spectator;$/;"	m	class:NetworkManager	typeref:typename:bool
speed	src/Features/Hud/VelocityGraph.cpp	/^	int speed;$/;"	m	struct:VelocityData	typeref:typename:int	file:
speed	src/Features/PlayerTrace.cpp	/^	float speed;$/;"	m	struct:TraceHoverInfo	typeref:typename:float	file:
speed	src/Features/Tas/TasTools/StrafeTool.hpp	/^	float speed;$/;"	m	struct:AutoStrafeSpeed	typeref:typename:float
speedrunHud	src/Features/Hud/SpeedrunHud.cpp	/^SpeedrunHud speedrunHud;$/;"	v	typeref:typename:SpeedrunHud
speeds	src/Features/Hud/Hud.cpp	/^	static float speeds[2];$/;"	v	typeref:typename:float[2]	file:
split	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*split)(AVCodecContext *avctx, const uint8_t *buf, int buf_size);$/;"	m	struct:AVCodecParser	typeref:typename:int (*)(AVCodecContext * avctx,const uint8_t * buf,int buf_size)
split	src/Features/Speedrun/SpeedrunTimer.cpp	/^	for (SplitInfo split : g_speedrun.splits) {$/;"	v	typeref:typename:SplitInfo
splitIntoLines	src/Features/Hud/Toasts.cpp	/^static std::vector<std::string> splitIntoLines(Surface::HFont font, std::string text, int maxWid/;"	f	typeref:typename:std::vector<std::string>	file:
splitTicks	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::Uint32 splitTicks = -1;$/;"	m	class:NetworkManager	typeref:typename:sf::Uint32
splitTicksTotal	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::Uint32 splitTicksTotal = -1;$/;"	m	class:NetworkManager	typeref:typename:sf::Uint32
splits	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::vector<SplitInfo> splits;$/;"	m	struct:__anon77a6dab70108	typeref:typename:std::vector<SplitInfo>	file:
splits	src/Features/Stats/Sync.hpp	/^	std::vector<float> splits;$/;"	m	class:Sync	typeref:typename:std::vector<float>
squishForce	src/Features/Demo/GhostRenderer.hpp	/^	float squishForce;$/;"	m	class:GhostRenderer	typeref:typename:float
src	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterContext *src;       \/\/\/< source filter$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterContext *
src/Version.hpp	Makefile	/^src\/Version.hpp: .FORCE$/;"	t
src_x	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int16_t src_x, src_y;$/;"	m	struct:AVMotionVector	typeref:typename:int16_t
src_x	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int src_x, src_y;$/;"	m	struct:AVVideoBlockParams	typeref:typename:int
src_y	lib/ffmpeg/include/libavutil/motion_vector.h	/^    int16_t src_x, src_y;$/;"	m	struct:AVMotionVector	typeref:typename:int16_t
src_y	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int src_x, src_y;$/;"	m	struct:AVVideoBlockParams	typeref:typename:int
srcpad	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVFilterPad *srcpad;        \/\/\/< output pad on the source filter$/;"	m	struct:AVFilterLink	typeref:typename:AVFilterPad *
ss_force_primary_fullscreen	src/Features/Camera.cpp	/^Variable ss_force_primary_fullscreen;$/;"	v	typeref:typename:Variable
ssl_version	lib/curl/include/curl/curl.h	/^  const char *ssl_version;  \/* human readable string *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
ssl_version_num	lib/curl/include/curl/curl.h	/^  long ssl_version_num;     \/* not used anymore, always 0 *\/$/;"	m	struct:curl_version_info_data	typeref:typename:long
ssprintf	src/Utils.cpp	/^std::string Utils::ssprintf(const char *fmt, ...) {$/;"	f	class:Utils	typeref:typename:std::string
start	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start, end;     \/\/\/< chapter start\/end time in time_base units$/;"	m	struct:AVChapter	typeref:typename:int64_t
start	lib/ffmpeg/include/libavutil/timecode.h	/^    int start;          \/\/\/< timecode frame start (first base frame number)$/;"	m	struct:__anon74cc4c7d0108	typeref:typename:int
start	src/Cheats.cpp	/^	Vector start, end;$/;"	m	struct:DrawLineInfo	typeref:typename:Vector	file:
start	src/Features/Routing/Ruler.hpp	/^	Vector start;$/;"	m	struct:Ruler	typeref:typename:Vector
start	src/Features/Speedrun/CategoryCreator.cpp	/^		Vector start = g_placementStart;$/;"	v	typeref:typename:Vector
start	src/Features/Speedrun/SpeedrunTimer.cpp	/^	char start[16];$/;"	m	struct:TimerInterface	typeref:typename:char[16]	file:
start	src/Features/Stats/Sync.hpp	/^	std::chrono::time_point<std::chrono::steady_clock> start;$/;"	m	class:Sync	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>
startInfo	src/Features/Tas/TasPlayer.hpp	/^	TasStartInfo startInfo;$/;"	m	class:TasPlayer	typeref:typename:TasStartInfo
startNetDump	src/Features/Demo/NetworkGhostPlayer.cpp	/^static void startNetDump() {$/;"	f	typeref:typename:void	file:
startRender	src/Features/Renderer.cpp	/^static void startRender() {$/;"	f	typeref:typename:void	file:
startSessionTick	src/Features/PlayerTrace.hpp	/^	int startSessionTick;$/;"	m	struct:Trace	typeref:typename:int
startShading	src/Features/OverlayRender.cpp	/^void OverlayRender::startShading(Vector point) {$/;"	f	class:OverlayRender	typeref:typename:void
startTasTick	src/Features/PlayerTrace.hpp	/^	int startTasTick;$/;"	m	struct:Trace	typeref:typename:int
startTick	src/Features/Tas/TasPlayer.hpp	/^	int startTick = 0;    \/\/ used to store the absolute tick in which player started playing the /;"	m	class:TasPlayer	typeref:typename:int
startTick	src/Features/TimescaleDetect.hpp	/^	int startTick;$/;"	m	class:TimescaleDetect	typeref:typename:int
startTickTime	src/Features/TimescaleDetect.hpp	/^	std::chrono::time_point<std::chrono::system_clock> startTickTime;$/;"	m	class:TimescaleDetect	typeref:typename:std::chrono::time_point<std::chrono::system_clock>
start_display_time	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint32_t start_display_time; \/* relative to packet pts, in ms *\/$/;"	m	struct:AVSubtitle	typeref:typename:uint32_t
start_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*start_frame)(AVCodecContext *avctx, const uint8_t *buf, uint32_t buf_size);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx,const uint8_t * buf,uint32_t buf_size)
start_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int start_frame;$/;"	m	struct:RcOverride	typeref:typename:int
start_mv_blocks_num	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             start_mv_blocks_num;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
start_skip_samples	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start_skip_samples;$/;"	m	struct:AVStream	typeref:typename:int64_t
start_time	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start_time;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
start_time	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start_time;$/;"	m	struct:AVProgram	typeref:typename:int64_t
start_time	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start_time;$/;"	m	struct:AVStream	typeref:typename:int64_t
start_time_realtime	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t start_time_realtime;$/;"	m	struct:AVFormatContext	typeref:typename:int64_t
startedTransitionFadeout	src/Modules/Engine.hpp	/^	bool startedTransitionFadeout = false;$/;"	m	class:Engine	typeref:typename:bool
startmovie_cbk	src/Features/Renderer.cpp	/^static void startmovie_cbk(const CCommand &args) {$/;"	f	typeref:typename:void	file:
startmovie_origCbk	src/Features/Renderer.cpp	/^static _CommandCallback startmovie_origCbk;$/;"	v	typeref:typename:_CommandCallback	file:
startpos	src/Utils/SDK.hpp	/^	Vector startpos;$/;"	m	struct:CBaseTrace	typeref:typename:Vector
startsWith	src/Modules/EngineDemoPlayer.cpp	/^static bool startsWith(const char *pre, const char *str) {$/;"	f	typeref:typename:bool	file:
startsolid	src/Utils/SDK.hpp	/^	bool startsolid;$/;"	m	struct:CBaseTrace	typeref:typename:bool
startspot	src/Utils/SDK.hpp	/^	char *startspot;          \/\/ 68$/;"	m	struct:CGlobalVars	typeref:typename:char *
stat	src/Features/Stats/Stats.cpp	/^	auto stat = stats->Get(GET_SLOT());$/;"	v	typeref:typename:auto
stat	src/Features/Stats/Stats.cpp	/^	auto stat = stats->Get(ctx->slot);$/;"	v	typeref:typename:auto
stat	src/Features/Stats/Stats.cpp	/^	auto stat = stats->Get(nSlot);$/;"	v	typeref:typename:auto
state	lib/ffmpeg/include/libavutil/lfg.h	/^    unsigned int state[64];$/;"	m	struct:AVLFG	typeref:typename:unsigned int[64]
state	lib/ffmpeg/include/libavutil/rc4.h	/^    uint8_t state[256];$/;"	m	struct:AVRC4	typeref:typename:uint8_t[256]
state	src/Cheats.cpp	/^	auto state = !*engine->m_bWaitEnabled;$/;"	v	typeref:typename:auto
state	src/Features/Camera.cpp	/^		for (auto const &state : camera->states) {$/;"	v	typeref:typename:auto const &
state	src/Features/Tas/TasController.hpp	/^	bool state = false;$/;"	m	struct:TasControllerButton	typeref:typename:bool
state	src/Utils/SDK.hpp	/^		int state;$/;"	m	struct:kbutton_t::Split_t	typeref:typename:int
states	src/Features/Camera.hpp	/^	std::map<int, CameraState> states;$/;"	m	class:Camera	typeref:typename:std::map<int,CameraState>
static_null	src/Utils/json11.cpp	/^	static const Json &static_null() {$/;"	f	namespace:json11	typeref:typename:const Json &	file:
statics	src/Utils/json11.cpp	/^	static const Statics &statics() {$/;"	f	namespace:json11	typeref:typename:const Statics &	file:
stats	src/Features/Stats/Stats.cpp	/^Stats *stats;$/;"	v	typeref:typename:Stats *
statsCounter	src/Features/Stats/StatsCounter.cpp	/^StatsCounter *statsCounter;$/;"	v	typeref:typename:StatsCounter *
stats_in	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *stats_in;$/;"	m	struct:AVCodecContext	typeref:typename:char *
stats_out	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *stats_out;$/;"	m	struct:AVCodecContext	typeref:typename:char *
status_change_timestamp	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t status_change_timestamp;      \/**< Time of last status change in microseconds since/;"	m	struct:AVIODirEntry	typeref:typename:int64_t
status_in	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int status_in;$/;"	m	struct:AVFilterLink	typeref:typename:int
status_in_pts	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int64_t status_in_pts;$/;"	m	struct:AVFilterLink	typeref:typename:int64_t
status_out	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int status_out;$/;"	m	struct:AVFilterLink	typeref:typename:int
step	lib/ffmpeg/include/libavutil/pixdesc.h	/^    int step;$/;"	m	struct:AVComponentDescriptor	typeref:typename:int
stepCounter	src/Features/StepCounter.cpp	/^StepCounter *stepCounter;$/;"	v	typeref:typename:StepCounter *
stepSoundTime	src/Features/StepCounter.hpp	/^	float stepSoundTime;$/;"	m	class:StepCounter	typeref:typename:float
step_minus1	lib/ffmpeg/include/libavutil/pixdesc.h	/^    attribute_deprecated int step_minus1;$/;"	m	struct:AVComponentDescriptor	typeref:typename:attribute_deprecated int
steps	src/Features/Stats/Stats.hpp	/^	StepStats *steps;$/;"	m	struct:PlayerStats	typeref:typename:StepStats *
stitch_view	src/Features/Stitcher.cpp	/^	bool stitch_view;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:bool	file:
stitch_view_mask	src/Features/Stitcher.cpp	/^	bool stitch_view_mask;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:bool	file:
stitch_view_scale	src/Features/Stitcher.cpp	/^	float stitch_view_scale;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:float	file:
stitch_view_selected	src/Features/Stitcher.cpp	/^	size_t stitch_view_selected; \/\/ SIZE_MAX = none$/;"	m	struct:__anonc8a8a2210108	typeref:typename:size_t	file:
stitch_view_x	src/Features/Stitcher.cpp	/^	int stitch_view_x;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
stitch_view_y	src/Features/Stitcher.cpp	/^	int stitch_view_y;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:int	file:
str	lib/ffmpeg/include/libavutil/opt.h	/^        const char *str;$/;"	m	union:AVOption::__anon6e396c26010a	typeref:typename:const char *
str	lib/ffmpeg/include/libavutil/opt.h	/^    const char *str;$/;"	m	struct:AVOptionRange	typeref:typename:const char *
str	src/Features/ConfigPlus.cpp	/^	const char *str;$/;"	m	struct:Token	typeref:typename:const char *	file:
str	src/Modules/Tier1.cpp	/^	std::string str;$/;"	m	struct:BufferedPart	typeref:typename:std::string	file:
str	src/Modules/Tier1.cpp	/^	std::string str;$/;"	m	struct:ConFilterRule	typeref:typename:std::string	file:
str	src/Utils/json11.cpp	/^			const string &str;$/;"	m	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:const string &	file:
strafe	src/Features/Hud/StrafeQuality.cpp	/^	StrafeDir strafe;$/;"	m	struct:TickInfo	typeref:typename:StrafeDir	file:
strafeDir	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeDirection strafeDir = {CURRENT, true, 0.0f};$/;"	m	struct:AutoStrafeParams	typeref:typename:AutoStrafeDirection
strafeQuality	src/Features/Hud/StrafeQuality.cpp	/^StrafeQualityHud strafeQuality;$/;"	v	typeref:typename:StrafeQualityHud
strafeSpeed	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeSpeed strafeSpeed = {SPECIFIED, 10000.0f};$/;"	m	struct:AutoStrafeParams	typeref:typename:AutoStrafeSpeed
strafeSync	src/Features/Stats/Sync.hpp	/^	float strafeSync[2];$/;"	m	class:Sync	typeref:typename:float[2]
strafeSyncHud	src/Features/Hud/StrafeSyncHud.cpp	/^StrafeSyncHud strafeSyncHud;$/;"	v	typeref:typename:StrafeSyncHud
strafeType	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeType strafeType = DISABLED;$/;"	m	struct:AutoStrafeParams	typeref:typename:AutoStrafeType
strategy	src/Utils/json11.cpp	/^			const JsonParse strategy;$/;"	m	struct:json11::__anon6c3a5fa90111::JsonParser	typeref:typename:const JsonParse	file:
strcasecmp	src/Modules/Engine.cpp	/^#	define strcasecmp /;"	d	file:
strdup	src/Features/ConfigPlus.cpp	/^#	define strdup /;"	d	file:
stream	lib/ffmpeg/include/libavutil/hwcontext_cuda.h	/^    CUstream stream;$/;"	m	struct:AVCUDADeviceContext	typeref:typename:CUstream
stream	src/Features/Renderer.cpp	/^	AVStream *stream;$/;"	m	struct:Stream	typeref:typename:AVStream *	file:
stream_identifier	lib/ffmpeg/include/libavformat/avformat.h	/^    int stream_identifier;$/;"	m	struct:AVStream	typeref:typename:int
stream_index	lib/ffmpeg/include/libavcodec/packet.h	/^    int   stream_index;$/;"	m	struct:AVPacket	typeref:typename:int
stream_index	lib/ffmpeg/include/libavformat/avformat.h	/^    unsigned int   *stream_index;$/;"	m	struct:AVProgram	typeref:typename:unsigned int *
streams	lib/ffmpeg/include/libavformat/avformat.h	/^    AVStream **streams;$/;"	m	struct:AVFormatContext	typeref:typename:AVStream **
strength	src/Features/Tas/TasTools/AbsoluteMoveTool.hpp	/^	float strength = 1;$/;"	m	struct:AbsoluteMoveToolParams	typeref:typename:float
strict_std_compliance	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int strict_std_compliance;$/;"	m	struct:AVCodecContext	typeref:typename:int
strict_std_compliance	lib/ffmpeg/include/libavformat/avformat.h	/^    int strict_std_compliance;$/;"	m	struct:AVFormatContext	typeref:typename:int
string_cleanup	src/Utils/lodepng.cpp	/^static void string_cleanup(char **out) {$/;"	f	typeref:typename:void	file:
string_init	src/Utils/lodepng.cpp	/^static void string_init(char **out) {$/;"	f	typeref:typename:void	file:
string_resize	src/Utils/lodepng.cpp	/^static unsigned string_resize(char **out, size_t size) {$/;"	f	typeref:typename:unsigned	file:
string_set	src/Utils/lodepng.cpp	/^static void string_set(char **out, const char *in) {$/;"	f	typeref:typename:void	file:
string_value	src/Utils/json11.cpp	/^		const string &string_value() const override { return m_value; }$/;"	f	class:json11::JsonString	typeref:typename:const string &	file:
string_value	src/Utils/json11.cpp	/^	const string &Json::string_value() const { return m_ptr->string_value(); }$/;"	f	class:json11::Json	typeref:typename:const string &
string_value	src/Utils/json11.cpp	/^	const string &JsonValue::string_value() const { return statics().empty_string; }$/;"	f	class:json11::JsonValue	typeref:typename:const string &
strings	lib/curl/include/curl/curl.h	/^  } strings;$/;"	m	struct:curl_fileinfo	typeref:struct:curl_fileinfo::__anon5737ba340308
sub_charenc	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *sub_charenc;$/;"	m	struct:AVCodecContext	typeref:typename:char *
sub_charenc_mode	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int sub_charenc_mode;$/;"	m	struct:AVCodecContext	typeref:typename:int
sub_text_format	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int sub_text_format;$/;"	m	struct:AVCodecContext	typeref:typename:int
submitRegion	src/Features/Stitcher.cpp	/^static void submitRegion() {$/;"	f	typeref:typename:void	file:
submitTime	src/Features/AutoSubmit.cpp	/^static void submitTime(int score, std::string demopath, bool coop, const char *map_id, std::opti/;"	f	typeref:typename:void	file:
subsample_count	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t subsample_count;$/;"	m	struct:AVEncryptionInfo	typeref:typename:uint32_t
subsamples	lib/ffmpeg/include/libavutil/encryption_info.h	/^    AVSubsampleEncryptionInfo *subsamples;$/;"	m	struct:AVEncryptionInfo	typeref:typename:AVSubsampleEncryptionInfo *
subtitle_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    AVCodec *subtitle_codec;$/;"	m	struct:AVFormatContext	typeref:typename:AVCodec *
subtitle_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID subtitle_codec; \/**< default subtitle codec *\/$/;"	m	struct:AVOutputFormat	typeref:enum:AVCodecID
subtitle_codec_id	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID subtitle_codec_id;$/;"	m	struct:AVFormatContext	typeref:enum:AVCodecID
subtitle_header	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint8_t *subtitle_header;$/;"	m	struct:AVCodecContext	typeref:typename:uint8_t *
subtitle_header_size	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int subtitle_header_size;$/;"	m	struct:AVCodecContext	typeref:typename:int
summary	src/Features/Summary.cpp	/^Summary *summary;$/;"	v	typeref:typename:Summary *
supported_framerates	lib/ffmpeg/include/libavcodec/codec.h	/^    const AVRational *supported_framerates; \/\/\/< array of supported framerates, or NULL if an/;"	m	struct:AVCodec	typeref:typename:const AVRational *
supported_samplerates	lib/ffmpeg/include/libavcodec/codec.h	/^    const int *supported_samplerates;       \/\/\/< array of supported audio samplerates, or NUL/;"	m	struct:AVCodec	typeref:typename:const int *
surface	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    ID3D11VideoDecoderOutputView **surface;$/;"	m	struct:AVD3D11VAContext	typeref:typename:ID3D11VideoDecoderOutputView **
surface	lib/ffmpeg/include/libavcodec/dxva2.h	/^    LPDIRECT3DSURFACE9 *surface;$/;"	m	struct:dxva_context	typeref:typename:LPDIRECT3DSURFACE9 *
surface	lib/ffmpeg/include/libavcodec/mediacodec.h	/^    void *surface;$/;"	m	struct:AVMediaCodecContext	typeref:typename:void *
surface	lib/ffmpeg/include/libavutil/hwcontext_mediacodec.h	/^    void *surface;$/;"	m	struct:AVMediaCodecDeviceContext	typeref:typename:void *
surface	src/Modules/Surface.cpp	/^Surface *surface;$/;"	v	typeref:typename:Surface *
surface	src/Utils/SDK.hpp	/^	csurface_t surface;$/;"	m	struct:CGameTrace	typeref:typename:csurface_t
surfaceEntity	src/Utils/SDK.hpp	/^	CBaseHandle surfaceEntity;$/;"	m	struct:CachedPaintPowerChoiceResult	typeref:typename:CBaseHandle
surfaceFriction	src/Features/Tas/TasPlayer.hpp	/^	float surfaceFriction;$/;"	m	struct:TasPlayerInfo	typeref:typename:float
surfaceNormal	src/Utils/SDK.hpp	/^	Vector surfaceNormal;$/;"	m	struct:CachedPaintPowerChoiceResult	typeref:typename:Vector
surfaceProps	src/Utils/SDK.hpp	/^	short surfaceProps;$/;"	m	struct:csurface_t	typeref:typename:short
surface_count	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    unsigned surface_count;$/;"	m	struct:AVD3D11VAContext	typeref:typename:unsigned
surface_count	lib/ffmpeg/include/libavcodec/dxva2.h	/^    unsigned surface_count;$/;"	m	struct:dxva_context	typeref:typename:unsigned
surface_ids	lib/ffmpeg/include/libavutil/hwcontext_vaapi.h	/^    VASurfaceID     *surface_ids;$/;"	m	struct:AVVAAPIFramesContext	typeref:typename:VASurfaceID *
surface_type	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^    DWORD               surface_type;$/;"	m	struct:AVDXVA2FramesContext	typeref:typename:DWORD
surfaces	lib/ffmpeg/include/libavutil/hwcontext_dxva2.h	/^    IDirect3DSurface9 **surfaces;$/;"	m	struct:AVDXVA2FramesContext	typeref:typename:IDirect3DSurface9 **
surfaces	lib/ffmpeg/include/libavutil/hwcontext_qsv.h	/^    mfxFrameSurface1 *surfaces;$/;"	m	struct:AVQSVFramesContext	typeref:typename:mfxFrameSurface1 *
surround_mix_level	lib/ffmpeg/include/libavutil/downmix_info.h	/^    double surround_mix_level;$/;"	m	struct:AVDownmixInfo	typeref:typename:double
surround_mix_level_ltrt	lib/ffmpeg/include/libavutil/downmix_info.h	/^    double surround_mix_level_ltrt;$/;"	m	struct:AVDownmixInfo	typeref:typename:double
sv_accelerate	src/Modules/Server.cpp	/^Variable sv_accelerate;$/;"	v	typeref:typename:Variable
sv_airaccelerate	src/Modules/Server.cpp	/^Variable sv_airaccelerate;$/;"	v	typeref:typename:Variable
sv_alternateticks	src/Modules/Server.cpp	/^Variable sv_alternateticks;$/;"	v	typeref:typename:Variable
sv_bonus_challenge	src/Modules/Server.cpp	/^Variable sv_bonus_challenge;$/;"	v	typeref:typename:Variable
sv_cheats	src/Modules/Server.cpp	/^Variable sv_cheats;$/;"	v	typeref:typename:Variable
sv_footsteps	src/Modules/Server.cpp	/^Variable sv_footsteps;$/;"	v	typeref:typename:Variable
sv_friction	src/Modules/Server.cpp	/^Variable sv_friction;$/;"	v	typeref:typename:Variable
sv_gravity	src/Modules/Server.cpp	/^Variable sv_gravity;$/;"	v	typeref:typename:Variable
sv_laser_cube_autoaim	src/Cheats.cpp	/^Variable sv_laser_cube_autoaim;$/;"	v	typeref:typename:Variable
sv_maxspeed	src/Modules/Server.cpp	/^Variable sv_maxspeed;$/;"	v	typeref:typename:Variable
sv_maxvelocity	src/Modules/Server.cpp	/^Variable sv_maxvelocity;$/;"	v	typeref:typename:Variable
sv_paintairacceleration	src/Modules/Server.cpp	/^Variable sv_paintairacceleration;$/;"	v	typeref:typename:Variable
sv_portal_players	src/Modules/Engine.cpp	/^Variable sv_portal_players;$/;"	v	typeref:typename:Variable
sv_stopspeed	src/Modules/Server.cpp	/^Variable sv_stopspeed;$/;"	v	typeref:typename:Variable
svar	src/Features/ConfigPlus.cpp	/^		} svar;$/;"	m	union:Condition::__anon19445435030a	typeref:struct:Condition::__anon19445435030a::__anon194454350508	file:
sw_format	lib/ffmpeg/include/libavutil/hwcontext.h	/^    enum AVPixelFormat sw_format;$/;"	m	struct:AVHWFramesContext	typeref:enum:AVPixelFormat
sw_pix_fmt	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVPixelFormat sw_pix_fmt;$/;"	m	struct:AVCodecContext	typeref:enum:AVPixelFormat
swrCtx	src/Features/Renderer.cpp	/^	SwrContext *swrCtx;$/;"	m	struct:Stream	typeref:typename:SwrContext *	file:
swsCtx	src/Features/Renderer.cpp	/^	SwsContext *swsCtx;$/;"	m	struct:Stream	typeref:typename:SwsContext *	file:
symbols	src/Utils/lodepng.cpp	/^	uivector symbols;$/;"	m	struct:Coin	typeref:typename:uivector	file:
syncPauseDone	src/Features/Demo/NetworkGhostPlayer.cpp	/^static bool syncPauseDone = true;$/;"	v	typeref:typename:bool	file:
syncUi	src/Features/Demo/NetworkGhostPlayer.cpp	/^SyncUi syncUi;$/;"	v	typeref:typename:SyncUi
syncedStrafeDelta	src/Features/Stats/Sync.hpp	/^	unsigned syncedStrafeDelta[2];$/;"	m	class:Sync	typeref:typename:unsigned[2]
synchro	src/Features/Stats/Sync.cpp	/^Sync *synchro;$/;"	v	typeref:typename:Sync *
system_id	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint8_t* system_id;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint8_t *
system_id_size	lib/ffmpeg/include/libavutil/encryption_info.h	/^    uint32_t system_id_size;$/;"	m	struct:AVEncryptionInitInfo	typeref:typename:uint32_t
t	src/Features/Hud/Hud.cpp	/^	for (auto &t : sar_hud_text_vals) {$/;"	v	typeref:typename:auto &
t	src/Features/OverlayRender.cpp	/^		for (auto &t : g_text) {$/;"	v	typeref:typename:auto &
t	src/Utils/json11.cpp	/^		const std::shared_ptr<JsonValue> t = make_shared<JsonBoolean>(true);$/;"	m	struct:json11::Statics	typeref:typename:const std::shared_ptr<JsonValue>	file:
tag	src/Features/Hud/Toasts.cpp	/^	const char *tag = args[1], *toast = args[2];$/;"	v	typeref:typename:const char *
tag	src/Features/Hud/Toasts.cpp	/^	std::string tag;$/;"	m	struct:Toast	typeref:typename:std::string	file:
tagLen	src/Features/Hud/Toasts.cpp	/^		size_t tagLen = strlen(tag), toastLen = strlen(toast);$/;"	v	typeref:typename:size_t
take_off	src/Features/Hud/VelocityGraph.cpp	/^static int take_off[2] = {0, 0};$/;"	v	typeref:typename:int[2]	file:
take_off_display_timeout	src/Features/Hud/VelocityGraph.cpp	/^static int take_off_display_timeout[2] = {0, 0};$/;"	v	typeref:typename:int[2]	file:
target	lib/curl/include/curl/curl.h	/^    char *target; \/* pointer to the target filename of a symlink *\/$/;"	m	struct:curl_fileinfo::__anon5737ba340308	typeref:typename:char *
targetVel	src/Features/Tas/TasTools/DecelTool.cpp	/^	float targetVel;$/;"	m	struct:DecelParams	typeref:typename:float	file:
targeted_system_display_actual_peak_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational targeted_system_display_actual_peak_luminance[25][25];$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:AVRational[25][25]
targeted_system_display_actual_peak_luminance_flag	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t targeted_system_display_actual_peak_luminance_flag;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:uint8_t
targeted_system_display_maximum_luminance	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational targeted_system_display_maximum_luminance;$/;"	m	struct:AVDynamicHDRPlus	typeref:typename:AVRational
targetname	src/Features/Speedrun/Rules.hpp	/^	std::string targetname;$/;"	m	struct:EntityInputRule	typeref:typename:std::string
tasAbsoluteMoveTool	src/Features/Tas/TasTools/AbsoluteMoveTool.cpp	/^AbsoluteMoveTool tasAbsoluteMoveTool[2] = {$/;"	v	typeref:typename:AbsoluteMoveTool[2]
tasControllers	src/Features/Tas/TasController.cpp	/^TasController *tasControllers[2];$/;"	v	typeref:typename:TasController * [2]
tasFileName	src/Features/Tas/TasPlayer.hpp	/^	std::string tasFileName[2];$/;"	m	class:TasPlayer	typeref:typename:std::string[2]
tasPlayer	src/Features/Tas/TasPlayer.cpp	/^TasPlayer *tasPlayer;$/;"	v	typeref:typename:TasPlayer *
tas_path	src/Features/Bot/BotServer.hpp	/^	std::string tas_path[2];$/;"	m	struct:TasStatus	typeref:typename:std::string[2]
tas_path	src/Features/Tas/TasServer.hpp	/^	std::string tas_path[2];$/;"	m	struct:TasStatus	typeref:typename:std::string[2]
tcpSocket	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::TcpSocket tcpSocket;$/;"	m	class:NetworkManager	typeref:typename:sf::TcpSocket
td	src/Utils/SDK.hpp	/^	datamap_t *td;                             \/\/ 28\/32$/;"	m	struct:typedescription_t	typeref:typename:datamap_t *
teamplay	src/Utils/SDK.hpp	/^	char teamplay;            \/\/ 79$/;"	m	struct:CGlobalVars	typeref:typename:char
teleporter	src/Features/Teleporter.cpp	/^Teleporter *teleporter;$/;"	v	typeref:typename:Teleporter *
temporal_cplx_masking	lib/ffmpeg/include/libavcodec/avcodec.h	/^    float temporal_cplx_masking;$/;"	m	struct:AVCodecContext	typeref:typename:float
testApiKey	src/Features/AutoSubmit.cpp	/^static void testApiKey() {$/;"	f	typeref:typename:void	file:
text	lib/ffmpeg/include/libavcodec/avcodec.h	/^    char *text;                     \/\/\/< 0 terminated plain UTF-8 text$/;"	m	struct:AVSubtitleRect	typeref:typename:char *
text	src/Features/Hud/Hud.cpp	/^	std::string text;$/;"	m	struct:TextComponent	typeref:typename:std::string	file:
text	src/Features/Hud/InputHud.hpp	/^		std::string text;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:std::string
text	src/Features/Hud/Toasts.cpp	/^	std::string text;$/;"	m	struct:Toast	typeref:typename:std::string	file:
text	src/Features/OverlayRender.cpp	/^	std::string text;$/;"	m	struct:OverlayText	typeref:typename:std::string	file:
textColor	src/Features/Hud/Hud.hpp	/^	Color textColor = Color(255, 255, 255);$/;"	m	class:HudContext	typeref:typename:Color
textColor	src/Features/Hud/InputHud.hpp	/^		Color textColor;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:Color
textFont	src/Features/Hud/InputHud.hpp	/^		int textFont;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:int
textHighlight	src/Features/Hud/InputHud.hpp	/^		Color textHighlight;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:Color
text_compression	src/Utils/lodepng.hpp	/^	unsigned text_compression;$/;"	m	struct:LodePNGEncoderSettings	typeref:typename:unsigned
text_keys	src/Utils/lodepng.hpp	/^	char **text_keys;    \/*the keyword of a text chunk (e.g. "Comment")*\/$/;"	m	struct:LodePNGInfo	typeref:typename:char **
text_num	src/Utils/lodepng.hpp	/^	size_t text_num;     \/*the amount of texts in these char** buffers (there may be more texts in/;"	m	struct:LodePNGInfo	typeref:typename:size_t
text_strings	src/Utils/lodepng.hpp	/^	char **text_strings; \/*the actual text*\/$/;"	m	struct:LodePNGInfo	typeref:typename:char **
texture	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    ID3D11Texture2D *texture;$/;"	m	struct:AVD3D11FrameDescriptor	typeref:typename:ID3D11Texture2D *
texture	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    ID3D11Texture2D *texture;$/;"	m	struct:AVD3D11VAFramesContext	typeref:typename:ID3D11Texture2D *
texture_id	src/Features/Hud/Minimap.cpp	/^	int texture_id;$/;"	m	struct:Minimap	typeref:typename:int	file:
texture_id	src/Features/Stitcher.cpp	/^	int texture_id;$/;"	m	struct:StitchRegion	typeref:typename:int	file:
thread_count	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int thread_count;$/;"	m	struct:AVCodecContext	typeref:typename:int
thread_safe_callbacks	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int thread_safe_callbacks;$/;"	m	struct:AVCodecContext	typeref:typename:int
thread_type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int thread_type;$/;"	m	struct:AVCodecContext	typeref:typename:int
thread_type	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int thread_type;$/;"	m	struct:AVFilterContext	typeref:typename:int
thread_type	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int thread_type;$/;"	m	struct:AVFilterGraph	typeref:typename:int
tick	src/Event.hpp	/^		int tick;$/;"	m	struct:Event::EventData	typeref:typename:int
tick	src/Features/ConfigPlus.cpp	/^	int tick = session->GetTick();$/;"	v	typeref:typename:int
tick	src/Features/Demo/DemoParser.cpp	/^	int tick;$/;"	v	typeref:typename:int
tick	src/Features/Hud/LPHud.cpp	/^	int tick;$/;"	m	struct:LPHudCountHistoryInfo	typeref:typename:int	file:
tick	src/Features/PlayerTrace.cpp	/^	int tick = std::atoi(args[1]);$/;"	v	typeref:typename:int
tick	src/Features/PlayerTrace.cpp	/^	size_t tick;$/;"	m	struct:TraceHoverInfo	typeref:typename:size_t	file:
tick	src/Features/SegmentedTools.cpp	/^	int tick;$/;"	m	struct:WaitEntry	typeref:typename:int	file:
tick	src/Features/Session.cpp	/^		auto tick = (session->isRunning) ? session->GetTick() : 0;$/;"	v	typeref:typename:auto
tick	src/Features/Session.cpp	/^	auto tick = (session->isRunning) ? session->GetTick() : 0;$/;"	v	typeref:typename:auto
tick	src/Features/Speedrun/Categories.cpp	/^	int tick;$/;"	m	struct:ScheduledRule	typeref:typename:int	file:
tick	src/Features/Summary.cpp	/^		auto tick = session->GetTick();$/;"	v	typeref:typename:auto
tick	src/Features/Tas/TasPlayer.cpp	/^		int tick = tasPlayer->GetTick();$/;"	v	typeref:typename:int
tick	src/Features/Tas/TasPlayer.hpp	/^	int tick = 0;$/;"	m	struct:TasFramebulk	typeref:typename:int
tick	src/Features/Tas/TasPlayer.hpp	/^	int tick;$/;"	m	struct:TasPlayerInfo	typeref:typename:int
tick	src/Features/Timer/PauseTimer.cpp	/^	auto tick = pauseTimer->GetTotal();$/;"	v	typeref:typename:auto
tick	src/Features/Timer/Timer.cpp	/^		auto tick = timer->GetTick(engine->GetTick());$/;"	v	typeref:typename:auto
tick	src/Features/Timer/Timer.cpp	/^	auto tick = (!timer->isPaused) ? timer->GetTick(engine->GetTick()) : timer->totalTicks;$/;"	v	typeref:typename:auto
tick	src/Features/Timer/Timer.cpp	/^	auto tick = timer->GetTick(engine->GetTick());$/;"	v	typeref:typename:auto
tick	src/Features/Timer/Timer.cpp	/^	auto tick = timer->GetTick(session->GetTick());$/;"	v	typeref:typename:auto
tick	src/SAR.cpp	/^	auto tick = session->GetTick();$/;"	v	typeref:typename:auto
tickCount	src/Modules/Server.hpp	/^	int tickCount = 0;$/;"	m	class:Server	typeref:typename:int
tickLoadStarted	src/Modules/Engine.hpp	/^	int tickLoadStarted = -1;$/;"	m	class:Engine	typeref:typename:int
tick_count	src/Utils/SDK.hpp	/^	int tick_count;         \/\/ 8$/;"	m	struct:CUserCmd	typeref:typename:int
tick_prev	src/Features/Hud/VelocityGraph.cpp	/^static int tick_prev[2] = {0, 0};$/;"	v	typeref:typename:int[2]	file:
tickcount	src/Modules/Engine.hpp	/^	int *tickcount = nullptr;$/;"	m	class:Engine	typeref:typename:int *
tickcount	src/Offsets.cpp	/^	int tickcount;$/;"	v	namespace:Offsets	typeref:typename:int
tickcount	src/Utils/SDK.hpp	/^	int tickcount;                  \/\/ 24$/;"	m	struct:CGlobalVarsBase	typeref:typename:int
ticks	src/Features/SegmentedTools.cpp	/^	int ticks = std::atoi(args[1]);$/;"	v	typeref:typename:int
ticks	src/Features/Speedrun/SpeedrunTimer.cpp	/^				int ticks = it->second;$/;"	v	typeref:typename:int
ticks	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int ticks;$/;"	m	struct:Segment	typeref:typename:int	file:
ticks	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int ticks;$/;"	m	struct:SplitInfo	typeref:typename:int	file:
ticks	src/Features/Speedrun/SpeedrunTimer.cpp	/^	long ticks = strtol(args[1], &end, 10);$/;"	v	typeref:typename:long
ticks	src/Features/Summary.hpp	/^	int ticks;$/;"	m	struct:SummaryItem	typeref:typename:int
ticks	src/Features/Tas/TasTools/AutoAimTool.cpp	/^	int ticks;$/;"	m	struct:AutoAimParams	typeref:typename:int	file:
ticks	src/Features/Tas/TasTools/SetAngleTool.cpp	/^	int ticks;$/;"	m	struct:SetAngleParams	typeref:typename:int	file:
ticks	src/Features/Timer/PauseTimer.hpp	/^	int ticks;$/;"	m	class:PauseTimer	typeref:typename:int
ticks	src/Features/Timer/TimerAverage.hpp	/^	int ticks;$/;"	m	struct:TimerAverageItem	typeref:typename:int
ticks	src/Features/Timer/TimerCheckPoints.hpp	/^	int ticks;$/;"	m	struct:TimerCheckPointItem	typeref:typename:int
ticksStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^				auto ticksStr = SpeedrunTimer::Format(seg.ticks * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
ticksStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^			auto ticksStr = SpeedrunTimer::Format(seg.ticks * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
ticksStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^		auto ticksStr = SpeedrunTimer::Format(segTicks * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
ticksStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^		auto ticksStr = SpeedrunTimer::Format(split.ticks * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
ticks_per_frame	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int ticks_per_frame;$/;"	m	struct:AVCodecContext	typeref:typename:int
ticktime	src/Features/Tas/TasPlayer.hpp	/^	float ticktime;$/;"	m	struct:TasPlayerInfo	typeref:typename:float
tier1	src/Modules/Tier1.cpp	/^Tier1 *tier1;$/;"	v	typeref:typename:Tier1 *
tiling	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkImageTiling tiling;$/;"	m	struct:AVVkFrame	typeref:typename:VkImageTiling
tiling	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkImageTiling tiling;$/;"	m	struct:AVVulkanFramesContext	typeref:typename:VkImageTiling
time	lib/curl/include/curl/curl.h	/^    char *time;$/;"	m	struct:curl_fileinfo::__anon5737ba340308	typeref:typename:char *
time	lib/curl/include/curl/curl.h	/^  time_t time; \/* always zero! *\/$/;"	m	struct:curl_fileinfo	typeref:typename:time_t
time	src/Event.hpp	/^		float time;$/;"	m	struct:Event::EventData	typeref:typename:float
time	src/Features/Demo/DemoParser.cpp	/^	float time;$/;"	v	typeref:typename:float
time	src/Features/Session.cpp	/^		auto time = engine->ToTime(tick);$/;"	v	typeref:typename:auto
time	src/Features/Summary.cpp	/^		auto time = engine->ToTime(tick);$/;"	v	typeref:typename:auto
time	src/Features/Summary.hpp	/^	float time;$/;"	m	struct:SummaryItem	typeref:typename:float
time	src/Features/Timer/PauseTimer.cpp	/^	auto time = engine->ToTime(tick);$/;"	v	typeref:typename:auto
time	src/Features/Timer/Timer.cpp	/^		auto time = engine->ToTime(tick);$/;"	v	typeref:typename:auto
time	src/Features/Timer/Timer.cpp	/^	auto time = engine->ToTime(tick);$/;"	v	typeref:typename:auto
time	src/Features/Timer/TimerAverage.hpp	/^	float time;$/;"	m	struct:TimerAverageItem	typeref:typename:float
time	src/Features/Timer/TimerCheckPoints.hpp	/^	float time;$/;"	m	struct:TimerCheckPointItem	typeref:typename:float
time	src/Utils/lodepng.hpp	/^	LodePNGTime time;$/;"	m	struct:LodePNGInfo	typeref:typename:LodePNGTime
timeLeft	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::chrono::time_point<std::chrono::steady_clock> timeLeft;$/;"	m	class:NetworkManager	typeref:typename:std::chrono::time_point<std::chrono::steady_clock>
timeOffset	src/Features/Camera.hpp	/^	float timeOffset = 0.0;$/;"	m	class:Camera	typeref:typename:float
timeOffsetRefreshRequested	src/Features/Camera.hpp	/^	bool timeOffsetRefreshRequested = true;$/;"	m	class:Camera	typeref:typename:bool
time_base	lib/ffmpeg/include/libavcodec/avcodec.h	/^    AVRational time_base;$/;"	m	struct:AVCodecContext	typeref:typename:AVRational
time_base	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    AVRational       time_base;             \/* 1\/framerate *\/$/;"	m	struct:AVDVProfile	typeref:typename:AVRational
time_base	lib/ffmpeg/include/libavfilter/avfilter.h	/^    AVRational time_base;$/;"	m	struct:AVFilterLink	typeref:typename:AVRational
time_base	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    AVRational time_base;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:AVRational
time_base	lib/ffmpeg/include/libavformat/avformat.h	/^    AVRational time_base;   \/\/\/< time base in which the start\/end timestamps are specified$/;"	m	struct:AVChapter	typeref:typename:AVRational
time_base	lib/ffmpeg/include/libavformat/avformat.h	/^    AVRational time_base;$/;"	m	struct:AVStream	typeref:typename:AVRational
time_base_in	lib/ffmpeg/include/libavcodec/bsf.h	/^    AVRational time_base_in;$/;"	m	struct:AVBSFContext	typeref:typename:AVRational
time_base_out	lib/ffmpeg/include/libavcodec/bsf.h	/^    AVRational time_base_out;$/;"	m	struct:AVBSFContext	typeref:typename:AVRational
time_defined	src/Utils/lodepng.hpp	/^	unsigned time_defined; \/*set to 1 to make the encoder generate a tIME chunk*\/$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned
timecode_frame_start	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t timecode_frame_start;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated int64_t
timer	src/Features/Timer/Timer.cpp	/^Timer *timer;$/;"	v	typeref:typename:Timer *
timescaleDetect	src/Features/TimescaleDetect.cpp	/^TimescaleDetect *timescaleDetect;$/;"	v	typeref:typename:TimescaleDetect *
timestamp	lib/ffmpeg/include/libavformat/avformat.h	/^    int64_t timestamp;        \/**<$/;"	m	struct:AVIndexEntry	typeref:typename:int64_t
tmpFrame	src/Features/Renderer.cpp	/^	AVFrame *frame, *tmpFrame;$/;"	m	struct:Stream	typeref:typename:AVFrame *	file:
tmp_dir	src/Features/Demo/DemoGhostPlayer.cpp	/^		auto tmp_dir = dir + "_" + std::to_string(counter) + ".dem";$/;"	v	typeref:typename:auto
tmp_dir	src/Modules/EngineDemoPlayer.cpp	/^		auto tmp_dir = dir + name + "_" + std::to_string(counter);$/;"	v	typeref:typename:auto
toAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toBlend	src/Features/Renderer.cpp	/^	int toBlend;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
toBlendEnd	src/Features/Renderer.cpp	/^	int toBlendEnd;         \/\/ Exclusive$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
toBlendStart	src/Features/Renderer.cpp	/^	int toBlendStart;       \/\/ Inclusive$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
toFloat	src/Features/Tas/TasParser.cpp	/^float TasParser::toFloat(std::string str) {$/;"	f	class:TasParser	typeref:typename:float
toInt	src/Features/Tas/TasParser.cpp	/^int TasParser::toInt(std::string &str) {$/;"	f	class:TasParser	typeref:typename:int
toLatin1	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<16>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<32>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	lib/SFML/include/SFML/System/Utf.inl	/^Out Utf<8>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toast	src/Features/Hud/Toasts.cpp	/^	const char *tag = args[1], *toast = args[2];$/;"	v	typeref:typename:const char *
toastHud	src/Features/Hud/Toasts.cpp	/^ToastHud toastHud;$/;"	v	typeref:typename:ToastHud
toastLen	src/Features/Hud/Toasts.cpp	/^		size_t tagLen = strlen(tag), toastLen = strlen(toast);$/;"	v	typeref:typename:size_t
toastMessage	src/Features/Hud/Toasts.cpp	/^static void toastMessage(const void *data, size_t size) {$/;"	f	typeref:typename:void	file:
toastPadding	src/Features/Hud/Toasts.cpp	/^	int toastPadding = compact ? COMPACT_TOAST_PAD : 0;$/;"	v	typeref:typename:int
tok	src/Features/Tas/TasParser.cpp	/^	std::string tok;$/;"	m	struct:TasToken	typeref:typename:std::string	file:
tokenize	src/Features/Tas/TasParser.cpp	/^static std::vector<Line> tokenize(std::ifstream &file) {$/;"	f	typeref:typename:std::vector<Line>	file:
tokens	src/Features/Tas/TasParser.cpp	/^	std::vector<TasToken> tokens;$/;"	m	struct:Line	typeref:typename:std::vector<TasToken>	file:
tone_mapping_flag	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    uint8_t tone_mapping_flag;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:uint8_t
tool	src/Features/Tas/TasTool.hpp	/^	TasTool *tool;$/;"	m	class:TasToolCommand	typeref:typename:TasTool *
toolCmds	src/Features/Tas/TasPlayer.hpp	/^	std::vector<TasToolCommand> toolCmds;$/;"	m	struct:TasFramebulk	typeref:typename:std::vector<TasToolCommand>
top	lib/ffmpeg/include/libavutil/frame.h	/^    int top;$/;"	m	struct:AVRegionOfInterest	typeref:typename:int
top	src/Features/Hud/Minimap.cpp	/^	float top, left, bottom, right;$/;"	m	struct:Minimap	typeref:typename:float	file:
top_field_first	lib/ffmpeg/include/libavcodec/dirac.h	/^    uint8_t top_field_first;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:uint8_t
top_field_first	lib/ffmpeg/include/libavutil/frame.h	/^    int top_field_first;$/;"	m	struct:AVFrame	typeref:typename:int
total	lib/curl/include/curl/curl.h	/^  size_t total; \/* total number of entries to save *\/$/;"	m	struct:curl_index	typeref:typename:size_t
total	src/Features/Speedrun/SpeedrunTimer.cpp	/^		int total = 0;$/;"	v	typeref:typename:int
total	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int total = 0;$/;"	v	typeref:typename:int
total	src/Features/Speedrun/SpeedrunTimer.cpp	/^	int total;$/;"	m	struct:TimerInterface	typeref:typename:int	file:
total	src/Features/Stats/JumpStats.hpp	/^	int total;$/;"	m	class:JumpStats	typeref:typename:int
total	src/Features/Stats/StepStats.hpp	/^	int total;$/;"	m	class:StepStats	typeref:typename:int
totalStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^				auto totalStr = SpeedrunTimer::Format(total * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
totalStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^			auto totalStr = SpeedrunTimer::Format(total * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
totalStr	src/Features/Speedrun/SpeedrunTimer.cpp	/^		auto totalStr = SpeedrunTimer::Format(total * *engine->interval_per_tick);$/;"	v	typeref:typename:auto
totalStrafeDelta	src/Features/Stats/Sync.hpp	/^	unsigned totalStrafeDelta[2];$/;"	m	class:Sync	typeref:typename:unsigned[2]
totalTicks	src/Features/Demo/DemoGhostEntity.hpp	/^	int totalTicks;$/;"	m	class:DemoGhostEntity	typeref:typename:int
totalTicks	src/Features/Demo/DemoParser.cpp	/^	auto totalTicks = 0;$/;"	v	typeref:typename:auto
totalTicks	src/Features/Summary.hpp	/^	int totalTicks;$/;"	m	class:Summary	typeref:typename:int
totalTicks	src/Features/Timer/Timer.hpp	/^	int totalTicks;$/;"	m	class:Timer	typeref:typename:int
totalTime	src/Features/Demo/DemoParser.cpp	/^	auto totalTime = 0.f;$/;"	v	typeref:typename:auto
totalTime	src/Features/Summary.cpp	/^	auto totalTime = engine->ToTime(summary->totalTicks);$/;"	v	typeref:typename:auto
totalTimeInGame	src/Features/Stats/StatsCounter.hpp	/^	float totalTimeInGame;$/;"	m	class:StatsCounter	typeref:typename:float
tr	src/Features/Speedrun/CategoryCreator.cpp	/^		CGameTrace tr;$/;"	v	typeref:typename:CGameTrace
tr	src/Utils/SDK.hpp	/^	CGameTrace tr;$/;"	m	struct:TracePortalPlacementInfo_t	typeref:typename:CGameTrace
trace	src/Features/PlayerTrace.cpp	/^	auto trace = playerTrace->GetTrace(trace_idx);$/;"	v	typeref:typename:auto
trace_idx	src/Features/PlayerTrace.cpp	/^	int trace_idx = std::atoi(args[1]);$/;"	v	typeref:typename:int
trace_idx	src/Features/PlayerTrace.cpp	/^	size_t trace_idx = (args.ArgC()==3) ? std::atoi(args[2]) : 1;$/;"	v	typeref:typename:size_t
trace_idx	src/Features/PlayerTrace.cpp	/^	size_t trace_idx = (args.ArgC()==4) ? std::atoi(args[3]) : 1;$/;"	v	typeref:typename:size_t
trace_idx	src/Features/PlayerTrace.cpp	/^	unsigned trace_idx;$/;"	m	struct:TraceHoverInfo	typeref:typename:unsigned	file:
traces	src/Features/PlayerTrace.hpp	/^	std::map<size_t, Trace> traces;$/;"	m	class:PlayerTrace	typeref:typename:std::map<size_t,Trace>
track_gain	lib/ffmpeg/include/libavutil/replaygain.h	/^    int32_t track_gain;$/;"	m	struct:AVReplayGain	typeref:typename:int32_t
track_peak	lib/ffmpeg/include/libavutil/replaygain.h	/^    uint32_t track_peak;$/;"	m	struct:AVReplayGain	typeref:typename:uint32_t
trailing_padding	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int trailing_padding;$/;"	m	struct:AVCodecContext	typeref:typename:int
trailing_padding	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int trailing_padding;$/;"	m	struct:AVCodecParameters	typeref:typename:int
transition	src/Event.hpp	/^		bool transition;$/;"	m	struct:Event::EventData	typeref:typename:bool
tree	src/Utils/lodepng.cpp	/^	ColorTree tree;         \/*for listing the counted colors, up to 256*\/$/;"	m	struct:ColorProfile	typeref:typename:ColorTree	file:
tree1d	src/Utils/lodepng.cpp	/^	unsigned *tree1d;$/;"	m	struct:HuffmanTree	typeref:typename:unsigned *	file:
tree2d	src/Utils/lodepng.cpp	/^	unsigned *tree2d;$/;"	m	struct:HuffmanTree	typeref:typename:unsigned *	file:
trellis	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int trellis;$/;"	m	struct:AVCodecContext	typeref:typename:int
triple_des	lib/ffmpeg/include/libavutil/des.h	/^    int triple_des;$/;"	m	struct:AVDES	typeref:typename:int
ts_id	lib/ffmpeg/include/libavformat/avformat.h	/^    int ts_id;$/;"	m	struct:AVFormatContext	typeref:typename:int
txt	src/Features/Hud/Hud.cpp	/^	const char *txt;$/;"	v	typeref:typename:const char *
type	lib/curl/include/curl/options.h	/^  curl_easytype type;$/;"	m	struct:curl_easyoption	typeref:typename:curl_easytype
type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVMediaType type;$/;"	m	struct:AVHWAccel	typeref:enum:AVMediaType
type	lib/ffmpeg/include/libavcodec/avcodec.h	/^    enum AVSubtitleType type;$/;"	m	struct:AVSubtitleRect	typeref:enum:AVSubtitleType
type	lib/ffmpeg/include/libavcodec/codec.h	/^    enum AVMediaType type;$/;"	m	struct:AVCodec	typeref:enum:AVMediaType
type	lib/ffmpeg/include/libavcodec/codec_desc.h	/^    enum AVMediaType type;$/;"	m	struct:AVCodecDescriptor	typeref:enum:AVMediaType
type	lib/ffmpeg/include/libavcodec/packet.h	/^    enum AVPacketSideDataType type;$/;"	m	struct:AVPacketSideData	typeref:enum:AVPacketSideDataType
type	lib/ffmpeg/include/libavfilter/avfilter.h	/^    enum AVMediaType type;      \/\/\/< filter media type$/;"	m	struct:AVFilterLink	typeref:enum:AVMediaType
type	lib/ffmpeg/include/libavformat/avio.h	/^    int type;                             \/**< Type of the entry *\/$/;"	m	struct:AVIODirEntry	typeref:typename:int
type	lib/ffmpeg/include/libavutil/frame.h	/^    enum AVFrameSideDataType type;$/;"	m	struct:AVFrameSideData	typeref:enum:AVFrameSideDataType
type	lib/ffmpeg/include/libavutil/hwcontext.h	/^    enum AVHWDeviceType type;$/;"	m	struct:AVHWDeviceContext	typeref:enum:AVHWDeviceType
type	lib/ffmpeg/include/libavutil/opt.h	/^    enum AVOptionType type;$/;"	m	struct:AVOption	typeref:enum:AVOptionType
type	lib/ffmpeg/include/libavutil/stereo3d.h	/^    enum AVStereo3DType type;$/;"	m	struct:AVStereo3D	typeref:enum:AVStereo3DType
type	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    enum AVVideoEncParamsType type;$/;"	m	struct:AVVideoEncParams	typeref:enum:AVVideoEncParamsType
type	src/Features/ConfigPlus.cpp	/^	enum TokenType type;$/;"	m	struct:Token	typeref:enum:TokenType	file:
type	src/Features/ConfigPlus.cpp	/^	} type;$/;"	m	struct:Condition	typeref:enum:Condition::__anon194454350203	file:
type	src/Features/Demo/GhostEntity.cpp	/^	int type = std::atoi(args[1]);$/;"	v	typeref:typename:int
type	src/Features/Hud/Hud.hpp	/^	int type;$/;"	m	class:BaseHud	typeref:typename:int
type	src/Features/Hud/InputHud.hpp	/^		int type;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:int
type	src/Features/Stats/JumpStats.hpp	/^	StatsResultType type;$/;"	m	class:JumpStats	typeref:typename:StatsResultType
type	src/Features/Stats/Stats.cpp	/^	auto type = std::string();$/;"	v	typeref:typename:auto
type	src/Features/Stats/Stats.cpp	/^	std::string type;$/;"	v	typeref:typename:std::string
type	src/Features/Stats/VelocityStats.hpp	/^	StatsResultType type;$/;"	m	class:VelocityStats	typeref:typename:StatsResultType
type	src/Features/Tas/TasParser.cpp	/^	} type;$/;"	m	struct:TasToken	typeref:enum:TasToken::__anon5c4243c70103	file:
type	src/Features/Tas/TasPlayer.hpp	/^	TasStartType type;$/;"	m	struct:TasStartInfo	typeref:typename:TasStartType
type	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeParamType type;$/;"	m	struct:AutoStrafeDirection	typeref:typename:AutoStrafeParamType
type	src/Features/Tas/TasTools/StrafeTool.hpp	/^	AutoStrafeParamType type;$/;"	m	struct:AutoStrafeSpeed	typeref:typename:AutoStrafeParamType
type	src/Modules/Tier1.cpp	/^	Type type;$/;"	m	struct:BufferedPart	typeref:typename:Type	file:
type	src/Utils/SDK.hpp	/^	int type;$/;"	m	struct:MovieInfo_t	typeref:typename:int
type	src/Utils/SDK.hpp	/^	unsigned char type;$/;"	m	struct:cplane_t	typeref:typename:unsigned char
type	src/Utils/json11.cpp	/^		Json::Type type() const override {$/;"	f	class:json11::Value	typeref:typename:Json::Type	file:
type	src/Utils/json11.cpp	/^	Json::Type Json::type() const { return m_ptr->type(); }$/;"	f	class:json11::Json	typeref:typename:Json::Type
typeMask	src/Features/Speedrun/Rules.hpp	/^	int typeMask;$/;"	m	struct:EntityInputRule	typeref:typename:int
typedescription_t	src/Utils/SDK.hpp	/^struct typedescription_t {$/;"	s
u16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint16_t u16;$/;"	m	union:__anon322f2785030a	typeref:typename:uint16_t
u16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint16_t u16[2];$/;"	m	union:__anon322f2785020a	typeref:typename:uint16_t[2]
u16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint16_t u16[4];$/;"	m	union:__anon322f2785010a	typeref:typename:uint16_t[4]
u32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint32_t u32;$/;"	m	union:__anon322f2785020a	typeref:typename:uint32_t
u32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint32_t u32[2];$/;"	m	union:__anon322f2785010a	typeref:typename:uint32_t[2]
u64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint64_t u64;$/;"	m	union:__anon322f2785010a	typeref:typename:uint64_t
u8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint8_t  u8 [2];$/;"	m	union:__anon322f2785030a	typeref:typename:uint8_t[2]
u8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint8_t  u8 [4];$/;"	m	union:__anon322f2785020a	typeref:typename:uint8_t[4]
u8	lib/ffmpeg/include/libavutil/intreadwrite.h	/^    uint8_t  u8 [8];$/;"	m	union:__anon322f2785010a	typeref:typename:uint8_t[8]
ucvector	src/Utils/lodepng.cpp	/^typedef struct ucvector {$/;"	s	file:
ucvector	src/Utils/lodepng.cpp	/^} ucvector;$/;"	t	typeref:struct:ucvector	file:
ucvector_cleanup	src/Utils/lodepng.cpp	/^static void ucvector_cleanup(void *p) {$/;"	f	typeref:typename:void	file:
ucvector_init	src/Utils/lodepng.cpp	/^static void ucvector_init(ucvector *p) {$/;"	f	typeref:typename:void	file:
ucvector_init_buffer	src/Utils/lodepng.cpp	/^static void ucvector_init_buffer(ucvector *p, unsigned char *buffer, size_t size) {$/;"	f	typeref:typename:void	file:
ucvector_push_back	src/Utils/lodepng.cpp	/^static unsigned ucvector_push_back(ucvector *p, unsigned char c) {$/;"	f	typeref:typename:unsigned	file:
ucvector_resize	src/Utils/lodepng.cpp	/^static unsigned ucvector_resize(ucvector *p, size_t size) {$/;"	f	typeref:typename:unsigned	file:
ucvector_resizev	src/Utils/lodepng.cpp	/^static unsigned ucvector_resizev(ucvector *p, size_t size, unsigned char value) {$/;"	f	typeref:typename:unsigned	file:
udpSocket	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::UdpSocket udpSocket;$/;"	m	class:NetworkManager	typeref:typename:sf::UdpSocket
ui_loadingscreen_fadein_time	src/Cheats.cpp	/^Variable ui_loadingscreen_fadein_time;$/;"	v	typeref:typename:Variable
ui_loadingscreen_mintransition_time	src/Cheats.cpp	/^Variable ui_loadingscreen_mintransition_time;$/;"	v	typeref:typename:Variable
ui_loadingscreen_transition_time	src/Cheats.cpp	/^Variable ui_loadingscreen_transition_time;$/;"	v	typeref:typename:Variable
ui_transition_effect	src/Cheats.cpp	/^Variable ui_transition_effect;$/;"	v	typeref:typename:Variable
ui_transition_time	src/Cheats.cpp	/^Variable ui_transition_time;$/;"	v	typeref:typename:Variable
uid	lib/curl/include/curl/curl.h	/^  int uid;$/;"	m	struct:curl_fileinfo	typeref:typename:int
uint16_t	lib/minhook/hde/pstdint.h	/^typedef UINT16 uint16_t;$/;"	t	typeref:typename:UINT16
uint32_t	lib/minhook/hde/pstdint.h	/^typedef UINT32 uint32_t;$/;"	t	typeref:typename:UINT32
uint64_t	lib/minhook/hde/pstdint.h	/^typedef UINT64 uint64_t;$/;"	t	typeref:typename:UINT64
uint8_t	lib/minhook/hde/pstdint.h	/^typedef UINT8  uint8_t;$/;"	t	typeref:typename:UINT8
uivector	src/Utils/lodepng.cpp	/^typedef struct uivector {$/;"	s	file:
uivector	src/Utils/lodepng.cpp	/^} uivector;$/;"	t	typeref:struct:uivector	file:
uivector_cleanup	src/Utils/lodepng.cpp	/^static void uivector_cleanup(void *p) {$/;"	f	typeref:typename:void	file:
uivector_copy	src/Utils/lodepng.cpp	/^static unsigned uivector_copy(uivector *p, const uivector *q) {$/;"	f	typeref:typename:unsigned	file:
uivector_init	src/Utils/lodepng.cpp	/^static void uivector_init(uivector *p) {$/;"	f	typeref:typename:void	file:
uivector_push_back	src/Utils/lodepng.cpp	/^static unsigned uivector_push_back(uivector *p, unsigned c) {$/;"	f	typeref:typename:unsigned	file:
uivector_resize	src/Utils/lodepng.cpp	/^static unsigned uivector_resize(uivector *p, size_t size) {$/;"	f	typeref:typename:unsigned	file:
uivector_resizev	src/Utils/lodepng.cpp	/^static unsigned uivector_resizev(uivector *p, size_t size, unsigned value) {$/;"	f	typeref:typename:unsigned	file:
uivector_swap	src/Utils/lodepng.cpp	/^static void uivector_swap(uivector *p, uivector *q) {$/;"	f	typeref:typename:void	file:
unaligned_16	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_16 { uint16_t l; } __attribute__((packed)) av_alias;$/;"	u
unaligned_32	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_32 { uint32_t l; } __attribute__((packed)) av_alias;$/;"	u
unaligned_64	lib/ffmpeg/include/libavutil/intreadwrite.h	/^union unaligned_64 { uint64_t l; } __attribute__((packed)) av_alias;$/;"	u
unfilter	src/Utils/lodepng.cpp	/^static unsigned unfilter(unsigned char *out, const unsigned char *in, unsigned w, unsigned h, un/;"	f	typeref:typename:unsigned	file:
unfilterScanline	src/Utils/lodepng.cpp	/^static unsigned unfilterScanline(unsigned char *recon, const unsigned char *scanline, const unsi/;"	f	typeref:typename:unsigned	file:
uninit	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int (*uninit)(AVCodecContext *avctx);$/;"	m	struct:AVHWAccel	typeref:typename:int (*)(AVCodecContext * avctx)
uninit	lib/ffmpeg/include/libavfilter/avfilter.h	/^    void (*uninit)(AVFilterContext *ctx);$/;"	m	struct:AVFilter	typeref:typename:void (*)(AVFilterContext * ctx)
unit	lib/ffmpeg/include/libavutil/opt.h	/^    const char *unit;$/;"	m	struct:AVOption	typeref:typename:const char *
unk1	src/Utils/SDK.hpp	/^	void *unk1;          \/\/ 16$/;"	m	struct:CEntInfo	typeref:typename:void *
unk1	src/Utils/SDK.hpp	/^	void *unk1;  \/\/ 24$/;"	m	struct:typedescription_t	typeref:typename:void *
unk2	src/Utils/SDK.hpp	/^	void *unk2;          \/\/ 20$/;"	m	struct:CEntInfo	typeref:typename:void *
unknown_chunks_data	src/Utils/lodepng.hpp	/^	unsigned char *unknown_chunks_data[3];$/;"	m	struct:LodePNGInfo	typeref:typename:unsigned char * [3]
unknown_chunks_size	src/Utils/lodepng.hpp	/^	size_t unknown_chunks_size[3]; \/*size in bytes of the unknown chunks, given for protection*\/$/;"	m	struct:LodePNGInfo	typeref:typename:size_t[3]
unload	src/SAR.cpp	/^		auto unload = std::string("plugin_unload ") + std::to_string(sar.plugin->index);$/;"	v	typeref:typename:auto
unlock	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    void (*unlock)(void *lock_ctx);$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:void (*)(void * lock_ctx)
unop_cond	src/Features/ConfigPlus.cpp	/^		Condition *unop_cond;$/;"	m	union:Condition::__anon19445435030a	typeref:typename:Condition *	file:
unsigned_intra	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             unsigned_intra;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
update	src/Features/Bot/BotServer.cpp	/^static void update() {$/;"	f	typeref:typename:void	file:
update	src/Features/Tas/TasServer.cpp	/^static void update() {$/;"	f	typeref:typename:void	file:
updateClock	src/Features/Demo/NetworkGhostPlayer.hpp	/^	sf::Clock updateClock;$/;"	m	class:NetworkManager	typeref:typename:sf::Clock
updateHashChain	src/Utils/lodepng.cpp	/^static void updateHashChain(Hash *hash, size_t pos, int hashval, unsigned windowsize) {$/;"	f	typeref:typename:void	file:
updateStitchUi	src/Features/Stitcher.cpp	/^static void updateStitchUi() {$/;"	f	typeref:typename:void	file:
updateTrace	src/Features/Hud/AimPointHud.cpp	/^static bool updateTrace(int slot) {$/;"	f	typeref:typename:bool	file:
updateUi	src/Features/Stitcher.cpp	/^static void updateUi() {$/;"	f	typeref:typename:void	file:
update_adler32	src/Utils/lodepng.cpp	/^static unsigned update_adler32(unsigned adler, const unsigned char *data, unsigned len) {$/;"	f	typeref:typename:unsigned	file:
update_checksum	lib/ffmpeg/include/libavformat/avio.h	/^    unsigned long (*update_checksum)(unsigned long checksum, const uint8_t *buf, unsigned int si/;"	m	struct:AVIOContext	typeref:typename:unsigned long (*)(unsigned long checksum,const uint8_t * buf,unsigned int size)
update_delta	src/Features/Demo/NetworkGhostPlayer.cpp	/^		uint32_t update_delta = std::chrono::duration_cast<std::chrono::milliseconds>(now - ghost->las/;"	v	typeref:typename:uint32_t
update_initial_durations_done	lib/ffmpeg/include/libavformat/avformat.h	/^    int update_initial_durations_done;$/;"	m	struct:AVStream	typeref:typename:int
update_thread_context	lib/ffmpeg/include/libavcodec/codec.h	/^    int (*update_thread_context)(struct AVCodecContext *dst, const struct AVCodecContext *src);$/;"	m	struct:AVCodec	typeref:typename:int (*)(struct AVCodecContext * dst,const struct AVCodecContext * src)
updated	src/Features/Tas/TasTool.hpp	/^	bool updated = false;$/;"	m	class:TasTool	typeref:typename:bool
upmove	src/Utils/SDK.hpp	/^	float upmove;           \/\/ 32$/;"	m	struct:CUserCmd	typeref:typename:float
url	lib/ffmpeg/include/libavformat/avformat.h	/^    char *url;$/;"	m	struct:AVFormatContext	typeref:typename:char *
url_context	lib/ffmpeg/include/libavformat/avio.h	/^    struct URLContext *url_context;$/;"	m	struct:AVIODirContext	typeref:struct:URLContext *
usage	lib/ffmpeg/include/libavutil/hwcontext_vulkan.h	/^    VkImageUsageFlagBits usage;$/;"	m	struct:AVVulkanFramesContext	typeref:typename:VkImageUsageFlagBits
useVelAngle	src/Features/Tas/TasTools/StrafeTool.hpp	/^	bool useVelAngle;$/;"	m	struct:AutoStrafeDirection	typeref:typename:bool
use_lz77	src/Utils/lodepng.hpp	/^	unsigned use_lz77;       \/*whether or not to use LZ77. Should be 1 for proper compression.*\/$/;"	m	struct:LodePNGCompressSettings	typeref:typename:unsigned
use_serv	src/Cheats.cpp	/^	bool use_serv = true;$/;"	v	typeref:typename:bool
use_wallclock_as_timestamps	lib/ffmpeg/include/libavformat/avformat.h	/^    int use_wallclock_as_timestamps;$/;"	m	struct:AVFormatContext	typeref:typename:int
usedCount	lib/minhook/buffer.c	/^    UINT usedCount;$/;"	m	struct:_MEMORY_BLOCK	typeref:typename:UINT	file:
user	lib/curl/include/curl/curl.h	/^    char *user;$/;"	m	struct:curl_fileinfo::__anon5737ba340308	typeref:typename:char *
user_id	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t user_id;                      \/**< User ID of owner, -1 if unknown. *\/$/;"	m	struct:AVIODirEntry	typeref:typename:int64_t
user_opaque	lib/ffmpeg/include/libavutil/hwcontext.h	/^    void *user_opaque;$/;"	m	struct:AVHWDeviceContext	typeref:typename:void *
user_opaque	lib/ffmpeg/include/libavutil/hwcontext.h	/^    void *user_opaque;$/;"	m	struct:AVHWFramesContext	typeref:typename:void *
usercmdDebugs	src/Features/Tas/TasPlayer.hpp	/^	std::vector<std::string> usercmdDebugs[2];$/;"	m	class:TasPlayer	typeref:typename:std::vector<std::string>[2]
userp	lib/curl/include/curl/curl.h	/^  void *userp;                      \/* custom pointer used for$/;"	m	struct:curl_httppost	typeref:typename:void *
utf8	lib/ffmpeg/include/libavformat/avio.h	/^    int utf8;                             \/**< Set to 1 when name is encoded with UTF-8, 0 othe/;"	m	struct:AVIODirEntry	typeref:typename:int
v	src/Features/Hud/VphysHud.cpp	/^	Vector v;$/;"	v	typeref:typename:Vector
vaapi_context	lib/ffmpeg/include/libavcodec/vaapi.h	/^struct attribute_deprecated vaapi_context {$/;"	s
val	src/Features/ConfigPlus.cpp	/^			auto val = g_svars[name];$/;"	v	typeref:typename:auto
val	src/Features/ConfigPlus.cpp	/^			char *var, *val;$/;"	m	struct:Condition::__anon19445435030a::__anon194454350508	typeref:typename:char *	file:
val	src/Features/ConfigPlus.cpp	/^		std::string val = cvar.GetFlags() & FCVAR_NEVER_AS_STRING ? std::to_string(cvar.GetInt()) : cv/;"	v	typeref:typename:std::string
val	src/Features/Speedrun/Categories.cpp	/^		std::string val = std::string(mid + 1);$/;"	v	typeref:typename:std::string
val	src/Utils/lodepng.cpp	/^	int *val;  \/*circular pos to hash value*\/$/;"	m	struct:Hash	typeref:typename:int *	file:
valid_hw_formats	lib/ffmpeg/include/libavutil/hwcontext.h	/^    enum AVPixelFormat *valid_hw_formats;$/;"	m	struct:AVHWFramesConstraints	typeref:enum:AVPixelFormat *
valid_sw_formats	lib/ffmpeg/include/libavutil/hwcontext.h	/^    enum AVPixelFormat *valid_sw_formats;$/;"	m	struct:AVHWFramesConstraints	typeref:enum:AVPixelFormat *
value	lib/curl/include/curl/curl.h	/^  const char     *value;$/;"	m	struct:curl_forms	typeref:typename:const char *
value	lib/ffmpeg/include/libavutil/dict.h	/^    char *value;$/;"	m	struct:AVDictionaryEntry	typeref:typename:char *
value	src/Features/Hud/InputHud.cpp	/^		std::string value = fullArg.substr(separator + 1);$/;"	v	typeref:typename:std::string
value	src/Utils/SDK.hpp	/^	char *value;$/;"	m	struct:cmdalias_t	typeref:typename:char *
value_max	lib/ffmpeg/include/libavutil/opt.h	/^    double value_min, value_max;$/;"	m	struct:AVOptionRange	typeref:typename:double
value_min	lib/ffmpeg/include/libavutil/opt.h	/^    double value_min, value_max;$/;"	m	struct:AVOptionRange	typeref:typename:double
var	src/Features/ConfigPlus.cpp	/^			char *var, *val;$/;"	m	struct:Condition::__anon19445435030a::__anon194454350508	typeref:typename:char *	file:
var_values	lib/ffmpeg/include/libavfilter/avfilter.h	/^    double *var_values;             \/\/\/< variable values for the enable expression$/;"	m	struct:AVFilterContext	typeref:typename:double *
variable	src/Features/Hud/Hud.hpp	/^	Variable *variable;$/;"	m	class:HudElement	typeref:typename:Variable *
variant_t	src/Utils/SDK.hpp	/^struct variant_t {$/;"	s
vbv_delay	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint64_t vbv_delay;$/;"	m	struct:AVCPBProperties	typeref:typename:uint64_t
vbv_delay	lib/ffmpeg/include/libavcodec/avcodec.h	/^    uint64_t vbv_delay;$/;"	m	struct:AVCodecContext	typeref:typename:attribute_deprecated uint64_t
vecVal	src/Utils/SDK.hpp	/^		float vecVal[3];$/;"	m	union:variant_t::__anon21a65a74090a	typeref:typename:float[3]
vectorCompletion	src/Features/Speedrun/Categories.cpp	/^static int vectorCompletion(const char *partial, const char *cmd, char completionsOut[COMMAND_CO/;"	f	typeref:typename:int	file:
vel	src/Features/Hud/Hud.cpp	/^		auto vel = client->GetLocalVelocity(player);$/;"	v	typeref:typename:auto
vel	src/Features/PlayerTrace.cpp	/^		auto vel = trace->velocities[0][i];$/;"	v	typeref:typename:auto
velocities	src/Features/PlayerTrace.hpp	/^	std::vector<Vector> velocities[2];$/;"	m	struct:Trace	typeref:typename:std::vector<Vector>[2]
velocity	src/Features/Demo/GhostEntity.hpp	/^	Vector velocity;$/;"	m	class:GhostEntity	typeref:typename:Vector
velocity	src/Features/Routing/EntityInspector.hpp	/^	Vector velocity;$/;"	m	struct:InspectionItem	typeref:typename:Vector
velocity	src/Features/Stats/Stats.hpp	/^	VelocityStats *velocity;$/;"	m	struct:PlayerStats	typeref:typename:VelocityStats *
velocity	src/Features/Tas/TasPlayer.hpp	/^	Vector velocity;$/;"	m	struct:TasPlayerInfo	typeref:typename:Vector
velocity	src/Features/Teleporter.hpp	/^	Vector velocity;$/;"	m	struct:TeleportLocation	typeref:typename:Vector
velocityGraph	src/Features/Hud/VelocityGraph.cpp	/^VelocityGraph velocityGraph;$/;"	v	typeref:typename:VelocityGraph
version	genversion.bat	/^for \/f "tokens=* usebackq" %%x in (`git describe --tags`) do (set version=%%x)$/;"	v
version	lib/curl/include/curl/curl.h	/^  const char *version;      \/* LIBCURL_VERSION *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
version	lib/ffmpeg/include/libavcodec/dirac.h	/^    DiracVersionInfo version;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:DiracVersionInfo
version	lib/ffmpeg/include/libavutil/log.h	/^    int version;$/;"	m	struct:AVClass	typeref:typename:int
version	src/Command.hpp	/^	int version;$/;"	m	class:Command	typeref:typename:int
version	src/Features/Hud/Hud.hpp	/^	int version;$/;"	m	class:BaseHud	typeref:typename:int
version	src/Game.hpp	/^	SourceGameVersion version = SourceGame_Unknown;$/;"	m	class:Game	typeref:typename:SourceGameVersion
version	src/Variable.hpp	/^	int version;$/;"	m	class:Variable	typeref:typename:int
version_num	lib/curl/include/curl/curl.h	/^  unsigned int version_num; \/* LIBCURL_VERSION_NUM *\/$/;"	m	struct:curl_version_info_data	typeref:typename:unsigned int
verts	src/Features/OverlayRender.cpp	/^	std::vector<Vector> verts;$/;"	m	struct:OverlayGroup	typeref:typename:std::vector<Vector>	file:
vgui	src/Modules/VGui.cpp	/^VGui *vgui;$/;"	v	typeref:typename:VGui *
videoCodecFromName	src/Features/Renderer.cpp	/^static AVCodecID videoCodecFromName(const char *name) {$/;"	f	typeref:typename:AVCodecID	file:
videoStream	src/Features/Renderer.cpp	/^	Stream videoStream;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:Stream	file:
video_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    AVCodec *video_codec;$/;"	m	struct:AVFormatContext	typeref:typename:AVCodec *
video_codec	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID video_codec;    \/**< default video codec *\/$/;"	m	struct:AVOutputFormat	typeref:enum:AVCodecID
video_codec_id	lib/ffmpeg/include/libavformat/avformat.h	/^    enum AVCodecID video_codec_id;$/;"	m	struct:AVFormatContext	typeref:enum:AVCodecID
video_context	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    ID3D11VideoContext *video_context;$/;"	m	struct:AVD3D11VAContext	typeref:typename:ID3D11VideoContext *
video_context	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    ID3D11VideoContext  *video_context;$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:ID3D11VideoContext *
video_delay	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int video_delay;$/;"	m	struct:AVCodecParameters	typeref:typename:int
video_device	lib/ffmpeg/include/libavutil/hwcontext_d3d11va.h	/^    ID3D11VideoDevice   *video_device;$/;"	m	struct:AVD3D11VADeviceContext	typeref:typename:ID3D11VideoDevice *
video_stype	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              video_stype;           \/* stype for VAUX source pack *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
videomode	src/Offsets.cpp	/^	int videomode;$/;"	v	namespace:Offsets	typeref:typename:int
view	lib/ffmpeg/include/libavutil/stereo3d.h	/^    enum AVStereo3DView view;$/;"	m	struct:AVStereo3D	typeref:enum:AVStereo3DView
viewAnalog	src/Features/Tas/TasController.hpp	/^	Vector viewAnalog = {0, 0};$/;"	m	class:TasController	typeref:typename:Vector
viewAnalog	src/Features/Tas/TasPlayer.hpp	/^	Vector viewAnalog = {0, 0};$/;"	m	struct:TasFramebulk	typeref:typename:Vector
viewOffset	src/Features/Hud/Hud.cpp	/^			auto viewOffset = client->GetAbsOrigin(player) + client->GetViewOffset(player);$/;"	v	typeref:typename:auto
viewOffset	src/Features/Hud/Hud.cpp	/^		Vector viewOffset = client->GetViewOffset(player);$/;"	v	typeref:typename:Vector
viewOffset	src/Features/Routing/EntityInspector.hpp	/^	Vector viewOffset;$/;"	m	struct:InspectionItem	typeref:typename:Vector
view_angle	src/Features/Demo/GhostEntity.hpp	/^	QAngle view_angle;$/;"	m	struct:DataGhost	typeref:typename:QAngle
view_offset	src/Features/Demo/GhostEntity.hpp	/^	float view_offset;$/;"	m	struct:DataGhost	typeref:typename:float
viewangles	src/Offsets.cpp	/^	int viewangles;$/;"	v	namespace:Offsets	typeref:typename:int
viewangles	src/Utils/SDK.hpp	/^	QAngle viewangles;      \/\/ 12, 16, 20$/;"	m	struct:CUserCmd	typeref:typename:QAngle
visitedMaps	src/Features/Speedrun/SpeedrunTimer.cpp	/^	std::vector<std::string> visitedMaps;$/;"	m	struct:__anon77a6dab70108	typeref:typename:std::vector<std::string>	file:
vphysHud	src/Features/Hud/VphysHud.cpp	/^VphysHud vphysHud;$/;"	v	typeref:typename:VphysHud
vtable	src/Interface.hpp	/^	uintptr_t *vtable;$/;"	m	class:Interface	typeref:typename:uintptr_t *
vtable	src/Utils/SDK.hpp	/^	void *vtable;  \/\/ contains different shit on client vs server$/;"	m	class:CPortalPlayerLocalData	typeref:typename:void *
vtable	src/Utils/SDK.hpp	/^	void *vtable;  \/\/ different on client vs server$/;"	m	class:CountdownTimer	typeref:typename:void *
vtable	src/Utils/SDK.hpp	/^	void *vtable;$/;"	m	struct:PaintPowerInfo_t	typeref:typename:void *
vtableSize	src/Interface.hpp	/^	int vtableSize;$/;"	m	class:Interface	typeref:typename:int
w	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int w;         \/\/\/< width            of pict, undefined when pict is not set$/;"	m	struct:AVSubtitleRect	typeref:typename:int
w	lib/ffmpeg/include/libavfilter/avfilter.h	/^    int w;                      \/\/\/< agreed upon image width$/;"	m	struct:AVFilterLink	typeref:typename:int
w	lib/ffmpeg/include/libavutil/motion_vector.h	/^    uint8_t w, h;$/;"	m	struct:AVMotionVector	typeref:typename:uint8_t
w	lib/ffmpeg/include/libavutil/video_enc_params.h	/^    int w, h;$/;"	m	struct:AVVideoBlockParams	typeref:typename:int
w	src/Utils/SDK.hpp	/^	float w;$/;"	m	struct:VectorAligned	typeref:typename:float
waitCmd	src/Features/SegmentedTools.cpp	/^Command waitCmd("wait", wait_callback, "wait <tick> <commands> - wait for the amount of ticks sp/;"	v	typeref:typename:Command
waitForRunning	src/Features/Demo/NetworkGhostPlayer.hpp	/^	std::condition_variable waitForRunning;$/;"	m	class:NetworkManager	typeref:typename:std::condition_variable
wait_callback	src/Features/SegmentedTools.cpp	/^void wait_callback(const CCommand &args) {$/;"	f	typeref:typename:void
wait_mode	src/Features/SegmentedTools.cpp	/^Variable wait_mode("wait_mode", "0", "When the pending commands should be executed. 0 is absolut/;"	v	typeref:typename:Variable
wait_persist_across_loads	src/Features/SegmentedTools.cpp	/^Variable wait_persist_across_loads("wait_persist_across_loads", "0", 0, 1, "Whether pending comm/;"	v	typeref:typename:Variable
waiting	src/Features/Demo/NetworkGhostPlayer.cpp	/^	std::vector<uint32_t> waiting;$/;"	m	class:SyncUi	typeref:typename:std::vector<uint32_t>	file:
walkingCycle	src/Features/Demo/GhostRenderer.hpp	/^	float walkingCycle;$/;"	m	class:GhostRenderer	typeref:typename:float
wallclock	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int64_t wallclock;$/;"	m	struct:AVProducerReferenceTime	typeref:typename:int64_t
wasEnginePaused	src/Features/Tas/TasPlayer.hpp	/^	int wasEnginePaused; \/\/ Used to check if we need to revert incrementing a tick$/;"	m	class:TasPlayer	typeref:typename:int
wasIgnored	src/Utils/SDK.hpp	/^	bool wasIgnored;$/;"	m	struct:CachedPaintPowerChoiceResult	typeref:typename:bool
wasValid	src/Utils/SDK.hpp	/^	bool wasValid;$/;"	m	struct:CachedPaintPowerChoiceResult	typeref:typename:bool
was_used	src/Features/OverlayRender.cpp	/^	bool was_used;$/;"	m	struct:OverlayGroup	typeref:typename:bool	file:
watermark	src/Features/Hud/Watermark.cpp	/^WatermarkHud watermark;$/;"	v	typeref:typename:WatermarkHud
weaponselect	src/Utils/SDK.hpp	/^	int weaponselect;       \/\/ 44$/;"	m	struct:CUserCmd	typeref:typename:int
weaponsubtype	src/Utils/SDK.hpp	/^	int weaponsubtype;      \/\/ 48$/;"	m	struct:CUserCmd	typeref:typename:int
weight	src/Utils/lodepng.cpp	/^	float weight; \/*the sum of all weights in this coin*\/$/;"	m	struct:Coin	typeref:typename:float	file:
what	src/Features/Tas/TasParser.hpp	/^	const char *what() const throw() { return msg.c_str(); }$/;"	f	struct:TasParserException	typeref:typename:const char *
whatever	lib/curl/include/curl/multi.h	/^    void *whatever;    \/* message-specific data *\/$/;"	m	union:CURLMsg::__anon3f8e2429030a	typeref:typename:void *
white_point	lib/ffmpeg/include/libavutil/mastering_display_metadata.h	/^    AVRational white_point[2];$/;"	m	struct:AVMasteringDisplayMetadata	typeref:typename:AVRational[2]
width	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int width, height;$/;"	m	struct:AVCodecContext	typeref:typename:int
width	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int width;$/;"	m	struct:AVCodecParserContext	typeref:typename:int
width	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int width;$/;"	m	struct:AVPanScan	typeref:typename:int
width	lib/ffmpeg/include/libavcodec/codec_par.h	/^    int width;$/;"	m	struct:AVCodecParameters	typeref:typename:int
width	lib/ffmpeg/include/libavcodec/dirac.h	/^    unsigned width;$/;"	m	struct:AVDiracSeqHeader	typeref:typename:unsigned
width	lib/ffmpeg/include/libavcodec/dnxhddata.h	/^    unsigned int width, height;$/;"	m	struct:CIDEntry	typeref:typename:unsigned int
width	lib/ffmpeg/include/libavcodec/dv_profile.h	/^    int              width;                 \/* picture width in pixels *\/$/;"	m	struct:AVDVProfile	typeref:typename:int
width	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int width;  \/**< width *\/$/;"	m	struct:AVDeviceRect	typeref:typename:int
width	lib/ffmpeg/include/libavfilter/buffersrc.h	/^    int width, height;$/;"	m	struct:AVBufferSrcParameters	typeref:typename:int
width	lib/ffmpeg/include/libavutil/frame.h	/^    int width, height;$/;"	m	struct:AVFrame	typeref:typename:int
width	lib/ffmpeg/include/libavutil/hwcontext.h	/^    int width, height;$/;"	m	struct:AVHWFramesContext	typeref:typename:int
width	src/Features/Hud/Hud.cpp	/^			int width = x - ctx->xPadding;$/;"	v	typeref:typename:int
width	src/Features/Hud/InputHud.hpp	/^		int width;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:int
width	src/Features/Renderer.cpp	/^	int width, height;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:int	file:
width	src/Utils/SDK.hpp	/^	int width;$/;"	m	struct:CViewSetup	typeref:typename:int
window_height	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int window_height;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int
window_lower_right_corner_x	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational window_lower_right_corner_x;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
window_lower_right_corner_y	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational window_lower_right_corner_y;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
window_upper_left_corner_x	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational window_upper_left_corner_x;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
window_upper_left_corner_y	lib/ffmpeg/include/libavutil/hdr_dynamic_metadata.h	/^    AVRational window_upper_left_corner_y;$/;"	m	struct:AVHDRPlusColorTransformParams	typeref:typename:AVRational
window_width	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int window_width;$/;"	m	struct:AVDeviceCapabilitiesQuery	typeref:typename:int
windowsize	src/Utils/lodepng.hpp	/^	unsigned windowsize;     \/*the maximum is 32768, higher gives more compression but is slower. /;"	m	struct:LodePNGCompressSettings	typeref:typename:unsigned
wireframe	src/Features/OverlayRender.cpp	/^	bool wireframe;$/;"	m	struct:OverlayGroup	typeref:typename:bool	file:
wndx	lib/ffmpeg/include/libavutil/fifo.h	/^    uint32_t rndx, wndx;$/;"	m	struct:AVFifoBuffer	typeref:typename:uint32_t
workaround	lib/ffmpeg/include/libavcodec/d3d11va.h	/^    uint64_t workaround;$/;"	m	struct:AVD3D11VAContext	typeref:typename:uint64_t
workaround	lib/ffmpeg/include/libavcodec/dxva2.h	/^    uint64_t workaround;$/;"	m	struct:dxva_context	typeref:typename:uint64_t
workaround_bugs	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int workaround_bugs;$/;"	m	struct:AVCodecContext	typeref:typename:int
worker	src/Features/Renderer.cpp	/^	std::thread worker;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::thread	file:
worker	src/Features/Renderer.cpp	/^static void worker(AVCodecID videoCodec, AVCodecID audioCodec, int64_t videoBitrate, int64_t aud/;"	f	typeref:typename:void	file:
workerFailedToStart	src/Features/Renderer.cpp	/^	std::atomic<bool> workerFailedToStart;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::atomic<bool>	file:
workerFinishRender	src/Features/Renderer.cpp	/^static void workerFinishRender(bool error) {$/;"	f	typeref:typename:void	file:
workerHandleAudioFrame	src/Features/Renderer.cpp	/^static bool workerHandleAudioFrame() {$/;"	f	typeref:typename:bool	file:
workerHandleVideoFrame	src/Features/Renderer.cpp	/^static bool workerHandleVideoFrame() {$/;"	f	typeref:typename:bool	file:
workerMsg	src/Features/Renderer.cpp	/^	std::atomic<WorkerMsg> workerMsg;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::atomic<WorkerMsg>	file:
workerStartRender	src/Features/Renderer.cpp	/^static void workerStartRender(AVCodecID videoCodec, AVCodecID audioCodec, int64_t videoBitrate, /;"	f	typeref:typename:void	file:
workerUpdate	src/Features/Renderer.cpp	/^	std::condition_variable workerUpdate;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::condition_variable	file:
workerUpdateLock	src/Features/Renderer.cpp	/^	std::mutex workerUpdateLock;$/;"	m	struct:__anon6dfe74d20108	typeref:typename:std::mutex	file:
workshop	src/Features/WorkshopList.cpp	/^WorkshopList *workshop;$/;"	v	typeref:typename:WorkshopList *
worldSurfaceIndex	src/Utils/SDK.hpp	/^	unsigned short worldSurfaceIndex;$/;"	m	struct:CGameTrace	typeref:typename:unsigned short
wptr	lib/ffmpeg/include/libavutil/fifo.h	/^    uint8_t *rptr, *wptr, *end;$/;"	m	struct:AVFifoBuffer	typeref:typename:uint8_t *
wrapper_name	lib/ffmpeg/include/libavcodec/codec.h	/^    const char *wrapper_name;$/;"	m	struct:AVCodec	typeref:typename:const char *
writeLZ77data	src/Utils/lodepng.cpp	/^static void writeLZ77data(size_t *bp, ucvector *out, const uivector *lz77_encoded, const Huffman/;"	f	typeref:typename:void	file:
writeSignature	src/Utils/lodepng.cpp	/^static void writeSignature(ucvector *out) {$/;"	f	typeref:typename:void	file:
writeTga	src/Features/Stitcher.cpp	/^static void writeTga(const char *path, const uint8_t *data, uint16_t w, uint16_t h) {$/;"	f	typeref:typename:void	file:
write_data_type	lib/ffmpeg/include/libavformat/avio.h	/^    int (*write_data_type)(void *opaque, uint8_t *buf, int buf_size,$/;"	m	struct:AVIOContext	typeref:typename:int (*)(void * opaque,uint8_t * buf,int buf_size,enum AVIODataMarkerType type,int64_t time)
write_flag	lib/ffmpeg/include/libavformat/avio.h	/^    int write_flag;         \/**< true if open for writing *\/$/;"	m	struct:AVIOContext	typeref:typename:int
write_header	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*write_header)(struct AVFormatContext *);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *)
write_packet	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*write_packet)(struct AVFormatContext *, AVPacket *pkt);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *,AVPacket * pkt)
write_packet	lib/ffmpeg/include/libavformat/avio.h	/^    int (*write_packet)(void *opaque, uint8_t *buf, int buf_size);$/;"	m	struct:AVIOContext	typeref:typename:int (*)(void * opaque,uint8_t * buf,int buf_size)
write_trailer	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*write_trailer)(struct AVFormatContext *);$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *)
write_uncoded_frame	lib/ffmpeg/include/libavformat/avformat.h	/^    int (*write_uncoded_frame)(struct AVFormatContext *, int stream_index,$/;"	m	struct:AVOutputFormat	typeref:typename:int (*)(struct AVFormatContext *,int stream_index,AVFrame ** frame,unsigned flags)
writeout_count	lib/ffmpeg/include/libavformat/avio.h	/^    int writeout_count;$/;"	m	struct:AVIOContext	typeref:typename:int
written	lib/ffmpeg/include/libavformat/avio.h	/^    int64_t written;$/;"	m	struct:AVIOContext	typeref:typename:int64_t
x	lib/SFML/include/SFML/System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
x	lib/SFML/include/SFML/System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
x	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int x;         \/\/\/< top left corner  of pict, undefined when pict is not set$/;"	m	struct:AVSubtitleRect	typeref:typename:int
x	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int x;      \/**< x coordinate of top left corner *\/$/;"	m	struct:AVDeviceRect	typeref:typename:int
x	lib/ffmpeg/include/libavutil/rc4.h	/^    int x, y;$/;"	m	struct:AVRC4	typeref:typename:int
x	src/Features/Hud/Hud.cpp	/^		int x = ctx->xPadding;$/;"	v	typeref:typename:int
x	src/Features/Hud/InputHud.hpp	/^		int x;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:int
x	src/Features/Hud/Minimap.cpp	/^	int x, y;$/;"	m	struct:MinimapSettings	typeref:typename:int	file:
x	src/Features/Stitcher.cpp	/^	long x;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:long	file:
x	src/Utils/SDK.hpp	/^	float x, y, z;$/;"	m	struct:QAngle	typeref:typename:float
x	src/Utils/SDK.hpp	/^	float x, y, z;$/;"	m	struct:Vector	typeref:typename:float
x	src/Utils/SDK.hpp	/^	int x;$/;"	m	struct:CViewSetup	typeref:typename:int
x0	src/Cheats.cpp	/^	float x0 = atof(args[1]);$/;"	v	typeref:typename:float
x0	src/Features/Routing/Ruler.cpp	/^	float x0 = atof(args[1]);$/;"	v	typeref:typename:float
x1	src/Cheats.cpp	/^	float x1 = atof(args[4]);$/;"	v	typeref:typename:float
x1	src/Features/Routing/Ruler.cpp	/^	float x1 = atof(args[4]);$/;"	v	typeref:typename:float
xOff	src/Features/OverlayRender.cpp	/^	int xOff;$/;"	m	struct:OverlayText	typeref:typename:int	file:
xPadding	src/Features/Hud/Hud.hpp	/^	int xPadding = 0;$/;"	m	class:HudContext	typeref:typename:int
x_part	src/Features/Stitcher.cpp	/^	float x_part;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:float	file:
xmax	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:StitchRegion	typeref:typename:long	file:
xmax	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:__anonc8a8a2210208	typeref:typename:long	file:
xmin	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:StitchRegion	typeref:typename:long	file:
xmin	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:__anonc8a8a2210208	typeref:typename:long	file:
xvmc_id	lib/ffmpeg/include/libavcodec/xvmc.h	/^    int             xvmc_id;$/;"	m	struct:xvmc_pix_fmt	typeref:typename:int
xvmc_pix_fmt	lib/ffmpeg/include/libavcodec/xvmc.h	/^struct attribute_deprecated xvmc_pix_fmt {$/;"	s
y	lib/SFML/include/SFML/System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
y	lib/SFML/include/SFML/System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
y	lib/ffmpeg/include/libavcodec/avcodec.h	/^    int y;         \/\/\/< top left corner  of pict, undefined when pict is not set$/;"	m	struct:AVSubtitleRect	typeref:typename:int
y	lib/ffmpeg/include/libavdevice/avdevice.h	/^    int y;      \/**< y coordinate of top left corner *\/$/;"	m	struct:AVDeviceRect	typeref:typename:int
y	lib/ffmpeg/include/libavutil/rc4.h	/^    int x, y;$/;"	m	struct:AVRC4	typeref:typename:int
y	src/Features/Hud/Hud.cpp	/^		int y = ctx->yPadding + ctx->elements * (ctx->fontSize + ctx->spacing);$/;"	v	typeref:typename:int
y	src/Features/Hud/InputHud.hpp	/^		int y;$/;"	m	struct:InputHud::InputHudElement	typeref:typename:int
y	src/Features/Hud/Minimap.cpp	/^	int x, y;$/;"	m	struct:MinimapSettings	typeref:typename:int	file:
y	src/Features/Stitcher.cpp	/^	long y;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:long	file:
y	src/Utils/SDK.hpp	/^	float x, y, z;$/;"	m	struct:QAngle	typeref:typename:float
y	src/Utils/SDK.hpp	/^	float x, y, z;$/;"	m	struct:Vector	typeref:typename:float
y	src/Utils/SDK.hpp	/^	int y;$/;"	m	struct:CViewSetup	typeref:typename:int
y0	src/Cheats.cpp	/^	float y0 = atof(args[2]);$/;"	v	typeref:typename:float
y0	src/Features/Routing/Ruler.cpp	/^	float y0 = atof(args[2]);$/;"	v	typeref:typename:float
y1	src/Cheats.cpp	/^	float y1 = atof(args[5]);$/;"	v	typeref:typename:float
y1	src/Features/Routing/Ruler.cpp	/^	float y1 = atof(args[5]);$/;"	v	typeref:typename:float
yOff	src/Features/OverlayRender.cpp	/^	int yOff;$/;"	m	struct:OverlayText	typeref:typename:int	file:
yPadding	src/Features/Hud/Hud.hpp	/^	int yPadding = 0;$/;"	m	class:HudContext	typeref:typename:int
y_part	src/Features/Stitcher.cpp	/^	float y_part;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:float	file:
yaw	lib/ffmpeg/include/libavutil/spherical.h	/^    int32_t yaw;   \/\/\/< Rotation around the up vector [-180, 180].$/;"	m	struct:AVSphericalMapping	typeref:typename:int32_t
yaw	src/Features/Tas/TasTools/SetAngleTool.cpp	/^	float yaw;$/;"	m	struct:SetAngleParams	typeref:typename:float	file:
year	src/Utils/lodepng.hpp	/^	unsigned year;   \/*2 bytes used (0-65535)*\/$/;"	m	struct:LodePNGTime	typeref:typename:unsigned
ymax	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:StitchRegion	typeref:typename:long	file:
ymax	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:__anonc8a8a2210208	typeref:typename:long	file:
ymin	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:StitchRegion	typeref:typename:long	file:
ymin	src/Features/Stitcher.cpp	/^	long xmin, xmax, ymin, ymax;$/;"	m	struct:__anonc8a8a2210208	typeref:typename:long	file:
z	lib/SFML/include/SFML/System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
z	src/Features/Stitcher.cpp	/^	long z;$/;"	m	struct:StitchRegion	typeref:typename:long	file:
z	src/Features/Stitcher.cpp	/^	long z;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:long	file:
z	src/Utils/SDK.hpp	/^	float x, y, z;$/;"	m	struct:QAngle	typeref:typename:float
z	src/Utils/SDK.hpp	/^	float x, y, z;$/;"	m	struct:Vector	typeref:typename:float
z0	src/Cheats.cpp	/^	float z0 = atof(args[3]);$/;"	v	typeref:typename:float
z0	src/Features/Routing/Ruler.cpp	/^	float z0 = atof(args[3]);$/;"	v	typeref:typename:float
z1	src/Cheats.cpp	/^	float z1 = atof(args[6]);$/;"	v	typeref:typename:float
z1	src/Features/Routing/Ruler.cpp	/^	float z1 = atof(args[6]);$/;"	v	typeref:typename:float
zFar	src/Utils/SDK.hpp	/^	float zFar;$/;"	m	struct:CViewSetup	typeref:typename:float
zFarViewmodel	src/Utils/SDK.hpp	/^	float zFarViewmodel;$/;"	m	struct:CViewSetup	typeref:typename:float
zNear	src/Utils/SDK.hpp	/^	float zNear;$/;"	m	struct:CViewSetup	typeref:typename:float
zNearViewmodel	src/Utils/SDK.hpp	/^	float zNearViewmodel;$/;"	m	struct:CViewSetup	typeref:typename:float
z_part	src/Features/Stitcher.cpp	/^	float z_part;$/;"	m	struct:__anonc8a8a2210108	typeref:typename:float	file:
zeros	src/Utils/lodepng.cpp	/^	unsigned short *zeros;$/;"	m	struct:Hash	typeref:typename:unsigned short *	file:
zlibsettings	src/Utils/lodepng.hpp	/^	LodePNGCompressSettings zlibsettings; \/*settings for the zlib encoder, such as window size, ../;"	m	struct:LodePNGEncoderSettings	typeref:typename:LodePNGCompressSettings
zlibsettings	src/Utils/lodepng.hpp	/^	LodePNGDecompressSettings zlibsettings; \/*in here is the setting to ignore Adler32 checksums*\/$/;"	m	struct:LodePNGDecoderSettings	typeref:typename:LodePNGDecompressSettings
zstd_ver_num	lib/curl/include/curl/curl.h	/^  unsigned int zstd_ver_num; \/* Numeric Zstd version$/;"	m	struct:curl_version_info_data	typeref:typename:unsigned int
zstd_version	lib/curl/include/curl/curl.h	/^  const char *zstd_version; \/* human readable string. *\/$/;"	m	struct:curl_version_info_data	typeref:typename:const char *
~Camera	src/Features/Camera.cpp	/^Camera::~Camera() {$/;"	f	class:Camera
~Command	src/Command.cpp	/^Command::~Command() {$/;"	f	class:Command
~ConsoleListener	src/Modules/Console.cpp	/^ConsoleListener::~ConsoleListener() {$/;"	f	class:ConsoleListener
~Features	src/Features/Feature.cpp	/^Features::~Features() {$/;"	f	class:Features
~GhostEntity	src/Features/Demo/GhostEntity.cpp	/^GhostEntity::~GhostEntity() {$/;"	f	class:GhostEntity
~Hook	src/Hook.hpp	/^	~Hook() {}$/;"	f	class:Hook
~IHandleEntity	src/Utils/SDK.hpp	/^	virtual ~IHandleEntity() {}$/;"	f	class:IHandleEntity
~InputStream	lib/SFML/include/SFML/System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~Interface	src/Interface.cpp	/^Interface::~Interface() {$/;"	f	class:Interface
~JsonValue	src/Utils/json11.hpp	/^		virtual ~JsonValue() {}$/;"	f	class:json11::JsonValue
~Listener	src/Features/Listener.cpp	/^Listener::~Listener() {$/;"	f	class:Listener
~LodePNGState	src/Utils/lodepng.hpp	/^	virtual ~LodePNGState() {}$/;"	f	struct:LodePNGState
~Modules	src/Modules/Module.cpp	/^Modules::~Modules() {$/;"	f	class:Modules
~NonCopyable	lib/SFML/include/SFML/System/NonCopyable.hpp	/^    ~NonCopyable() {}$/;"	f	class:sf::NonCopyable
~Patch	src/Utils/Memory.cpp	/^Memory::Patch::~Patch() {$/;"	f	class:Memory::Patch
~PlayerStats	src/Features/Stats/Stats.hpp	/^	~PlayerStats() {$/;"	f	struct:PlayerStats
~State	src/Utils/lodepng.cpp	/^	State::~State() {$/;"	f	class:lodepng::State
~Stats	src/Features/Stats/Stats.cpp	/^Stats::~Stats() {$/;"	f	class:Stats
~TasController	src/Features/Tas/TasController.cpp	/^TasController::~TasController() {$/;"	f	class:TasController
~TasParserException	src/Features/Tas/TasParser.hpp	/^	~TasParserException() throw() {}$/;"	f	struct:TasParserException
~TasPlayer	src/Features/Tas/TasPlayer.cpp	/^TasPlayer::~TasPlayer() {$/;"	f	class:TasPlayer
~TasTool	src/Features/Tas/TasTool.cpp	/^TasTool::~TasTool() {$/;"	f	class:TasTool
~TasToolCommand	src/Features/Tas/TasTool.hpp	/^	~TasToolCommand() {}$/;"	f	class:TasToolCommand
~ThreadFunc	lib/SFML/include/SFML/System/Thread.inl	/^    virtual ~ThreadFunc() {}$/;"	f	struct:priv::ThreadFunc	file:
~Timer	src/Features/Timer/Timer.cpp	/^Timer::~Timer() {$/;"	f	class:Timer
~Variable	src/Variable.cpp	/^Variable::~Variable() {$/;"	f	class:Variable
